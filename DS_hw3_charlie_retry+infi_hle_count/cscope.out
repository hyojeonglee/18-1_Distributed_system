cscope 15 /home/dcslab/charlie/18_coursework/DS_hw3_hj_retry+infi               0000954621
	@atomic_ops/aligned_atomic_load_store.h

28 
AO_INLINE
 
AO_t


29 
	$AO_lﬂd
(c⁄° vﬁ©ûê
AO_t
 *
addr
)

31 
	`as£π
(((
size_t
)
addr
 & ((
AO_t
) - 1)) == 0);

34  *(
AO_t
 *)
addr
;

35 
	}
}

37 
	#AO_HAVE_lﬂd


	)

39 
AO_INLINE
 

40 
	$AO_°‹e
(vﬁ©ûê
AO_t
 *
addr
, AO_à
√w_vÆ
)

42 
	`as£π
(((
size_t
)
addr
 & ((
AO_t
) - 1)) == 0);

43 (*(
AO_t
 *)
addr
Ë
√w_vÆ
;

44 
	}
}

46 
	#AO_HAVE_°‹e


	)

	@atomic_ops/all_acquire_release_volatile.h

47 #i‡!
deföed
(
AO_GCC_BARRIER
)

48 #i‡
deföed
(
__GNUC__
)

49 
	#AO_GCC_BARRIER
(Ë
	`AO_compûî_b¨rõr
()

	)

51 
	#AO_GCC_BARRIER
()

	)

55 
AO_INLINE
 
AO_t


56 
	$AO_lﬂd_acquúe
(c⁄° vﬁ©ûê
AO_t
 *
p
)

58 
AO_t
 
ªsu…
 = *
p
;

60 
	`AO_GCC_BARRIER
();

61  
ªsu…
;

62 
	}
}

63 
	#AO_HAVE_lﬂd_acquúe


	)

65 
AO_INLINE
 

66 
	$AO_°‹e_ªÀa£
(vﬁ©ûê
AO_t
 *
p
, AO_à
vÆ
)

68 
	`AO_GCC_BARRIER
();

70 *
p
 = 
vÆ
;

71 
	}
}

72 
	#AO_HAVE_°‹e_ªÀa£


	)

79 #i‡!
deföed
(
AO_GCC_BARRIER
)

80 #i‡
deföed
(
__GNUC__
)

81 
	#AO_GCC_BARRIER
(Ë
	`AO_compûî_b¨rõr
()

	)

83 
	#AO_GCC_BARRIER
()

	)

87 
AO_INLINE
 

88 
	$AO_ch¨_lﬂd_acquúe
(c⁄° vﬁ©ûê*
p
)

90 
ªsu…
 = *
p
;

92 
	`AO_GCC_BARRIER
();

93  
ªsu…
;

94 
	}
}

95 
	#AO_HAVE_ch¨_lﬂd_acquúe


	)

97 
AO_INLINE
 

98 
	$AO_ch¨_°‹e_ªÀa£
(vﬁ©ûê*
p
, 
vÆ
)

100 
	`AO_GCC_BARRIER
();

102 *
p
 = 
vÆ
;

103 
	}
}

104 
	#AO_HAVE_ch¨_°‹e_ªÀa£


	)

111 #i‡!
deföed
(
AO_GCC_BARRIER
)

112 #i‡
deföed
(
__GNUC__
)

113 
	#AO_GCC_BARRIER
(Ë
	`AO_compûî_b¨rõr
()

	)

115 
	#AO_GCC_BARRIER
()

	)

119 
AO_INLINE
 

120 
	$AO_sh‹t_lﬂd_acquúe
(c⁄° vﬁ©ûê*
p
)

122 
ªsu…
 = *
p
;

124 
	`AO_GCC_BARRIER
();

125  
ªsu…
;

126 
	}
}

127 
	#AO_HAVE_sh‹t_lﬂd_acquúe


	)

129 
AO_INLINE
 

130 
	$AO_sh‹t_°‹e_ªÀa£
(vﬁ©ûê*
p
, 
vÆ
)

132 
	`AO_GCC_BARRIER
();

134 *
p
 = 
vÆ
;

135 
	}
}

136 
	#AO_HAVE_sh‹t_°‹e_ªÀa£


	)

143 #i‡!
deföed
(
AO_GCC_BARRIER
)

144 #i‡
deföed
(
__GNUC__
)

145 
	#AO_GCC_BARRIER
(Ë
	`AO_compûî_b¨rõr
()

	)

147 
	#AO_GCC_BARRIER
()

	)

151 
AO_INLINE
 

152 
	$AO_öt_lﬂd_acquúe
(c⁄° vﬁ©ûê*
p
)

154 
ªsu…
 = *
p
;

156 
	`AO_GCC_BARRIER
();

157  
ªsu…
;

158 
	}
}

159 
	#AO_HAVE_öt_lﬂd_acquúe


	)

161 
AO_INLINE
 

162 
	$AO_öt_°‹e_ªÀa£
(vﬁ©ûê*
p
, 
vÆ
)

164 
	`AO_GCC_BARRIER
();

166 *
p
 = 
vÆ
;

167 
	}
}

168 
	#AO_HAVE_öt_°‹e_ªÀa£


	)

	@atomic_ops/ao_t_is_int.h

31 #i‡
deföed
(
AO_HAVE_com∑ª_™d_sw≠_fuŒ
) && \

32 !
	$deföed
(
AO_HAVE_öt_com∑ª_™d_sw≠_fuŒ
)

33 
	#AO_öt_com∑ª_™d_sw≠_fuŒ
(
addr
, 
ﬁd
, 
√w_vÆ
) \

34 
	`AO_com∑ª_™d_sw≠_fuŒ
((vﬁ©ûê
AO_t
 *)(
addr
), \

35 (
AO_t
)(
ﬁd
), (AO_t)(
√w_vÆ
))

	)

36 
	#AO_HAVE_öt_com∑ª_™d_sw≠_fuŒ


	)

39 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_acquúe
) && \

40 !
	$deföed
(
AO_HAVE_öt_com∑ª_™d_sw≠_acquúe
)

41 
	#AO_öt_com∑ª_™d_sw≠_acquúe
(
addr
, 
ﬁd
, 
√w_vÆ
) \

42 
	`AO_com∑ª_™d_sw≠_acquúe
((vﬁ©ûê
AO_t
 *)(
addr
), \

43 (
AO_t
)(
ﬁd
), (AO_t)(
√w_vÆ
))

	)

44 
	#AO_HAVE_öt_com∑ª_™d_sw≠_acquúe


	)

47 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_ªÀa£
) && \

48 !
	$deföed
(
AO_HAVE_öt_com∑ª_™d_sw≠_ªÀa£
)

49 
	#AO_öt_com∑ª_™d_sw≠_ªÀa£
(
addr
, 
ﬁd
, 
√w_vÆ
) \

50 
	`AO_com∑ª_™d_sw≠_ªÀa£
((vﬁ©ûê
AO_t
 *)(
addr
), \

51 (
AO_t
)(
ﬁd
), (AO_t)(
√w_vÆ
))

	)

52 
	#AO_HAVE_öt_com∑ª_™d_sw≠_ªÀa£


	)

55 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_wrôe
) && \

56 !
	$deföed
(
AO_HAVE_öt_com∑ª_™d_sw≠_wrôe
)

57 
	#AO_öt_com∑ª_™d_sw≠_wrôe
(
addr
, 
ﬁd
, 
√w_vÆ
) \

58 
	`AO_com∑ª_™d_sw≠_wrôe
((vﬁ©ûê
AO_t
 *)(
addr
), \

59 (
AO_t
)(
ﬁd
), (AO_t)(
√w_vÆ
))

	)

60 
	#AO_HAVE_öt_com∑ª_™d_sw≠_wrôe


	)

63 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_ªad
) && \

64 !
	$deföed
(
AO_HAVE_öt_com∑ª_™d_sw≠_ªad
)

65 
	#AO_öt_com∑ª_™d_sw≠_ªad
(
addr
, 
ﬁd
, 
√w_vÆ
) \

66 
	`AO_com∑ª_™d_sw≠_ªad
((vﬁ©ûê
AO_t
 *)(
addr
), \

67 (
AO_t
)(
ﬁd
), (AO_t)(
√w_vÆ
))

	)

68 
	#AO_HAVE_öt_com∑ª_™d_sw≠_ªad


	)

71 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠
) && \

72 !
	$deföed
(
AO_HAVE_öt_com∑ª_™d_sw≠
)

73 
	#AO_öt_com∑ª_™d_sw≠
(
addr
, 
ﬁd
, 
√w_vÆ
) \

74 
	`AO_com∑ª_™d_sw≠
((vﬁ©ûê
AO_t
 *)(
addr
), \

75 (
AO_t
)(
ﬁd
), (AO_t)(
√w_vÆ
))

	)

76 
	#AO_HAVE_öt_com∑ª_™d_sw≠


	)

79 #i‡
	`deföed
(
AO_HAVE_lﬂd_acquúe
) && \

80 !
	$deföed
(
AO_HAVE_öt_lﬂd_acquúe
)

81 
	#AO_öt_lﬂd_acquúe
(
addr
) \

82 ()
	`AO_lﬂd_acquúe
((c⁄° vﬁ©ûê
AO_t
 *)(
addr
))

	)

83 
	#AO_HAVE_öt_lﬂd_acquúe


	)

86 #i‡
	`deföed
(
AO_HAVE_°‹e_ªÀa£
) && \

87 !
	$deföed
(
AO_HAVE_öt_°‹e_ªÀa£
)

88 
	#AO_öt_°‹e_ªÀa£
(
addr
, 
vÆ
) \

89 
	`AO_°‹e_ªÀa£
((vﬁ©ûê
AO_t
 *)(
addr
), (AO_t)(
vÆ
))

	)

90 
	#AO_HAVE_öt_°‹e_ªÀa£


	)

93 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_fuŒ
) && \

94 !
	$deföed
(
AO_HAVE_öt_„tch_™d_add_fuŒ
)

95 
	#AO_öt_„tch_™d_add_fuŒ
(
addr
, 
ö¸
) \

96 ()
	`AO_„tch_™d_add_fuŒ
((vﬁ©ûê
AO_t
 *)(
addr
), (AO_t)(
ö¸
))

	)

97 
	#AO_HAVE_öt_„tch_™d_add_fuŒ


	)

100 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add1_acquúe
) && \

101 !
	$deföed
(
AO_HAVE_öt_„tch_™d_add1_acquúe
)

102 
	#AO_öt_„tch_™d_add1_acquúe
(
addr
) \

103 ()
	`AO_„tch_™d_add1_acquúe
((vﬁ©ûê
AO_t
 *)(
addr
))

	)

104 
	#AO_HAVE_öt_„tch_™d_add1_acquúe


	)

107 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add1_ªÀa£
) && \

108 !
	$deföed
(
AO_HAVE_öt_„tch_™d_add1_ªÀa£
)

109 
	#AO_öt_„tch_™d_add1_ªÀa£
(
addr
) \

110 ()
	`AO_„tch_™d_add1_ªÀa£
((vﬁ©ûê
AO_t
 *)(
addr
))

	)

111 
	#AO_HAVE_öt_„tch_™d_add1_ªÀa£


	)

114 #i‡
	`deföed
(
AO_HAVE_„tch_™d_sub1_acquúe
) && \

115 !
	$deföed
(
AO_HAVE_öt_„tch_™d_sub1_acquúe
)

116 
	#AO_öt_„tch_™d_sub1_acquúe
(
addr
) \

117 ()
	`AO_„tch_™d_sub1_acquúe
((vﬁ©ûê
AO_t
 *)(
addr
))

	)

118 
	#AO_HAVE_öt_„tch_™d_sub1_acquúe


	)

121 #i‡
	`deföed
(
AO_HAVE_„tch_™d_sub1_ªÀa£
) && \

122 !
	$deföed
(
AO_HAVE_öt_„tch_™d_sub1_ªÀa£
)

123 
	#AO_öt_„tch_™d_sub1_ªÀa£
(
addr
) \

124 ()
	`AO_„tch_™d_sub1_ªÀa£
((vﬁ©ûê
AO_t
 *)(
addr
))

	)

125 
	#AO_HAVE_öt_„tch_™d_sub1_ªÀa£


	)

	@atomic_ops/atomic_ops.h

23 #i‚de‡
ATOMIC_OPS_H


25 
	#ATOMIC_OPS_H


	)

27 
	~<as£π.h
>

28 
	~<°ddef.h
>

142 
	#AO_t
 
size_t


	)

147 
	#AO_TS_INITIALIZER
 (
AO_t
)
AO_TS_CLEAR


	)

150 #i‡
deföed
(
__GNUC__
Ë|| deföed(
_MSC_VER
Ë|| deföed(
__INTEL_COMPILER
) \

151 || 
deföed
(
__DMC__
Ë|| 
	$deföed
(
__WATCOMC__
)

152 
	#AO_INLINE
 
__ölöe


	)

153 #ñi‡
	`deföed
(
__sun
)

154 
	#AO_INLINE
 
ölöe


	)

156 
	#AO_INLINE
 

	)

159 #i‡
	`deföed
(
__GNUC__
Ë&& !deföed(
__INTEL_COMPILER
)

160 
	#AO_compûî_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
("" : : : "mem‹y")

	)

161 #ñi‡
	`deföed
(
_MSC_VER
Ë|| deföed(
__DMC__
Ë|| deföed(
__BORLANDC__
) \

162 || 
	$deföed
(
__WATCOMC__
)

163 #i‡
	`deföed
(
_AMD64_
Ë|| deföed(
_M_X64
Ë|| 
_MSC_VER
 >= 1400

164 #i‡
	`deföed
(
_WIN32_WCE
)

166 #ñi‡
	`deföed
(
_MSC_VER
)

167 
	~<öåö.h
>

169 #¥agm®
	`öåösic
(
_RódWrôeB¨rõr
)

170 
	#AO_compûî_b¨rõr
(Ë
	`_RódWrôeB¨rõr
()

	)

174 
	#AO_compûî_b¨rõr
(Ë
__asm
 { 
	}

	)
}

178 #ñi‡
deföed
(
__INTEL_COMPILER
)

179 
	#AO_compûî_b¨rõr
(Ë
	`__mem‹y_b¨rõr
(Ë

	)

180 #ñi‡
deföed
(
_HPUX_SOURCE
)

181 #i‡
deföed
(
__ü64
)

182 
	~<machöe/sys/ölöe.h
>

183 
	#AO_compûî_b¨rõr
(Ë
	`_Asm_sched_„n˚
()

	)

187 vﬁ©ûê
	gAO_b¨rõr_dummy
;

188 
	#AO_compûî_b¨rõr
(Ë
AO_b¨rõr_dummy
 = 
	)
AO_barrier_dummy

193 
	#AO_compûî_b¨rõr
(Ë
	`asm
("")

	)

196 #i‡
deföed
(
AO_USE_PTHREAD_DEFS
)

197 
	~"©omic_›s/sysdïs/gíîic_±hªad.h
"

200 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
AO_USE_PTHREAD_DEFS
) \

201 && !
	$deföed
(
__INTEL_COMPILER
)

202 #i‡
	`deföed
(
__i386__
)

206 
	~"x86.h
"

208 #i‡
	`deföed
(
__x86_64__
)

209 #i‡
__GNUC__
 > 4 || (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 2)

211 
	#AO_USE_SYNC_CAS_BUILTIN


	)

213 
	~"x86_64.h
"

215 #i‡
	`deföed
(
__ü64__
)

216 
	~"ü64.h
"

217 
	#AO_GENERALIZE_TWICE


	)

219 #i‡
	`deföed
(
__hµa__
)

220 
	~"©omic_›s/sysdïs/gcc/hµa.h
"

221 
	#AO_CAN_EMUL_CAS


	)

223 #i‡
	`deföed
(
__Æpha__
)

224 
	~"©omic_›s/sysdïs/gcc/Æpha.h
"

225 
	#AO_GENERALIZE_TWICE


	)

227 #i‡
	`deföed
(
__s390__
)

228 
	~"©omic_›s/sysdïs/gcc/s390.h
"

230 #i‡
	`deföed
(
__•¨c__
)

231 
	~"•¨c.h
"

232 
	#AO_CAN_EMUL_CAS


	)

234 #i‡
	`deföed
(
__m68k__
)

235 
	~"©omic_›s/sysdïs/gcc/m68k.h
"

237 #i‡
	`deföed
(
__powîpc__
Ë|| deföed(
__µc__
Ë|| deföed(
__PPC__
) \

238 || 
	`deföed
(
__powîpc64__
Ë|| 
	$deföed
(
__µc64__
)

239 
	~"powîpc.h
"

241 #i‡
	`deföed
(
__¨m__
Ë&& !deföed(
AO_USE_PTHREAD_DEFS
)

242 
	~"©omic_›s/sysdïs/gcc/¨m.h
"

243 
	#AO_CAN_EMUL_CAS


	)

245 #i‡
	`deföed
(
__¸is__
Ë|| deföed(
CRIS
)

246 
	~"©omic_›s/sysdïs/gcc/¸is.h
"

248 #i‡
	`deföed
(
__mùs__
)

249 
	~"©omic_›s/sysdïs/gcc/mùs.h
"

251 #i‡
	`deföed
(
__sh__
Ë|| deföed(
SH4
)

252 
	~"©omic_›s/sysdïs/gcc/sh.h
"

253 
	#AO_CAN_EMUL_CAS


	)

257 #i‡
	`deföed
(
__INTEL_COMPILER
Ë&& !deföed(
AO_USE_PTHREAD_DEFS
)

258 #i‡
	`deföed
(
__ü64__
)

259 
	~"ü64.h
"

260 
	#AO_GENERALIZE_TWICE


	)

262 #i‡
	`deföed
(
__GNUC__
)

264 #i‡
	`deföed
(
__i386__
)

265 
	~"x86.h
"

267 #i‡
	`deföed
(
__x86_64__
)

268 #i‡
__INTEL_COMPILER
 > 1110

269 
	#AO_USE_SYNC_CAS_BUILTIN


	)

271 
	~"x86_64.h
"

276 #i‡
	`deföed
(
_HPUX_SOURCE
Ë&& !deföed(
__GNUC__
Ë&& !deföed(
AO_USE_PTHREAD_DEFS
)

277 #i‡
	`deföed
(
__ü64
)

278 
	~"©omic_›s/sysdïs/hpc/ü64.h
"

279 
	#AO_GENERALIZE_TWICE


	)

281 
	~"©omic_›s/sysdïs/hpc/hµa.h
"

282 
	#AO_CAN_EMUL_CAS


	)

286 #i‡
	`deföed
(
__sun
Ë&& !deföed(
__GNUC__
Ë&& !deföed(
AO_USE_PTHREAD_DEFS
)

288 #i‡
	`deföed
(
__i386
)

289 
	~"©omic_›s/sysdïs/sunc/x86.h
"

291 #i‡
	`deföed
(
__x86_64
Ë|| deföed(
__amd64
)

292 
	~"©omic_›s/sysdïs/sunc/x86_64.h
"

296 #i‡!
	`deföed
(
__GNUC__
Ë&& (deföed(
•¨c
Ë|| deföed(
__•¨c
)) \

297 && !
	$deföed
(
AO_USE_PTHREAD_DEFS
)

298 
	~"©omic_›s/sysdïs/sunc/•¨c.h
"

299 
	#AO_CAN_EMUL_CAS


	)

302 #i‡
	`deföed
(
_MSC_VER
Ë|| deföed(
__DMC__
Ë|| deföed(
__BORLANDC__
) \

303 || (
	`deföed
(
__WATCOMC__
Ë&& 
	$deföed
(
__NT__
))

304 #i‡
	`deföed
(
_AMD64_
Ë|| deföed(
_M_X64
)

305 
	~"©omic_›s/sysdïs/ms·c/x86_64.h
"

306 #ñi‡
	`deföed
(
_M_IX86
Ë|| deföed(
x86
)

307 
	~"©omic_›s/sysdïs/ms·c/x86.h
"

308 #ñi‡
	`deföed
(
_M_ARM
Ë|| deföed(
ARM
Ë|| deföed(
_ARM_
)

309 
	~"©omic_›s/sysdïs/ms·c/¨m.h
"

313 #i‡
	`deföed
(
AO_REQUIRE_CAS
Ë&& !deföed(
AO_HAVE_com∑ª_™d_sw≠
) \

314 && !
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_fuŒ
) \

315 && !
	$deföed
(
AO_HAVE_com∑ª_™d_sw≠_acquúe
)

316 #i‡
	`deföed
(
AO_CAN_EMUL_CAS
)

317 
	~"©omic_›s/sysdïs/emul_ˇs.h
"

319 #îr‹ 
C™nŸ
 
im∂emít
 
AO_com∑ª_™d_sw≠_fuŒ
 
⁄
 
this
 
¨chôe˘uª
.

325 #i‡
AO_AO_TS_T
 && !
	`deföed
(
AO_CLEAR
)

326 
	#AO_CLEAR
(
addr
Ë
	`AO_°‹e_ªÀa£
((
AO_TS_t
 *)◊ddr), 
AO_TS_CLEAR
)

	)

328 #i‡
AO_CHAR_TS_T
 && !
	`deföed
(
AO_CLEAR
)

329 
	#AO_CLEAR
(
addr
Ë
	`AO_ch¨_°‹e_ªÀa£
((
AO_TS_t
 *)◊ddr), 
AO_TS_CLEAR
)

	)

338 
	~"gíîÆize.h
"

339 #ifde‡
AO_GENERALIZE_TWICE


340 
	~"gíîÆize.h
"

344 
	#AO_TS_T
 
AO_TS_t


	)

345 
	#AO_T
 
AO_t


	)

346 
	#AO_TS_VAL
 
AO_TS_VAL_t


	)

	@atomic_ops/generalize-small.h

2 #i‡
deföed
(
AO_HAVE_ch¨_lﬂd_acquúe
Ë&& !deföed(
AO_HAVE_ch¨_lﬂd
)

3 
	#AO_ch¨_lﬂd
(
addr
Ë
	`AO_ch¨_lﬂd_acquúe
◊ddr)

	)

4 
	#AO_HAVE_ch¨_lﬂd


	)

7 #i‡
deföed
(
AO_HAVE_ch¨_lﬂd_fuŒ
Ë&& !deföed(
AO_HAVE_ch¨_lﬂd_acquúe
)

8 
	#AO_ch¨_lﬂd_acquúe
(
addr
Ë
	`AO_ch¨_lﬂd_fuŒ
◊ddr)

	)

9 
	#AO_HAVE_ch¨_lﬂd_acquúe


	)

12 #i‡
deföed
(
AO_HAVE_ch¨_lﬂd_fuŒ
Ë&& !deföed(
AO_HAVE_ch¨_lﬂd_ªad
)

13 
	#AO_ch¨_lﬂd_ªad
(
addr
Ë
	`AO_ch¨_lﬂd_fuŒ
◊ddr)

	)

14 
	#AO_HAVE_ch¨_lﬂd_ªad


	)

17 #i‡!
deföed
(
AO_HAVE_ch¨_lﬂd_acquúe_ªad
Ë&& deföed(
AO_HAVE_ch¨_lﬂd_acquúe
)

18 
	#AO_ch¨_lﬂd_acquúe_ªad
(
addr
Ë
	`AO_ch¨_lﬂd_acquúe
◊ddr)

	)

19 
	#AO_HAVE_ch¨_lﬂd_acquúe_ªad


	)

22 #i‡
deföed
(
AO_HAVE_ch¨_lﬂd
Ë&& deföed(
AO_HAVE_n›_fuŒ
) && \

23 !
	$deföed
(
AO_HAVE_ch¨_lﬂd_acquúe
)

24 
AO_INLINE
 

25 
	$AO_ch¨_lﬂd_acquúe
(c⁄° vﬁ©ûê*
addr
)

27 
ªsu…
 = 
	`AO_ch¨_lﬂd
(
addr
);

30 
	`AO_n›_fuŒ
();

31  
ªsu…
;

32 
	}
}

33 
	#AO_HAVE_ch¨_lﬂd_acquúe


	)

36 #i‡
deföed
(
AO_HAVE_ch¨_lﬂd
Ë&& deföed(
AO_HAVE_n›_ªad
) && \

37 !
	$deföed
(
AO_HAVE_ch¨_lﬂd_ªad
)

38 
AO_INLINE
 

39 
	$AO_ch¨_lﬂd_ªad
(c⁄° vﬁ©ûê*
addr
)

41 
ªsu…
 = 
	`AO_ch¨_lﬂd
(
addr
);

44 
	`AO_n›_ªad
();

45  
ªsu…
;

46 
	}
}

47 
	#AO_HAVE_ch¨_lﬂd_ªad


	)

50 #i‡
deföed
(
AO_HAVE_ch¨_lﬂd_acquúe
Ë&& deföed(
AO_HAVE_n›_fuŒ
) && \

51 !
	$deföed
(
AO_HAVE_ch¨_lﬂd_fuŒ
)

52 
	#AO_ch¨_lﬂd_fuŒ
(
addr
Ë(
	`AO_n›_fuŒ
(), 
	`AO_ch¨_lﬂd_acquúe
◊ddr))

	)

53 
	#AO_HAVE_ch¨_lﬂd_fuŒ


	)

56 #i‡!
	`deföed
(
AO_HAVE_ch¨_lﬂd_acquúe_ªad
Ë&& deföed(
AO_HAVE_ch¨_lﬂd_ªad
)

57 
	#AO_ch¨_lﬂd_acquúe_ªad
(
addr
Ë
	`AO_ch¨_lﬂd_ªad
◊ddr)

	)

58 
	#AO_HAVE_ch¨_lﬂd_acquúe_ªad


	)

61 #i‡
	`deföed
(
AO_HAVE_ch¨_lﬂd_acquúe_ªad
Ë&& !deföed(
AO_HAVE_ch¨_lﬂd
)

62 
	#AO_ch¨_lﬂd
(
addr
Ë
	`AO_ch¨_lﬂd_acquúe_ªad
◊ddr)

	)

63 
	#AO_HAVE_ch¨_lﬂd


	)

66 #ifde‡
AO_NO_DD_ORDERING


67 #i‡
	`deföed
(
AO_HAVE_ch¨_lﬂd_acquúe_ªad
)

68 
	#AO_ch¨_lﬂd_dd_acquúe_ªad
(
addr
) \

69 
	`AO_ch¨_lﬂd_acquúe_ªad
(
addr
)

	)

70 
	#AO_HAVE_ch¨_lﬂd_dd_acquúe_ªad


	)

73 #i‡
	`deföed
(
AO_HAVE_ch¨_lﬂd
)

74 
	#AO_ch¨_lﬂd_dd_acquúe_ªad
(
addr
) \

75 
	`AO_ch¨_lﬂd
(
addr
)

	)

76 
	#AO_HAVE_ch¨_lﬂd_dd_acquúe_ªad


	)

83 #i‡
	`deföed
(
AO_HAVE_ch¨_°‹e_ªÀa£
Ë&& !deföed(
AO_HAVE_ch¨_°‹e
)

84 
	#AO_ch¨_°‹e
(
addr
, 
vÆ
Ë
	`AO_ch¨_°‹e_ªÀa£
◊ddr,vÆ)

	)

85 
	#AO_HAVE_ch¨_°‹e


	)

88 #i‡
	`deföed
(
AO_HAVE_ch¨_°‹e_fuŒ
Ë&& !deföed(
AO_HAVE_ch¨_°‹e_ªÀa£
)

89 
	#AO_ch¨_°‹e_ªÀa£
(
addr
,
vÆ
Ë
	`AO_ch¨_°‹e_fuŒ
◊ddr,vÆ)

	)

90 
	#AO_HAVE_ch¨_°‹e_ªÀa£


	)

93 #i‡
	`deföed
(
AO_HAVE_ch¨_°‹e_fuŒ
Ë&& !deföed(
AO_HAVE_ch¨_°‹e_wrôe
)

94 
	#AO_ch¨_°‹e_wrôe
(
addr
,
vÆ
Ë
	`AO_ch¨_°‹e_fuŒ
◊ddr,vÆ)

	)

95 
	#AO_HAVE_ch¨_°‹e_wrôe


	)

98 #i‡
	`deföed
(
AO_HAVE_ch¨_°‹e_ªÀa£
) && \

99 !
	$deföed
(
AO_HAVE_ch¨_°‹e_ªÀa£_wrôe
)

100 
	#AO_ch¨_°‹e_ªÀa£_wrôe
(
addr
, 
vÆ
) \

101 
	`AO_ch¨_°‹e_ªÀa£
(
addr
,
vÆ
)

	)

102 
	#AO_HAVE_ch¨_°‹e_ªÀa£_wrôe


	)

105 #i‡
	`deföed
(
AO_HAVE_ch¨_°‹e_wrôe
Ë&& !deföed(
AO_HAVE_ch¨_°‹e
)

106 
	#AO_ch¨_°‹e
(
addr
, 
vÆ
Ë
	`AO_ch¨_°‹e_wrôe
◊ddr,vÆ)

	)

107 
	#AO_HAVE_ch¨_°‹e


	)

110 #i‡
	`deföed
(
AO_HAVE_ch¨_°‹e
Ë&& deföed(
AO_HAVE_n›_fuŒ
) && \

111 !
	$deföed
(
AO_HAVE_ch¨_°‹e_ªÀa£
)

112 
	#AO_ch¨_°‹e_ªÀa£
(
addr
,
vÆ
) \

113 (
	`AO_n›_fuŒ
(), 
	`AO_ch¨_°‹e
(
addr
,
vÆ
))

	)

114 
	#AO_HAVE_ch¨_°‹e_ªÀa£


	)

117 #i‡
	`deföed
(
AO_HAVE_n›_wrôe
Ë&& deföed(
AO_HAVE_ch¨_°‹e
) && \

118 !
	$deföed
(
AO_HAVE_ch¨_°‹e_wrôe
)

119 
	#AO_ch¨_°‹e_wrôe
(
addr
, 
vÆ
) \

120 (
	`AO_n›_wrôe
(), 
	`AO_ch¨_°‹e
(
addr
,
vÆ
))

	)

121 
	#AO_HAVE_ch¨_°‹e_wrôe


	)

124 #i‡
	`deföed
(
AO_HAVE_ch¨_°‹e_wrôe
) && \

125 !
	$deföed
(
AO_HAVE_ch¨_°‹e_ªÀa£_wrôe
)

126 
	#AO_ch¨_°‹e_ªÀa£_wrôe
(
addr
, 
vÆ
Ë
	`AO_ch¨_°‹e_wrôe
◊ddr,vÆ)

	)

127 
	#AO_HAVE_ch¨_°‹e_ªÀa£_wrôe


	)

130 #i‡
	`deföed
(
AO_HAVE_ch¨_°‹e_ªÀa£
Ë&& deföed(
AO_HAVE_n›_fuŒ
) && \

131 !
	$deföed
(
AO_HAVE_ch¨_°‹e_fuŒ
)

132 
	#AO_ch¨_°‹e_fuŒ
(
addr
, 
vÆ
) \

133 (
	`AO_ch¨_°‹e_ªÀa£
(
addr
, 
vÆ
), 
	`AO_n›_fuŒ
())

	)

134 
	#AO_HAVE_ch¨_°‹e_fuŒ


	)

139 #i‡
	`deföed
(
AO_HAVE_ch¨_com∑ª_™d_sw≠_fuŒ
) && \

140 !
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add_fuŒ
)

141 
AO_INLINE
 
AO_t


142 
	$AO_ch¨_„tch_™d_add_fuŒ
(vﬁ©ûê*
addr
,

143 
ö¸
)

145 
ﬁd
;

148 
ﬁd
 = *
addr
;

150 !
	`AO_ch¨_com∑ª_™d_sw≠_fuŒ
(
addr
, 
ﬁd
, old+
ö¸
));

151  
ﬁd
;

152 
	}
}

153 
	#AO_HAVE_ch¨_„tch_™d_add_fuŒ


	)

156 #i‡
deföed
(
AO_HAVE_ch¨_com∑ª_™d_sw≠_acquúe
) && \

157 !
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add_acquúe
)

158 
AO_INLINE
 
AO_t


159 
	$AO_ch¨_„tch_™d_add_acquúe
(vﬁ©ûê*
addr
,

160 
ö¸
)

162 
ﬁd
;

165 
ﬁd
 = *
addr
;

167 !
	`AO_ch¨_com∑ª_™d_sw≠_acquúe
(
addr
, 
ﬁd
, old+
ö¸
));

168  
ﬁd
;

169 
	}
}

170 
	#AO_HAVE_ch¨_„tch_™d_add_acquúe


	)

173 #i‡
deföed
(
AO_HAVE_ch¨_com∑ª_™d_sw≠_ªÀa£
) && \

174 !
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add_ªÀa£
)

175 
AO_INLINE
 
AO_t


176 
	$AO_ch¨_„tch_™d_add_ªÀa£
(vﬁ©ûê*
addr
,

177 
ö¸
)

179 
ﬁd
;

182 
ﬁd
 = *
addr
;

184 !
	`AO_ch¨_com∑ª_™d_sw≠_ªÀa£
(
addr
, 
ﬁd
, old+
ö¸
));

185  
ﬁd
;

186 
	}
}

187 
	#AO_HAVE_ch¨_„tch_™d_add_ªÀa£


	)

190 #i‡
deföed
(
AO_HAVE_ch¨_„tch_™d_add_fuŒ
)

191 #i‡!
deföed
(
AO_HAVE_ch¨_„tch_™d_add_ªÀa£
)

192 
	#AO_ch¨_„tch_™d_add_ªÀa£
(
addr
, 
vÆ
) \

193 
	`AO_ch¨_„tch_™d_add_fuŒ
(
addr
, 
vÆ
)

	)

194 
	#AO_HAVE_ch¨_„tch_™d_add_ªÀa£


	)

196 #i‡!
deföed
(
AO_HAVE_ch¨_„tch_™d_add_acquúe
)

197 
	#AO_ch¨_„tch_™d_add_acquúe
(
addr
, 
vÆ
) \

198 
	`AO_ch¨_„tch_™d_add_fuŒ
(
addr
, 
vÆ
)

	)

199 
	#AO_HAVE_ch¨_„tch_™d_add_acquúe


	)

201 #i‡!
deföed
(
AO_HAVE_ch¨_„tch_™d_add_wrôe
)

202 
	#AO_ch¨_„tch_™d_add_wrôe
(
addr
, 
vÆ
) \

203 
	`AO_ch¨_„tch_™d_add_fuŒ
(
addr
, 
vÆ
)

	)

204 
	#AO_HAVE_ch¨_„tch_™d_add_wrôe


	)

206 #i‡!
deföed
(
AO_HAVE_ch¨_„tch_™d_add_ªad
)

207 
	#AO_ch¨_„tch_™d_add_ªad
(
addr
, 
vÆ
) \

208 
	`AO_ch¨_„tch_™d_add_fuŒ
(
addr
, 
vÆ
)

	)

209 
	#AO_HAVE_ch¨_„tch_™d_add_ªad


	)

213 #i‡!
deföed
(
AO_HAVE_ch¨_„tch_™d_add
) && \

214 
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add_ªÀa£
)

215 
	#AO_ch¨_„tch_™d_add
(
addr
, 
vÆ
) \

216 
	`AO_ch¨_„tch_™d_add_ªÀa£
(
addr
, 
vÆ
)

	)

217 
	#AO_HAVE_ch¨_„tch_™d_add


	)

219 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add
) && \

220 
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add_acquúe
)

221 
	#AO_ch¨_„tch_™d_add
(
addr
, 
vÆ
) \

222 
	`AO_ch¨_„tch_™d_add_acquúe
(
addr
, 
vÆ
)

	)

223 
	#AO_HAVE_ch¨_„tch_™d_add


	)

225 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add
) && \

226 
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add_wrôe
)

227 
	#AO_ch¨_„tch_™d_add
(
addr
, 
vÆ
) \

228 
	`AO_ch¨_„tch_™d_add_wrôe
(
addr
, 
vÆ
)

	)

229 
	#AO_HAVE_ch¨_„tch_™d_add


	)

231 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add
) && \

232 
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add_ªad
)

233 
	#AO_ch¨_„tch_™d_add
(
addr
, 
vÆ
) \

234 
	`AO_ch¨_„tch_™d_add_ªad
(
addr
, 
vÆ
)

	)

235 
	#AO_HAVE_ch¨_„tch_™d_add


	)

238 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add_acquúe
) &&\

239 
	`deföed
(
AO_HAVE_n›_fuŒ
) && \

240 !
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add_fuŒ
)

241 
	#AO_ch¨_„tch_™d_add_fuŒ
(
addr
, 
vÆ
) \

242 (
	`AO_n›_fuŒ
(), 
	`AO_ch¨_„tch_™d_add_acquúe
(
addr
, 
vÆ
))

	)

245 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add_ªÀa£_wrôe
) && \

246 
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add_wrôe
)

247 
	#AO_ch¨_„tch_™d_add_ªÀa£_wrôe
(
addr
, 
vÆ
) \

248 
	`AO_ch¨_„tch_™d_add_wrôe
(
addr
, 
vÆ
)

	)

249 
	#AO_HAVE_ch¨_„tch_™d_add_ªÀa£_wrôe


	)

251 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add_ªÀa£_wrôe
) && \

252 
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add_ªÀa£
)

253 
	#AO_ch¨_„tch_™d_add_ªÀa£_wrôe
(
addr
, 
vÆ
) \

254 
	`AO_ch¨_„tch_™d_add_ªÀa£
(
addr
, 
vÆ
)

	)

255 
	#AO_HAVE_ch¨_„tch_™d_add_ªÀa£_wrôe


	)

257 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add_acquúe_ªad
) && \

258 
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add_ªad
)

259 
	#AO_ch¨_„tch_™d_add_acquúe_ªad
(
addr
, 
vÆ
) \

260 
	`AO_ch¨_„tch_™d_add_ªad
(
addr
, 
vÆ
)

	)

261 
	#AO_HAVE_ch¨_„tch_™d_add_acquúe_ªad


	)

263 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add_acquúe_ªad
) && \

264 
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add_acquúe
)

265 
	#AO_ch¨_„tch_™d_add_acquúe_ªad
(
addr
, 
vÆ
) \

266 
	`AO_ch¨_„tch_™d_add_acquúe
(
addr
, 
vÆ
)

	)

267 
	#AO_HAVE_ch¨_„tch_™d_add_acquúe_ªad


	)

270 #ifde‡
AO_NO_DD_ORDERING


271 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add_acquúe_ªad
)

272 
	#AO_ch¨_„tch_™d_add_dd_acquúe_ªad
(
addr
, 
vÆ
) \

273 
	`AO_ch¨_„tch_™d_add_acquúe_ªad
(
addr
, 
vÆ
)

	)

274 
	#AO_HAVE_ch¨_„tch_™d_add_dd_acquúe_ªad


	)

277 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add
)

278 
	#AO_ch¨_„tch_™d_add_dd_acquúe_ªad
(
addr
, 
vÆ
) \

279 
	`AO_ch¨_„tch_™d_add
(
addr
, 
vÆ
)

	)

280 
	#AO_HAVE_ch¨_„tch_™d_add_dd_acquúe_ªad


	)

286 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add_fuŒ
) &&\

287 !
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add1_fuŒ
)

288 
	#AO_ch¨_„tch_™d_add1_fuŒ
(
addr
) \

289 
	`AO_ch¨_„tch_™d_add_fuŒ
(
addr
,1)

	)

290 
	#AO_HAVE_ch¨_„tch_™d_add1_fuŒ


	)

292 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add_ªÀa£
) &&\

293 !
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add1_ªÀa£
)

294 
	#AO_ch¨_„tch_™d_add1_ªÀa£
(
addr
) \

295 
	`AO_ch¨_„tch_™d_add_ªÀa£
(
addr
,1)

	)

296 
	#AO_HAVE_ch¨_„tch_™d_add1_ªÀa£


	)

298 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add_acquúe
) &&\

299 !
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add1_acquúe
)

300 
	#AO_ch¨_„tch_™d_add1_acquúe
(
addr
) \

301 
	`AO_ch¨_„tch_™d_add_acquúe
(
addr
,1)

	)

302 
	#AO_HAVE_ch¨_„tch_™d_add1_acquúe


	)

304 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add_wrôe
) &&\

305 !
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add1_wrôe
)

306 
	#AO_ch¨_„tch_™d_add1_wrôe
(
addr
) \

307 
	`AO_ch¨_„tch_™d_add_wrôe
(
addr
,1)

	)

308 
	#AO_HAVE_ch¨_„tch_™d_add1_wrôe


	)

310 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add_ªad
) &&\

311 !
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add1_ªad
)

312 
	#AO_ch¨_„tch_™d_add1_ªad
(
addr
) \

313 
	`AO_ch¨_„tch_™d_add_ªad
(
addr
,1)

	)

314 
	#AO_HAVE_ch¨_„tch_™d_add1_ªad


	)

316 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add_ªÀa£_wrôe
) &&\

317 !
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add1_ªÀa£_wrôe
)

318 
	#AO_ch¨_„tch_™d_add1_ªÀa£_wrôe
(
addr
) \

319 
	`AO_ch¨_„tch_™d_add_ªÀa£_wrôe
(
addr
,1)

	)

320 
	#AO_HAVE_ch¨_„tch_™d_add1_ªÀa£_wrôe


	)

322 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add_acquúe_ªad
) &&\

323 !
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add1_acquúe_ªad
)

324 
	#AO_ch¨_„tch_™d_add1_acquúe_ªad
(
addr
) \

325 
	`AO_ch¨_„tch_™d_add_acquúe_ªad
(
addr
,1)

	)

326 
	#AO_HAVE_ch¨_„tch_™d_add1_acquúe_ªad


	)

328 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add
) &&\

329 !
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add1
)

330 
	#AO_ch¨_„tch_™d_add1
(
addr
) \

331 
	`AO_ch¨_„tch_™d_add
(
addr
,1)

	)

332 
	#AO_HAVE_ch¨_„tch_™d_add1


	)

335 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add1_fuŒ
)

336 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add1_ªÀa£
)

337 
	#AO_ch¨_„tch_™d_add1_ªÀa£
(
addr
) \

338 
	`AO_ch¨_„tch_™d_add1_fuŒ
(
addr
)

	)

339 
	#AO_HAVE_ch¨_„tch_™d_add1_ªÀa£


	)

341 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add1_acquúe
)

342 
	#AO_ch¨_„tch_™d_add1_acquúe
(
addr
) \

343 
	`AO_ch¨_„tch_™d_add1_fuŒ
(
addr
)

	)

344 
	#AO_HAVE_ch¨_„tch_™d_add1_acquúe


	)

346 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add1_wrôe
)

347 
	#AO_ch¨_„tch_™d_add1_wrôe
(
addr
) \

348 
	`AO_ch¨_„tch_™d_add1_fuŒ
(
addr
)

	)

349 
	#AO_HAVE_ch¨_„tch_™d_add1_wrôe


	)

351 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add1_ªad
)

352 
	#AO_ch¨_„tch_™d_add1_ªad
(
addr
) \

353 
	`AO_ch¨_„tch_™d_add1_fuŒ
(
addr
)

	)

354 
	#AO_HAVE_ch¨_„tch_™d_add1_ªad


	)

358 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add1
) && \

359 
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add1_ªÀa£
)

360 
	#AO_ch¨_„tch_™d_add1
(
addr
) \

361 
	`AO_ch¨_„tch_™d_add1_ªÀa£
(
addr
)

	)

362 
	#AO_HAVE_ch¨_„tch_™d_add1


	)

364 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add1
) && \

365 
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add1_acquúe
)

366 
	#AO_ch¨_„tch_™d_add1
(
addr
) \

367 
	`AO_ch¨_„tch_™d_add1_acquúe
(
addr
)

	)

368 
	#AO_HAVE_ch¨_„tch_™d_add1


	)

370 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add1
) && \

371 
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add1_wrôe
)

372 
	#AO_ch¨_„tch_™d_add1
(
addr
) \

373 
	`AO_ch¨_„tch_™d_add1_wrôe
(
addr
)

	)

374 
	#AO_HAVE_ch¨_„tch_™d_add1


	)

376 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add1
) && \

377 
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add1_ªad
)

378 
	#AO_ch¨_„tch_™d_add1
(
addr
) \

379 
	`AO_ch¨_„tch_™d_add1_ªad
(
addr
)

	)

380 
	#AO_HAVE_ch¨_„tch_™d_add1


	)

383 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add1_acquúe
) &&\

384 
	`deföed
(
AO_HAVE_n›_fuŒ
) && \

385 !
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add1_fuŒ
)

386 
	#AO_ch¨_„tch_™d_add1_fuŒ
(
addr
) \

387 (
	`AO_n›_fuŒ
(), 
	`AO_ch¨_„tch_™d_add1_acquúe
(
addr
))

	)

388 
	#AO_HAVE_ch¨_„tch_™d_add1_fuŒ


	)

391 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add1_ªÀa£_wrôe
) && \

392 
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add1_wrôe
)

393 
	#AO_ch¨_„tch_™d_add1_ªÀa£_wrôe
(
addr
) \

394 
	`AO_ch¨_„tch_™d_add1_wrôe
(
addr
)

	)

395 
	#AO_HAVE_ch¨_„tch_™d_add1_ªÀa£_wrôe


	)

397 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add1_ªÀa£_wrôe
) && \

398 
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add1_ªÀa£
)

399 
	#AO_ch¨_„tch_™d_add1_ªÀa£_wrôe
(
addr
) \

400 
	`AO_ch¨_„tch_™d_add1_ªÀa£
(
addr
)

	)

401 
	#AO_HAVE_ch¨_„tch_™d_add1_ªÀa£_wrôe


	)

403 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add1_acquúe_ªad
) && \

404 
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add1_ªad
)

405 
	#AO_ch¨_„tch_™d_add1_acquúe_ªad
(
addr
) \

406 
	`AO_ch¨_„tch_™d_add1_ªad
(
addr
)

	)

407 
	#AO_HAVE_ch¨_„tch_™d_add1_acquúe_ªad


	)

409 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add1_acquúe_ªad
) && \

410 
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add1_acquúe
)

411 
	#AO_ch¨_„tch_™d_add1_acquúe_ªad
(
addr
) \

412 
	`AO_ch¨_„tch_™d_add1_acquúe
(
addr
)

	)

413 
	#AO_HAVE_ch¨_„tch_™d_add1_acquúe_ªad


	)

416 #ifde‡
AO_NO_DD_ORDERING


417 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add1_acquúe_ªad
)

418 
	#AO_ch¨_„tch_™d_add1_dd_acquúe_ªad
(
addr
) \

419 
	`AO_ch¨_„tch_™d_add1_acquúe_ªad
(
addr
)

	)

420 
	#AO_HAVE_ch¨_„tch_™d_add1_dd_acquúe_ªad


	)

423 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add1
)

424 
	#AO_ch¨_„tch_™d_add1_dd_acquúe_ªad
(
addr
) \

425 
	`AO_ch¨_„tch_™d_add1
(
addr
)

	)

426 
	#AO_HAVE_ch¨_„tch_™d_add1_dd_acquúe_ªad


	)

432 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add_fuŒ
) &&\

433 !
	$deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_fuŒ
)

434 
	#AO_ch¨_„tch_™d_sub1_fuŒ
(
addr
) \

435 
	`AO_ch¨_„tch_™d_add_fuŒ
(
addr
,()(-1))

	)

436 
	#AO_HAVE_ch¨_„tch_™d_sub1_fuŒ


	)

438 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add_ªÀa£
) &&\

439 !
	$deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_ªÀa£
)

440 
	#AO_ch¨_„tch_™d_sub1_ªÀa£
(
addr
) \

441 
	`AO_ch¨_„tch_™d_add_ªÀa£
(
addr
,()(-1))

	)

442 
	#AO_HAVE_ch¨_„tch_™d_sub1_ªÀa£


	)

444 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add_acquúe
) &&\

445 !
	$deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_acquúe
)

446 
	#AO_ch¨_„tch_™d_sub1_acquúe
(
addr
) \

447 
	`AO_ch¨_„tch_™d_add_acquúe
(
addr
,()(-1))

	)

448 
	#AO_HAVE_ch¨_„tch_™d_sub1_acquúe


	)

450 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add_wrôe
) &&\

451 !
	$deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_wrôe
)

452 
	#AO_ch¨_„tch_™d_sub1_wrôe
(
addr
) \

453 
	`AO_ch¨_„tch_™d_add_wrôe
(
addr
,()(-1))

	)

454 
	#AO_HAVE_ch¨_„tch_™d_sub1_wrôe


	)

456 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add_ªad
) &&\

457 !
	$deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_ªad
)

458 
	#AO_ch¨_„tch_™d_sub1_ªad
(
addr
) \

459 
	`AO_ch¨_„tch_™d_add_ªad
(
addr
,()(-1))

	)

460 
	#AO_HAVE_ch¨_„tch_™d_sub1_ªad


	)

462 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add_ªÀa£_wrôe
) &&\

463 !
	$deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_ªÀa£_wrôe
)

464 
	#AO_ch¨_„tch_™d_sub1_ªÀa£_wrôe
(
addr
) \

465 
	`AO_ch¨_„tch_™d_add_ªÀa£_wrôe
(
addr
,()(-1))

	)

466 
	#AO_HAVE_ch¨_„tch_™d_sub1_ªÀa£_wrôe


	)

468 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add_acquúe_ªad
) &&\

469 !
	$deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_acquúe_ªad
)

470 
	#AO_ch¨_„tch_™d_sub1_acquúe_ªad
(
addr
) \

471 
	`AO_ch¨_„tch_™d_add_acquúe_ªad
(
addr
,()(-1))

	)

472 
	#AO_HAVE_ch¨_„tch_™d_sub1_acquúe_ªad


	)

474 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add
) &&\

475 !
	$deföed
(
AO_HAVE_ch¨_„tch_™d_sub1
)

476 
	#AO_ch¨_„tch_™d_sub1
(
addr
) \

477 
	`AO_ch¨_„tch_™d_add
(
addr
,()(-1))

	)

478 
	#AO_HAVE_ch¨_„tch_™d_sub1


	)

481 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_fuŒ
)

482 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_ªÀa£
)

483 
	#AO_ch¨_„tch_™d_sub1_ªÀa£
(
addr
) \

484 
	`AO_ch¨_„tch_™d_sub1_fuŒ
(
addr
)

	)

485 
	#AO_HAVE_ch¨_„tch_™d_sub1_ªÀa£


	)

487 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_acquúe
)

488 
	#AO_ch¨_„tch_™d_sub1_acquúe
(
addr
) \

489 
	`AO_ch¨_„tch_™d_sub1_fuŒ
(
addr
)

	)

490 
	#AO_HAVE_ch¨_„tch_™d_sub1_acquúe


	)

492 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_wrôe
)

493 
	#AO_ch¨_„tch_™d_sub1_wrôe
(
addr
) \

494 
	`AO_ch¨_„tch_™d_sub1_fuŒ
(
addr
)

	)

495 
	#AO_HAVE_ch¨_„tch_™d_sub1_wrôe


	)

497 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_ªad
)

498 
	#AO_ch¨_„tch_™d_sub1_ªad
(
addr
) \

499 
	`AO_ch¨_„tch_™d_sub1_fuŒ
(
addr
)

	)

500 
	#AO_HAVE_ch¨_„tch_™d_sub1_ªad


	)

504 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_sub1
) && \

505 
	$deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_ªÀa£
)

506 
	#AO_ch¨_„tch_™d_sub1
(
addr
) \

507 
	`AO_ch¨_„tch_™d_sub1_ªÀa£
(
addr
)

	)

508 
	#AO_HAVE_ch¨_„tch_™d_sub1


	)

510 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_sub1
) && \

511 
	$deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_acquúe
)

512 
	#AO_ch¨_„tch_™d_sub1
(
addr
) \

513 
	`AO_ch¨_„tch_™d_sub1_acquúe
(
addr
)

	)

514 
	#AO_HAVE_ch¨_„tch_™d_sub1


	)

516 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_sub1
) && \

517 
	$deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_wrôe
)

518 
	#AO_ch¨_„tch_™d_sub1
(
addr
) \

519 
	`AO_ch¨_„tch_™d_sub1_wrôe
(
addr
)

	)

520 
	#AO_HAVE_ch¨_„tch_™d_sub1


	)

522 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_sub1
) && \

523 
	$deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_ªad
)

524 
	#AO_ch¨_„tch_™d_sub1
(
addr
) \

525 
	`AO_ch¨_„tch_™d_sub1_ªad
(
addr
)

	)

526 
	#AO_HAVE_ch¨_„tch_™d_sub1


	)

529 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_acquúe
) &&\

530 
	`deföed
(
AO_HAVE_n›_fuŒ
) && \

531 !
	$deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_fuŒ
)

532 
	#AO_ch¨_„tch_™d_sub1_fuŒ
(
addr
) \

533 (
	`AO_n›_fuŒ
(), 
	`AO_ch¨_„tch_™d_sub1_acquúe
(
addr
))

	)

534 
	#AO_HAVE_ch¨_„tch_™d_sub1_fuŒ


	)

537 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_ªÀa£_wrôe
) && \

538 
	$deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_wrôe
)

539 
	#AO_ch¨_„tch_™d_sub1_ªÀa£_wrôe
(
addr
) \

540 
	`AO_ch¨_„tch_™d_sub1_wrôe
(
addr
)

	)

541 
	#AO_HAVE_ch¨_„tch_™d_sub1_ªÀa£_wrôe


	)

543 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_ªÀa£_wrôe
) && \

544 
	$deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_ªÀa£
)

545 
	#AO_ch¨_„tch_™d_sub1_ªÀa£_wrôe
(
addr
) \

546 
	`AO_ch¨_„tch_™d_sub1_ªÀa£
(
addr
)

	)

547 
	#AO_HAVE_ch¨_„tch_™d_sub1_ªÀa£_wrôe


	)

549 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_acquúe_ªad
) && \

550 
	$deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_ªad
)

551 
	#AO_ch¨_„tch_™d_sub1_acquúe_ªad
(
addr
) \

552 
	`AO_ch¨_„tch_™d_sub1_ªad
(
addr
)

	)

553 
	#AO_HAVE_ch¨_„tch_™d_sub1_acquúe_ªad


	)

555 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_acquúe_ªad
) && \

556 
	$deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_acquúe
)

557 
	#AO_ch¨_„tch_™d_sub1_acquúe_ªad
(
addr
) \

558 
	`AO_ch¨_„tch_™d_sub1_acquúe
(
addr
)

	)

559 
	#AO_HAVE_ch¨_„tch_™d_sub1_acquúe_ªad


	)

562 #ifde‡
AO_NO_DD_ORDERING


563 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_acquúe_ªad
)

564 
	#AO_ch¨_„tch_™d_sub1_dd_acquúe_ªad
(
addr
) \

565 
	`AO_ch¨_„tch_™d_sub1_acquúe_ªad
(
addr
)

	)

566 
	#AO_HAVE_ch¨_„tch_™d_sub1_dd_acquúe_ªad


	)

569 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_sub1
)

570 
	#AO_ch¨_„tch_™d_sub1_dd_acquúe_ªad
(
addr
) \

571 
	`AO_ch¨_„tch_™d_sub1
(
addr
)

	)

572 
	#AO_HAVE_ch¨_„tch_™d_sub1_dd_acquúe_ªad


	)

577 #i‡
	`deföed
(
AO_HAVE_sh‹t_lﬂd_acquúe
Ë&& !deföed(
AO_HAVE_sh‹t_lﬂd
)

578 
	#AO_sh‹t_lﬂd
(
addr
Ë
	`AO_sh‹t_lﬂd_acquúe
◊ddr)

	)

579 
	#AO_HAVE_sh‹t_lﬂd


	)

582 #i‡
	`deföed
(
AO_HAVE_sh‹t_lﬂd_fuŒ
Ë&& !deföed(
AO_HAVE_sh‹t_lﬂd_acquúe
)

583 
	#AO_sh‹t_lﬂd_acquúe
(
addr
Ë
	`AO_sh‹t_lﬂd_fuŒ
◊ddr)

	)

584 
	#AO_HAVE_sh‹t_lﬂd_acquúe


	)

587 #i‡
	`deföed
(
AO_HAVE_sh‹t_lﬂd_fuŒ
Ë&& !deföed(
AO_HAVE_sh‹t_lﬂd_ªad
)

588 
	#AO_sh‹t_lﬂd_ªad
(
addr
Ë
	`AO_sh‹t_lﬂd_fuŒ
◊ddr)

	)

589 
	#AO_HAVE_sh‹t_lﬂd_ªad


	)

592 #i‡!
	`deföed
(
AO_HAVE_sh‹t_lﬂd_acquúe_ªad
Ë&& deföed(
AO_HAVE_sh‹t_lﬂd_acquúe
)

593 
	#AO_sh‹t_lﬂd_acquúe_ªad
(
addr
Ë
	`AO_sh‹t_lﬂd_acquúe
◊ddr)

	)

594 
	#AO_HAVE_sh‹t_lﬂd_acquúe_ªad


	)

597 #i‡
	`deföed
(
AO_HAVE_sh‹t_lﬂd
Ë&& deföed(
AO_HAVE_n›_fuŒ
) && \

598 !
	$deföed
(
AO_HAVE_sh‹t_lﬂd_acquúe
)

599 
AO_INLINE
 

600 
	$AO_sh‹t_lﬂd_acquúe
(c⁄° vﬁ©ûê*
addr
)

602 
ªsu…
 = 
	`AO_sh‹t_lﬂd
(
addr
);

605 
	`AO_n›_fuŒ
();

606  
ªsu…
;

607 
	}
}

608 
	#AO_HAVE_sh‹t_lﬂd_acquúe


	)

611 #i‡
deföed
(
AO_HAVE_sh‹t_lﬂd
Ë&& deföed(
AO_HAVE_n›_ªad
) && \

612 !
	$deföed
(
AO_HAVE_sh‹t_lﬂd_ªad
)

613 
AO_INLINE
 

614 
	$AO_sh‹t_lﬂd_ªad
(c⁄° vﬁ©ûê*
addr
)

616 
ªsu…
 = 
	`AO_sh‹t_lﬂd
(
addr
);

619 
	`AO_n›_ªad
();

620  
ªsu…
;

621 
	}
}

622 
	#AO_HAVE_sh‹t_lﬂd_ªad


	)

625 #i‡
deföed
(
AO_HAVE_sh‹t_lﬂd_acquúe
Ë&& deföed(
AO_HAVE_n›_fuŒ
) && \

626 !
	$deföed
(
AO_HAVE_sh‹t_lﬂd_fuŒ
)

627 
	#AO_sh‹t_lﬂd_fuŒ
(
addr
Ë(
	`AO_n›_fuŒ
(), 
	`AO_sh‹t_lﬂd_acquúe
◊ddr))

	)

628 
	#AO_HAVE_sh‹t_lﬂd_fuŒ


	)

631 #i‡!
	`deföed
(
AO_HAVE_sh‹t_lﬂd_acquúe_ªad
Ë&& deföed(
AO_HAVE_sh‹t_lﬂd_ªad
)

632 
	#AO_sh‹t_lﬂd_acquúe_ªad
(
addr
Ë
	`AO_sh‹t_lﬂd_ªad
◊ddr)

	)

633 
	#AO_HAVE_sh‹t_lﬂd_acquúe_ªad


	)

636 #i‡
	`deföed
(
AO_HAVE_sh‹t_lﬂd_acquúe_ªad
Ë&& !deföed(
AO_HAVE_sh‹t_lﬂd
)

637 
	#AO_sh‹t_lﬂd
(
addr
Ë
	`AO_sh‹t_lﬂd_acquúe_ªad
◊ddr)

	)

638 
	#AO_HAVE_sh‹t_lﬂd


	)

641 #ifde‡
AO_NO_DD_ORDERING


642 #i‡
	`deföed
(
AO_HAVE_sh‹t_lﬂd_acquúe_ªad
)

643 
	#AO_sh‹t_lﬂd_dd_acquúe_ªad
(
addr
) \

644 
	`AO_sh‹t_lﬂd_acquúe_ªad
(
addr
)

	)

645 
	#AO_HAVE_sh‹t_lﬂd_dd_acquúe_ªad


	)

648 #i‡
	`deföed
(
AO_HAVE_sh‹t_lﬂd
)

649 
	#AO_sh‹t_lﬂd_dd_acquúe_ªad
(
addr
) \

650 
	`AO_sh‹t_lﬂd
(
addr
)

	)

651 
	#AO_HAVE_sh‹t_lﬂd_dd_acquúe_ªad


	)

658 #i‡
	`deföed
(
AO_HAVE_sh‹t_°‹e_ªÀa£
Ë&& !deföed(
AO_HAVE_sh‹t_°‹e
)

659 
	#AO_sh‹t_°‹e
(
addr
, 
vÆ
Ë
	`AO_sh‹t_°‹e_ªÀa£
◊ddr,vÆ)

	)

660 
	#AO_HAVE_sh‹t_°‹e


	)

663 #i‡
	`deföed
(
AO_HAVE_sh‹t_°‹e_fuŒ
Ë&& !deföed(
AO_HAVE_sh‹t_°‹e_ªÀa£
)

664 
	#AO_sh‹t_°‹e_ªÀa£
(
addr
,
vÆ
Ë
	`AO_sh‹t_°‹e_fuŒ
◊ddr,vÆ)

	)

665 
	#AO_HAVE_sh‹t_°‹e_ªÀa£


	)

668 #i‡
	`deföed
(
AO_HAVE_sh‹t_°‹e_fuŒ
Ë&& !deföed(
AO_HAVE_sh‹t_°‹e_wrôe
)

669 
	#AO_sh‹t_°‹e_wrôe
(
addr
,
vÆ
Ë
	`AO_sh‹t_°‹e_fuŒ
◊ddr,vÆ)

	)

670 
	#AO_HAVE_sh‹t_°‹e_wrôe


	)

673 #i‡
	`deföed
(
AO_HAVE_sh‹t_°‹e_ªÀa£
) && \

674 !
	$deföed
(
AO_HAVE_sh‹t_°‹e_ªÀa£_wrôe
)

675 
	#AO_sh‹t_°‹e_ªÀa£_wrôe
(
addr
, 
vÆ
) \

676 
	`AO_sh‹t_°‹e_ªÀa£
(
addr
,
vÆ
)

	)

677 
	#AO_HAVE_sh‹t_°‹e_ªÀa£_wrôe


	)

680 #i‡
	`deföed
(
AO_HAVE_sh‹t_°‹e_wrôe
Ë&& !deföed(
AO_HAVE_sh‹t_°‹e
)

681 
	#AO_sh‹t_°‹e
(
addr
, 
vÆ
Ë
	`AO_sh‹t_°‹e_wrôe
◊ddr,vÆ)

	)

682 
	#AO_HAVE_sh‹t_°‹e


	)

685 #i‡
	`deföed
(
AO_HAVE_sh‹t_°‹e
Ë&& deföed(
AO_HAVE_n›_fuŒ
) && \

686 !
	$deföed
(
AO_HAVE_sh‹t_°‹e_ªÀa£
)

687 
	#AO_sh‹t_°‹e_ªÀa£
(
addr
,
vÆ
) \

688 (
	`AO_n›_fuŒ
(), 
	`AO_sh‹t_°‹e
(
addr
,
vÆ
))

	)

689 
	#AO_HAVE_sh‹t_°‹e_ªÀa£


	)

692 #i‡
	`deföed
(
AO_HAVE_n›_wrôe
Ë&& deföed(
AO_HAVE_sh‹t_°‹e
) && \

693 !
	$deföed
(
AO_HAVE_sh‹t_°‹e_wrôe
)

694 
	#AO_sh‹t_°‹e_wrôe
(
addr
, 
vÆ
) \

695 (
	`AO_n›_wrôe
(), 
	`AO_sh‹t_°‹e
(
addr
,
vÆ
))

	)

696 
	#AO_HAVE_sh‹t_°‹e_wrôe


	)

699 #i‡
	`deföed
(
AO_HAVE_sh‹t_°‹e_wrôe
) && \

700 !
	$deföed
(
AO_HAVE_sh‹t_°‹e_ªÀa£_wrôe
)

701 
	#AO_sh‹t_°‹e_ªÀa£_wrôe
(
addr
, 
vÆ
Ë
	`AO_sh‹t_°‹e_wrôe
◊ddr,vÆ)

	)

702 
	#AO_HAVE_sh‹t_°‹e_ªÀa£_wrôe


	)

705 #i‡
	`deföed
(
AO_HAVE_sh‹t_°‹e_ªÀa£
Ë&& deföed(
AO_HAVE_n›_fuŒ
) && \

706 !
	$deföed
(
AO_HAVE_sh‹t_°‹e_fuŒ
)

707 
	#AO_sh‹t_°‹e_fuŒ
(
addr
, 
vÆ
) \

708 (
	`AO_sh‹t_°‹e_ªÀa£
(
addr
, 
vÆ
), 
	`AO_n›_fuŒ
())

	)

709 
	#AO_HAVE_sh‹t_°‹e_fuŒ


	)

714 #i‡
	`deföed
(
AO_HAVE_sh‹t_com∑ª_™d_sw≠_fuŒ
) && \

715 !
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add_fuŒ
)

716 
AO_INLINE
 
AO_t


717 
	$AO_sh‹t_„tch_™d_add_fuŒ
(vﬁ©ûê*
addr
,

718 
ö¸
)

720 
ﬁd
;

723 
ﬁd
 = *
addr
;

725 !
	`AO_sh‹t_com∑ª_™d_sw≠_fuŒ
(
addr
, 
ﬁd
, old+
ö¸
));

726  
ﬁd
;

727 
	}
}

728 
	#AO_HAVE_sh‹t_„tch_™d_add_fuŒ


	)

731 #i‡
deföed
(
AO_HAVE_sh‹t_com∑ª_™d_sw≠_acquúe
) && \

732 !
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add_acquúe
)

733 
AO_INLINE
 
AO_t


734 
	$AO_sh‹t_„tch_™d_add_acquúe
(vﬁ©ûê*
addr
,

735 
ö¸
)

737 
ﬁd
;

740 
ﬁd
 = *
addr
;

742 !
	`AO_sh‹t_com∑ª_™d_sw≠_acquúe
(
addr
, 
ﬁd
, old+
ö¸
));

743  
ﬁd
;

744 
	}
}

745 
	#AO_HAVE_sh‹t_„tch_™d_add_acquúe


	)

748 #i‡
deföed
(
AO_HAVE_sh‹t_com∑ª_™d_sw≠_ªÀa£
) && \

749 !
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add_ªÀa£
)

750 
AO_INLINE
 
AO_t


751 
	$AO_sh‹t_„tch_™d_add_ªÀa£
(vﬁ©ûê*
addr
,

752 
ö¸
)

754 
ﬁd
;

757 
ﬁd
 = *
addr
;

759 !
	`AO_sh‹t_com∑ª_™d_sw≠_ªÀa£
(
addr
, 
ﬁd
, old+
ö¸
));

760  
ﬁd
;

761 
	}
}

762 
	#AO_HAVE_sh‹t_„tch_™d_add_ªÀa£


	)

765 #i‡
deföed
(
AO_HAVE_sh‹t_„tch_™d_add_fuŒ
)

766 #i‡!
deföed
(
AO_HAVE_sh‹t_„tch_™d_add_ªÀa£
)

767 
	#AO_sh‹t_„tch_™d_add_ªÀa£
(
addr
, 
vÆ
) \

768 
	`AO_sh‹t_„tch_™d_add_fuŒ
(
addr
, 
vÆ
)

	)

769 
	#AO_HAVE_sh‹t_„tch_™d_add_ªÀa£


	)

771 #i‡!
deföed
(
AO_HAVE_sh‹t_„tch_™d_add_acquúe
)

772 
	#AO_sh‹t_„tch_™d_add_acquúe
(
addr
, 
vÆ
) \

773 
	`AO_sh‹t_„tch_™d_add_fuŒ
(
addr
, 
vÆ
)

	)

774 
	#AO_HAVE_sh‹t_„tch_™d_add_acquúe


	)

776 #i‡!
deföed
(
AO_HAVE_sh‹t_„tch_™d_add_wrôe
)

777 
	#AO_sh‹t_„tch_™d_add_wrôe
(
addr
, 
vÆ
) \

778 
	`AO_sh‹t_„tch_™d_add_fuŒ
(
addr
, 
vÆ
)

	)

779 
	#AO_HAVE_sh‹t_„tch_™d_add_wrôe


	)

781 #i‡!
deföed
(
AO_HAVE_sh‹t_„tch_™d_add_ªad
)

782 
	#AO_sh‹t_„tch_™d_add_ªad
(
addr
, 
vÆ
) \

783 
	`AO_sh‹t_„tch_™d_add_fuŒ
(
addr
, 
vÆ
)

	)

784 
	#AO_HAVE_sh‹t_„tch_™d_add_ªad


	)

788 #i‡!
deföed
(
AO_HAVE_sh‹t_„tch_™d_add
) && \

789 
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add_ªÀa£
)

790 
	#AO_sh‹t_„tch_™d_add
(
addr
, 
vÆ
) \

791 
	`AO_sh‹t_„tch_™d_add_ªÀa£
(
addr
, 
vÆ
)

	)

792 
	#AO_HAVE_sh‹t_„tch_™d_add


	)

794 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add
) && \

795 
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add_acquúe
)

796 
	#AO_sh‹t_„tch_™d_add
(
addr
, 
vÆ
) \

797 
	`AO_sh‹t_„tch_™d_add_acquúe
(
addr
, 
vÆ
)

	)

798 
	#AO_HAVE_sh‹t_„tch_™d_add


	)

800 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add
) && \

801 
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add_wrôe
)

802 
	#AO_sh‹t_„tch_™d_add
(
addr
, 
vÆ
) \

803 
	`AO_sh‹t_„tch_™d_add_wrôe
(
addr
, 
vÆ
)

	)

804 
	#AO_HAVE_sh‹t_„tch_™d_add


	)

806 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add
) && \

807 
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add_ªad
)

808 
	#AO_sh‹t_„tch_™d_add
(
addr
, 
vÆ
) \

809 
	`AO_sh‹t_„tch_™d_add_ªad
(
addr
, 
vÆ
)

	)

810 
	#AO_HAVE_sh‹t_„tch_™d_add


	)

813 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add_acquúe
) &&\

814 
	`deföed
(
AO_HAVE_n›_fuŒ
) && \

815 !
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add_fuŒ
)

816 
	#AO_sh‹t_„tch_™d_add_fuŒ
(
addr
, 
vÆ
) \

817 (
	`AO_n›_fuŒ
(), 
	`AO_sh‹t_„tch_™d_add_acquúe
(
addr
, 
vÆ
))

	)

820 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add_ªÀa£_wrôe
) && \

821 
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add_wrôe
)

822 
	#AO_sh‹t_„tch_™d_add_ªÀa£_wrôe
(
addr
, 
vÆ
) \

823 
	`AO_sh‹t_„tch_™d_add_wrôe
(
addr
, 
vÆ
)

	)

824 
	#AO_HAVE_sh‹t_„tch_™d_add_ªÀa£_wrôe


	)

826 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add_ªÀa£_wrôe
) && \

827 
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add_ªÀa£
)

828 
	#AO_sh‹t_„tch_™d_add_ªÀa£_wrôe
(
addr
, 
vÆ
) \

829 
	`AO_sh‹t_„tch_™d_add_ªÀa£
(
addr
, 
vÆ
)

	)

830 
	#AO_HAVE_sh‹t_„tch_™d_add_ªÀa£_wrôe


	)

832 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add_acquúe_ªad
) && \

833 
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add_ªad
)

834 
	#AO_sh‹t_„tch_™d_add_acquúe_ªad
(
addr
, 
vÆ
) \

835 
	`AO_sh‹t_„tch_™d_add_ªad
(
addr
, 
vÆ
)

	)

836 
	#AO_HAVE_sh‹t_„tch_™d_add_acquúe_ªad


	)

838 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add_acquúe_ªad
) && \

839 
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add_acquúe
)

840 
	#AO_sh‹t_„tch_™d_add_acquúe_ªad
(
addr
, 
vÆ
) \

841 
	`AO_sh‹t_„tch_™d_add_acquúe
(
addr
, 
vÆ
)

	)

842 
	#AO_HAVE_sh‹t_„tch_™d_add_acquúe_ªad


	)

845 #ifde‡
AO_NO_DD_ORDERING


846 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add_acquúe_ªad
)

847 
	#AO_sh‹t_„tch_™d_add_dd_acquúe_ªad
(
addr
, 
vÆ
) \

848 
	`AO_sh‹t_„tch_™d_add_acquúe_ªad
(
addr
, 
vÆ
)

	)

849 
	#AO_HAVE_sh‹t_„tch_™d_add_dd_acquúe_ªad


	)

852 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add
)

853 
	#AO_sh‹t_„tch_™d_add_dd_acquúe_ªad
(
addr
, 
vÆ
) \

854 
	`AO_sh‹t_„tch_™d_add
(
addr
, 
vÆ
)

	)

855 
	#AO_HAVE_sh‹t_„tch_™d_add_dd_acquúe_ªad


	)

861 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add_fuŒ
) &&\

862 !
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_fuŒ
)

863 
	#AO_sh‹t_„tch_™d_add1_fuŒ
(
addr
) \

864 
	`AO_sh‹t_„tch_™d_add_fuŒ
(
addr
,1)

	)

865 
	#AO_HAVE_sh‹t_„tch_™d_add1_fuŒ


	)

867 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add_ªÀa£
) &&\

868 !
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_ªÀa£
)

869 
	#AO_sh‹t_„tch_™d_add1_ªÀa£
(
addr
) \

870 
	`AO_sh‹t_„tch_™d_add_ªÀa£
(
addr
,1)

	)

871 
	#AO_HAVE_sh‹t_„tch_™d_add1_ªÀa£


	)

873 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add_acquúe
) &&\

874 !
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_acquúe
)

875 
	#AO_sh‹t_„tch_™d_add1_acquúe
(
addr
) \

876 
	`AO_sh‹t_„tch_™d_add_acquúe
(
addr
,1)

	)

877 
	#AO_HAVE_sh‹t_„tch_™d_add1_acquúe


	)

879 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add_wrôe
) &&\

880 !
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_wrôe
)

881 
	#AO_sh‹t_„tch_™d_add1_wrôe
(
addr
) \

882 
	`AO_sh‹t_„tch_™d_add_wrôe
(
addr
,1)

	)

883 
	#AO_HAVE_sh‹t_„tch_™d_add1_wrôe


	)

885 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add_ªad
) &&\

886 !
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_ªad
)

887 
	#AO_sh‹t_„tch_™d_add1_ªad
(
addr
) \

888 
	`AO_sh‹t_„tch_™d_add_ªad
(
addr
,1)

	)

889 
	#AO_HAVE_sh‹t_„tch_™d_add1_ªad


	)

891 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add_ªÀa£_wrôe
) &&\

892 !
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_ªÀa£_wrôe
)

893 
	#AO_sh‹t_„tch_™d_add1_ªÀa£_wrôe
(
addr
) \

894 
	`AO_sh‹t_„tch_™d_add_ªÀa£_wrôe
(
addr
,1)

	)

895 
	#AO_HAVE_sh‹t_„tch_™d_add1_ªÀa£_wrôe


	)

897 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add_acquúe_ªad
) &&\

898 !
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_acquúe_ªad
)

899 
	#AO_sh‹t_„tch_™d_add1_acquúe_ªad
(
addr
) \

900 
	`AO_sh‹t_„tch_™d_add_acquúe_ªad
(
addr
,1)

	)

901 
	#AO_HAVE_sh‹t_„tch_™d_add1_acquúe_ªad


	)

903 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add
) &&\

904 !
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add1
)

905 
	#AO_sh‹t_„tch_™d_add1
(
addr
) \

906 
	`AO_sh‹t_„tch_™d_add
(
addr
,1)

	)

907 
	#AO_HAVE_sh‹t_„tch_™d_add1


	)

910 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_fuŒ
)

911 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_ªÀa£
)

912 
	#AO_sh‹t_„tch_™d_add1_ªÀa£
(
addr
) \

913 
	`AO_sh‹t_„tch_™d_add1_fuŒ
(
addr
)

	)

914 
	#AO_HAVE_sh‹t_„tch_™d_add1_ªÀa£


	)

916 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_acquúe
)

917 
	#AO_sh‹t_„tch_™d_add1_acquúe
(
addr
) \

918 
	`AO_sh‹t_„tch_™d_add1_fuŒ
(
addr
)

	)

919 
	#AO_HAVE_sh‹t_„tch_™d_add1_acquúe


	)

921 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_wrôe
)

922 
	#AO_sh‹t_„tch_™d_add1_wrôe
(
addr
) \

923 
	`AO_sh‹t_„tch_™d_add1_fuŒ
(
addr
)

	)

924 
	#AO_HAVE_sh‹t_„tch_™d_add1_wrôe


	)

926 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_ªad
)

927 
	#AO_sh‹t_„tch_™d_add1_ªad
(
addr
) \

928 
	`AO_sh‹t_„tch_™d_add1_fuŒ
(
addr
)

	)

929 
	#AO_HAVE_sh‹t_„tch_™d_add1_ªad


	)

933 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add1
) && \

934 
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_ªÀa£
)

935 
	#AO_sh‹t_„tch_™d_add1
(
addr
) \

936 
	`AO_sh‹t_„tch_™d_add1_ªÀa£
(
addr
)

	)

937 
	#AO_HAVE_sh‹t_„tch_™d_add1


	)

939 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add1
) && \

940 
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_acquúe
)

941 
	#AO_sh‹t_„tch_™d_add1
(
addr
) \

942 
	`AO_sh‹t_„tch_™d_add1_acquúe
(
addr
)

	)

943 
	#AO_HAVE_sh‹t_„tch_™d_add1


	)

945 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add1
) && \

946 
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_wrôe
)

947 
	#AO_sh‹t_„tch_™d_add1
(
addr
) \

948 
	`AO_sh‹t_„tch_™d_add1_wrôe
(
addr
)

	)

949 
	#AO_HAVE_sh‹t_„tch_™d_add1


	)

951 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add1
) && \

952 
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_ªad
)

953 
	#AO_sh‹t_„tch_™d_add1
(
addr
) \

954 
	`AO_sh‹t_„tch_™d_add1_ªad
(
addr
)

	)

955 
	#AO_HAVE_sh‹t_„tch_™d_add1


	)

958 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_acquúe
) &&\

959 
	`deföed
(
AO_HAVE_n›_fuŒ
) && \

960 !
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_fuŒ
)

961 
	#AO_sh‹t_„tch_™d_add1_fuŒ
(
addr
) \

962 (
	`AO_n›_fuŒ
(), 
	`AO_sh‹t_„tch_™d_add1_acquúe
(
addr
))

	)

963 
	#AO_HAVE_sh‹t_„tch_™d_add1_fuŒ


	)

966 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_ªÀa£_wrôe
) && \

967 
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_wrôe
)

968 
	#AO_sh‹t_„tch_™d_add1_ªÀa£_wrôe
(
addr
) \

969 
	`AO_sh‹t_„tch_™d_add1_wrôe
(
addr
)

	)

970 
	#AO_HAVE_sh‹t_„tch_™d_add1_ªÀa£_wrôe


	)

972 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_ªÀa£_wrôe
) && \

973 
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_ªÀa£
)

974 
	#AO_sh‹t_„tch_™d_add1_ªÀa£_wrôe
(
addr
) \

975 
	`AO_sh‹t_„tch_™d_add1_ªÀa£
(
addr
)

	)

976 
	#AO_HAVE_sh‹t_„tch_™d_add1_ªÀa£_wrôe


	)

978 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_acquúe_ªad
) && \

979 
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_ªad
)

980 
	#AO_sh‹t_„tch_™d_add1_acquúe_ªad
(
addr
) \

981 
	`AO_sh‹t_„tch_™d_add1_ªad
(
addr
)

	)

982 
	#AO_HAVE_sh‹t_„tch_™d_add1_acquúe_ªad


	)

984 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_acquúe_ªad
) && \

985 
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_acquúe
)

986 
	#AO_sh‹t_„tch_™d_add1_acquúe_ªad
(
addr
) \

987 
	`AO_sh‹t_„tch_™d_add1_acquúe
(
addr
)

	)

988 
	#AO_HAVE_sh‹t_„tch_™d_add1_acquúe_ªad


	)

991 #ifde‡
AO_NO_DD_ORDERING


992 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_acquúe_ªad
)

993 
	#AO_sh‹t_„tch_™d_add1_dd_acquúe_ªad
(
addr
) \

994 
	`AO_sh‹t_„tch_™d_add1_acquúe_ªad
(
addr
)

	)

995 
	#AO_HAVE_sh‹t_„tch_™d_add1_dd_acquúe_ªad


	)

998 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add1
)

999 
	#AO_sh‹t_„tch_™d_add1_dd_acquúe_ªad
(
addr
) \

1000 
	`AO_sh‹t_„tch_™d_add1
(
addr
)

	)

1001 
	#AO_HAVE_sh‹t_„tch_™d_add1_dd_acquúe_ªad


	)

1007 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add_fuŒ
) &&\

1008 !
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_fuŒ
)

1009 
	#AO_sh‹t_„tch_™d_sub1_fuŒ
(
addr
) \

1010 
	`AO_sh‹t_„tch_™d_add_fuŒ
(
addr
,()(-1))

	)

1011 
	#AO_HAVE_sh‹t_„tch_™d_sub1_fuŒ


	)

1013 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add_ªÀa£
) &&\

1014 !
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_ªÀa£
)

1015 
	#AO_sh‹t_„tch_™d_sub1_ªÀa£
(
addr
) \

1016 
	`AO_sh‹t_„tch_™d_add_ªÀa£
(
addr
,()(-1))

	)

1017 
	#AO_HAVE_sh‹t_„tch_™d_sub1_ªÀa£


	)

1019 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add_acquúe
) &&\

1020 !
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_acquúe
)

1021 
	#AO_sh‹t_„tch_™d_sub1_acquúe
(
addr
) \

1022 
	`AO_sh‹t_„tch_™d_add_acquúe
(
addr
,()(-1))

	)

1023 
	#AO_HAVE_sh‹t_„tch_™d_sub1_acquúe


	)

1025 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add_wrôe
) &&\

1026 !
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_wrôe
)

1027 
	#AO_sh‹t_„tch_™d_sub1_wrôe
(
addr
) \

1028 
	`AO_sh‹t_„tch_™d_add_wrôe
(
addr
,()(-1))

	)

1029 
	#AO_HAVE_sh‹t_„tch_™d_sub1_wrôe


	)

1031 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add_ªad
) &&\

1032 !
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_ªad
)

1033 
	#AO_sh‹t_„tch_™d_sub1_ªad
(
addr
) \

1034 
	`AO_sh‹t_„tch_™d_add_ªad
(
addr
,()(-1))

	)

1035 
	#AO_HAVE_sh‹t_„tch_™d_sub1_ªad


	)

1037 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add_ªÀa£_wrôe
) &&\

1038 !
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_ªÀa£_wrôe
)

1039 
	#AO_sh‹t_„tch_™d_sub1_ªÀa£_wrôe
(
addr
) \

1040 
	`AO_sh‹t_„tch_™d_add_ªÀa£_wrôe
(
addr
,()(-1))

	)

1041 
	#AO_HAVE_sh‹t_„tch_™d_sub1_ªÀa£_wrôe


	)

1043 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add_acquúe_ªad
) &&\

1044 !
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_acquúe_ªad
)

1045 
	#AO_sh‹t_„tch_™d_sub1_acquúe_ªad
(
addr
) \

1046 
	`AO_sh‹t_„tch_™d_add_acquúe_ªad
(
addr
,()(-1))

	)

1047 
	#AO_HAVE_sh‹t_„tch_™d_sub1_acquúe_ªad


	)

1049 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add
) &&\

1050 !
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1
)

1051 
	#AO_sh‹t_„tch_™d_sub1
(
addr
) \

1052 
	`AO_sh‹t_„tch_™d_add
(
addr
,()(-1))

	)

1053 
	#AO_HAVE_sh‹t_„tch_™d_sub1


	)

1056 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_fuŒ
)

1057 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_ªÀa£
)

1058 
	#AO_sh‹t_„tch_™d_sub1_ªÀa£
(
addr
) \

1059 
	`AO_sh‹t_„tch_™d_sub1_fuŒ
(
addr
)

	)

1060 
	#AO_HAVE_sh‹t_„tch_™d_sub1_ªÀa£


	)

1062 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_acquúe
)

1063 
	#AO_sh‹t_„tch_™d_sub1_acquúe
(
addr
) \

1064 
	`AO_sh‹t_„tch_™d_sub1_fuŒ
(
addr
)

	)

1065 
	#AO_HAVE_sh‹t_„tch_™d_sub1_acquúe


	)

1067 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_wrôe
)

1068 
	#AO_sh‹t_„tch_™d_sub1_wrôe
(
addr
) \

1069 
	`AO_sh‹t_„tch_™d_sub1_fuŒ
(
addr
)

	)

1070 
	#AO_HAVE_sh‹t_„tch_™d_sub1_wrôe


	)

1072 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_ªad
)

1073 
	#AO_sh‹t_„tch_™d_sub1_ªad
(
addr
) \

1074 
	`AO_sh‹t_„tch_™d_sub1_fuŒ
(
addr
)

	)

1075 
	#AO_HAVE_sh‹t_„tch_™d_sub1_ªad


	)

1079 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1
) && \

1080 
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_ªÀa£
)

1081 
	#AO_sh‹t_„tch_™d_sub1
(
addr
) \

1082 
	`AO_sh‹t_„tch_™d_sub1_ªÀa£
(
addr
)

	)

1083 
	#AO_HAVE_sh‹t_„tch_™d_sub1


	)

1085 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1
) && \

1086 
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_acquúe
)

1087 
	#AO_sh‹t_„tch_™d_sub1
(
addr
) \

1088 
	`AO_sh‹t_„tch_™d_sub1_acquúe
(
addr
)

	)

1089 
	#AO_HAVE_sh‹t_„tch_™d_sub1


	)

1091 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1
) && \

1092 
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_wrôe
)

1093 
	#AO_sh‹t_„tch_™d_sub1
(
addr
) \

1094 
	`AO_sh‹t_„tch_™d_sub1_wrôe
(
addr
)

	)

1095 
	#AO_HAVE_sh‹t_„tch_™d_sub1


	)

1097 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1
) && \

1098 
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_ªad
)

1099 
	#AO_sh‹t_„tch_™d_sub1
(
addr
) \

1100 
	`AO_sh‹t_„tch_™d_sub1_ªad
(
addr
)

	)

1101 
	#AO_HAVE_sh‹t_„tch_™d_sub1


	)

1104 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_acquúe
) &&\

1105 
	`deföed
(
AO_HAVE_n›_fuŒ
) && \

1106 !
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_fuŒ
)

1107 
	#AO_sh‹t_„tch_™d_sub1_fuŒ
(
addr
) \

1108 (
	`AO_n›_fuŒ
(), 
	`AO_sh‹t_„tch_™d_sub1_acquúe
(
addr
))

	)

1109 
	#AO_HAVE_sh‹t_„tch_™d_sub1_fuŒ


	)

1112 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_ªÀa£_wrôe
) && \

1113 
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_wrôe
)

1114 
	#AO_sh‹t_„tch_™d_sub1_ªÀa£_wrôe
(
addr
) \

1115 
	`AO_sh‹t_„tch_™d_sub1_wrôe
(
addr
)

	)

1116 
	#AO_HAVE_sh‹t_„tch_™d_sub1_ªÀa£_wrôe


	)

1118 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_ªÀa£_wrôe
) && \

1119 
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_ªÀa£
)

1120 
	#AO_sh‹t_„tch_™d_sub1_ªÀa£_wrôe
(
addr
) \

1121 
	`AO_sh‹t_„tch_™d_sub1_ªÀa£
(
addr
)

	)

1122 
	#AO_HAVE_sh‹t_„tch_™d_sub1_ªÀa£_wrôe


	)

1124 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_acquúe_ªad
) && \

1125 
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_ªad
)

1126 
	#AO_sh‹t_„tch_™d_sub1_acquúe_ªad
(
addr
) \

1127 
	`AO_sh‹t_„tch_™d_sub1_ªad
(
addr
)

	)

1128 
	#AO_HAVE_sh‹t_„tch_™d_sub1_acquúe_ªad


	)

1130 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_acquúe_ªad
) && \

1131 
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_acquúe
)

1132 
	#AO_sh‹t_„tch_™d_sub1_acquúe_ªad
(
addr
) \

1133 
	`AO_sh‹t_„tch_™d_sub1_acquúe
(
addr
)

	)

1134 
	#AO_HAVE_sh‹t_„tch_™d_sub1_acquúe_ªad


	)

1137 #ifde‡
AO_NO_DD_ORDERING


1138 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_acquúe_ªad
)

1139 
	#AO_sh‹t_„tch_™d_sub1_dd_acquúe_ªad
(
addr
) \

1140 
	`AO_sh‹t_„tch_™d_sub1_acquúe_ªad
(
addr
)

	)

1141 
	#AO_HAVE_sh‹t_„tch_™d_sub1_dd_acquúe_ªad


	)

1144 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1
)

1145 
	#AO_sh‹t_„tch_™d_sub1_dd_acquúe_ªad
(
addr
) \

1146 
	`AO_sh‹t_„tch_™d_sub1
(
addr
)

	)

1147 
	#AO_HAVE_sh‹t_„tch_™d_sub1_dd_acquúe_ªad


	)

1152 #i‡
	`deföed
(
AO_HAVE_öt_lﬂd_acquúe
Ë&& !deföed(
AO_HAVE_öt_lﬂd
)

1153 
	#AO_öt_lﬂd
(
addr
Ë
	`AO_öt_lﬂd_acquúe
◊ddr)

	)

1154 
	#AO_HAVE_öt_lﬂd


	)

1157 #i‡
	`deföed
(
AO_HAVE_öt_lﬂd_fuŒ
Ë&& !deföed(
AO_HAVE_öt_lﬂd_acquúe
)

1158 
	#AO_öt_lﬂd_acquúe
(
addr
Ë
	`AO_öt_lﬂd_fuŒ
◊ddr)

	)

1159 
	#AO_HAVE_öt_lﬂd_acquúe


	)

1162 #i‡
	`deföed
(
AO_HAVE_öt_lﬂd_fuŒ
Ë&& !deföed(
AO_HAVE_öt_lﬂd_ªad
)

1163 
	#AO_öt_lﬂd_ªad
(
addr
Ë
	`AO_öt_lﬂd_fuŒ
◊ddr)

	)

1164 
	#AO_HAVE_öt_lﬂd_ªad


	)

1167 #i‡!
	`deföed
(
AO_HAVE_öt_lﬂd_acquúe_ªad
Ë&& deföed(
AO_HAVE_öt_lﬂd_acquúe
)

1168 
	#AO_öt_lﬂd_acquúe_ªad
(
addr
Ë
	`AO_öt_lﬂd_acquúe
◊ddr)

	)

1169 
	#AO_HAVE_öt_lﬂd_acquúe_ªad


	)

1172 #i‡
	`deföed
(
AO_HAVE_öt_lﬂd
Ë&& deföed(
AO_HAVE_n›_fuŒ
) && \

1173 !
	$deföed
(
AO_HAVE_öt_lﬂd_acquúe
)

1174 
AO_INLINE
 

1175 
	$AO_öt_lﬂd_acquúe
(c⁄° vﬁ©ûê*
addr
)

1177 
ªsu…
 = 
	`AO_öt_lﬂd
(
addr
);

1180 
	`AO_n›_fuŒ
();

1181  
ªsu…
;

1182 
	}
}

1183 
	#AO_HAVE_öt_lﬂd_acquúe


	)

1186 #i‡
deföed
(
AO_HAVE_öt_lﬂd
Ë&& deföed(
AO_HAVE_n›_ªad
) && \

1187 !
	$deföed
(
AO_HAVE_öt_lﬂd_ªad
)

1188 
AO_INLINE
 

1189 
	$AO_öt_lﬂd_ªad
(c⁄° vﬁ©ûê*
addr
)

1191 
ªsu…
 = 
	`AO_öt_lﬂd
(
addr
);

1194 
	`AO_n›_ªad
();

1195  
ªsu…
;

1196 
	}
}

1197 
	#AO_HAVE_öt_lﬂd_ªad


	)

1200 #i‡
deföed
(
AO_HAVE_öt_lﬂd_acquúe
Ë&& deföed(
AO_HAVE_n›_fuŒ
) && \

1201 !
	$deföed
(
AO_HAVE_öt_lﬂd_fuŒ
)

1202 
	#AO_öt_lﬂd_fuŒ
(
addr
Ë(
	`AO_n›_fuŒ
(), 
	`AO_öt_lﬂd_acquúe
◊ddr))

	)

1203 
	#AO_HAVE_öt_lﬂd_fuŒ


	)

1206 #i‡!
	`deföed
(
AO_HAVE_öt_lﬂd_acquúe_ªad
Ë&& deföed(
AO_HAVE_öt_lﬂd_ªad
)

1207 
	#AO_öt_lﬂd_acquúe_ªad
(
addr
Ë
	`AO_öt_lﬂd_ªad
◊ddr)

	)

1208 
	#AO_HAVE_öt_lﬂd_acquúe_ªad


	)

1211 #i‡
	`deföed
(
AO_HAVE_öt_lﬂd_acquúe_ªad
Ë&& !deföed(
AO_HAVE_öt_lﬂd
)

1212 
	#AO_öt_lﬂd
(
addr
Ë
	`AO_öt_lﬂd_acquúe_ªad
◊ddr)

	)

1213 
	#AO_HAVE_öt_lﬂd


	)

1216 #ifde‡
AO_NO_DD_ORDERING


1217 #i‡
	`deföed
(
AO_HAVE_öt_lﬂd_acquúe_ªad
)

1218 
	#AO_öt_lﬂd_dd_acquúe_ªad
(
addr
) \

1219 
	`AO_öt_lﬂd_acquúe_ªad
(
addr
)

	)

1220 
	#AO_HAVE_öt_lﬂd_dd_acquúe_ªad


	)

1223 #i‡
	`deföed
(
AO_HAVE_öt_lﬂd
)

1224 
	#AO_öt_lﬂd_dd_acquúe_ªad
(
addr
) \

1225 
	`AO_öt_lﬂd
(
addr
)

	)

1226 
	#AO_HAVE_öt_lﬂd_dd_acquúe_ªad


	)

1233 #i‡
	`deföed
(
AO_HAVE_öt_°‹e_ªÀa£
Ë&& !deföed(
AO_HAVE_öt_°‹e
)

1234 
	#AO_öt_°‹e
(
addr
, 
vÆ
Ë
	`AO_öt_°‹e_ªÀa£
◊ddr,vÆ)

	)

1235 
	#AO_HAVE_öt_°‹e


	)

1238 #i‡
	`deföed
(
AO_HAVE_öt_°‹e_fuŒ
Ë&& !deföed(
AO_HAVE_öt_°‹e_ªÀa£
)

1239 
	#AO_öt_°‹e_ªÀa£
(
addr
,
vÆ
Ë
	`AO_öt_°‹e_fuŒ
◊ddr,vÆ)

	)

1240 
	#AO_HAVE_öt_°‹e_ªÀa£


	)

1243 #i‡
	`deföed
(
AO_HAVE_öt_°‹e_fuŒ
Ë&& !deföed(
AO_HAVE_öt_°‹e_wrôe
)

1244 
	#AO_öt_°‹e_wrôe
(
addr
,
vÆ
Ë
	`AO_öt_°‹e_fuŒ
◊ddr,vÆ)

	)

1245 
	#AO_HAVE_öt_°‹e_wrôe


	)

1248 #i‡
	`deföed
(
AO_HAVE_öt_°‹e_ªÀa£
) && \

1249 !
	$deföed
(
AO_HAVE_öt_°‹e_ªÀa£_wrôe
)

1250 
	#AO_öt_°‹e_ªÀa£_wrôe
(
addr
, 
vÆ
) \

1251 
	`AO_öt_°‹e_ªÀa£
(
addr
,
vÆ
)

	)

1252 
	#AO_HAVE_öt_°‹e_ªÀa£_wrôe


	)

1255 #i‡
	`deföed
(
AO_HAVE_öt_°‹e_wrôe
Ë&& !deföed(
AO_HAVE_öt_°‹e
)

1256 
	#AO_öt_°‹e
(
addr
, 
vÆ
Ë
	`AO_öt_°‹e_wrôe
◊ddr,vÆ)

	)

1257 
	#AO_HAVE_öt_°‹e


	)

1260 #i‡
	`deföed
(
AO_HAVE_öt_°‹e
Ë&& deföed(
AO_HAVE_n›_fuŒ
) && \

1261 !
	$deföed
(
AO_HAVE_öt_°‹e_ªÀa£
)

1262 
	#AO_öt_°‹e_ªÀa£
(
addr
,
vÆ
) \

1263 (
	`AO_n›_fuŒ
(), 
	`AO_öt_°‹e
(
addr
,
vÆ
))

	)

1264 
	#AO_HAVE_öt_°‹e_ªÀa£


	)

1267 #i‡
	`deföed
(
AO_HAVE_n›_wrôe
Ë&& deföed(
AO_HAVE_öt_°‹e
) && \

1268 !
	$deföed
(
AO_HAVE_öt_°‹e_wrôe
)

1269 
	#AO_öt_°‹e_wrôe
(
addr
, 
vÆ
) \

1270 (
	`AO_n›_wrôe
(), 
	`AO_öt_°‹e
(
addr
,
vÆ
))

	)

1271 
	#AO_HAVE_öt_°‹e_wrôe


	)

1274 #i‡
	`deföed
(
AO_HAVE_öt_°‹e_wrôe
) && \

1275 !
	$deföed
(
AO_HAVE_öt_°‹e_ªÀa£_wrôe
)

1276 
	#AO_öt_°‹e_ªÀa£_wrôe
(
addr
, 
vÆ
Ë
	`AO_öt_°‹e_wrôe
◊ddr,vÆ)

	)

1277 
	#AO_HAVE_öt_°‹e_ªÀa£_wrôe


	)

1280 #i‡
	`deföed
(
AO_HAVE_öt_°‹e_ªÀa£
Ë&& deföed(
AO_HAVE_n›_fuŒ
) && \

1281 !
	$deföed
(
AO_HAVE_öt_°‹e_fuŒ
)

1282 
	#AO_öt_°‹e_fuŒ
(
addr
, 
vÆ
) \

1283 (
	`AO_öt_°‹e_ªÀa£
(
addr
, 
vÆ
), 
	`AO_n›_fuŒ
())

	)

1284 
	#AO_HAVE_öt_°‹e_fuŒ


	)

1289 #i‡
	`deföed
(
AO_HAVE_öt_com∑ª_™d_sw≠_fuŒ
) && \

1290 !
	$deföed
(
AO_HAVE_öt_„tch_™d_add_fuŒ
)

1291 
AO_INLINE
 
AO_t


1292 
	$AO_öt_„tch_™d_add_fuŒ
(vﬁ©ûê*
addr
,

1293 
ö¸
)

1295 
ﬁd
;

1298 
ﬁd
 = *
addr
;

1300 !
	`AO_öt_com∑ª_™d_sw≠_fuŒ
(
addr
, 
ﬁd
, old+
ö¸
));

1301  
ﬁd
;

1302 
	}
}

1303 
	#AO_HAVE_öt_„tch_™d_add_fuŒ


	)

1306 #i‡
deföed
(
AO_HAVE_öt_com∑ª_™d_sw≠_acquúe
) && \

1307 !
	$deföed
(
AO_HAVE_öt_„tch_™d_add_acquúe
)

1308 
AO_INLINE
 
AO_t


1309 
	$AO_öt_„tch_™d_add_acquúe
(vﬁ©ûê*
addr
,

1310 
ö¸
)

1312 
ﬁd
;

1315 
ﬁd
 = *
addr
;

1317 !
	`AO_öt_com∑ª_™d_sw≠_acquúe
(
addr
, 
ﬁd
, old+
ö¸
));

1318  
ﬁd
;

1319 
	}
}

1320 
	#AO_HAVE_öt_„tch_™d_add_acquúe


	)

1323 #i‡
deföed
(
AO_HAVE_öt_com∑ª_™d_sw≠_ªÀa£
) && \

1324 !
	$deföed
(
AO_HAVE_öt_„tch_™d_add_ªÀa£
)

1325 
AO_INLINE
 
AO_t


1326 
	$AO_öt_„tch_™d_add_ªÀa£
(vﬁ©ûê*
addr
,

1327 
ö¸
)

1329 
ﬁd
;

1332 
ﬁd
 = *
addr
;

1334 !
	`AO_öt_com∑ª_™d_sw≠_ªÀa£
(
addr
, 
ﬁd
, old+
ö¸
));

1335  
ﬁd
;

1336 
	}
}

1337 
	#AO_HAVE_öt_„tch_™d_add_ªÀa£


	)

1340 #i‡
deföed
(
AO_HAVE_öt_„tch_™d_add_fuŒ
)

1341 #i‡!
deföed
(
AO_HAVE_öt_„tch_™d_add_ªÀa£
)

1342 
	#AO_öt_„tch_™d_add_ªÀa£
(
addr
, 
vÆ
) \

1343 
	`AO_öt_„tch_™d_add_fuŒ
(
addr
, 
vÆ
)

	)

1344 
	#AO_HAVE_öt_„tch_™d_add_ªÀa£


	)

1346 #i‡!
deföed
(
AO_HAVE_öt_„tch_™d_add_acquúe
)

1347 
	#AO_öt_„tch_™d_add_acquúe
(
addr
, 
vÆ
) \

1348 
	`AO_öt_„tch_™d_add_fuŒ
(
addr
, 
vÆ
)

	)

1349 
	#AO_HAVE_öt_„tch_™d_add_acquúe


	)

1351 #i‡!
deföed
(
AO_HAVE_öt_„tch_™d_add_wrôe
)

1352 
	#AO_öt_„tch_™d_add_wrôe
(
addr
, 
vÆ
) \

1353 
	`AO_öt_„tch_™d_add_fuŒ
(
addr
, 
vÆ
)

	)

1354 
	#AO_HAVE_öt_„tch_™d_add_wrôe


	)

1356 #i‡!
deföed
(
AO_HAVE_öt_„tch_™d_add_ªad
)

1357 
	#AO_öt_„tch_™d_add_ªad
(
addr
, 
vÆ
) \

1358 
	`AO_öt_„tch_™d_add_fuŒ
(
addr
, 
vÆ
)

	)

1359 
	#AO_HAVE_öt_„tch_™d_add_ªad


	)

1363 #i‡!
deföed
(
AO_HAVE_öt_„tch_™d_add
) && \

1364 
	$deföed
(
AO_HAVE_öt_„tch_™d_add_ªÀa£
)

1365 
	#AO_öt_„tch_™d_add
(
addr
, 
vÆ
) \

1366 
	`AO_öt_„tch_™d_add_ªÀa£
(
addr
, 
vÆ
)

	)

1367 
	#AO_HAVE_öt_„tch_™d_add


	)

1369 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_add
) && \

1370 
	$deföed
(
AO_HAVE_öt_„tch_™d_add_acquúe
)

1371 
	#AO_öt_„tch_™d_add
(
addr
, 
vÆ
) \

1372 
	`AO_öt_„tch_™d_add_acquúe
(
addr
, 
vÆ
)

	)

1373 
	#AO_HAVE_öt_„tch_™d_add


	)

1375 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_add
) && \

1376 
	$deföed
(
AO_HAVE_öt_„tch_™d_add_wrôe
)

1377 
	#AO_öt_„tch_™d_add
(
addr
, 
vÆ
) \

1378 
	`AO_öt_„tch_™d_add_wrôe
(
addr
, 
vÆ
)

	)

1379 
	#AO_HAVE_öt_„tch_™d_add


	)

1381 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_add
) && \

1382 
	$deföed
(
AO_HAVE_öt_„tch_™d_add_ªad
)

1383 
	#AO_öt_„tch_™d_add
(
addr
, 
vÆ
) \

1384 
	`AO_öt_„tch_™d_add_ªad
(
addr
, 
vÆ
)

	)

1385 
	#AO_HAVE_öt_„tch_™d_add


	)

1388 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add_acquúe
) &&\

1389 
	`deföed
(
AO_HAVE_n›_fuŒ
) && \

1390 !
	$deföed
(
AO_HAVE_öt_„tch_™d_add_fuŒ
)

1391 
	#AO_öt_„tch_™d_add_fuŒ
(
addr
, 
vÆ
) \

1392 (
	`AO_n›_fuŒ
(), 
	`AO_öt_„tch_™d_add_acquúe
(
addr
, 
vÆ
))

	)

1395 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_add_ªÀa£_wrôe
) && \

1396 
	$deföed
(
AO_HAVE_öt_„tch_™d_add_wrôe
)

1397 
	#AO_öt_„tch_™d_add_ªÀa£_wrôe
(
addr
, 
vÆ
) \

1398 
	`AO_öt_„tch_™d_add_wrôe
(
addr
, 
vÆ
)

	)

1399 
	#AO_HAVE_öt_„tch_™d_add_ªÀa£_wrôe


	)

1401 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_add_ªÀa£_wrôe
) && \

1402 
	$deföed
(
AO_HAVE_öt_„tch_™d_add_ªÀa£
)

1403 
	#AO_öt_„tch_™d_add_ªÀa£_wrôe
(
addr
, 
vÆ
) \

1404 
	`AO_öt_„tch_™d_add_ªÀa£
(
addr
, 
vÆ
)

	)

1405 
	#AO_HAVE_öt_„tch_™d_add_ªÀa£_wrôe


	)

1407 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_add_acquúe_ªad
) && \

1408 
	$deföed
(
AO_HAVE_öt_„tch_™d_add_ªad
)

1409 
	#AO_öt_„tch_™d_add_acquúe_ªad
(
addr
, 
vÆ
) \

1410 
	`AO_öt_„tch_™d_add_ªad
(
addr
, 
vÆ
)

	)

1411 
	#AO_HAVE_öt_„tch_™d_add_acquúe_ªad


	)

1413 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_add_acquúe_ªad
) && \

1414 
	$deföed
(
AO_HAVE_öt_„tch_™d_add_acquúe
)

1415 
	#AO_öt_„tch_™d_add_acquúe_ªad
(
addr
, 
vÆ
) \

1416 
	`AO_öt_„tch_™d_add_acquúe
(
addr
, 
vÆ
)

	)

1417 
	#AO_HAVE_öt_„tch_™d_add_acquúe_ªad


	)

1420 #ifde‡
AO_NO_DD_ORDERING


1421 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add_acquúe_ªad
)

1422 
	#AO_öt_„tch_™d_add_dd_acquúe_ªad
(
addr
, 
vÆ
) \

1423 
	`AO_öt_„tch_™d_add_acquúe_ªad
(
addr
, 
vÆ
)

	)

1424 
	#AO_HAVE_öt_„tch_™d_add_dd_acquúe_ªad


	)

1427 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add
)

1428 
	#AO_öt_„tch_™d_add_dd_acquúe_ªad
(
addr
, 
vÆ
) \

1429 
	`AO_öt_„tch_™d_add
(
addr
, 
vÆ
)

	)

1430 
	#AO_HAVE_öt_„tch_™d_add_dd_acquúe_ªad


	)

1436 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add_fuŒ
) &&\

1437 !
	$deföed
(
AO_HAVE_öt_„tch_™d_add1_fuŒ
)

1438 
	#AO_öt_„tch_™d_add1_fuŒ
(
addr
) \

1439 
	`AO_öt_„tch_™d_add_fuŒ
(
addr
,1)

	)

1440 
	#AO_HAVE_öt_„tch_™d_add1_fuŒ


	)

1442 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add_ªÀa£
) &&\

1443 !
	$deföed
(
AO_HAVE_öt_„tch_™d_add1_ªÀa£
)

1444 
	#AO_öt_„tch_™d_add1_ªÀa£
(
addr
) \

1445 
	`AO_öt_„tch_™d_add_ªÀa£
(
addr
,1)

	)

1446 
	#AO_HAVE_öt_„tch_™d_add1_ªÀa£


	)

1448 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add_acquúe
) &&\

1449 !
	$deföed
(
AO_HAVE_öt_„tch_™d_add1_acquúe
)

1450 
	#AO_öt_„tch_™d_add1_acquúe
(
addr
) \

1451 
	`AO_öt_„tch_™d_add_acquúe
(
addr
,1)

	)

1452 
	#AO_HAVE_öt_„tch_™d_add1_acquúe


	)

1454 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add_wrôe
) &&\

1455 !
	$deföed
(
AO_HAVE_öt_„tch_™d_add1_wrôe
)

1456 
	#AO_öt_„tch_™d_add1_wrôe
(
addr
) \

1457 
	`AO_öt_„tch_™d_add_wrôe
(
addr
,1)

	)

1458 
	#AO_HAVE_öt_„tch_™d_add1_wrôe


	)

1460 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add_ªad
) &&\

1461 !
	$deföed
(
AO_HAVE_öt_„tch_™d_add1_ªad
)

1462 
	#AO_öt_„tch_™d_add1_ªad
(
addr
) \

1463 
	`AO_öt_„tch_™d_add_ªad
(
addr
,1)

	)

1464 
	#AO_HAVE_öt_„tch_™d_add1_ªad


	)

1466 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add_ªÀa£_wrôe
) &&\

1467 !
	$deföed
(
AO_HAVE_öt_„tch_™d_add1_ªÀa£_wrôe
)

1468 
	#AO_öt_„tch_™d_add1_ªÀa£_wrôe
(
addr
) \

1469 
	`AO_öt_„tch_™d_add_ªÀa£_wrôe
(
addr
,1)

	)

1470 
	#AO_HAVE_öt_„tch_™d_add1_ªÀa£_wrôe


	)

1472 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add_acquúe_ªad
) &&\

1473 !
	$deföed
(
AO_HAVE_öt_„tch_™d_add1_acquúe_ªad
)

1474 
	#AO_öt_„tch_™d_add1_acquúe_ªad
(
addr
) \

1475 
	`AO_öt_„tch_™d_add_acquúe_ªad
(
addr
,1)

	)

1476 
	#AO_HAVE_öt_„tch_™d_add1_acquúe_ªad


	)

1478 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add
) &&\

1479 !
	$deföed
(
AO_HAVE_öt_„tch_™d_add1
)

1480 
	#AO_öt_„tch_™d_add1
(
addr
) \

1481 
	`AO_öt_„tch_™d_add
(
addr
,1)

	)

1482 
	#AO_HAVE_öt_„tch_™d_add1


	)

1485 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add1_fuŒ
)

1486 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_add1_ªÀa£
)

1487 
	#AO_öt_„tch_™d_add1_ªÀa£
(
addr
) \

1488 
	`AO_öt_„tch_™d_add1_fuŒ
(
addr
)

	)

1489 
	#AO_HAVE_öt_„tch_™d_add1_ªÀa£


	)

1491 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_add1_acquúe
)

1492 
	#AO_öt_„tch_™d_add1_acquúe
(
addr
) \

1493 
	`AO_öt_„tch_™d_add1_fuŒ
(
addr
)

	)

1494 
	#AO_HAVE_öt_„tch_™d_add1_acquúe


	)

1496 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_add1_wrôe
)

1497 
	#AO_öt_„tch_™d_add1_wrôe
(
addr
) \

1498 
	`AO_öt_„tch_™d_add1_fuŒ
(
addr
)

	)

1499 
	#AO_HAVE_öt_„tch_™d_add1_wrôe


	)

1501 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_add1_ªad
)

1502 
	#AO_öt_„tch_™d_add1_ªad
(
addr
) \

1503 
	`AO_öt_„tch_™d_add1_fuŒ
(
addr
)

	)

1504 
	#AO_HAVE_öt_„tch_™d_add1_ªad


	)

1508 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_add1
) && \

1509 
	$deföed
(
AO_HAVE_öt_„tch_™d_add1_ªÀa£
)

1510 
	#AO_öt_„tch_™d_add1
(
addr
) \

1511 
	`AO_öt_„tch_™d_add1_ªÀa£
(
addr
)

	)

1512 
	#AO_HAVE_öt_„tch_™d_add1


	)

1514 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_add1
) && \

1515 
	$deföed
(
AO_HAVE_öt_„tch_™d_add1_acquúe
)

1516 
	#AO_öt_„tch_™d_add1
(
addr
) \

1517 
	`AO_öt_„tch_™d_add1_acquúe
(
addr
)

	)

1518 
	#AO_HAVE_öt_„tch_™d_add1


	)

1520 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_add1
) && \

1521 
	$deföed
(
AO_HAVE_öt_„tch_™d_add1_wrôe
)

1522 
	#AO_öt_„tch_™d_add1
(
addr
) \

1523 
	`AO_öt_„tch_™d_add1_wrôe
(
addr
)

	)

1524 
	#AO_HAVE_öt_„tch_™d_add1


	)

1526 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_add1
) && \

1527 
	$deföed
(
AO_HAVE_öt_„tch_™d_add1_ªad
)

1528 
	#AO_öt_„tch_™d_add1
(
addr
) \

1529 
	`AO_öt_„tch_™d_add1_ªad
(
addr
)

	)

1530 
	#AO_HAVE_öt_„tch_™d_add1


	)

1533 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add1_acquúe
) &&\

1534 
	`deföed
(
AO_HAVE_n›_fuŒ
) && \

1535 !
	$deföed
(
AO_HAVE_öt_„tch_™d_add1_fuŒ
)

1536 
	#AO_öt_„tch_™d_add1_fuŒ
(
addr
) \

1537 (
	`AO_n›_fuŒ
(), 
	`AO_öt_„tch_™d_add1_acquúe
(
addr
))

	)

1538 
	#AO_HAVE_öt_„tch_™d_add1_fuŒ


	)

1541 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_add1_ªÀa£_wrôe
) && \

1542 
	$deföed
(
AO_HAVE_öt_„tch_™d_add1_wrôe
)

1543 
	#AO_öt_„tch_™d_add1_ªÀa£_wrôe
(
addr
) \

1544 
	`AO_öt_„tch_™d_add1_wrôe
(
addr
)

	)

1545 
	#AO_HAVE_öt_„tch_™d_add1_ªÀa£_wrôe


	)

1547 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_add1_ªÀa£_wrôe
) && \

1548 
	$deföed
(
AO_HAVE_öt_„tch_™d_add1_ªÀa£
)

1549 
	#AO_öt_„tch_™d_add1_ªÀa£_wrôe
(
addr
) \

1550 
	`AO_öt_„tch_™d_add1_ªÀa£
(
addr
)

	)

1551 
	#AO_HAVE_öt_„tch_™d_add1_ªÀa£_wrôe


	)

1553 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_add1_acquúe_ªad
) && \

1554 
	$deföed
(
AO_HAVE_öt_„tch_™d_add1_ªad
)

1555 
	#AO_öt_„tch_™d_add1_acquúe_ªad
(
addr
) \

1556 
	`AO_öt_„tch_™d_add1_ªad
(
addr
)

	)

1557 
	#AO_HAVE_öt_„tch_™d_add1_acquúe_ªad


	)

1559 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_add1_acquúe_ªad
) && \

1560 
	$deföed
(
AO_HAVE_öt_„tch_™d_add1_acquúe
)

1561 
	#AO_öt_„tch_™d_add1_acquúe_ªad
(
addr
) \

1562 
	`AO_öt_„tch_™d_add1_acquúe
(
addr
)

	)

1563 
	#AO_HAVE_öt_„tch_™d_add1_acquúe_ªad


	)

1566 #ifde‡
AO_NO_DD_ORDERING


1567 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add1_acquúe_ªad
)

1568 
	#AO_öt_„tch_™d_add1_dd_acquúe_ªad
(
addr
) \

1569 
	`AO_öt_„tch_™d_add1_acquúe_ªad
(
addr
)

	)

1570 
	#AO_HAVE_öt_„tch_™d_add1_dd_acquúe_ªad


	)

1573 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add1
)

1574 
	#AO_öt_„tch_™d_add1_dd_acquúe_ªad
(
addr
) \

1575 
	`AO_öt_„tch_™d_add1
(
addr
)

	)

1576 
	#AO_HAVE_öt_„tch_™d_add1_dd_acquúe_ªad


	)

1582 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add_fuŒ
) &&\

1583 !
	$deföed
(
AO_HAVE_öt_„tch_™d_sub1_fuŒ
)

1584 
	#AO_öt_„tch_™d_sub1_fuŒ
(
addr
) \

1585 
	`AO_öt_„tch_™d_add_fuŒ
(
addr
,()(-1))

	)

1586 
	#AO_HAVE_öt_„tch_™d_sub1_fuŒ


	)

1588 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add_ªÀa£
) &&\

1589 !
	$deföed
(
AO_HAVE_öt_„tch_™d_sub1_ªÀa£
)

1590 
	#AO_öt_„tch_™d_sub1_ªÀa£
(
addr
) \

1591 
	`AO_öt_„tch_™d_add_ªÀa£
(
addr
,()(-1))

	)

1592 
	#AO_HAVE_öt_„tch_™d_sub1_ªÀa£


	)

1594 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add_acquúe
) &&\

1595 !
	$deföed
(
AO_HAVE_öt_„tch_™d_sub1_acquúe
)

1596 
	#AO_öt_„tch_™d_sub1_acquúe
(
addr
) \

1597 
	`AO_öt_„tch_™d_add_acquúe
(
addr
,()(-1))

	)

1598 
	#AO_HAVE_öt_„tch_™d_sub1_acquúe


	)

1600 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add_wrôe
) &&\

1601 !
	$deföed
(
AO_HAVE_öt_„tch_™d_sub1_wrôe
)

1602 
	#AO_öt_„tch_™d_sub1_wrôe
(
addr
) \

1603 
	`AO_öt_„tch_™d_add_wrôe
(
addr
,()(-1))

	)

1604 
	#AO_HAVE_öt_„tch_™d_sub1_wrôe


	)

1606 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add_ªad
) &&\

1607 !
	$deföed
(
AO_HAVE_öt_„tch_™d_sub1_ªad
)

1608 
	#AO_öt_„tch_™d_sub1_ªad
(
addr
) \

1609 
	`AO_öt_„tch_™d_add_ªad
(
addr
,()(-1))

	)

1610 
	#AO_HAVE_öt_„tch_™d_sub1_ªad


	)

1612 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add_ªÀa£_wrôe
) &&\

1613 !
	$deföed
(
AO_HAVE_öt_„tch_™d_sub1_ªÀa£_wrôe
)

1614 
	#AO_öt_„tch_™d_sub1_ªÀa£_wrôe
(
addr
) \

1615 
	`AO_öt_„tch_™d_add_ªÀa£_wrôe
(
addr
,()(-1))

	)

1616 
	#AO_HAVE_öt_„tch_™d_sub1_ªÀa£_wrôe


	)

1618 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add_acquúe_ªad
) &&\

1619 !
	$deföed
(
AO_HAVE_öt_„tch_™d_sub1_acquúe_ªad
)

1620 
	#AO_öt_„tch_™d_sub1_acquúe_ªad
(
addr
) \

1621 
	`AO_öt_„tch_™d_add_acquúe_ªad
(
addr
,()(-1))

	)

1622 
	#AO_HAVE_öt_„tch_™d_sub1_acquúe_ªad


	)

1624 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add
) &&\

1625 !
	$deföed
(
AO_HAVE_öt_„tch_™d_sub1
)

1626 
	#AO_öt_„tch_™d_sub1
(
addr
) \

1627 
	`AO_öt_„tch_™d_add
(
addr
,()(-1))

	)

1628 
	#AO_HAVE_öt_„tch_™d_sub1


	)

1631 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_sub1_fuŒ
)

1632 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_sub1_ªÀa£
)

1633 
	#AO_öt_„tch_™d_sub1_ªÀa£
(
addr
) \

1634 
	`AO_öt_„tch_™d_sub1_fuŒ
(
addr
)

	)

1635 
	#AO_HAVE_öt_„tch_™d_sub1_ªÀa£


	)

1637 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_sub1_acquúe
)

1638 
	#AO_öt_„tch_™d_sub1_acquúe
(
addr
) \

1639 
	`AO_öt_„tch_™d_sub1_fuŒ
(
addr
)

	)

1640 
	#AO_HAVE_öt_„tch_™d_sub1_acquúe


	)

1642 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_sub1_wrôe
)

1643 
	#AO_öt_„tch_™d_sub1_wrôe
(
addr
) \

1644 
	`AO_öt_„tch_™d_sub1_fuŒ
(
addr
)

	)

1645 
	#AO_HAVE_öt_„tch_™d_sub1_wrôe


	)

1647 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_sub1_ªad
)

1648 
	#AO_öt_„tch_™d_sub1_ªad
(
addr
) \

1649 
	`AO_öt_„tch_™d_sub1_fuŒ
(
addr
)

	)

1650 
	#AO_HAVE_öt_„tch_™d_sub1_ªad


	)

1654 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_sub1
) && \

1655 
	$deföed
(
AO_HAVE_öt_„tch_™d_sub1_ªÀa£
)

1656 
	#AO_öt_„tch_™d_sub1
(
addr
) \

1657 
	`AO_öt_„tch_™d_sub1_ªÀa£
(
addr
)

	)

1658 
	#AO_HAVE_öt_„tch_™d_sub1


	)

1660 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_sub1
) && \

1661 
	$deföed
(
AO_HAVE_öt_„tch_™d_sub1_acquúe
)

1662 
	#AO_öt_„tch_™d_sub1
(
addr
) \

1663 
	`AO_öt_„tch_™d_sub1_acquúe
(
addr
)

	)

1664 
	#AO_HAVE_öt_„tch_™d_sub1


	)

1666 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_sub1
) && \

1667 
	$deföed
(
AO_HAVE_öt_„tch_™d_sub1_wrôe
)

1668 
	#AO_öt_„tch_™d_sub1
(
addr
) \

1669 
	`AO_öt_„tch_™d_sub1_wrôe
(
addr
)

	)

1670 
	#AO_HAVE_öt_„tch_™d_sub1


	)

1672 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_sub1
) && \

1673 
	$deföed
(
AO_HAVE_öt_„tch_™d_sub1_ªad
)

1674 
	#AO_öt_„tch_™d_sub1
(
addr
) \

1675 
	`AO_öt_„tch_™d_sub1_ªad
(
addr
)

	)

1676 
	#AO_HAVE_öt_„tch_™d_sub1


	)

1679 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_sub1_acquúe
) &&\

1680 
	`deföed
(
AO_HAVE_n›_fuŒ
) && \

1681 !
	$deföed
(
AO_HAVE_öt_„tch_™d_sub1_fuŒ
)

1682 
	#AO_öt_„tch_™d_sub1_fuŒ
(
addr
) \

1683 (
	`AO_n›_fuŒ
(), 
	`AO_öt_„tch_™d_sub1_acquúe
(
addr
))

	)

1684 
	#AO_HAVE_öt_„tch_™d_sub1_fuŒ


	)

1687 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_sub1_ªÀa£_wrôe
) && \

1688 
	$deföed
(
AO_HAVE_öt_„tch_™d_sub1_wrôe
)

1689 
	#AO_öt_„tch_™d_sub1_ªÀa£_wrôe
(
addr
) \

1690 
	`AO_öt_„tch_™d_sub1_wrôe
(
addr
)

	)

1691 
	#AO_HAVE_öt_„tch_™d_sub1_ªÀa£_wrôe


	)

1693 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_sub1_ªÀa£_wrôe
) && \

1694 
	$deföed
(
AO_HAVE_öt_„tch_™d_sub1_ªÀa£
)

1695 
	#AO_öt_„tch_™d_sub1_ªÀa£_wrôe
(
addr
) \

1696 
	`AO_öt_„tch_™d_sub1_ªÀa£
(
addr
)

	)

1697 
	#AO_HAVE_öt_„tch_™d_sub1_ªÀa£_wrôe


	)

1699 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_sub1_acquúe_ªad
) && \

1700 
	$deföed
(
AO_HAVE_öt_„tch_™d_sub1_ªad
)

1701 
	#AO_öt_„tch_™d_sub1_acquúe_ªad
(
addr
) \

1702 
	`AO_öt_„tch_™d_sub1_ªad
(
addr
)

	)

1703 
	#AO_HAVE_öt_„tch_™d_sub1_acquúe_ªad


	)

1705 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_sub1_acquúe_ªad
) && \

1706 
	$deföed
(
AO_HAVE_öt_„tch_™d_sub1_acquúe
)

1707 
	#AO_öt_„tch_™d_sub1_acquúe_ªad
(
addr
) \

1708 
	`AO_öt_„tch_™d_sub1_acquúe
(
addr
)

	)

1709 
	#AO_HAVE_öt_„tch_™d_sub1_acquúe_ªad


	)

1712 #ifde‡
AO_NO_DD_ORDERING


1713 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_sub1_acquúe_ªad
)

1714 
	#AO_öt_„tch_™d_sub1_dd_acquúe_ªad
(
addr
) \

1715 
	`AO_öt_„tch_™d_sub1_acquúe_ªad
(
addr
)

	)

1716 
	#AO_HAVE_öt_„tch_™d_sub1_dd_acquúe_ªad


	)

1719 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_sub1
)

1720 
	#AO_öt_„tch_™d_sub1_dd_acquúe_ªad
(
addr
) \

1721 
	`AO_öt_„tch_™d_sub1
(
addr
)

	)

1722 
	#AO_HAVE_öt_„tch_™d_sub1_dd_acquúe_ªad


	)

	@atomic_ops/generalize.h

46 #i‚de‡
ATOMIC_OPS_H


47 #îr‹ 
Atomic_›s_gíîÆize
.
h
 
should
 
nŸ
 
be
 
ö˛uded
 
dúe˘ly
.

50 #i‡
AO_CHAR_TS_T


51 
	#AO_TS_COMPARE_AND_SWAP_FULL
(
a
,
o
,
n
) \

52 
	`AO_ch¨_com∑ª_™d_sw≠_fuŒ
(
a
,
o
,
n
)

	)

53 
	#AO_TS_COMPARE_AND_SWAP_ACQUIRE
(
a
,
o
,
n
) \

54 
	`AO_ch¨_com∑ª_™d_sw≠_acquúe
(
a
,
o
,
n
)

	)

55 
	#AO_TS_COMPARE_AND_SWAP_RELEASE
(
a
,
o
,
n
) \

56 
	`AO_ch¨_com∑ª_™d_sw≠_ªÀa£
(
a
,
o
,
n
)

	)

57 
	#AO_TS_COMPARE_AND_SWAP
(
a
,
o
,
n
) \

58 
	`AO_ch¨_com∑ª_™d_sw≠
(
a
,
o
,
n
)

	)

61 #i‡
AO_AO_TS_T


62 
	#AO_TS_COMPARE_AND_SWAP_FULL
(
a
,
o
,
n
) \

63 
	`AO_com∑ª_™d_sw≠_fuŒ
(
a
,
o
,
n
)

	)

64 
	#AO_TS_COMPARE_AND_SWAP_ACQUIRE
(
a
,
o
,
n
) \

65 
	`AO_com∑ª_™d_sw≠_acquúe
(
a
,
o
,
n
)

	)

66 
	#AO_TS_COMPARE_AND_SWAP_RELEASE
(
a
,
o
,
n
) \

67 
	`AO_com∑ª_™d_sw≠_ªÀa£
(
a
,
o
,
n
)

	)

68 
	#AO_TS_COMPARE_AND_SWAP
(
a
,
o
,
n
) \

69 
	`AO_com∑ª_™d_sw≠
(
a
,
o
,
n
)

	)

73 #i‡!
deföed
(
AO_HAVE_ã°_™d_£t
) && \

74 !
deföed
(
AO_HAVE_ã°_™d_£t_ªÀa£
) && \

75 !
deföed
(
AO_HAVE_ã°_™d_£t_acquúe
) && \

76 !
deföed
(
AO_HAVE_ã°_™d_£t_ªad
) && \

77 !
	$deföed
(
AO_HAVE_ã°_™d_£t_fuŒ
)

78 #i‡
AO_AO_TS_T
 && 
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_fuŒ
) || \

79 
AO_CHAR_TS_T
 && 
	$deföed
(
AO_HAVE_ch¨_com∑ª_™d_sw≠_fuŒ
)

80 
AO_INLINE
 
AO_TS_VAL_t


81 
	$AO_ã°_™d_£t_fuŒ
(vﬁ©ûê
AO_TS_t
 *
addr
)

83 i‡(
	`AO_TS_COMPARE_AND_SWAP_FULL
(
addr
, 
AO_TS_CLEAR
, 
AO_TS_SET
))

84  
AO_TS_CLEAR
;

86  
AO_TS_SET
;

87 
	}
}

88 
	#AO_HAVE_ã°_™d_£t_fuŒ


	)

91 #i‡
AO_AO_TS_T
 && 
deföed
(
AO_HAVE_com∑ª_™d_sw≠_acquúe
) || \

92 
	gAO_CHAR_TS_T
 && 
	$deföed
(
AO_HAVE_ch¨_com∑ª_™d_sw≠_acquúe
)

93 
AO_INLINE
 
AO_TS_VAL_t


94 
	$AO_ã°_™d_£t_acquúe
(vﬁ©ûê
AO_TS_t
 *
addr
)

96 i‡(
	`AO_TS_COMPARE_AND_SWAP_ACQUIRE
(
addr
, 
AO_TS_CLEAR
, 
AO_TS_SET
))

97  
AO_TS_CLEAR
;

99  
AO_TS_SET
;

100 
	}
}

101 
	#AO_HAVE_ã°_™d_£t_acquúe


	)

104 #i‡
AO_AO_TS_T
 && 
deföed
(
AO_HAVE_com∑ª_™d_sw≠_ªÀa£
) || \

105 
	gAO_CHAR_TS_T
 && 
	$deföed
(
AO_HAVE_ch¨_com∑ª_™d_sw≠_ªÀa£
)

106 
AO_INLINE
 
AO_TS_VAL_t


107 
	$AO_ã°_™d_£t_ªÀa£
(vﬁ©ûê
AO_TS_t
 *
addr
)

109 i‡(
	`AO_TS_COMPARE_AND_SWAP_RELEASE
(
addr
, 
AO_TS_CLEAR
, 
AO_TS_SET
))

110  
AO_TS_CLEAR
;

112  
AO_TS_SET
;

113 
	}
}

114 
	#AO_HAVE_ã°_™d_£t_ªÀa£


	)

117 #i‡
AO_AO_TS_T
 && 
deföed
(
AO_HAVE_com∑ª_™d_sw≠
) || \

118 
	gAO_CHAR_TS_T
 && 
	$deföed
(
AO_HAVE_ch¨_com∑ª_™d_sw≠
)

119 
AO_INLINE
 
AO_TS_VAL_t


120 
	$AO_ã°_™d_£t
(vﬁ©ûê
AO_TS_t
 *
addr
)

122 i‡(
	`AO_TS_COMPARE_AND_SWAP
(
addr
, 
AO_TS_CLEAR
, 
AO_TS_SET
))

123  
AO_TS_CLEAR
;

125  
AO_TS_SET
;

126 
	}
}

127 
	#AO_HAVE_ã°_™d_£t


	)

130 #i‡
deföed
(
AO_HAVE_ã°_™d_£t
Ë&& deföed(
AO_HAVE_n›_fuŒ
) \

131 && !
	$deföed
(
AO_HAVE_ã°_™d_£t_acquúe
)

132 
AO_INLINE
 
AO_TS_VAL_t


133 
	$AO_ã°_™d_£t_acquúe
(vﬁ©ûê
AO_TS_t
 *
addr
)

135 
AO_TS_VAL_t
 
ªsu…
 = 
	`AO_ã°_™d_£t
(
addr
);

136 
	`AO_n›_fuŒ
();

137  
ªsu…
;

138 
	}
}

139 
	#AO_HAVE_ã°_™d_£t_acquúe


	)

145 #i‡!
deföed
(
AO_HAVE_n›
)

146 
AO_INLINE
 
	$AO_n›
(Ë{
	}
}

147 
	#AO_HAVE_n›


	)

150 #i‡
deföed
(
AO_HAVE_ã°_™d_£t_fuŒ
Ë&& !deföed(
AO_HAVE_n›_fuŒ
)

151 
AO_INLINE
 

152 
	$AO_n›_fuŒ
()

154 
AO_TS_t
 
dummy
 = 
AO_TS_INITIALIZER
;

155 
	`AO_ã°_™d_£t_fuŒ
(&
dummy
);

156 
	}
}

157 
	#AO_HAVE_n›_fuŒ


	)

160 #i‡
deföed
(
AO_HAVE_n›_acquúe
)

161 #îr‹ 
AO_n›_acquúe
 
is
 
u£Àss
: 
d⁄t
 
deföe
.

163 #i‡
deföed
(
AO_HAVE_n›_ªÀa£
)

164 #îr‹ 
AO_n›_ªÀa£
 
is
 
u£Àss
: 
d⁄t
 
deföe
.

167 #i‡
deföed
(
AO_HAVE_n›_fuŒ
Ë&& !deföed(
AO_HAVE_n›_ªad
)

168 
	#AO_n›_ªad
(Ë
	`AO_n›_fuŒ
()

	)

169 
	#AO_HAVE_n›_ªad


	)

172 #i‡
deföed
(
AO_HAVE_n›_fuŒ
Ë&& !deföed(
AO_HAVE_n›_wrôe
)

173 
	#AO_n›_wrôe
(Ë
	`AO_n›_fuŒ
()

	)

174 
	#AO_HAVE_n›_wrôe


	)

178 #i‡
deföed
(
AO_HAVE_lﬂd_fuŒ
Ë&& !deföed(
AO_HAVE_lﬂd_acquúe
)

179 
	#AO_lﬂd_acquúe
(
addr
Ë
	`AO_lﬂd_fuŒ
◊ddr)

	)

180 
	#AO_HAVE_lﬂd_acquúe


	)

183 #i‡
deföed
(
AO_HAVE_lﬂd_acquúe
Ë&& !deföed(
AO_HAVE_lﬂd
)

184 
	#AO_lﬂd
(
addr
Ë
	`AO_lﬂd_acquúe
◊ddr)

	)

185 
	#AO_HAVE_lﬂd


	)

188 #i‡
deföed
(
AO_HAVE_lﬂd_fuŒ
Ë&& !deföed(
AO_HAVE_lﬂd_ªad
)

189 
	#AO_lﬂd_ªad
(
addr
Ë
	`AO_lﬂd_fuŒ
◊ddr)

	)

190 
	#AO_HAVE_lﬂd_ªad


	)

193 #i‡!
deföed
(
AO_HAVE_lﬂd_acquúe_ªad
Ë&& deföed(
AO_HAVE_lﬂd_acquúe
)

194 
	#AO_lﬂd_acquúe_ªad
(
addr
Ë
	`AO_lﬂd_acquúe
◊ddr)

	)

195 
	#AO_HAVE_lﬂd_acquúe_ªad


	)

198 #i‡
deföed
(
AO_HAVE_lﬂd
Ë&& deföed(
AO_HAVE_n›_fuŒ
) && \

199 !
	$deföed
(
AO_HAVE_lﬂd_acquúe
)

200 
AO_INLINE
 
AO_t


201 
	$AO_lﬂd_acquúe
(c⁄° vﬁ©ûê
AO_t
 *
addr
)

203 
AO_t
 
ªsu…
 = 
	`AO_lﬂd
(
addr
);

206 
	`AO_n›_fuŒ
();

207  
ªsu…
;

208 
	}
}

209 
	#AO_HAVE_lﬂd_acquúe


	)

212 #i‡
deföed
(
AO_HAVE_lﬂd
Ë&& deföed(
AO_HAVE_n›_ªad
) && \

213 !
	$deföed
(
AO_HAVE_lﬂd_ªad
)

214 
AO_INLINE
 
AO_t


215 
	$AO_lﬂd_ªad
(c⁄° vﬁ©ûê
AO_t
 *
addr
)

217 
AO_t
 
ªsu…
 = 
	`AO_lﬂd
(
addr
);

220 
	`AO_n›_ªad
();

221  
ªsu…
;

222 
	}
}

223 
	#AO_HAVE_lﬂd_ªad


	)

226 #i‡
deföed
(
AO_HAVE_lﬂd_acquúe
Ë&& deföed(
AO_HAVE_n›_fuŒ
) && \

227 !
	$deföed
(
AO_HAVE_lﬂd_fuŒ
)

228 
	#AO_lﬂd_fuŒ
(
addr
Ë(
	`AO_n›_fuŒ
(), 
	`AO_lﬂd_acquúe
◊ddr))

	)

229 
	#AO_HAVE_lﬂd_fuŒ


	)

232 #i‡!
	`deföed
(
AO_HAVE_lﬂd_acquúe_ªad
Ë&& deföed(
AO_HAVE_lﬂd_ªad
)

233 
	#AO_lﬂd_acquúe_ªad
(
addr
Ë
	`AO_lﬂd_ªad
◊ddr)

	)

234 
	#AO_HAVE_lﬂd_acquúe_ªad


	)

237 #i‡
	`deföed
(
AO_HAVE_lﬂd_acquúe_ªad
Ë&& !deföed(
AO_HAVE_lﬂd
)

238 
	#AO_lﬂd
(
addr
Ë
	`AO_lﬂd_acquúe_ªad
◊ddr)

	)

239 
	#AO_HAVE_lﬂd


	)

242 #ifde‡
AO_NO_DD_ORDERING


243 #i‡
	`deföed
(
AO_HAVE_lﬂd_acquúe_ªad
)

244 
	#AO_lﬂd_dd_acquúe_ªad
(
addr
Ë
	`AO_lﬂd_acquúe_ªad
◊ddr)

	)

245 
	#AO_HAVE_lﬂd_dd_acquúe_ªad


	)

248 #i‡
	`deföed
(
AO_HAVE_lﬂd
)

249 
	#AO_lﬂd_dd_acquúe_ªad
(
addr
Ë
	`AO_lﬂd
◊ddr)

	)

250 
	#AO_HAVE_lﬂd_dd_acquúe_ªad


	)

257 #i‡
	`deföed
(
AO_HAVE_°‹e_fuŒ
Ë&& !deföed(
AO_HAVE_°‹e_ªÀa£
)

258 
	#AO_°‹e_ªÀa£
(
addr
,
vÆ
Ë
	`AO_°‹e_fuŒ
◊ddr,vÆ)

	)

259 
	#AO_HAVE_°‹e_ªÀa£


	)

262 #i‡
	`deföed
(
AO_HAVE_°‹e_ªÀa£
Ë&& !deföed(
AO_HAVE_°‹e
)

263 
	#AO_°‹e
(
addr
, 
vÆ
Ë
	`AO_°‹e_ªÀa£
◊ddr,vÆ)

	)

264 
	#AO_HAVE_°‹e


	)

267 #i‡
	`deföed
(
AO_HAVE_°‹e_fuŒ
Ë&& !deföed(
AO_HAVE_°‹e_wrôe
)

268 
	#AO_°‹e_wrôe
(
addr
,
vÆ
Ë
	`AO_°‹e_fuŒ
◊ddr,vÆ)

	)

269 
	#AO_HAVE_°‹e_wrôe


	)

272 #i‡
	`deföed
(
AO_HAVE_°‹e_ªÀa£
Ë&& !deföed(
AO_HAVE_°‹e_ªÀa£_wrôe
)

273 
	#AO_°‹e_ªÀa£_wrôe
(
addr
, 
vÆ
Ë
	`AO_°‹e_ªÀa£
◊ddr,vÆ)

	)

274 
	#AO_HAVE_°‹e_ªÀa£_wrôe


	)

277 #i‡
	`deföed
(
AO_HAVE_°‹e_wrôe
Ë&& !deföed(
AO_HAVE_°‹e
)

278 
	#AO_°‹e
(
addr
, 
vÆ
Ë
	`AO_°‹e_wrôe
◊ddr,vÆ)

	)

279 
	#AO_HAVE_°‹e


	)

282 #i‡
	`deföed
(
AO_HAVE_°‹e
Ë&& deföed(
AO_HAVE_n›_fuŒ
) && \

283 !
	$deföed
(
AO_HAVE_°‹e_ªÀa£
)

284 
	#AO_°‹e_ªÀa£
(
addr
,
vÆ
Ë(
	`AO_n›_fuŒ
(), 
	`AO_°‹e
◊ddr,vÆ))

	)

285 
	#AO_HAVE_°‹e_ªÀa£


	)

288 #i‡
	`deföed
(
AO_HAVE_n›_wrôe
Ë&& deföed(
AO_HAVE_°‹e
) && \

289 !
	$deföed
(
AO_HAVE_°‹e_wrôe
)

290 
	#AO_°‹e_wrôe
(
addr
, 
vÆ
Ë(
	`AO_n›_wrôe
(), 
	`AO_°‹e
◊ddr,vÆ))

	)

291 
	#AO_HAVE_°‹e_wrôe


	)

294 #i‡
	`deföed
(
AO_HAVE_°‹e_wrôe
Ë&& !deföed(
AO_HAVE_°‹e_ªÀa£_wrôe
)

295 
	#AO_°‹e_ªÀa£_wrôe
(
addr
, 
vÆ
Ë
	`AO_°‹e_wrôe
◊ddr,vÆ)

	)

296 
	#AO_HAVE_°‹e_ªÀa£_wrôe


	)

299 #i‡
	`deföed
(
AO_HAVE_°‹e_ªÀa£
Ë&& deföed(
AO_HAVE_n›_fuŒ
) && \

300 !
	$deföed
(
AO_HAVE_°‹e_fuŒ
)

301 
	#AO_°‹e_fuŒ
(
addr
, 
vÆ
Ë(
	`AO_°‹e_ªÀa£
◊ddr, vÆ), 
	`AO_n›_fuŒ
())

	)

302 
	#AO_HAVE_°‹e_fuŒ


	)

306 #i‡
	`deföed
(
AO_HAVE_ã°_™d_£t
) && \

307 
	`deföed
(
AO_HAVE_n›_fuŒ
) && \

308 !
	$deföed
(
AO_HAVE_ã°_™d_£t_ªÀa£
)

309 
	#AO_ã°_™d_£t_ªÀa£
(
addr
) \

310 (
	`AO_n›_fuŒ
(), 
	`AO_ã°_™d_£t
(
addr
))

	)

311 
	#AO_HAVE_ã°_™d_£t_ªÀa£


	)

314 #i‡
	`deföed
(
AO_HAVE_ã°_™d_£t
) && \

315 
	`deföed
(
AO_HAVE_n›_fuŒ
) && \

316 !
	$deföed
(
AO_HAVE_ã°_™d_£t_acquúe
)

317 
AO_INLINE
 
AO_TS_t


318 
	$AO_ã°_™d_£t_acquúe
(vﬁ©ûê
AO_TS_t
 *
addr
)

320 
AO_TS_t
 
ªs
 = 
	`AO_ã°_™d_£t
(
addr
);

321 
	`AO_n›_fuŒ
();

322  
ªs
;

323 
	}
}

324 
	#AO_HAVE_ã°_™d_£t_acquúe


	)

332 #i‡
deföed
(
AO_HAVE_com∑ª_™d_sw≠_fuŒ
) && \

333 !
	$deföed
(
AO_HAVE_„tch_™d_add_fuŒ
)

334 
AO_INLINE
 
AO_t


335 
	$AO_„tch_™d_add_fuŒ
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ö¸
)

337 
AO_t
 
ﬁd
;

340 
ﬁd
 = *
addr
;

342 !
	`AO_com∑ª_™d_sw≠_fuŒ
(
addr
, 
ﬁd
, old+
ö¸
));

343  
ﬁd
;

344 
	}
}

345 
	#AO_HAVE_„tch_™d_add_fuŒ


	)

348 #i‡
deföed
(
AO_HAVE_com∑ª_™d_sw≠_acquúe
) && \

349 !
	$deföed
(
AO_HAVE_„tch_™d_add_acquúe
)

350 
AO_INLINE
 
AO_t


351 
	$AO_„tch_™d_add_acquúe
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ö¸
)

353 
AO_t
 
ﬁd
;

356 
ﬁd
 = *
addr
;

358 !
	`AO_com∑ª_™d_sw≠_acquúe
(
addr
, 
ﬁd
, old+
ö¸
));

359  
ﬁd
;

360 
	}
}

361 
	#AO_HAVE_„tch_™d_add_acquúe


	)

364 #i‡
deföed
(
AO_HAVE_com∑ª_™d_sw≠_ªÀa£
) && \

365 !
	$deföed
(
AO_HAVE_„tch_™d_add_ªÀa£
)

366 
AO_INLINE
 
AO_t


367 
	$AO_„tch_™d_add_ªÀa£
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ö¸
)

369 
AO_t
 
ﬁd
;

372 
ﬁd
 = *
addr
;

374 !
	`AO_com∑ª_™d_sw≠_ªÀa£
(
addr
, 
ﬁd
, old+
ö¸
));

375  
ﬁd
;

376 
	}
}

377 
	#AO_HAVE_„tch_™d_add_ªÀa£


	)

380 #i‡
deföed
(
AO_HAVE_com∑ª_™d_sw≠
) && \

381 !
	$deföed
(
AO_HAVE_„tch_™d_add
)

382 
AO_INLINE
 
AO_t


383 
	$AO_„tch_™d_add
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ö¸
)

385 
AO_t
 
ﬁd
;

388 
ﬁd
 = *
addr
;

390 !
	`AO_com∑ª_™d_sw≠
(
addr
, 
ﬁd
, old+
ö¸
));

391  
ﬁd
;

392 
	}
}

393 
	#AO_HAVE_„tch_™d_add


	)

396 #i‡
deföed
(
AO_HAVE_„tch_™d_add_fuŒ
)

397 #i‡!
deföed
(
AO_HAVE_„tch_™d_add_ªÀa£
)

398 
	#AO_„tch_™d_add_ªÀa£
(
addr
, 
vÆ
) \

399 
	`AO_„tch_™d_add_fuŒ
(
addr
, 
vÆ
)

	)

400 
	#AO_HAVE_„tch_™d_add_ªÀa£


	)

402 #i‡!
deföed
(
AO_HAVE_„tch_™d_add_acquúe
)

403 
	#AO_„tch_™d_add_acquúe
(
addr
, 
vÆ
) \

404 
	`AO_„tch_™d_add_fuŒ
(
addr
, 
vÆ
)

	)

405 
	#AO_HAVE_„tch_™d_add_acquúe


	)

407 #i‡!
deföed
(
AO_HAVE_„tch_™d_add_wrôe
)

408 
	#AO_„tch_™d_add_wrôe
(
addr
, 
vÆ
) \

409 
	`AO_„tch_™d_add_fuŒ
(
addr
, 
vÆ
)

	)

410 
	#AO_HAVE_„tch_™d_add_wrôe


	)

412 #i‡!
deföed
(
AO_HAVE_„tch_™d_add_ªad
)

413 
	#AO_„tch_™d_add_ªad
(
addr
, 
vÆ
) \

414 
	`AO_„tch_™d_add_fuŒ
(
addr
, 
vÆ
)

	)

415 
	#AO_HAVE_„tch_™d_add_ªad


	)

419 #i‡!
deföed
(
AO_HAVE_„tch_™d_add
) && \

420 
	$deföed
(
AO_HAVE_„tch_™d_add_ªÀa£
)

421 
	#AO_„tch_™d_add
(
addr
, 
vÆ
) \

422 
	`AO_„tch_™d_add_ªÀa£
(
addr
, 
vÆ
)

	)

423 
	#AO_HAVE_„tch_™d_add


	)

425 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_add
) && \

426 
	$deföed
(
AO_HAVE_„tch_™d_add_acquúe
)

427 
	#AO_„tch_™d_add
(
addr
, 
vÆ
) \

428 
	`AO_„tch_™d_add_acquúe
(
addr
, 
vÆ
)

	)

429 
	#AO_HAVE_„tch_™d_add


	)

431 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_add
) && \

432 
	$deföed
(
AO_HAVE_„tch_™d_add_wrôe
)

433 
	#AO_„tch_™d_add
(
addr
, 
vÆ
) \

434 
	`AO_„tch_™d_add_wrôe
(
addr
, 
vÆ
)

	)

435 
	#AO_HAVE_„tch_™d_add


	)

437 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_add
) && \

438 
	$deföed
(
AO_HAVE_„tch_™d_add_ªad
)

439 
	#AO_„tch_™d_add
(
addr
, 
vÆ
) \

440 
	`AO_„tch_™d_add_ªad
(
addr
, 
vÆ
)

	)

441 
	#AO_HAVE_„tch_™d_add


	)

444 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_acquúe
) &&\

445 
	`deföed
(
AO_HAVE_n›_fuŒ
) && \

446 !
	$deföed
(
AO_HAVE_„tch_™d_add_fuŒ
)

447 
	#AO_„tch_™d_add_fuŒ
(
addr
, 
vÆ
) \

448 (
	`AO_n›_fuŒ
(), 
	`AO_„tch_™d_add_acquúe
(
addr
, 
vÆ
))

	)

449 
	#AO_HAVE_„tch_™d_add_fuŒ


	)

452 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_add_ªÀa£_wrôe
) && \

453 
	$deföed
(
AO_HAVE_„tch_™d_add_wrôe
)

454 
	#AO_„tch_™d_add_ªÀa£_wrôe
(
addr
, 
vÆ
) \

455 
	`AO_„tch_™d_add_wrôe
(
addr
, 
vÆ
)

	)

456 
	#AO_HAVE_„tch_™d_add_ªÀa£_wrôe


	)

458 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_add_ªÀa£_wrôe
) && \

459 
	$deföed
(
AO_HAVE_„tch_™d_add_ªÀa£
)

460 
	#AO_„tch_™d_add_ªÀa£_wrôe
(
addr
, 
vÆ
) \

461 
	`AO_„tch_™d_add_ªÀa£
(
addr
, 
vÆ
)

	)

462 
	#AO_HAVE_„tch_™d_add_ªÀa£_wrôe


	)

464 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_add_acquúe_ªad
) && \

465 
	$deföed
(
AO_HAVE_„tch_™d_add_ªad
)

466 
	#AO_„tch_™d_add_acquúe_ªad
(
addr
, 
vÆ
) \

467 
	`AO_„tch_™d_add_ªad
(
addr
, 
vÆ
)

	)

468 
	#AO_HAVE_„tch_™d_add_acquúe_ªad


	)

470 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_add_acquúe_ªad
) && \

471 
	$deföed
(
AO_HAVE_„tch_™d_add_acquúe
)

472 
	#AO_„tch_™d_add_acquúe_ªad
(
addr
, 
vÆ
) \

473 
	`AO_„tch_™d_add_acquúe
(
addr
, 
vÆ
)

	)

474 
	#AO_HAVE_„tch_™d_add_acquúe_ªad


	)

477 #ifde‡
AO_NO_DD_ORDERING


478 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_acquúe_ªad
)

479 
	#AO_„tch_™d_add_dd_acquúe_ªad
(
addr
, 
vÆ
) \

480 
	`AO_„tch_™d_add_acquúe_ªad
(
addr
, 
vÆ
)

	)

481 
	#AO_HAVE_„tch_™d_add_dd_acquúe_ªad


	)

484 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add
)

485 
	#AO_„tch_™d_add_dd_acquúe_ªad
(
addr
, 
vÆ
) \

486 
	`AO_„tch_™d_add
(
addr
, 
vÆ
)

	)

487 
	#AO_HAVE_„tch_™d_add_dd_acquúe_ªad


	)

493 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_fuŒ
) &&\

494 !
	$deföed
(
AO_HAVE_„tch_™d_add1_fuŒ
)

495 
	#AO_„tch_™d_add1_fuŒ
(
addr
Ë
	`AO_„tch_™d_add_fuŒ
◊ddr,1)

	)

496 
	#AO_HAVE_„tch_™d_add1_fuŒ


	)

498 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_ªÀa£
) &&\

499 !
	$deföed
(
AO_HAVE_„tch_™d_add1_ªÀa£
)

500 
	#AO_„tch_™d_add1_ªÀa£
(
addr
Ë
	`AO_„tch_™d_add_ªÀa£
◊ddr,1)

	)

501 
	#AO_HAVE_„tch_™d_add1_ªÀa£


	)

503 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_acquúe
) &&\

504 !
	$deföed
(
AO_HAVE_„tch_™d_add1_acquúe
)

505 
	#AO_„tch_™d_add1_acquúe
(
addr
Ë
	`AO_„tch_™d_add_acquúe
◊ddr,1)

	)

506 
	#AO_HAVE_„tch_™d_add1_acquúe


	)

508 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_wrôe
) &&\

509 !
	$deföed
(
AO_HAVE_„tch_™d_add1_wrôe
)

510 
	#AO_„tch_™d_add1_wrôe
(
addr
Ë
	`AO_„tch_™d_add_wrôe
◊ddr,1)

	)

511 
	#AO_HAVE_„tch_™d_add1_wrôe


	)

513 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_ªad
) &&\

514 !
	$deföed
(
AO_HAVE_„tch_™d_add1_ªad
)

515 
	#AO_„tch_™d_add1_ªad
(
addr
Ë
	`AO_„tch_™d_add_ªad
◊ddr,1)

	)

516 
	#AO_HAVE_„tch_™d_add1_ªad


	)

518 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_ªÀa£_wrôe
) &&\

519 !
	$deföed
(
AO_HAVE_„tch_™d_add1_ªÀa£_wrôe
)

520 
	#AO_„tch_™d_add1_ªÀa£_wrôe
(
addr
) \

521 
	`AO_„tch_™d_add_ªÀa£_wrôe
(
addr
,1)

	)

522 
	#AO_HAVE_„tch_™d_add1_ªÀa£_wrôe


	)

524 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_acquúe_ªad
) &&\

525 !
	$deföed
(
AO_HAVE_„tch_™d_add1_acquúe_ªad
)

526 
	#AO_„tch_™d_add1_acquúe_ªad
(
addr
) \

527 
	`AO_„tch_™d_add_acquúe_ªad
(
addr
,1)

	)

528 
	#AO_HAVE_„tch_™d_add1_acquúe_ªad


	)

530 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add
) &&\

531 !
	$deföed
(
AO_HAVE_„tch_™d_add1
)

532 
	#AO_„tch_™d_add1
(
addr
) \

533 
	`AO_„tch_™d_add
(
addr
,1)

	)

534 
	#AO_HAVE_„tch_™d_add1


	)

537 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add1_fuŒ
)

538 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_add1_ªÀa£
)

539 
	#AO_„tch_™d_add1_ªÀa£
(
addr
) \

540 
	`AO_„tch_™d_add1_fuŒ
(
addr
)

	)

541 
	#AO_HAVE_„tch_™d_add1_ªÀa£


	)

543 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_add1_acquúe
)

544 
	#AO_„tch_™d_add1_acquúe
(
addr
) \

545 
	`AO_„tch_™d_add1_fuŒ
(
addr
)

	)

546 
	#AO_HAVE_„tch_™d_add1_acquúe


	)

548 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_add1_wrôe
)

549 
	#AO_„tch_™d_add1_wrôe
(
addr
) \

550 
	`AO_„tch_™d_add1_fuŒ
(
addr
)

	)

551 
	#AO_HAVE_„tch_™d_add1_wrôe


	)

553 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_add1_ªad
)

554 
	#AO_„tch_™d_add1_ªad
(
addr
) \

555 
	`AO_„tch_™d_add1_fuŒ
(
addr
)

	)

556 
	#AO_HAVE_„tch_™d_add1_ªad


	)

560 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_add1
) && \

561 
	$deföed
(
AO_HAVE_„tch_™d_add1_ªÀa£
)

562 
	#AO_„tch_™d_add1
(
addr
) \

563 
	`AO_„tch_™d_add1_ªÀa£
(
addr
)

	)

564 
	#AO_HAVE_„tch_™d_add1


	)

566 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_add1
) && \

567 
	$deföed
(
AO_HAVE_„tch_™d_add1_acquúe
)

568 
	#AO_„tch_™d_add1
(
addr
) \

569 
	`AO_„tch_™d_add1_acquúe
(
addr
)

	)

570 
	#AO_HAVE_„tch_™d_add1


	)

572 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_add1
) && \

573 
	$deföed
(
AO_HAVE_„tch_™d_add1_wrôe
)

574 
	#AO_„tch_™d_add1
(
addr
) \

575 
	`AO_„tch_™d_add1_wrôe
(
addr
)

	)

576 
	#AO_HAVE_„tch_™d_add1


	)

578 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_add1
) && \

579 
	$deföed
(
AO_HAVE_„tch_™d_add1_ªad
)

580 
	#AO_„tch_™d_add1
(
addr
) \

581 
	`AO_„tch_™d_add1_ªad
(
addr
)

	)

582 
	#AO_HAVE_„tch_™d_add1


	)

585 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add1_acquúe
) &&\

586 
	`deföed
(
AO_HAVE_n›_fuŒ
) && \

587 !
	$deföed
(
AO_HAVE_„tch_™d_add1_fuŒ
)

588 
	#AO_„tch_™d_add1_fuŒ
(
addr
) \

589 (
	`AO_n›_fuŒ
(), 
	`AO_„tch_™d_add1_acquúe
(
addr
))

	)

590 
	#AO_HAVE_„tch_™d_add1_fuŒ


	)

593 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_add1_ªÀa£_wrôe
) && \

594 
	$deföed
(
AO_HAVE_„tch_™d_add1_wrôe
)

595 
	#AO_„tch_™d_add1_ªÀa£_wrôe
(
addr
) \

596 
	`AO_„tch_™d_add1_wrôe
(
addr
)

	)

597 
	#AO_HAVE_„tch_™d_add1_ªÀa£_wrôe


	)

599 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_add1_ªÀa£_wrôe
) && \

600 
	$deföed
(
AO_HAVE_„tch_™d_add1_ªÀa£
)

601 
	#AO_„tch_™d_add1_ªÀa£_wrôe
(
addr
) \

602 
	`AO_„tch_™d_add1_ªÀa£
(
addr
)

	)

603 
	#AO_HAVE_„tch_™d_add1_ªÀa£_wrôe


	)

605 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_add1_acquúe_ªad
) && \

606 
	$deföed
(
AO_HAVE_„tch_™d_add1_ªad
)

607 
	#AO_„tch_™d_add1_acquúe_ªad
(
addr
) \

608 
	`AO_„tch_™d_add1_ªad
(
addr
)

	)

609 
	#AO_HAVE_„tch_™d_add1_acquúe_ªad


	)

611 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_add1_acquúe_ªad
) && \

612 
	$deföed
(
AO_HAVE_„tch_™d_add1_acquúe
)

613 
	#AO_„tch_™d_add1_acquúe_ªad
(
addr
) \

614 
	`AO_„tch_™d_add1_acquúe
(
addr
)

	)

615 
	#AO_HAVE_„tch_™d_add1_acquúe_ªad


	)

618 #ifde‡
AO_NO_DD_ORDERING


619 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add1_acquúe_ªad
)

620 
	#AO_„tch_™d_add1_dd_acquúe_ªad
(
addr
) \

621 
	`AO_„tch_™d_add1_acquúe_ªad
(
addr
)

	)

622 
	#AO_HAVE_„tch_™d_add1_dd_acquúe_ªad


	)

625 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add1
)

626 
	#AO_„tch_™d_add1_dd_acquúe_ªad
(
addr
Ë
	`AO_„tch_™d_add1
◊ddr)

	)

627 
	#AO_HAVE_„tch_™d_add1_dd_acquúe_ªad


	)

633 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_fuŒ
) &&\

634 !
	$deföed
(
AO_HAVE_„tch_™d_sub1_fuŒ
)

635 
	#AO_„tch_™d_sub1_fuŒ
(
addr
Ë
	`AO_„tch_™d_add_fuŒ
◊ddr,(
AO_t
)(-1))

	)

636 
	#AO_HAVE_„tch_™d_sub1_fuŒ


	)

638 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_ªÀa£
) &&\

639 !
	$deföed
(
AO_HAVE_„tch_™d_sub1_ªÀa£
)

640 
	#AO_„tch_™d_sub1_ªÀa£
(
addr
) \

641 
	`AO_„tch_™d_add_ªÀa£
(
addr
,(
AO_t
)(-1))

	)

642 
	#AO_HAVE_„tch_™d_sub1_ªÀa£


	)

644 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_acquúe
) &&\

645 !
	$deföed
(
AO_HAVE_„tch_™d_sub1_acquúe
)

646 
	#AO_„tch_™d_sub1_acquúe
(
addr
) \

647 
	`AO_„tch_™d_add_acquúe
(
addr
,(
AO_t
)(-1))

	)

648 
	#AO_HAVE_„tch_™d_sub1_acquúe


	)

650 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_wrôe
) &&\

651 !
	$deföed
(
AO_HAVE_„tch_™d_sub1_wrôe
)

652 
	#AO_„tch_™d_sub1_wrôe
(
addr
) \

653 
	`AO_„tch_™d_add_wrôe
(
addr
,(
AO_t
)(-1))

	)

654 
	#AO_HAVE_„tch_™d_sub1_wrôe


	)

656 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_ªad
) &&\

657 !
	$deföed
(
AO_HAVE_„tch_™d_sub1_ªad
)

658 
	#AO_„tch_™d_sub1_ªad
(
addr
) \

659 
	`AO_„tch_™d_add_ªad
(
addr
,(
AO_t
)(-1))

	)

660 
	#AO_HAVE_„tch_™d_sub1_ªad


	)

662 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_ªÀa£_wrôe
) &&\

663 !
	$deföed
(
AO_HAVE_„tch_™d_sub1_ªÀa£_wrôe
)

664 
	#AO_„tch_™d_sub1_ªÀa£_wrôe
(
addr
) \

665 
	`AO_„tch_™d_add_ªÀa£_wrôe
(
addr
,(
AO_t
)(-1))

	)

666 
	#AO_HAVE_„tch_™d_sub1_ªÀa£_wrôe


	)

668 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_acquúe_ªad
) &&\

669 !
	$deföed
(
AO_HAVE_„tch_™d_sub1_acquúe_ªad
)

670 
	#AO_„tch_™d_sub1_acquúe_ªad
(
addr
) \

671 
	`AO_„tch_™d_add_acquúe_ªad
(
addr
,(
AO_t
)(-1))

	)

672 
	#AO_HAVE_„tch_™d_sub1_acquúe_ªad


	)

674 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add
) &&\

675 !
	$deföed
(
AO_HAVE_„tch_™d_sub1
)

676 
	#AO_„tch_™d_sub1
(
addr
) \

677 
	`AO_„tch_™d_add
(
addr
,(
AO_t
)(-1))

	)

678 
	#AO_HAVE_„tch_™d_sub1


	)

681 #i‡
	`deföed
(
AO_HAVE_„tch_™d_sub1_fuŒ
)

682 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_sub1_ªÀa£
)

683 
	#AO_„tch_™d_sub1_ªÀa£
(
addr
) \

684 
	`AO_„tch_™d_sub1_fuŒ
(
addr
)

	)

685 
	#AO_HAVE_„tch_™d_sub1_ªÀa£


	)

687 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_sub1_acquúe
)

688 
	#AO_„tch_™d_sub1_acquúe
(
addr
) \

689 
	`AO_„tch_™d_sub1_fuŒ
(
addr
)

	)

690 
	#AO_HAVE_„tch_™d_sub1_acquúe


	)

692 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_sub1_wrôe
)

693 
	#AO_„tch_™d_sub1_wrôe
(
addr
) \

694 
	`AO_„tch_™d_sub1_fuŒ
(
addr
)

	)

695 
	#AO_HAVE_„tch_™d_sub1_wrôe


	)

697 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_sub1_ªad
)

698 
	#AO_„tch_™d_sub1_ªad
(
addr
) \

699 
	`AO_„tch_™d_sub1_fuŒ
(
addr
)

	)

700 
	#AO_HAVE_„tch_™d_sub1_ªad


	)

704 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_sub1
) && \

705 
	$deföed
(
AO_HAVE_„tch_™d_sub1_ªÀa£
)

706 
	#AO_„tch_™d_sub1
(
addr
) \

707 
	`AO_„tch_™d_sub1_ªÀa£
(
addr
)

	)

708 
	#AO_HAVE_„tch_™d_sub1


	)

710 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_sub1
) && \

711 
	$deföed
(
AO_HAVE_„tch_™d_sub1_acquúe
)

712 
	#AO_„tch_™d_sub1
(
addr
) \

713 
	`AO_„tch_™d_sub1_acquúe
(
addr
)

	)

714 
	#AO_HAVE_„tch_™d_sub1


	)

716 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_sub1
) && \

717 
	$deföed
(
AO_HAVE_„tch_™d_sub1_wrôe
)

718 
	#AO_„tch_™d_sub1
(
addr
) \

719 
	`AO_„tch_™d_sub1_wrôe
(
addr
)

	)

720 
	#AO_HAVE_„tch_™d_sub1


	)

722 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_sub1
) && \

723 
	$deföed
(
AO_HAVE_„tch_™d_sub1_ªad
)

724 
	#AO_„tch_™d_sub1
(
addr
) \

725 
	`AO_„tch_™d_sub1_ªad
(
addr
)

	)

726 
	#AO_HAVE_„tch_™d_sub1


	)

729 #i‡
	`deföed
(
AO_HAVE_„tch_™d_sub1_acquúe
) &&\

730 
	`deföed
(
AO_HAVE_n›_fuŒ
) && \

731 !
	$deföed
(
AO_HAVE_„tch_™d_sub1_fuŒ
)

732 
	#AO_„tch_™d_sub1_fuŒ
(
addr
) \

733 (
	`AO_n›_fuŒ
(), 
	`AO_„tch_™d_sub1_acquúe
(
addr
))

	)

734 
	#AO_HAVE_„tch_™d_sub1_fuŒ


	)

737 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_sub1_ªÀa£_wrôe
) && \

738 
	$deföed
(
AO_HAVE_„tch_™d_sub1_wrôe
)

739 
	#AO_„tch_™d_sub1_ªÀa£_wrôe
(
addr
) \

740 
	`AO_„tch_™d_sub1_wrôe
(
addr
)

	)

741 
	#AO_HAVE_„tch_™d_sub1_ªÀa£_wrôe


	)

743 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_sub1_ªÀa£_wrôe
) && \

744 
	$deföed
(
AO_HAVE_„tch_™d_sub1_ªÀa£
)

745 
	#AO_„tch_™d_sub1_ªÀa£_wrôe
(
addr
) \

746 
	`AO_„tch_™d_sub1_ªÀa£
(
addr
)

	)

747 
	#AO_HAVE_„tch_™d_sub1_ªÀa£_wrôe


	)

749 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_sub1_acquúe_ªad
) && \

750 
	$deföed
(
AO_HAVE_„tch_™d_sub1_ªad
)

751 
	#AO_„tch_™d_sub1_acquúe_ªad
(
addr
) \

752 
	`AO_„tch_™d_sub1_ªad
(
addr
)

	)

753 
	#AO_HAVE_„tch_™d_sub1_acquúe_ªad


	)

755 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_sub1_acquúe_ªad
) && \

756 
	$deföed
(
AO_HAVE_„tch_™d_sub1_acquúe
)

757 
	#AO_„tch_™d_sub1_acquúe_ªad
(
addr
) \

758 
	`AO_„tch_™d_sub1_acquúe
(
addr
)

	)

759 
	#AO_HAVE_„tch_™d_sub1_acquúe_ªad


	)

762 #ifde‡
AO_NO_DD_ORDERING


763 #i‡
	`deföed
(
AO_HAVE_„tch_™d_sub1_acquúe_ªad
)

764 
	#AO_„tch_™d_sub1_dd_acquúe_ªad
(
addr
) \

765 
	`AO_„tch_™d_sub1_acquúe_ªad
(
addr
)

	)

766 
	#AO_HAVE_„tch_™d_sub1_dd_acquúe_ªad


	)

769 #i‡
	`deföed
(
AO_HAVE_„tch_™d_sub1
)

770 
	#AO_„tch_™d_sub1_dd_acquúe_ªad
(
addr
Ë
	`AO_„tch_™d_sub1
◊ddr)

	)

771 
	#AO_HAVE_„tch_™d_sub1_dd_acquúe_ªad


	)

776 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_fuŒ
) && \

777 !
	$deföed
(
AO_HAVE_‹_fuŒ
)

778 
AO_INLINE
 

779 
	$AO_‹_fuŒ
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ö¸
)

781 
AO_t
 
ﬁd
;

784 
ﬁd
 = *
addr
;

786 !
	`AO_com∑ª_™d_sw≠_fuŒ
(
addr
, 
ﬁd
, (ﬁd | 
ö¸
)));

787 
	}
}

788 
	#AO_HAVE_‹_fuŒ


	)

791 #i‡
deföed
(
AO_HAVE_‹_fuŒ
)

792 #i‡!
deföed
(
AO_HAVE_‹_ªÀa£
)

793 
	#AO_‹_ªÀa£
(
addr
, 
vÆ
) \

794 
	`AO_‹_fuŒ
(
addr
, 
vÆ
)

	)

795 
	#AO_HAVE_‹_ªÀa£


	)

797 #i‡!
deföed
(
AO_HAVE_‹_acquúe
)

798 
	#AO_‹_acquúe
(
addr
, 
vÆ
) \

799 
	`AO_‹_fuŒ
(
addr
, 
vÆ
)

	)

800 
	#AO_HAVE_‹_acquúe


	)

802 #i‡!
deföed
(
AO_HAVE_‹_wrôe
)

803 
	#AO_‹_wrôe
(
addr
, 
vÆ
) \

804 
	`AO_‹_fuŒ
(
addr
, 
vÆ
)

	)

805 
	#AO_HAVE_‹_wrôe


	)

807 #i‡!
deföed
(
AO_HAVE_‹_ªad
)

808 
	#AO_‹_ªad
(
addr
, 
vÆ
) \

809 
	`AO_‹_fuŒ
(
addr
, 
vÆ
)

	)

810 
	#AO_HAVE_‹_ªad


	)

814 #i‡!
deföed
(
AO_HAVE_‹
) && \

815 
	$deföed
(
AO_HAVE_‹_ªÀa£
)

816 
	#AO_‹
(
addr
, 
vÆ
) \

817 
	`AO_‹_ªÀa£
(
addr
, 
vÆ
)

	)

818 
	#AO_HAVE_‹


	)

820 #i‡!
	`deföed
(
AO_HAVE_‹
) && \

821 
	$deföed
(
AO_HAVE_‹_acquúe
)

822 
	#AO_‹
(
addr
, 
vÆ
) \

823 
	`AO_‹_acquúe
(
addr
, 
vÆ
)

	)

824 
	#AO_HAVE_‹


	)

826 #i‡!
	`deföed
(
AO_HAVE_‹
) && \

827 
	$deföed
(
AO_HAVE_‹_wrôe
)

828 
	#AO_‹
(
addr
, 
vÆ
) \

829 
	`AO_‹_wrôe
(
addr
, 
vÆ
)

	)

830 
	#AO_HAVE_‹


	)

832 #i‡!
	`deföed
(
AO_HAVE_‹
) && \

833 
	$deföed
(
AO_HAVE_‹_ªad
)

834 
	#AO_‹
(
addr
, 
vÆ
) \

835 
	`AO_‹_ªad
(
addr
, 
vÆ
)

	)

836 
	#AO_HAVE_‹


	)

839 #i‡
	`deföed
(
AO_HAVE_‹_acquúe
) &&\

840 
	`deföed
(
AO_HAVE_n›_fuŒ
) && \

841 !
	$deföed
(
AO_HAVE_‹_fuŒ
)

842 
	#AO_‹_fuŒ
(
addr
, 
vÆ
) \

843 (
	`AO_n›_fuŒ
(), 
	`AO_‹_acquúe
(
addr
, 
vÆ
))

	)

846 #i‡!
	`deföed
(
AO_HAVE_‹_ªÀa£_wrôe
) && \

847 
	$deföed
(
AO_HAVE_‹_wrôe
)

848 
	#AO_‹_ªÀa£_wrôe
(
addr
, 
vÆ
) \

849 
	`AO_‹_wrôe
(
addr
, 
vÆ
)

	)

850 
	#AO_HAVE_‹_ªÀa£_wrôe


	)

852 #i‡!
	`deföed
(
AO_HAVE_‹_ªÀa£_wrôe
) && \

853 
	$deföed
(
AO_HAVE_‹_ªÀa£
)

854 
	#AO_‹_ªÀa£_wrôe
(
addr
, 
vÆ
) \

855 
	`AO_‹_ªÀa£
(
addr
, 
vÆ
)

	)

856 
	#AO_HAVE_‹_ªÀa£_wrôe


	)

858 #i‡!
	`deföed
(
AO_HAVE_‹_acquúe_ªad
) && \

859 
	$deföed
(
AO_HAVE_‹_ªad
)

860 
	#AO_‹_acquúe_ªad
(
addr
, 
vÆ
) \

861 
	`AO_‹_ªad
(
addr
, 
vÆ
)

	)

862 
	#AO_HAVE_‹_acquúe_ªad


	)

864 #i‡!
	`deföed
(
AO_HAVE_‹_acquúe_ªad
) && \

865 
	$deföed
(
AO_HAVE_‹_acquúe
)

866 
	#AO_‹_acquúe_ªad
(
addr
, 
vÆ
) \

867 
	`AO_‹_acquúe
(
addr
, 
vÆ
)

	)

868 
	#AO_HAVE_‹_acquúe_ªad


	)

875 #i‡
	`deföed
(
AO_HAVE_ã°_™d_£t_fuŒ
)

876 #i‡!
	`deföed
(
AO_HAVE_ã°_™d_£t_ªÀa£
)

877 
	#AO_ã°_™d_£t_ªÀa£
(
addr
) \

878 
	`AO_ã°_™d_£t_fuŒ
(
addr
)

	)

879 
	#AO_HAVE_ã°_™d_£t_ªÀa£


	)

881 #i‡!
	`deföed
(
AO_HAVE_ã°_™d_£t_acquúe
)

882 
	#AO_ã°_™d_£t_acquúe
(
addr
) \

883 
	`AO_ã°_™d_£t_fuŒ
(
addr
)

	)

884 
	#AO_HAVE_ã°_™d_£t_acquúe


	)

886 #i‡!
	`deföed
(
AO_HAVE_ã°_™d_£t_wrôe
)

887 
	#AO_ã°_™d_£t_wrôe
(
addr
) \

888 
	`AO_ã°_™d_£t_fuŒ
(
addr
)

	)

889 
	#AO_HAVE_ã°_™d_£t_wrôe


	)

891 #i‡!
	`deföed
(
AO_HAVE_ã°_™d_£t_ªad
)

892 
	#AO_ã°_™d_£t_ªad
(
addr
) \

893 
	`AO_ã°_™d_£t_fuŒ
(
addr
)

	)

894 
	#AO_HAVE_ã°_™d_£t_ªad


	)

898 #i‡!
	`deföed
(
AO_HAVE_ã°_™d_£t
) && \

899 
	$deföed
(
AO_HAVE_ã°_™d_£t_ªÀa£
)

900 
	#AO_ã°_™d_£t
(
addr
) \

901 
	`AO_ã°_™d_£t_ªÀa£
(
addr
)

	)

902 
	#AO_HAVE_ã°_™d_£t


	)

904 #i‡!
	`deföed
(
AO_HAVE_ã°_™d_£t
) && \

905 
	$deföed
(
AO_HAVE_ã°_™d_£t_acquúe
)

906 
	#AO_ã°_™d_£t
(
addr
) \

907 
	`AO_ã°_™d_£t_acquúe
(
addr
)

	)

908 
	#AO_HAVE_ã°_™d_£t


	)

910 #i‡!
	`deföed
(
AO_HAVE_ã°_™d_£t
) && \

911 
	$deföed
(
AO_HAVE_ã°_™d_£t_wrôe
)

912 
	#AO_ã°_™d_£t
(
addr
) \

913 
	`AO_ã°_™d_£t_wrôe
(
addr
)

	)

914 
	#AO_HAVE_ã°_™d_£t


	)

916 #i‡!
	`deföed
(
AO_HAVE_ã°_™d_£t
) && \

917 
	$deföed
(
AO_HAVE_ã°_™d_£t_ªad
)

918 
	#AO_ã°_™d_£t
(
addr
) \

919 
	`AO_ã°_™d_£t_ªad
(
addr
)

	)

920 
	#AO_HAVE_ã°_™d_£t


	)

923 #i‡
	`deföed
(
AO_HAVE_ã°_™d_£t_acquúe
) &&\

924 
	`deföed
(
AO_HAVE_n›_fuŒ
) && \

925 !
	$deföed
(
AO_HAVE_ã°_™d_£t_fuŒ
)

926 
	#AO_ã°_™d_£t_fuŒ
(
addr
) \

927 (
	`AO_n›_fuŒ
(), 
	`AO_ã°_™d_£t_acquúe
(
addr
))

	)

928 
	#AO_HAVE_ã°_™d_£t_fuŒ


	)

931 #i‡!
	`deföed
(
AO_HAVE_ã°_™d_£t_ªÀa£_wrôe
) && \

932 
	$deföed
(
AO_HAVE_ã°_™d_£t_wrôe
)

933 
	#AO_ã°_™d_£t_ªÀa£_wrôe
(
addr
) \

934 
	`AO_ã°_™d_£t_wrôe
(
addr
)

	)

935 
	#AO_HAVE_ã°_™d_£t_ªÀa£_wrôe


	)

937 #i‡!
	`deföed
(
AO_HAVE_ã°_™d_£t_ªÀa£_wrôe
) && \

938 
	$deföed
(
AO_HAVE_ã°_™d_£t_ªÀa£
)

939 
	#AO_ã°_™d_£t_ªÀa£_wrôe
(
addr
) \

940 
	`AO_ã°_™d_£t_ªÀa£
(
addr
)

	)

941 
	#AO_HAVE_ã°_™d_£t_ªÀa£_wrôe


	)

943 #i‡!
	`deföed
(
AO_HAVE_ã°_™d_£t_acquúe_ªad
) && \

944 
	$deföed
(
AO_HAVE_ã°_™d_£t_ªad
)

945 
	#AO_ã°_™d_£t_acquúe_ªad
(
addr
) \

946 
	`AO_ã°_™d_£t_ªad
(
addr
)

	)

947 
	#AO_HAVE_ã°_™d_£t_acquúe_ªad


	)

949 #i‡!
	`deföed
(
AO_HAVE_ã°_™d_£t_acquúe_ªad
) && \

950 
	$deföed
(
AO_HAVE_ã°_™d_£t_acquúe
)

951 
	#AO_ã°_™d_£t_acquúe_ªad
(
addr
) \

952 
	`AO_ã°_™d_£t_acquúe
(
addr
)

	)

953 
	#AO_HAVE_ã°_™d_£t_acquúe_ªad


	)

956 #ifde‡
AO_NO_DD_ORDERING


957 #i‡
	`deföed
(
AO_HAVE_ã°_™d_£t_acquúe_ªad
)

958 
	#AO_ã°_™d_£t_dd_acquúe_ªad
(
addr
) \

959 
	`AO_ã°_™d_£t_acquúe_ªad
(
addr
)

	)

960 
	#AO_HAVE_ã°_™d_£t_dd_acquúe_ªad


	)

963 #i‡
	`deföed
(
AO_HAVE_ã°_™d_£t
)

964 
	#AO_ã°_™d_£t_dd_acquúe_ªad
(
addr
Ë
	`AO_ã°_™d_£t
◊ddr)

	)

965 
	#AO_HAVE_ã°_™d_£t_dd_acquúe_ªad


	)

970 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠
Ë&& deföed(
AO_HAVE_n›_fuŒ
)\

971 && !
	$deföed
(
AO_HAVE_com∑ª_™d_sw≠_acquúe
)

972 
AO_INLINE
 

973 
	$AO_com∑ª_™d_sw≠_acquúe
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd
, AO_à
√w_vÆ
)

975 
ªsu…
 = 
	`AO_com∑ª_™d_sw≠
(
addr
, 
ﬁd
, 
√w_vÆ
);

976 
	`AO_n›_fuŒ
();

977  
ªsu…
;

978 
	}
}

979 
	#AO_HAVE_com∑ª_™d_sw≠_acquúe


	)

981 #i‡
deföed
(
AO_HAVE_com∑ª_™d_sw≠
Ë&& deföed(
AO_HAVE_n›_fuŒ
)\

982 && !
	$deföed
(
AO_HAVE_com∑ª_™d_sw≠_ªÀa£
)

983 
	#AO_com∑ª_™d_sw≠_ªÀa£
(
addr
, 
ﬁd
, 
√w_vÆ
) \

984 (
	`AO_n›_fuŒ
(), 
	`AO_com∑ª_™d_sw≠
(
addr
, 
ﬁd
, 
√w_vÆ
))

	)

985 
	#AO_HAVE_com∑ª_™d_sw≠_ªÀa£


	)

987 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_fuŒ
)

988 #i‡!
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_ªÀa£
)

989 
	#AO_com∑ª_™d_sw≠_ªÀa£
(
addr
, 
ﬁd
, 
√w_vÆ
) \

990 
	`AO_com∑ª_™d_sw≠_fuŒ
(
addr
, 
ﬁd
, 
√w_vÆ
)

	)

991 
	#AO_HAVE_com∑ª_™d_sw≠_ªÀa£


	)

993 #i‡!
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_acquúe
)

994 
	#AO_com∑ª_™d_sw≠_acquúe
(
addr
, 
ﬁd
, 
√w_vÆ
) \

995 
	`AO_com∑ª_™d_sw≠_fuŒ
(
addr
, 
ﬁd
, 
√w_vÆ
)

	)

996 
	#AO_HAVE_com∑ª_™d_sw≠_acquúe


	)

998 #i‡!
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_wrôe
)

999 
	#AO_com∑ª_™d_sw≠_wrôe
(
addr
, 
ﬁd
, 
√w_vÆ
) \

1000 
	`AO_com∑ª_™d_sw≠_fuŒ
(
addr
, 
ﬁd
, 
√w_vÆ
)

	)

1001 
	#AO_HAVE_com∑ª_™d_sw≠_wrôe


	)

1003 #i‡!
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_ªad
)

1004 
	#AO_com∑ª_™d_sw≠_ªad
(
addr
, 
ﬁd
, 
√w_vÆ
) \

1005 
	`AO_com∑ª_™d_sw≠_fuŒ
(
addr
, 
ﬁd
, 
√w_vÆ
)

	)

1006 
	#AO_HAVE_com∑ª_™d_sw≠_ªad


	)

1010 #i‡!
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠
) && \

1011 
	$deföed
(
AO_HAVE_com∑ª_™d_sw≠_ªÀa£
)

1012 
	#AO_com∑ª_™d_sw≠
(
addr
, 
ﬁd
, 
√w_vÆ
) \

1013 
	`AO_com∑ª_™d_sw≠_ªÀa£
(
addr
, 
ﬁd
, 
√w_vÆ
)

	)

1014 
	#AO_HAVE_com∑ª_™d_sw≠


	)

1016 #i‡!
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠
) && \

1017 
	$deföed
(
AO_HAVE_com∑ª_™d_sw≠_acquúe
)

1018 
	#AO_com∑ª_™d_sw≠
(
addr
, 
ﬁd
, 
√w_vÆ
) \

1019 
	`AO_com∑ª_™d_sw≠_acquúe
(
addr
, 
ﬁd
, 
√w_vÆ
)

	)

1020 
	#AO_HAVE_com∑ª_™d_sw≠


	)

1022 #i‡!
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠
) && \

1023 
	$deföed
(
AO_HAVE_com∑ª_™d_sw≠_wrôe
)

1024 
	#AO_com∑ª_™d_sw≠
(
addr
, 
ﬁd
, 
√w_vÆ
) \

1025 
	`AO_com∑ª_™d_sw≠_wrôe
(
addr
, 
ﬁd
, 
√w_vÆ
)

	)

1026 
	#AO_HAVE_com∑ª_™d_sw≠


	)

1028 #i‡!
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠
) && \

1029 
	$deföed
(
AO_HAVE_com∑ª_™d_sw≠_ªad
)

1030 
	#AO_com∑ª_™d_sw≠
(
addr
, 
ﬁd
, 
√w_vÆ
) \

1031 
	`AO_com∑ª_™d_sw≠_ªad
(
addr
, 
ﬁd
, 
√w_vÆ
)

	)

1032 
	#AO_HAVE_com∑ª_™d_sw≠


	)

1035 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_acquúe
) &&\

1036 
	`deföed
(
AO_HAVE_n›_fuŒ
) && \

1037 !
	$deföed
(
AO_HAVE_com∑ª_™d_sw≠_fuŒ
)

1038 
	#AO_com∑ª_™d_sw≠_fuŒ
(
addr
, 
ﬁd
, 
√w_vÆ
) \

1039 (
	`AO_n›_fuŒ
(), 
	`AO_com∑ª_™d_sw≠_acquúe
(
addr
, 
ﬁd
, 
√w_vÆ
))

	)

1040 
	#AO_HAVE_com∑ª_™d_sw≠_fuŒ


	)

1043 #i‡!
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_ªÀa£_wrôe
) && \

1044 
	$deföed
(
AO_HAVE_com∑ª_™d_sw≠_wrôe
)

1045 
	#AO_com∑ª_™d_sw≠_ªÀa£_wrôe
(
addr
, 
ﬁd
, 
√w_vÆ
) \

1046 
	`AO_com∑ª_™d_sw≠_wrôe
(
addr
, 
ﬁd
, 
√w_vÆ
)

	)

1047 
	#AO_HAVE_com∑ª_™d_sw≠_ªÀa£_wrôe


	)

1049 #i‡!
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_ªÀa£_wrôe
) && \

1050 
	$deföed
(
AO_HAVE_com∑ª_™d_sw≠_ªÀa£
)

1051 
	#AO_com∑ª_™d_sw≠_ªÀa£_wrôe
(
addr
, 
ﬁd
, 
√w_vÆ
) \

1052 
	`AO_com∑ª_™d_sw≠_ªÀa£
(
addr
, 
ﬁd
, 
√w_vÆ
)

	)

1053 
	#AO_HAVE_com∑ª_™d_sw≠_ªÀa£_wrôe


	)

1055 #i‡!
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_acquúe_ªad
) && \

1056 
	$deföed
(
AO_HAVE_com∑ª_™d_sw≠_ªad
)

1057 
	#AO_com∑ª_™d_sw≠_acquúe_ªad
(
addr
, 
ﬁd
, 
√w_vÆ
) \

1058 
	`AO_com∑ª_™d_sw≠_ªad
(
addr
, 
ﬁd
, 
√w_vÆ
)

	)

1059 
	#AO_HAVE_com∑ª_™d_sw≠_acquúe_ªad


	)

1061 #i‡!
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_acquúe_ªad
) && \

1062 
	$deföed
(
AO_HAVE_com∑ª_™d_sw≠_acquúe
)

1063 
	#AO_com∑ª_™d_sw≠_acquúe_ªad
(
addr
, 
ﬁd
, 
√w_vÆ
) \

1064 
	`AO_com∑ª_™d_sw≠_acquúe
(
addr
, 
ﬁd
, 
√w_vÆ
)

	)

1065 
	#AO_HAVE_com∑ª_™d_sw≠_acquúe_ªad


	)

1068 #ifde‡
AO_NO_DD_ORDERING


1069 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_acquúe_ªad
)

1070 
	#AO_com∑ª_™d_sw≠_dd_acquúe_ªad
(
addr
, 
ﬁd
, 
√w_vÆ
) \

1071 
	`AO_com∑ª_™d_sw≠_acquúe_ªad
(
addr
, 
ﬁd
, 
√w_vÆ
)

	)

1072 
	#AO_HAVE_com∑ª_™d_sw≠_dd_acquúe_ªad


	)

1075 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠
)

1076 
	#AO_com∑ª_™d_sw≠_dd_acquúe_ªad
(
addr
, 
ﬁd
, 
√w_vÆ
) \

1077 
	`AO_com∑ª_™d_sw≠
(
addr
, 
ﬁd
, 
√w_vÆ
)

	)

1078 
	#AO_HAVE_com∑ª_™d_sw≠_dd_acquúe_ªad


	)

1082 
	~"gíîÆize-smÆl.h
"

1085 #i‡
	`deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ
Ë&& deföed(
AO_HAVE_n›_fuŒ
)\

1086 && !
	$deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe
)

1087 
AO_INLINE
 

1088 
	$AO_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe
(vﬁ©ûê
AO_doubÀ_t
 *
addr
,

1089 
AO_t
 
o1
, AO_à
o2
,

1090 
AO_t
 
n1
, AO_à
n2
)

1092 
ªsu…
 = 
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
);

1093 
	`AO_n›_fuŒ
();

1094  
ªsu…
;

1095 
	}
}

1096 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe


	)

1098 #i‡
deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ
) \

1099 && 
deföed
(
AO_HAVE_n›_fuŒ
)\

1100 && !
	$deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_ªÀa£
)

1101 
	#AO_com∑ª_doubÀ_™d_sw≠_doubÀ_ªÀa£
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
) \

1102 (
	`AO_n›_fuŒ
(), 
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
))

	)

1103 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_ªÀa£


	)

1105 #i‡
	`deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ
)

1106 #i‡!
	`deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_ªÀa£
)

1107 
	#AO_com∑ª_doubÀ_™d_sw≠_doubÀ_ªÀa£
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
) \

1108 
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
)

	)

1109 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_ªÀa£


	)

1111 #i‡!
	`deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe
)

1112 
	#AO_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
) \

1113 
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
)

	)

1114 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe


	)

1116 #i‡!
	`deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_wrôe
)

1117 
	#AO_com∑ª_doubÀ_™d_sw≠_doubÀ_wrôe
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
) \

1118 
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
)

	)

1119 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_wrôe


	)

1121 #i‡!
	`deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_ªad
)

1122 
	#AO_com∑ª_doubÀ_™d_sw≠_doubÀ_ªad
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
) \

1123 
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
)

	)

1124 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_ªad


	)

1128 #i‡!
	`deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ
) && \

1129 
	$deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_ªÀa£
)

1130 
	#AO_com∑ª_doubÀ_™d_sw≠_doubÀ
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
) \

1131 
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_ªÀa£
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
)

	)

1132 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ


	)

1134 #i‡!
	`deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ
) && \

1135 
	$deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe
)

1136 
	#AO_com∑ª_doubÀ_™d_sw≠_doubÀ
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
) \

1137 
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
)

	)

1138 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ


	)

1140 #i‡!
	`deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ
) && \

1141 
	$deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_wrôe
)

1142 
	#AO_com∑ª_doubÀ_™d_sw≠_doubÀ
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
) \

1143 
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_wrôe
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
)

	)

1144 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ


	)

1146 #i‡!
	`deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ
) && \

1147 
	$deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_ªad
)

1148 
	#AO_com∑ª_doubÀ_™d_sw≠_doubÀ
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
) \

1149 
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_ªad
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
)

	)

1150 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ


	)

1153 #i‡
	`deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe
) &&\

1154 
	`deföed
(
AO_HAVE_n›_fuŒ
) && \

1155 !
	$deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ
)

1156 
	#AO_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
) \

1157 (
	`AO_n›_fuŒ
(), 
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
))

	)

1158 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ


	)

1161 #i‡!
	`deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_ªÀa£_wrôe
) && \

1162 
	$deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_wrôe
)

1163 
	#AO_com∑ª_doubÀ_™d_sw≠_doubÀ_ªÀa£_wrôe
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
) \

1164 
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_wrôe
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
)

	)

1165 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_ªÀa£_wrôe


	)

1167 #i‡!
	`deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_ªÀa£_wrôe
) && \

1168 
	$deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_ªÀa£
)

1169 
	#AO_com∑ª_doubÀ_™d_sw≠_doubÀ_ªÀa£_wrôe
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
) \

1170 
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_ªÀa£
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
)

	)

1171 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_ªÀa£_wrôe


	)

1173 #i‡!
	`deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe_ªad
) && \

1174 
	$deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_ªad
)

1175 
	#AO_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe_ªad
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
) \

1176 
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_ªad
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
)

	)

1177 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe_ªad


	)

1179 #i‡!
	`deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe_ªad
) && \

1180 
	$deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe
)

1181 
	#AO_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe_ªad
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
) \

1182 
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
)

	)

1183 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe_ªad


	)

1186 #ifde‡
AO_NO_DD_ORDERING


1187 #i‡
	`deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe_ªad
)

1188 
	#AO_com∑ª_doubÀ_™d_sw≠_doubÀ_dd_acquúe_ªad
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
) \

1189 
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe_ªad
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
)

	)

1190 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_dd_acquúe_ªad


	)

1193 #i‡
	`deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ
)

1194 
	#AO_com∑ª_doubÀ_™d_sw≠_doubÀ_dd_acquúe_ªad
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
) \

1195 
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
)

	)

1196 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_dd_acquúe_ªad


	)

1201 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ
Ë&& deföed(
AO_HAVE_n›_fuŒ
)\

1202 && !
	$deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ_acquúe
)

1203 
AO_INLINE
 

1204 
	$AO_com∑ª_™d_sw≠_doubÀ_acquúe
(vﬁ©ûê
AO_doubÀ_t
 *
addr
,

1205 
AO_t
 
o1
,

1206 
AO_t
 
n1
, AO_à
n2
)

1208 
ªsu…
 = 
	`AO_com∑ª_™d_sw≠_doubÀ
(
addr
, 
o1
, 
n1
, 
n2
);

1209 
	`AO_n›_fuŒ
();

1210  
ªsu…
;

1211 
	}
}

1212 
	#AO_HAVE_com∑ª_™d_sw≠_doubÀ_acquúe


	)

1214 #i‡
deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ
) \

1215 && 
deföed
(
AO_HAVE_n›_fuŒ
)\

1216 && !
	$deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ_ªÀa£
)

1217 
	#AO_com∑ª_™d_sw≠_doubÀ_ªÀa£
(
addr
, 
o1
, 
n1
, 
n2
) \

1218 (
	`AO_n›_fuŒ
(), 
	`AO_com∑ª_™d_sw≠_doubÀ
(
addr
, 
o1
, 
n1
, 
n2
))

	)

1219 
	#AO_HAVE_com∑ª_™d_sw≠_doubÀ_ªÀa£


	)

1221 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ_fuŒ
)

1222 #i‡!
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ_ªÀa£
)

1223 
	#AO_com∑ª_™d_sw≠_doubÀ_ªÀa£
(
addr
, 
o1
, 
n1
, 
n2
) \

1224 
	`AO_com∑ª_™d_sw≠_doubÀ_fuŒ
(
addr
, 
o1
, 
n1
, 
n2
)

	)

1225 
	#AO_HAVE_com∑ª_™d_sw≠_doubÀ_ªÀa£


	)

1227 #i‡!
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ_acquúe
)

1228 
	#AO_com∑ª_™d_sw≠_doubÀ_acquúe
(
addr
, 
o1
, 
n1
, 
n2
) \

1229 
	`AO_com∑ª_™d_sw≠_doubÀ_fuŒ
(
addr
, 
o1
, 
n1
, 
n2
)

	)

1230 
	#AO_HAVE_com∑ª_™d_sw≠_doubÀ_acquúe


	)

1232 #i‡!
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ_wrôe
)

1233 
	#AO_com∑ª_™d_sw≠_doubÀ_wrôe
(
addr
, 
o1
, 
n1
, 
n2
) \

1234 
	`AO_com∑ª_™d_sw≠_doubÀ_fuŒ
(
addr
, 
o1
, 
n1
, 
n2
)

	)

1235 
	#AO_HAVE_com∑ª_™d_sw≠_doubÀ_wrôe


	)

1237 #i‡!
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ_ªad
)

1238 
	#AO_com∑ª_™d_sw≠_doubÀ_ªad
(
addr
, 
o1
, 
n1
, 
n2
) \

1239 
	`AO_com∑ª_™d_sw≠_doubÀ_fuŒ
(
addr
, 
o1
, 
n1
, 
n2
)

	)

1240 
	#AO_HAVE_com∑ª_™d_sw≠_doubÀ_ªad


	)

1244 #i‡!
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ
) && \

1245 
	$deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ_ªÀa£
)

1246 
	#AO_com∑ª_™d_sw≠_doubÀ
(
addr
, 
o1
, 
n1
, 
n2
) \

1247 
	`AO_com∑ª_™d_sw≠_doubÀ_ªÀa£
(
addr
, 
o1
, 
n1
, 
n2
)

	)

1248 
	#AO_HAVE_com∑ª_™d_sw≠_doubÀ


	)

1250 #i‡!
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ
) && \

1251 
	$deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ_acquúe
)

1252 
	#AO_com∑ª_™d_sw≠_doubÀ
(
addr
, 
o1
, 
n1
, 
n2
) \

1253 
	`AO_com∑ª_™d_sw≠_doubÀ_acquúe
(
addr
, 
o1
, 
n1
, 
n2
)

	)

1254 
	#AO_HAVE_com∑ª_™d_sw≠_doubÀ


	)

1256 #i‡!
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ
) && \

1257 
	$deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ_wrôe
)

1258 
	#AO_com∑ª_™d_sw≠_doubÀ
(
addr
, 
o1
, 
n1
, 
n2
) \

1259 
	`AO_com∑ª_™d_sw≠_doubÀ_wrôe
(
addr
, 
o1
, 
n1
, 
n2
)

	)

1260 
	#AO_HAVE_com∑ª_™d_sw≠_doubÀ


	)

1262 #i‡!
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ
) && \

1263 
	$deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ_ªad
)

1264 
	#AO_com∑ª_™d_sw≠_doubÀ
(
addr
, 
o1
, 
n1
, 
n2
) \

1265 
	`AO_com∑ª_™d_sw≠_doubÀ_ªad
(
addr
, 
o1
, 
n1
, 
n2
)

	)

1266 
	#AO_HAVE_com∑ª_™d_sw≠_doubÀ


	)

1269 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ_acquúe
) &&\

1270 
	`deföed
(
AO_HAVE_n›_fuŒ
) && \

1271 !
	$deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ_fuŒ
)

1272 
	#AO_com∑ª_™d_sw≠_doubÀ_fuŒ
(
addr
, 
o1
, 
n1
, 
n2
) \

1273 (
	`AO_n›_fuŒ
(), 
	`AO_com∑ª_™d_sw≠_doubÀ_acquúe
(
addr
, 
o1
, 
n1
, 
n2
))

	)

1274 
	#AO_HAVE_com∑ª_™d_sw≠_doubÀ_fuŒ


	)

1277 #i‡!
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ_ªÀa£_wrôe
) && \

1278 
	$deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ_wrôe
)

1279 
	#AO_com∑ª_™d_sw≠_doubÀ_ªÀa£_wrôe
(
addr
, 
o1
, 
n1
, 
n2
) \

1280 
	`AO_com∑ª_™d_sw≠_doubÀ_wrôe
(
addr
, 
o1
, 
n1
, 
n2
)

	)

1281 
	#AO_HAVE_com∑ª_™d_sw≠_doubÀ_ªÀa£_wrôe


	)

1283 #i‡!
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ_ªÀa£_wrôe
) && \

1284 
	$deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ_ªÀa£
)

1285 
	#AO_com∑ª_™d_sw≠_doubÀ_ªÀa£_wrôe
(
addr
, 
o1
, 
n1
, 
n2
) \

1286 
	`AO_com∑ª_™d_sw≠_doubÀ_ªÀa£
(
addr
, 
o1
, 
n1
, 
n2
)

	)

1287 
	#AO_HAVE_com∑ª_™d_sw≠_doubÀ_ªÀa£_wrôe


	)

1289 #i‡!
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ_acquúe_ªad
) && \

1290 
	$deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ_ªad
)

1291 
	#AO_com∑ª_™d_sw≠_doubÀ_acquúe_ªad
(
addr
, 
o1
, 
n1
, 
n2
) \

1292 
	`AO_com∑ª_™d_sw≠_doubÀ_ªad
(
addr
, 
o1
, 
n1
, 
n2
)

	)

1293 
	#AO_HAVE_com∑ª_™d_sw≠_doubÀ_acquúe_ªad


	)

1295 #i‡!
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ_acquúe_ªad
) && \

1296 
	$deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ_acquúe
)

1297 
	#AO_com∑ª_™d_sw≠_doubÀ_acquúe_ªad
(
addr
, 
o1
, 
n1
, 
n2
) \

1298 
	`AO_com∑ª_™d_sw≠_doubÀ_acquúe
(
addr
, 
o1
, 
n1
, 
n2
)

	)

1299 
	#AO_HAVE_com∑ª_™d_sw≠_doubÀ_acquúe_ªad


	)

1302 #ifde‡
AO_NO_DD_ORDERING


1303 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ_acquúe_ªad
)

1304 
	#AO_com∑ª_™d_sw≠_doubÀ_dd_acquúe_ªad
(
addr
, 
o1
, 
n1
, 
n2
) \

1305 
	`AO_com∑ª_™d_sw≠_doubÀ_acquúe_ªad
(
addr
, 
o1
, 
n1
, 
n2
)

	)

1306 
	#AO_HAVE_com∑ª_™d_sw≠_doubÀ_dd_acquúe_ªad


	)

1309 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ
)

1310 
	#AO_com∑ª_™d_sw≠_doubÀ_dd_acquúe_ªad
(
addr
, 
o1
, 
n1
, 
n2
) \

1311 
	`AO_com∑ª_™d_sw≠_doubÀ
(
addr
, 
o1
, 
n1
, 
n2
)

	)

1312 
	#AO_HAVE_com∑ª_™d_sw≠_doubÀ_dd_acquúe_ªad


	)

1318 #i‡
	`deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_ªÀa£
) && \

1319 !
	$deföed
(
AO_HAVE_doubÀ_com∑ª_™d_sw≠_ªÀa£
)

1320 
AO_INLINE
 

1321 
	$AO_doubÀ_com∑ª_™d_sw≠_ªÀa£
(vﬁ©ûê
AO_doubÀ_t
 *
addr
,

1322 
AO_doubÀ_t
 
ﬁd_vÆ
, AO_doubÀ_à
√w_vÆ
)

1324  
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_ªÀa£
(
addr
,

1325 
ﬁd_vÆ
.
AO_vÆ1
, old_vÆ.
AO_vÆ2
,

1326 
√w_vÆ
.
AO_vÆ1
,Çew_vÆ.
AO_vÆ2
);

1327 
	}
}

1328 
	#AO_HAVE_doubÀ_com∑ª_™d_sw≠_ªÀa£


	)

1331 #i‡
deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe
) && \

1332 !
	$deföed
(
AO_HAVE_doubÀ_com∑ª_™d_sw≠_acquúe
)

1333 
AO_INLINE
 

1334 
	$AO_doubÀ_com∑ª_™d_sw≠_acquúe
(vﬁ©ûê
AO_doubÀ_t
 *
addr
,

1335 
AO_doubÀ_t
 
ﬁd_vÆ
, AO_doubÀ_à
√w_vÆ
)

1337  
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe
(
addr
,

1338 
ﬁd_vÆ
.
AO_vÆ1
, old_vÆ.
AO_vÆ2
,

1339 
√w_vÆ
.
AO_vÆ1
,Çew_vÆ.
AO_vÆ2
);

1340 
	}
}

1341 
	#AO_HAVE_doubÀ_com∑ª_™d_sw≠_acquúe


	)

1344 #i‡
deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ
) && \

1345 !
	$deföed
(
AO_HAVE_doubÀ_com∑ª_™d_sw≠_fuŒ
)

1346 
AO_INLINE
 

1347 
	$AO_doubÀ_com∑ª_™d_sw≠_fuŒ
(vﬁ©ûê
AO_doubÀ_t
 *
addr
,

1348 
AO_doubÀ_t
 
ﬁd_vÆ
, AO_doubÀ_à
√w_vÆ
)

1350  
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ
(
addr
,

1351 
ﬁd_vÆ
.
AO_vÆ1
, old_vÆ.
AO_vÆ2
,

1352 
√w_vÆ
.
AO_vÆ1
,Çew_vÆ.
AO_vÆ2
);

1353 
	}
}

1354 
	#AO_HAVE_doubÀ_com∑ª_™d_sw≠_fuŒ


	)

	@atomic_ops/ia64.h

23 
	~"Æig√d_©omic_lﬂd_°‹e.h
"

25 
	~"Æl_acquúe_ªÀa£_vﬁ©ûe.h
"

27 
	~"ã°_™d_£t_t_is_ch¨.h
"

29 #ifde‡
_ILP32


34 
	#AO_LEN
 "4"

	)

45 
	#AO_IN_ADDR
 "1"(
addr
)

	)

46 
	#AO_OUT_ADDR
 , "Ù"(
addr
)

	)

47 
	#AO_SWIZZLE
 "addp4 %1=0,%1;;\n"

	)

48 
	#AO_MASK
(
±r
Ë
	`__asm__
("zxt4 %1=%1": "Ù"’åË: "0"’å));

	)

50 
	#AO_LEN
 "8"

	)

51 
	#AO_IN_ADDR
 "r"(
addr
)

	)

52 
	#AO_OUT_ADDR


	)

53 
	#AO_SWIZZLE


	)

54 
	#AO_MASK
(
±r
)

	)

57 
AO_INLINE
 

58 
	$AO_n›_fuŒ
()

60 
__asm__
 
	`__vﬁ©ûe__
("mf" : : : "memory");

61 
	}
}

62 
	#AO_HAVE_n›_fuŒ


	)

64 
AO_INLINE
 
AO_t


65 
	$AO_„tch_™d_add1_acquúe
 (vﬁ©ûê
AO_t
 *
addr
)

67 
AO_t
 
ªsu…
;

69 
__asm__
 
	`__vﬁ©ûe__
 (
AO_SWIZZLE


70 "„tchadd" 
AO_LEN
 ".acq %0=[%1],1":

71 "Ù" (
ªsu…
Ë
AO_OUT_ADDR
: 
AO_IN_ADDR
 :"memory");

72  
ªsu…
;

73 
	}
}

74 
	#AO_HAVE_„tch_™d_add1_acquúe


	)

76 
AO_INLINE
 
AO_t


77 
	$AO_„tch_™d_add1_ªÀa£
 (vﬁ©ûê
AO_t
 *
addr
)

79 
AO_t
 
ªsu…
;

81 
__asm__
 
	`__vﬁ©ûe__
 (
AO_SWIZZLE


82 "„tchadd" 
AO_LEN
 ".rel %0=[%1],1":

83 "Ù" (
ªsu…
Ë
AO_OUT_ADDR
: 
AO_IN_ADDR
 :"memory");

84  
ªsu…
;

85 
	}
}

87 
	#AO_HAVE_„tch_™d_add1_ªÀa£


	)

89 
AO_INLINE
 
AO_t


90 
	$AO_„tch_™d_sub1_acquúe
 (vﬁ©ûê
AO_t
 *
addr
)

92 
AO_t
 
ªsu…
;

94 
__asm__
 
	`__vﬁ©ûe__
 (
AO_SWIZZLE


95 "„tchadd" 
AO_LEN
 ".acq %0=[%1],-1":

96 "Ù" (
ªsu…
Ë
AO_OUT_ADDR
: 
AO_IN_ADDR
 :"memory");

97  
ªsu…
;

98 
	}
}

100 
	#AO_HAVE_„tch_™d_sub1_acquúe


	)

102 
AO_INLINE
 
AO_t


103 
	$AO_„tch_™d_sub1_ªÀa£
 (vﬁ©ûê
AO_t
 *
addr
)

105 
AO_t
 
ªsu…
;

107 
__asm__
 
	`__vﬁ©ûe__
 (
AO_SWIZZLE


108 "„tchadd" 
AO_LEN
 ".rel %0=[%1],-1":

109 "Ù" (
ªsu…
Ë
AO_OUT_ADDR
: 
AO_IN_ADDR
 :"memory");

110  
ªsu…
;

111 
	}
}

113 
	#AO_HAVE_„tch_™d_sub1_ªÀa£


	)

115 #i‚de‡
_ILP32


117 
AO_INLINE
 

118 
	$AO_öt_„tch_™d_add1_acquúe
 (vﬁ©ûê*
addr
)

120 
ªsu…
;

122 
__asm__
 
	`__vﬁ©ûe__
 ("fetchadd4.acq %0=[%1],1":

123 "Ù" (
ªsu…
): 
AO_IN_ADDR
 :"memory");

124  
ªsu…
;

125 
	}
}

126 
	#AO_HAVE_öt_„tch_™d_add1_acquúe


	)

128 
AO_INLINE
 

129 
	$AO_öt_„tch_™d_add1_ªÀa£
 (vﬁ©ûê*
addr
)

131 
ªsu…
;

133 
__asm__
 
	`__vﬁ©ûe__
 ("fetchadd4.rel %0=[%1],1":

134 "Ù" (
ªsu…
): 
AO_IN_ADDR
 :"memory");

135  
ªsu…
;

136 
	}
}

138 
	#AO_HAVE_öt_„tch_™d_add1_ªÀa£


	)

140 
AO_INLINE
 

141 
	$AO_öt_„tch_™d_sub1_acquúe
 (vﬁ©ûê*
addr
)

143 
ªsu…
;

145 
__asm__
 
	`__vﬁ©ûe__
 ("fetchadd4.acq %0=[%1],-1":

146 "Ù" (
ªsu…
): 
AO_IN_ADDR
 :"memory");

147  
ªsu…
;

148 
	}
}

150 
	#AO_HAVE_öt_„tch_™d_sub1_acquúe


	)

152 
AO_INLINE
 

153 
	$AO_öt_„tch_™d_sub1_ªÀa£
 (vﬁ©ûê*
addr
)

155 
ªsu…
;

157 
__asm__
 
	`__vﬁ©ûe__
 ("fetchadd4.rel %0=[%1],-1":

158 "Ù" (
ªsu…
): 
AO_IN_ADDR
 :"memory");

159  
ªsu…
;

160 
	}
}

162 
	#AO_HAVE_öt_„tch_™d_sub1_ªÀa£


	)

166 
AO_INLINE
 

167 
	$AO_com∑ª_™d_sw≠_acquúe
(vﬁ©ûê
AO_t
 *
addr
,

168 
AO_t
 
ﬁd
, AO_à
√w_vÆ
)

170 
AO_t
 
ﬁdvÆ
;

171 
	`AO_MASK
(
ﬁd
);

172 
__asm__
 
	`__vﬁ©ûe__
(
AO_SWIZZLE


173 "movár.ccv=%[ﬁd] ;; cmpxchg" 
AO_LEN


175 : "Ù"(
ﬁdvÆ
Ë
AO_OUT_ADDR


176 : 
AO_IN_ADDR
, [
√w_vÆ
]"r"“ew_vÆ), [
ﬁd
]"r"(old)

178  (
ﬁdvÆ
 =
ﬁd
);

179 
	}
}

181 
	#AO_HAVE_com∑ª_™d_sw≠_acquúe


	)

183 
AO_INLINE
 

184 
	$AO_com∑ª_™d_sw≠_ªÀa£
(vﬁ©ûê
AO_t
 *
addr
,

185 
AO_t
 
ﬁd
, AO_à
√w_vÆ
)

187 
AO_t
 
ﬁdvÆ
;

188 
	`AO_MASK
(
ﬁd
);

189 
__asm__
 
	`__vﬁ©ûe__
(
AO_SWIZZLE


190 "movár.ccv=%[ﬁd] ;; cmpxchg" 
AO_LEN


192 : "Ù"(
ﬁdvÆ
Ë
AO_OUT_ADDR


193 : 
AO_IN_ADDR
, [
√w_vÆ
]"r"“ew_vÆ), [
ﬁd
]"r"(old)

195  (
ﬁdvÆ
 =
ﬁd
);

196 
	}
}

198 
	#AO_HAVE_com∑ª_™d_sw≠_ªÀa£


	)

200 
AO_INLINE
 

201 
	$AO_ch¨_com∑ª_™d_sw≠_acquúe
(vﬁ©ûê*
addr
,

202 
ﬁd
, 
√w_vÆ
)

204 
ﬁdvÆ
;

205 
__asm__
 
	`__vﬁ©ûe__
(
AO_SWIZZLE


207 : "Ù"(
ﬁdvÆ
Ë
AO_OUT_ADDR


208 : 
AO_IN_ADDR
, [
√w_vÆ
]"r"“ew_vÆ), [
ﬁd
]"r"((
AO_t
)old)

210  (
ﬁdvÆ
 =
ﬁd
);

211 
	}
}

213 
	#AO_HAVE_ch¨_com∑ª_™d_sw≠_acquúe


	)

215 
AO_INLINE
 

216 
	$AO_ch¨_com∑ª_™d_sw≠_ªÀa£
(vﬁ©ûê*
addr
,

217 
ﬁd
, 
√w_vÆ
)

219 
ﬁdvÆ
;

220 
__asm__
 
	`__vﬁ©ûe__
(
AO_SWIZZLE


222 : "Ù"(
ﬁdvÆ
Ë
AO_OUT_ADDR


223 : 
AO_IN_ADDR
, [
√w_vÆ
]"r"“ew_vÆ), [
ﬁd
]"r"((
AO_t
)old)

225  (
ﬁdvÆ
 =
ﬁd
);

226 
	}
}

228 
	#AO_HAVE_ch¨_com∑ª_™d_sw≠_ªÀa£


	)

230 
AO_INLINE
 

231 
	$AO_sh‹t_com∑ª_™d_sw≠_acquúe
(vﬁ©ûê*
addr
,

232 
ﬁd
, 
√w_vÆ
)

234 
ﬁdvÆ
;

235 
__asm__
 
	`__vﬁ©ûe__
(
AO_SWIZZLE


237 : "Ù"(
ﬁdvÆ
Ë
AO_OUT_ADDR


238 : 
AO_IN_ADDR
, [
√w_vÆ
]"r"“ew_vÆ), [
ﬁd
]"r"((
AO_t
)old)

240  (
ﬁdvÆ
 =
ﬁd
);

241 
	}
}

243 
	#AO_HAVE_sh‹t_com∑ª_™d_sw≠_acquúe


	)

245 
AO_INLINE
 

246 
	$AO_sh‹t_com∑ª_™d_sw≠_ªÀa£
(vﬁ©ûê*
addr
,

247 
ﬁd
, 
√w_vÆ
)

249 
ﬁdvÆ
;

250 
__asm__
 
	`__vﬁ©ûe__
(
AO_SWIZZLE


252 : "Ù"(
ﬁdvÆ
Ë
AO_OUT_ADDR


253 : 
AO_IN_ADDR
, [
√w_vÆ
]"r"“ew_vÆ), [
ﬁd
]"r"((
AO_t
)old)

255  (
ﬁdvÆ
 =
ﬁd
);

256 
	}
}

258 
	#AO_HAVE_sh‹t_com∑ª_™d_sw≠_ªÀa£


	)

260 #i‚de‡
_ILP32


262 
AO_INLINE
 

263 
	$AO_öt_com∑ª_™d_sw≠_acquúe
(vﬁ©ûê*
addr
,

264 
ﬁd
, 
√w_vÆ
)

266 
ﬁdvÆ
;

267 
__asm__
 
	`__vﬁ©ûe__
("movár.ccv=%3 ;; cmpxchg4.acq %0=[%1],%2,ar.ccv"

268 : "Ù"(
ﬁdvÆ
)

269 : 
AO_IN_ADDR
, "r"(
√w_vÆ
), "r"((
AO_t
)
ﬁd
) : "memory");

270  (
ﬁdvÆ
 =
ﬁd
);

271 
	}
}

273 
	#AO_HAVE_öt_com∑ª_™d_sw≠_acquúe


	)

275 
AO_INLINE
 

276 
	$AO_öt_com∑ª_™d_sw≠_ªÀa£
(vﬁ©ûê*
addr
,

277 
ﬁd
, 
√w_vÆ
)

279 
ﬁdvÆ
;

280 
__asm__
 
	`__vﬁ©ûe__
("movár.ccv=%3 ;; cmpxchg4.rel %0=[%1],%2,ar.ccv"

281 : "Ù"(
ﬁdvÆ
)

282 : 
AO_IN_ADDR
, "r"(
√w_vÆ
), "r"((
AO_t
)
ﬁd
) : "memory");

283  (
ﬁdvÆ
 =
ﬁd
);

284 
	}
}

286 
	#AO_HAVE_öt_com∑ª_™d_sw≠_ªÀa£


	)

295 #ifde‡
_ILP32


296 
	~"ao_t_is_öt.h
"

	@atomic_ops/ordered_except_wr.h

30 
	~"ªad_‹dîed.h
"

32 
AO_INLINE
 

33 
	$AO_n›_wrôe
()

35 
	`AO_compûî_b¨rõr
();

38 
	}
}

40 
	#AO_HAVE_NOP_WRITE


	)

42 #i‡
deföed
(
AO_HAVE_°‹e
)

44 
AO_INLINE
 

45 
	$AO_°‹e_wrôe
(vﬁ©ûê
AO_t
 *
addr
, AO_à
vÆ
)

47 
	`AO_compûî_b¨rõr
();

48 
	`AO_°‹e
(
addr
, 
vÆ
);

49 
	}
}

50 
	#AO_HAVE_°‹e_wrôe


	)

52 
	#AO_°‹e_ªÀa£
(
addr
, 
vÆ
Ë
	`AO_°‹e_wrôe
◊ddr, vÆ)

	)

53 
	#AO_HAVE_°‹e_ªÀa£


	)

57 #i‡
deföed
(
AO_HAVE_ch¨_°‹e
)

59 
AO_INLINE
 

60 
	$AO_ch¨_°‹e_wrôe
(vﬁ©ûê*
addr
, 
vÆ
)

62 
	`AO_compûî_b¨rõr
();

63 
	`AO_ch¨_°‹e
(
addr
, 
vÆ
);

64 
	}
}

65 
	#AO_HAVE_ch¨_°‹e_wrôe


	)

67 
	#AO_ch¨_°‹e_ªÀa£
(
addr
, 
vÆ
Ë
	`AO_ch¨_°‹e_wrôe
◊ddr, vÆ)

	)

68 
	#AO_HAVE_ch¨_°‹e_ªÀa£


	)

72 #i‡
deföed
(
AO_HAVE_sh‹t_°‹e
)

74 
AO_INLINE
 

75 
	$AO_sh‹t_°‹e_wrôe
(vﬁ©ûê*
addr
, 
vÆ
)

77 
	`AO_compûî_b¨rõr
();

78 
	`AO_sh‹t_°‹e
(
addr
, 
vÆ
);

79 
	}
}

80 
	#AO_HAVE_sh‹t_°‹e_wrôe


	)

82 
	#AO_sh‹t_°‹e_ªÀa£
(
addr
, 
vÆ
Ë
	`AO_sh‹t_°‹e_wrôe
◊ddr, vÆ)

	)

83 
	#AO_HAVE_sh‹t_°‹e_ªÀa£


	)

87 #i‡
deföed
(
AO_HAVE_öt_°‹e
)

89 
AO_INLINE
 

90 
	$AO_öt_°‹e_wrôe
(vﬁ©ûê*
addr
, 
vÆ
)

92 
	`AO_compûî_b¨rõr
();

93 
	`AO_öt_°‹e
(
addr
, 
vÆ
);

94 
	}
}

95 
	#AO_HAVE_öt_°‹e_wrôe


	)

97 
	#AO_öt_°‹e_ªÀa£
(
addr
, 
vÆ
Ë
	`AO_öt_°‹e_wrôe
◊ddr, vÆ)

	)

98 
	#AO_HAVE_öt_°‹e_ªÀa£


	)

	@atomic_ops/powerpc.h

33 
	~"Æig√d_©omic_lﬂd_°‹e.h
"

35 
	~"ã°_™d_£t_t_is_ao_t.h
"

39 
AO_INLINE
 

40 
	$AO_n›_fuŒ
()

42 
__asm__
 
	`__vﬁ©ûe__
("sync" : : : "memory");

43 
	}
}

45 
	#AO_HAVE_n›_fuŒ


	)

48 
AO_INLINE
 

49 
	$AO_lwsync
()

51 #ifde‡
__NO_LWSYNC__


52 
__asm__
 
	`__vﬁ©ûe__
("sync" : : : "memory");

54 
__asm__
 
	`__vﬁ©ûe__
("lwsync" : : : "memory");

56 
	}
}

58 
	#AO_n›_wrôe
(Ë
	`AO_lwsync
()

	)

59 
	#AO_HAVE_n›_wrôe


	)

61 
	#AO_n›_ªad
(Ë
	`AO_lwsync
()

	)

62 
	#AO_HAVE_n›_ªad


	)

71 #i‡
deföed
(
__powîpc64__
Ë|| deföed(
__µc64__
Ë|| deföed(
__64BIT__
)

72 
AO_INLINE
 
AO_t


73 
	$AO_lﬂd_acquúe
(c⁄° vﬁ©ûê
AO_t
 *
addr
)

75 
AO_t
 
ªsu…
;

77 
__asm__
 
	`__vﬁ©ûe__
 (

82 : "Ù" (
ªsu…
)

83 : "m"(*
addr
) : "memory", "cr0");

84  
ªsu…
;

85 
	}
}

87 
AO_INLINE
 
AO_t


88 
	$AO_lﬂd_acquúe
(c⁄° vﬁ©ûê
AO_t
 *
addr
)

90 
AO_t
 
ªsu…
;

95 
__asm__
 
	`__vﬁ©ûe__
 (

100 : "Ù" (
ªsu…
)

101 : "m"(*
addr
) : "memory", "cc");

102  
ªsu…
;

103 
	}
}

105 
	#AO_HAVE_lﬂd_acquúe


	)

109 
AO_INLINE
 

110 
	$AO_°‹e_ªÀa£
(vﬁ©ûê
AO_t
 *
addr
, AO_à
vÆue
)

112 
	`AO_lwsync
();

113 *
addr
 = 
vÆue
;

114 
	}
}

116 
	#AO_HAVE_lﬂd_acquúe


	)

121 #i‡
deföed
(
__powîpc64__
Ë|| deföed(
__µc64__
Ë|| deföed(
__64BIT__
)

123 
AO_INLINE
 
AO_TS_VAL_t


124 
	$AO_ã°_™d_£t
(vﬁ©ûê
AO_TS_t
 *
addr
) {

125 
ﬁdvÆ
;

126 
ãmp
 = 1;

128 
__asm__
 
	`__vﬁ©ûe__
(

135 : "=&r"(
ﬁdvÆ
)

136 : "r"(
addr
), "r"(
ãmp
)

139  (
AO_TS_VAL_t
)
ﬁdvÆ
;

140 
	}
}

144 
AO_INLINE
 
AO_TS_VAL_t


145 
	$AO_ã°_™d_£t
(vﬁ©ûê
AO_TS_t
 *
addr
) {

146 
ﬁdvÆ
;

147 
ãmp
 = 1;

149 
__asm__
 
	`__vﬁ©ûe__
(

156 : "=&r"(
ﬁdvÆ
)

157 : "r"(
addr
), "r"(
ãmp
)

160  (
AO_TS_VAL_t
)
ﬁdvÆ
;

161 
	}
}

165 
	#AO_HAVE_ã°_™d_£t


	)

167 
AO_INLINE
 
AO_TS_VAL_t


168 
	$AO_ã°_™d_£t_acquúe
(vﬁ©ûê
AO_TS_t
 *
addr
) {

169 
AO_TS_VAL_t
 
ªsu…
 = 
	`AO_ã°_™d_£t
(
addr
);

170 
	`AO_lwsync
();

171  
ªsu…
;

172 
	}
}

174 
	#AO_HAVE_ã°_™d_£t_acquúe


	)

176 
AO_INLINE
 
AO_TS_VAL_t


177 
	$AO_ã°_™d_£t_ªÀa£
(vﬁ©ûê
AO_TS_t
 *
addr
) {

178 
	`AO_lwsync
();

179  
	`AO_ã°_™d_£t
(
addr
);

180 
	}
}

182 
	#AO_HAVE_ã°_™d_£t_ªÀa£


	)

184 
AO_INLINE
 
AO_TS_VAL_t


185 
	$AO_ã°_™d_£t_fuŒ
(vﬁ©ûê
AO_TS_t
 *
addr
) {

186 
AO_TS_VAL_t
 
ªsu…
;

187 
	`AO_lwsync
();

188 
ªsu…
 = 
	`AO_ã°_™d_£t
(
addr
);

189 
	`AO_lwsync
();

190  
ªsu…
;

191 
	}
}

193 
	#AO_HAVE_ã°_™d_£t_fuŒ


	)

195 #i‡
deföed
(
__powîpc64__
Ë|| deföed(
__µc64__
Ë|| deföed(
__64BIT__
)

197 
AO_INLINE
 

198 
	$AO_com∑ª_™d_sw≠
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd
, AO_à
√w_vÆ
) {

199 
AO_t
 
ﬁdvÆ
;

200 
ªsu…
 = 0;

202 
__asm__
 
	`__vﬁ©ûe__
(

210 : "=&r"(
ﬁdvÆ
), "=&r"(
ªsu…
)

211 : "r"(
addr
), "r"(
√w_vÆ
), "r"(
ﬁd
), "1"(
ªsu…
)

214  
ªsu…
;

215 
	}
}

219 
AO_INLINE
 

220 
	$AO_com∑ª_™d_sw≠
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd
, AO_à
√w_vÆ
) {

221 
AO_t
 
ﬁdvÆ
;

222 
ªsu…
 = 0;

224 
__asm__
 
	`__vﬁ©ûe__
(

232 : "=&r"(
ﬁdvÆ
), "=&r"(
ªsu…
)

233 : "r"(
addr
), "r"(
√w_vÆ
), "r"(
ﬁd
), "1"(
ªsu…
)

236  
ªsu…
;

237 
	}
}

240 
	#AO_HAVE_com∑ª_™d_sw≠


	)

242 
AO_INLINE
 

243 
	$AO_com∑ª_™d_sw≠_acquúe
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd
, AO_à
√w_vÆ
) {

244 
ªsu…
 = 
	`AO_com∑ª_™d_sw≠
(
addr
, 
ﬁd
, 
√w_vÆ
);

245 
	`AO_lwsync
();

246  
ªsu…
;

247 
	}
}

249 
	#AO_HAVE_com∑ª_™d_sw≠_acquúe


	)

251 
AO_INLINE
 

252 
	$AO_com∑ª_™d_sw≠_ªÀa£
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd
, AO_à
√w_vÆ
) {

253 
	`AO_lwsync
();

254  
	`AO_com∑ª_™d_sw≠
(
addr
, 
ﬁd
, 
√w_vÆ
);

255 
	}
}

257 
	#AO_HAVE_com∑ª_™d_sw≠_ªÀa£


	)

259 
AO_INLINE
 

260 
	$AO_com∑ª_™d_sw≠_fuŒ
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd
, AO_à
√w_vÆ
) {

261 
AO_t
 
ªsu…
;

262 
	`AO_lwsync
();

263 
ªsu…
 = 
	`AO_com∑ª_™d_sw≠
(
addr
, 
ﬁd
, 
√w_vÆ
);

264 
	`AO_lwsync
();

265  
ªsu…
;

266 
	}
}

268 
	#AO_HAVE_com∑ª_™d_sw≠_fuŒ


	)

270 #i‡
deföed
(
__powîpc64__
Ë|| deföed(
__µc64__
Ë|| deföed(
__64BIT__
)

273 
AO_INLINE
 
AO_t


274 
	$AO_„tch_™d_add
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ö¸
) {

275 
AO_t
 
ﬁdvÆ
;

276 
AO_t
 
√wvÆ
;

278 
__asm__
 
	`__vﬁ©ûe__
(

283 : "=&r"(
ﬁdvÆ
), "=&r"(
√wvÆ
)

284 : "r"(
addr
), "r"(
ö¸
)

287  
ﬁdvÆ
;

288 
	}
}

290 
	#AO_HAVE_„tch_™d_add


	)

294 
AO_INLINE
 
AO_t


295 
	$AO_„tch_™d_add
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ö¸
) {

296 
AO_t
 
ﬁdvÆ
;

297 
AO_t
 
√wvÆ
;

299 
__asm__
 
	`__vﬁ©ûe__
(

304 : "=&r"(
ﬁdvÆ
), "=&r"(
√wvÆ
)

305 : "r"(
addr
), "r"(
ö¸
)

308  
ﬁdvÆ
;

309 
	}
}

311 
	#AO_HAVE_„tch_™d_add


	)

315 
AO_INLINE
 
AO_t


316 
	$AO_„tch_™d_add_acquúe
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ö¸
) {

317 
AO_t
 
ªsu…
 = 
	`AO_„tch_™d_add
(
addr
, 
ö¸
);

318 
	`AO_lwsync
();

319  
ªsu…
;

320 
	}
}

322 
	#AO_HAVE_„tch_™d_add_acquúe


	)

324 
AO_INLINE
 
AO_t


325 
	$AO_„tch_™d_add_ªÀa£
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ö¸
) {

326 
	`AO_lwsync
();

327  
	`AO_„tch_™d_add
(
addr
, 
ö¸
);

328 
	}
}

330 
	#AO_HAVE_„tch_™d_add_ªÀa£


	)

332 
AO_INLINE
 
AO_t


333 
	$AO_„tch_™d_add_fuŒ
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ö¸
) {

334 
AO_t
 
ªsu…
;

335 
	`AO_lwsync
();

336 
ªsu…
 = 
	`AO_„tch_™d_add
(
addr
, 
ö¸
);

337 
	`AO_lwsync
();

338  
ªsu…
;

339 
	}
}

341 
	#AO_HAVE_„tch_™d_add_fuŒ


	)

343 #i‡
deföed
(
__powîpc64__
Ë|| deföed(
__µc64__
Ë|| deföed(
__64BIT__
)

345 
	~"ao_t_is_öt.h
"

	@atomic_ops/read_ordered.h

30 
AO_INLINE
 

31 
	$AO_n›_ªad
()

33 
	`AO_compûî_b¨rõr
();

34 
	}
}

36 
	#AO_HAVE_NOP_READ


	)

38 #ifde‡
AO_HAVE_lﬂd


40 
AO_INLINE
 
AO_t


41 
	$AO_lﬂd_ªad
(c⁄° vﬁ©ûê
AO_t
 *
addr
)

43 
AO_t
 
ªsu…
 = 
	`AO_lﬂd
(
addr
);

44 
	`AO_compûî_b¨rõr
();

45  
ªsu…
;

46 
	}
}

47 
	#AO_HAVE_lﬂd_ªad


	)

49 
	#AO_lﬂd_acquúe
(
addr
Ë
	`AO_lﬂd_ªad
◊ddr)

	)

50 
	#AO_HAVE_lﬂd_acquúe


	)

54 #ifde‡
AO_HAVE_ch¨_lﬂd


56 
AO_INLINE
 
AO_t


57 
	$AO_ch¨_lﬂd_ªad
(c⁄° vﬁ©ûê*
addr
)

59 
AO_t
 
ªsu…
 = 
	`AO_ch¨_lﬂd
(
addr
);

60 
	`AO_compûî_b¨rõr
();

61  
ªsu…
;

62 
	}
}

63 
	#AO_HAVE_ch¨_lﬂd_ªad


	)

65 
	#AO_ch¨_lﬂd_acquúe
(
addr
Ë
	`AO_ch¨_lﬂd_ªad
◊ddr)

	)

66 
	#AO_HAVE_ch¨_lﬂd_acquúe


	)

70 #ifde‡
AO_HAVE_sh‹t_lﬂd


72 
AO_INLINE
 
AO_t


73 
	$AO_sh‹t_lﬂd_ªad
(c⁄° vﬁ©ûê*
addr
)

75 
AO_t
 
ªsu…
 = 
	`AO_sh‹t_lﬂd
(
addr
);

76 
	`AO_compûî_b¨rõr
();

77  
ªsu…
;

78 
	}
}

79 
	#AO_HAVE_sh‹t_lﬂd_ªad


	)

81 
	#AO_sh‹t_lﬂd_acquúe
(
addr
Ë
	`AO_sh‹t_lﬂd_ªad
◊ddr)

	)

82 
	#AO_HAVE_sh‹t_lﬂd_acquúe


	)

86 #ifde‡
AO_HAVE_öt_lﬂd


88 
AO_INLINE
 
AO_t


89 
	$AO_öt_lﬂd_ªad
(c⁄° vﬁ©ûê*
addr
)

91 
AO_t
 
ªsu…
 = 
	`AO_öt_lﬂd
(
addr
);

92 
	`AO_compûî_b¨rõr
();

93  
ªsu…
;

94 
	}
}

95 
	#AO_HAVE_öt_lﬂd_ªad


	)

97 
	#AO_öt_lﬂd_acquúe
(
addr
Ë
	`AO_öt_lﬂd_ªad
◊ddr)

	)

98 
	#AO_HAVE_öt_lﬂd_acquúe


	)

	@atomic_ops/sparc.h

22 
	~"Æig√d_©omic_lﬂd_°‹e.h
"

25 
	~"‹dîed_ex˚±_wr.h
"

28 
	~"ã°_™d_£t_t_is_ch¨.h
"

30 
AO_INLINE
 
AO_TS_VAL_t


31 
	$AO_ã°_™d_£t_fuŒ
(vﬁ©ûê
AO_TS_t
 *
addr
) {

32 
AO_TS_VAL_t
 
ﬁdvÆ
;

34 
__asm__
 
	`__vﬁ©ûe__
("ldstub %1,%0"

35 : "Ù"(
ﬁdvÆ
), "=m"(*
addr
)

36 : "m"(*
addr
) : "memory");

37  
ﬁdvÆ
;

38 
	}
}

40 
	#AO_HAVE_ã°_™d_£t_fuŒ


	)

42 #i‚de‡
AO_NO_SPARC_V9


44 
AO_INLINE
 

45 
	$AO_com∑ª_™d_sw≠_fuŒ
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd
, AO_à
√w_vÆ
) {

46 
ªt
;

47 
__asm__
 
	`__vﬁ©ûe__
 ("membar #StoreLoad | #LoadLoad\n\t"

48 #i‡
	`deföed
(
__¨ch64__
)

59 : "Ù" (
ªt
), "+r" (
√w_vÆ
)

60 : "r" (
addr
), "0" (
ﬁd
)

62  ()
ªt
;

63 
	}
}

65 
	#AO_HAVE_com∑ª_™d_sw≠_fuŒ


	)

	@atomic_ops/standard_ao_double_t.h

7 #i‡(
deföed
(
__x86_64__
Ë&& deföed(
__GNUC__
)Ë|| deföed(
_WIN64
)

8 
	~<xmmöåö.h
>

9 
__m128
 
	tdoubÀ_±r_°‹age
;

10 #ñi‡
deföed
(
_WIN32
Ë&& !deföed(
__GNUC__
)

11 
	t__öt64
 
	tdoubÀ_±r_°‹age
;

13 
	tdoubÀ_±r_°‹age
;

16 
	#AO_HAVE_DOUBLE_PTR_STORAGE


	)

19 
doubÀ_±r_°‹age
 
	mAO_whﬁe
;

20 °ru˘ {
AO_t
 
	mAO_v1
; AO_à
	mAO_v2
;} 
	mAO_∑πs
;

21 } 
	tAO_doubÀ_t
;

23 
	#AO_HAVE_doubÀ_t


	)

24 
	#AO_vÆ1
 
AO_∑πs
.
AO_v1


	)

25 
	#AO_vÆ2
 
AO_∑πs
.
AO_v2


	)

	@atomic_ops/test_and_set_t_is_ao_t.h

29 íum {
	mAO_TS_˛ór
 = 0, 
	mAO_TS_£t
 = 1} 
	tAO_TS_vÆ
;

30 
	#AO_TS_VAL_t
 
AO_TS_vÆ


	)

31 
	#AO_TS_CLEAR
 
AO_TS_˛ór


	)

32 
	#AO_TS_SET
 
AO_TS_£t


	)

34 
	#AO_TS_t
 
AO_t


	)

36 
	#AO_AO_TS_T
 1

	)

	@atomic_ops/test_and_set_t_is_char.h

29 
	#AO_TS_t
 

	)

30 íum {
	mAO_BYTE_TS_˛ór
 = 0, 
	mAO_BYTE_TS_£t
 = 0xff} 
	tAO_BYTE_TS_vÆ
;

31 
	#AO_TS_VAL_t
 
AO_BYTE_TS_vÆ


	)

32 
	#AO_TS_CLEAR
 
AO_BYTE_TS_˛ór


	)

33 
	#AO_TS_SET
 
AO_BYTE_TS_£t


	)

35 
	#AO_CHAR_TS_T
 1

	)

	@atomic_ops/x86.h

24 
	~"Æig√d_©omic_lﬂd_°‹e.h
"

33 
	~"‹dîed_ex˚±_wr.h
"

35 
	~"ã°_™d_£t_t_is_ch¨.h
"

37 
	~"°™d¨d_ao_doubÀ_t.h
"

39 #i‡
deföed
(
AO_USE_PENTIUM4_INSTRS
)

40 
AO_INLINE
 

41 
	$AO_n›_fuŒ
()

43 
__asm__
 
	`__vﬁ©ûe__
("mfence" : : : "memory");

44 
	}
}

46 
	#AO_HAVE_n›_fuŒ


	)

60 
AO_INLINE
 
AO_t


61 
	$AO_„tch_™d_add_fuŒ
 (vﬁ©ûê
AO_t
 *
p
, AO_à
ö¸
)

63 
AO_t
 
ªsu…
;

65 
__asm__
 
	`__vﬁ©ûe__
 ("lock; xaddl %0, %1" :

66 "Ù" (
ªsu…
), "=m" (*
p
Ë: "0" (
ö¸
), "m" (*p)

68  
ªsu…
;

69 
	}
}

71 
	#AO_HAVE_„tch_™d_add_fuŒ


	)

73 
AO_INLINE
 

74 
	$AO_ch¨_„tch_™d_add_fuŒ
 (vﬁ©ûê*
p
, 
ö¸
)

76 
ªsu…
;

78 
__asm__
 
	`__vﬁ©ûe__
 ("lock; xaddb %0, %1" :

79 "=q" (
ªsu…
), "=m" (*
p
Ë: "0" (
ö¸
), "m" (*p)

81  
ªsu…
;

82 
	}
}

84 
	#AO_HAVE_ch¨_„tch_™d_add_fuŒ


	)

86 
AO_INLINE
 

87 
	$AO_sh‹t_„tch_™d_add_fuŒ
 (vﬁ©ûê*
p
, 
ö¸
)

89 
ªsu…
;

91 
__asm__
 
	`__vﬁ©ûe__
 ("lock; xaddw %0, %1" :

92 "Ù" (
ªsu…
), "=m" (*
p
Ë: "0" (
ö¸
), "m" (*p)

94  
ªsu…
;

95 
	}
}

97 
	#AO_HAVE_sh‹t_„tch_™d_add_fuŒ


	)

100 
AO_INLINE
 

101 
	$AO_‹_fuŒ
 (vﬁ©ûê
AO_t
 *
p
, AO_à
ö¸
)

103 
__asm__
 
	`__vﬁ©ûe__
 ("lock; orl %1, %0" :

104 "=m" (*
p
Ë: "r" (
ö¸
), "m" (*p) : "memory");

105 
	}
}

107 
	#AO_HAVE_‹_fuŒ


	)

109 
AO_INLINE
 
AO_TS_VAL_t


110 
	$AO_ã°_™d_£t_fuŒ
(vﬁ©ûê
AO_TS_t
 *
addr
)

112 
ﬁdvÆ
;

114 
__asm__
 
	`__vﬁ©ûe__
("xchgb %0, %1"

115 : "=q"(
ﬁdvÆ
), "=m"(*
addr
)

116 : "0"(0xff), "m"(*
addr
) : "memory");

117  (
AO_TS_VAL_t
)
ﬁdvÆ
;

118 
	}
}

120 
	#AO_HAVE_ã°_™d_£t_fuŒ


	)

123 
AO_INLINE
 

124 
	$AO_com∑ª_™d_sw≠_fuŒ
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd
, AO_à
√w_vÆ
)

126 #ifde‡
AO_USE_SYNC_CAS_BUILTIN


127  ()
	`__sync_boﬁ_com∑ª_™d_sw≠
(
addr
, 
ﬁd
, 
√w_vÆ
);

129 
ªsu…
;

130 
__asm__
 
	`__vﬁ©ûe__
("lock; cmpxchgl %3, %0; setz %1"

131 : "=m" (*
addr
), "˜" (
ªsu…
)

132 : "m" (*
addr
), "r" (
√w_vÆ
), "a" (
ﬁd
) : "memory");

133  ()
ªsu…
;

135 
	}
}

137 
	#AO_HAVE_com∑ª_™d_sw≠_fuŒ


	)

141 
AO_INLINE
 

142 
	$AO_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ
(vﬁ©ûê
AO_doubÀ_t
 *
addr
,

143 
AO_t
 
ﬁd_vÆ1
, AO_à
ﬁd_vÆ2
,

144 
AO_t
 
√w_vÆ1
, AO_à
√w_vÆ2
)

146 
ªsu…
;

147 #i‡
__PIC__


151 
__asm__
 
	`__vﬁ©ûe__
("pushl %%ebx;"

155 : "=m"(*
addr
), "˜"(
ªsu…
)

156 : "m"(*
addr
), "d" (
ﬁd_vÆ2
), "a" (
ﬁd_vÆ1
),

157 "c" (
√w_vÆ2
), "m" (
√w_vÆ1
) : "memory");

163 
__asm__
 
	`__vﬁ©ûe__
("lock; cmpxchg8b %0; setz %1;"

164 : "=m"(*
addr
), "˜"(
ªsu…
)

165 : "m"(*
addr
), "d" (
ﬁd_vÆ2
), "a" (
ﬁd_vÆ1
),

166 "c" (
√w_vÆ2
), "b" (
√w_vÆ1
) : "memory");

168  (Ë
ªsu…
;

169 
	}
}

171 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ


	)

173 
	~"ao_t_is_öt.h
"

	@atomic_ops/x86_64.h

19 
	~"Æig√d_©omic_lﬂd_°‹e.h
"

28 
	~"‹dîed_ex˚±_wr.h
"

30 
	~"ã°_™d_£t_t_is_ch¨.h
"

32 
	~"°™d¨d_ao_doubÀ_t.h
"

34 
AO_INLINE
 

35 
	$AO_n›_fuŒ
()

38 
__asm__
 
	`__vﬁ©ûe__
("mfence" : : : "memory");

39 
	}
}

41 
	#AO_HAVE_n›_fuŒ


	)

46 
AO_INLINE
 
AO_t


47 
	$AO_„tch_™d_add_fuŒ
 (vﬁ©ûê
AO_t
 *
p
, AO_à
ö¸
)

49 
AO_t
 
ªsu…
;

51 
__asm__
 
	`__vﬁ©ûe__
 ("lock; xaddq %0, %1" :

52 "Ù" (
ªsu…
), "=m" (*
p
Ë: "0" (
ö¸
), "m" (*p)

54  
ªsu…
;

55 
	}
}

57 
	#AO_HAVE_„tch_™d_add_fuŒ


	)

59 
AO_INLINE
 

60 
	$AO_ch¨_„tch_™d_add_fuŒ
 (vﬁ©ûê*
p
, 
ö¸
)

62 
ªsu…
;

64 
__asm__
 
	`__vﬁ©ûe__
 ("lock; xaddb %0, %1" :

65 "=q" (
ªsu…
), "=m" (*
p
Ë: "0" (
ö¸
), "m" (*p)

67  
ªsu…
;

68 
	}
}

70 
	#AO_HAVE_ch¨_„tch_™d_add_fuŒ


	)

72 
AO_INLINE
 

73 
	$AO_sh‹t_„tch_™d_add_fuŒ
 (vﬁ©ûê*
p
, 
ö¸
)

75 
ªsu…
;

77 
__asm__
 
	`__vﬁ©ûe__
 ("lock; xaddw %0, %1" :

78 "Ù" (
ªsu…
), "=m" (*
p
Ë: "0" (
ö¸
), "m" (*p)

80  
ªsu…
;

81 
	}
}

83 
	#AO_HAVE_sh‹t_„tch_™d_add_fuŒ


	)

85 
AO_INLINE
 

86 
	$AO_öt_„tch_™d_add_fuŒ
 (vﬁ©ûê*
p
, 
ö¸
)

88 
ªsu…
;

90 
__asm__
 
	`__vﬁ©ûe__
 ("lock; xaddl %0, %1" :

91 "Ù" (
ªsu…
), "=m" (*
p
Ë: "0" (
ö¸
), "m" (*p)

93  
ªsu…
;

94 
	}
}

96 
	#AO_HAVE_öt_„tch_™d_add_fuŒ


	)

98 
AO_INLINE
 

99 
	$AO_‹_fuŒ
 (vﬁ©ûê
AO_t
 *
p
, AO_à
ö¸
)

101 
__asm__
 
	`__vﬁ©ûe__
 ("lock; orq %1, %0" :

102 "=m" (*
p
Ë: "r" (
ö¸
), "m" (*p) : "memory");

103 
	}
}

105 
	#AO_HAVE_‹_fuŒ


	)

107 
AO_INLINE
 
AO_TS_VAL_t


108 
	$AO_ã°_™d_£t_fuŒ
(vﬁ©ûê
AO_TS_t
 *
addr
)

110 
ﬁdvÆ
;

112 
__asm__
 
	`__vﬁ©ûe__
("xchgb %0, %1"

113 : "=q"(
ﬁdvÆ
), "=m"(*
addr
)

114 : "0"(0xff), "m"(*
addr
) : "memory");

115  (
AO_TS_VAL_t
)
ﬁdvÆ
;

116 
	}
}

118 
	#AO_HAVE_ã°_™d_£t_fuŒ


	)

121 
AO_INLINE
 

122 
	$AO_com∑ª_™d_sw≠_fuŒ
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd
, AO_à
√w_vÆ
)

124 #ifde‡
AO_USE_SYNC_CAS_BUILTIN


125  ()
	`__sync_boﬁ_com∑ª_™d_sw≠
(
addr
, 
ﬁd
, 
√w_vÆ
);

127 
ªsu…
;

128 
__asm__
 
	`__vﬁ©ûe__
("lock; cmpxchgq %3, %0; setz %1"

129 : "=m" (*
addr
), "˜" (
ªsu…
)

130 : "m" (*
addr
), "r" (
√w_vÆ
), "a" (
ﬁd
) : "memory");

131  (Ë
ªsu…
;

133 
	}
}

135 
	#AO_HAVE_com∑ª_™d_sw≠_fuŒ


	)

137 #ifde‡
AO_CMPXCHG16B_AVAILABLE


147 
AO_INLINE
 

148 
	$AO_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ
(vﬁ©ûê
AO_doubÀ_t
 *
addr
,

149 
AO_t
 
ﬁd_vÆ1
, AO_à
ﬁd_vÆ2
,

150 
AO_t
 
√w_vÆ1
, AO_à
√w_vÆ2
)

152 
ªsu…
;

153 
__asm__
 
	`__vﬁ©ûe__
("lock; cmpxchg16b %0; setz %1"

154 : "=m"(*
addr
), "˜"(
ªsu…
)

155 : "m"(*
addr
), "d" (
ﬁd_vÆ2
), "a" (
ﬁd_vÆ1
),

156 "c" (
√w_vÆ2
), "b" (
√w_vÆ1
) : "memory");

157  (Ë
ªsu…
;

158 
	}
}

159 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ


	)

165 #ifde‡
AO_WEAK_DOUBLE_CAS_EMULATION


166 
AO_com∑ª_doubÀ_™d_sw≠_doubÀ_emuœti⁄
(vﬁ©ûê
AO_doubÀ_t
 *
addr
,

167 
AO_t
 
ﬁd_vÆ1
, AO_à
ﬁd_vÆ2
,

168 
AO_t
 
√w_vÆ1
, AO_à
√w_vÆ2
);

170 
AO_INLINE
 

171 
	$AO_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ
(vﬁ©ûê
AO_doubÀ_t
 *
addr
,

172 
AO_t
 
ﬁd_vÆ1
, AO_à
ﬁd_vÆ2
,

173 
AO_t
 
√w_vÆ1
, AO_à
√w_vÆ2
)

175  
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_emuœti⁄
(
addr
,

176 
ﬁd_vÆ1
, 
ﬁd_vÆ2
,

177 
√w_vÆ1
, 
√w_vÆ2
);

178 
	}
}

179 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ


	)

	@hashtables/lockbased-ht/hashtable-lock.c

27 
	~"hashèbÀ-lock.h
"

28 
	~<immöåö.h
>

30 
	gmaxhéígth
;

32 
	$ht_dñëe
(
ht_öt£t_t
 *
£t
) {

33 
node_l_t
 *
node
, *
√xt
;

34 
i
;

36 
i
=0; i < 
maxhéígth
; i++) {

37 
node
 = 
£t
->
buckës
[
i
]->
hód
;

38 
node
 !
NULL
) {

39 
√xt
 = 
node
->next;

40 
	`‰ì
(
node
);

41 
node
 = 
√xt
;

43 
	`‰ì
(
£t
->
buckës
[
i
]);

45 
	`‰ì
(
£t
);

46 
	}
}

48 
	$ht_size
(
ht_öt£t_t
 *
£t
) {

49 
size
 = 0;

50 
node_l_t
 *
node
;

51 
i
;

53 
i
=0; i < 
maxhéígth
; i++) {

54 
node
 = 
£t
->
buckës
[
i
]->
hód
->
√xt
;

55 
node
->
√xt
) {

56 
size
++;

57 
node
 =Çode->
√xt
;

60  
size
;

61 
	}
}

63 
	$Êo‹_log_2
(
n
) {

64 
pos
 = 0;

65 
	`¥ötf
("¿ªsu… = %d\n", 
n
);

66 i‡(
n
 >1<<16Ë{Ç >>16; 
pos
 += 16; }

67 i‡(
n
 >1<< 8Ë{Ç >>8; 
pos
 += 8; }

68 i‡(
n
 >1<< 4Ë{Ç >>4; 
pos
 += 4; }

69 i‡(
n
 >1<< 2Ë{Ç >>2; 
pos
 += 2; }

70 i‡(
n
 >1<< 1Ë{ 
pos
 += 1; }

71 
	`¥ötf
("Êo‹Ñesu… = %d\n", 
pos
);

72  ((
n
 =0Ë? (-1Ë: 
pos
);

73 
	}
}

75 
ht_öt£t_t
 *
	$ht_√w
() {

76 
ht_öt£t_t
 *
£t
;

77 
i
;

79 i‡((
£t
 = (
ht_öt£t_t
 *)
	`mÆloc
((ht_öt£t_t))Ë=
NULL
) {

80 
	`≥º‹
("malloc");

81 
	`exô
(1);

83 
i
=0; i < 
maxhéígth
; i++) {

84 
£t
->
buckës
[
i
] = 
	`£t_√w_l
();

86  
£t
;

87 
	}
}

89 
	$ht_c⁄èös
(
ht_öt£t_t
 *
£t
, 
vÆ
, 
å™ß˘i⁄Æ
) {

90 
addr
;

93 
addr
 = 
vÆ
 % 
maxhéígth
;

94  
	`£t_c⁄èös_l
(
£t
->
buckës
[
addr
], 
vÆ
, 
å™ß˘i⁄Æ
);

95 
	}
}

97 
	$ht_add
(
ht_öt£t_t
 *
£t
, 
vÆ
, 
å™ß˘i⁄Æ
) {

98 
addr
, 
ªsu…
;

101 
addr
 = 
vÆ
 % 
maxhéígth
;

102 
ªsu…
 = 
	`£t_add_l
(
£t
->
buckës
[
addr
], 
vÆ
, 
å™ß˘i⁄Æ
);

103  
ªsu…
;

104 
	}
}

106 
	$ht_ªmove
(
ht_öt£t_t
 *
£t
, 
vÆ
, 
å™ß˘i⁄Æ
) {

107 
addr
, 
ªsu…
;

110 
addr
 = 
vÆ
 % 
maxhéígth
;

111 
ªsu…
 = 
	`£t_ªmove_l
(
£t
->
buckës
[
addr
], 
vÆ
, 
å™ß˘i⁄Æ
);

113  
ªsu…
;

114 
	}
}

120 
	$ht_move
(
ht_öt£t_t
 *
£t
, 
vÆ1
, 
vÆ2
, 
å™ß˘i⁄Æ
) {

121 
node_l_t
 *
¥ed1
, *
cuº1
, *
cuº2
, *
¥ed2
, *
√wnode
;

122 
addr1
, 
addr2
, 
ªsu…
 = 0;

124 #ifde‡
DEBUG


125 
	`¥ötf
("++> ht_move(%d, %d)\n", (Ë
vÆ1
, (Ë
vÆ2
);

128 i‡(
vÆ1
 =
vÆ2
)  0;

131 
addr1
 = 
vÆ1
 % 
maxhéígth
;

132 
¥ed1
 = 
£t
->
buckës
[
addr1
]->
hód
;

133 
cuº1
 = 
¥ed1
->
√xt
;

134 
cuº1
->
vÆ
 < 
vÆ1
) {

135 
¥ed1
 = 
cuº1
;

136 
cuº1
 = cuº1->
√xt
;

139 
addr2
 = 
vÆ2
 % 
maxhéígth
;

140 
¥ed2
 = 
£t
->
buckës
[
addr2
]->
hód
;

141 
cuº2
 = 
¥ed2
->
√xt
;

142 
cuº2
->
vÆ
 < 
vÆ2
) {

143 
¥ed2
 = 
cuº2
;

144 
cuº2
 = cuº2->
√xt
;

147 i‡(
¥ed1
->
vÆ
 =
¥ed2
->vÆ || 
cuº1
->val ==Öred2->val ||

148 
cuº2
->
vÆ
 =
¥ed1
->vÆ || 
cuº1
->val == curr2->val)

151 i‡(
addr1
 < 
addr2
 || (addr1 =addr2 && 
vÆ1
 < 
vÆ2
)) {

152 
	`LOCK
(&
¥ed1
->
lock
);

153 
	`LOCK
(&
cuº1
->
lock
);

154 
	`LOCK
(&
¥ed2
->
lock
);

155 
	`LOCK
(&
cuº2
->
lock
);

157 
	`LOCK
(&
¥ed2
->
lock
);

158 
	`LOCK
(&
cuº2
->
lock
);

159 
	`LOCK
(&
¥ed1
->
lock
);

160 
	`LOCK
(&
cuº1
->
lock
);

163 
ªsu…
 = (
	`∑r£_vÆid©e
(
¥ed1
, 
cuº1
Ë&& (
vÆ1
 =cuº1->
vÆ
) &&

164 
	`∑r£_vÆid©e
(
¥ed2
, 
cuº2
Ë&& (cuº2->
vÆ
 !
vÆ2
));

165 i‡(
ªsu…
) {

166 
	`£t_m¨k
((Ë
cuº1
);

167 
¥ed1
->
√xt
 = 
cuº1
->next;

168 
√wnode
 = 
	`√w_node_l
(
vÆ2
, 
cuº2
, 0);

169 
¥ed2
->
√xt
 = 
√wnode
;

172 
	`UNLOCK
(&
¥ed2
->
lock
);

173 
	`UNLOCK
(&
¥ed1
->
lock
);

174 
	`UNLOCK
(&
cuº2
->
lock
);

175 
	`UNLOCK
(&
cuº1
->
lock
);

177  
ªsu…
;

178 
	}
}

184 
	$ht_¢≠shŸ_unmovabÀ
(
ht_öt£t_t
 *
£t
, 
å™ß˘i⁄Æ
) {

185 
node_l_t
 *
√xt
, *
cuº
;

186 
i
;

187 
sum
 = 0;

189 
i
=0; i < 
maxhéígth
; i++) {

190 
cuº
 = 
£t
->
buckës
[
i
]->
hód
;

191 
√xt
 = 
£t
->
buckës
[
i
]->
hód
->next;

194 
	`LOCK
(&
√xt
->
lock
);

196 
√xt
->next) {

197 
	`UNLOCK
(&
√xt
->
lock
);

198 
cuº
 = 
√xt
;

199 i‡(!
	`is_m¨ked_ªf
((Ë
√xt
)Ë
sum
 +√xt->
vÆ
;

200 
√xt
 = 
cuº
->next;

201 
	`LOCK
(&
√xt
->
lock
);

203 
	`UNLOCK
(&
√xt
->
lock
);

206  
sum
;

207 
	}
}

213 
	$ht_¢≠shŸ
(
ht_öt£t_t
 *
£t
, 
å™ß˘i⁄Æ
) {

214 
node_l_t
 *
√xt
, *
cuº
;

215 
i
;

216 
sum
 = 0;

218 
m
 = 
maxhéígth
;

220 
i
=0; i < 
m
; i++) {

222 
	`LOCK
(&
£t
->
buckës
[
i
]->
hód
->
lock
);

223 
	`LOCK
(&
£t
->
buckës
[
i
]->
hód
->
√xt
->
lock
);

224 
cuº
 = 
£t
->
buckës
[
i
]->
hód
;

225 
√xt
 = 
£t
->
buckës
[
i
]->
hód
->next;

226 } !
	`∑r£_vÆid©e
(
cuº
, 
√xt
));

228 
√xt
->next) {

230 
	`LOCK
(&
√xt
->√xt->
lock
);

231 
cuº
 = 
√xt
;

232 
√xt
 = 
cuº
->next;

233 i‡(
	`∑r£_vÆid©e
(
cuº
, 
√xt
)) {

234 i‡(!
	`is_m¨ked_ªf
((Ë
√xt
)) {

235 
sum
 +
cuº
->
vÆ
;

243 
i
=0; i < 
m
; i++) {

244 
cuº
 = 
£t
->
buckës
[
i
]->
hód
;

245 
√xt
 = 
£t
->
buckës
[
i
]->
hód
->next;

247 
	`UNLOCK
(&
cuº
->
lock
);

248 
	`UNLOCK
(&
√xt
->
lock
);

249 
√xt
->next) {

250 
cuº
 = 
√xt
;

251 
√xt
 = 
cuº
->next;

252 
	`UNLOCK
(&
√xt
->
lock
);

257 
	}
}

	@hashtables/lockbased-ht/hashtable-lock.h

27 
	~"../lökedli°s/œzy-li°/öt£t.h
"

29 
	#DEFAULT_MOVE
 0

	)

30 
	#DEFAULT_SNAPSHOT
 0

	)

31 
	#DEFAULT_LOAD
 1

	)

32 
	#DEFAULT_ELASTICITY
 2

	)

33 
	#DEFAULT_ALTERNATE
 0

	)

34 
	#DEFAULT_EFFECTIVE
 1

	)

36 
	#MAXHTLENGTH
 65536

	)

39 
maxhéígth
;

45 
	sht_öt£t
 {

46 
öt£t_l_t
 *
	mbuckës
[
MAXHTLENGTH
];

47 } 
	tht_öt£t_t
;

49 
ht_dñëe
(
ht_öt£t_t
 *
£t
);

50 
ht_size
(
ht_öt£t_t
 *
£t
);

51 
Êo‹_log_2
(
n
);

52 
ht_öt£t_t
 *
ht_√w
();

53 
ht_c⁄èös
(
ht_öt£t_t
 *
£t
, 
vÆ
, 
å™ß˘i⁄Æ
);

54 
ht_add
(
ht_öt£t_t
 *
£t
, 
vÆ
, 
å™ß˘i⁄Æ
);

55 
ht_ªmove
(
ht_öt£t_t
 *
£t
, 
vÆ
, 
å™ß˘i⁄Æ
);

60 
ht_move
(
ht_öt£t_t
 *
£t
, 
vÆ1
, 
vÆ2
, 
å™ß˘i⁄Æ
);

66 
ht_¢≠shŸ
(
ht_öt£t_t
 *
£t
, 
å™ß˘i⁄Æ
);

	@hashtables/lockbased-ht/test.c

24 
	~"hashèbÀ-lock.h
"

26 
	gmaxhéígth
;

27 
	gg_nb_thªad
;

29 
	sb¨rõr
 {

30 
±hªad_c⁄d_t
 
	mcom∂ëe
;

31 
±hªad_muãx_t
 
	mmuãx
;

32 
	mcou¡
;

33 
	m¸ossög
;

34 } 
	tb¨rõr_t
;

36 
	$b¨rõr_öô
(
b¨rõr_t
 *
b
, 
n
)

38 
	`±hªad_c⁄d_öô
(&
b
->
com∂ëe
, 
NULL
);

39 
	`±hªad_muãx_öô
(&
b
->
muãx
, 
NULL
);

40 
b
->
cou¡
 = 
n
;

41 
b
->
¸ossög
 = 0;

42 
	}
}

44 
	$b¨rõr_¸oss
(
b¨rõr_t
 *
b
)

46 
	`±hªad_muãx_lock
(&
b
->
muãx
);

48 
b
->
¸ossög
++;

50 i‡(
b
->
¸ossög
 < b->
cou¡
) {

51 
	`±hªad_c⁄d_waô
(&
b
->
com∂ëe
, &b->
muãx
);

53 
	`±hªad_c⁄d_brﬂdˇ°
(&
b
->
com∂ëe
);

55 
b
->
¸ossög
 = 0;

57 
	`±hªad_muãx_u∆ock
(&
b
->
muãx
);

58 
	}
}

69 
ölöe
 
	$ønd_ønge
(
r
) {

70 
m
 = 
RAND_MAX
;

71 
d
, 
v
 = 0;

74 
d
 = (
m
 > 
r
 ?Ñ : m);

75 
v
 +1 + ()(
d
 * (()
	`ønd
()/(()(
m
)+1.0)));

76 
r
 -
m
;

77 } 
r
 > 0);

78  
v
;

79 
	}
}

80 
ønd_ønge
(
r
);

83 
ölöe
 
	$ønd_ønge_ª
(*
£ed
, 
r
) {

84 
m
 = 
RAND_MAX
;

85 
d
, 
v
 = 0;

88 
d
 = (
m
 > 
r
 ?Ñ : m);

89 
v
 +1 + ()(
d
 * (()
	`ønd_r
(
£ed
)/(()(
m
)+1.0)));

90 
r
 -
m
;

91 } 
r
 > 0);

92  
v
;

93 
	}
}

94 
ønd_ønge_ª
(*
£ed
, 
r
);

97 
	sthªad_d©a
 {

98 
vÆ_t
 
	mfú°
;

99 
	mønge
;

100 
	mupd©e
;

101 
	mmove
;

102 
	m¢≠shŸ
;

103 
	munô_tx
;

104 
	mÆã∫©e
;

105 
	mef„˘ive
;

106 
	mnb_add
;

107 
	mnb_added
;

108 
	mnb_ªmove
;

109 
	mnb_ªmoved
;

110 
	mnb_c⁄èös
;

112 
	mlﬂd_Á˘‹
;

113 
	mnb_move
;

114 
	mnb_moved
;

115 
	mnb_¢≠shŸ
;

116 
	mnb_¢≠shŸed
;

118 
	mnb_found
;

119 
	mnb_ab‹ts
;

120 
	mnb_ab‹ts_locked_ªad
;

121 
	mnb_ab‹ts_locked_wrôe
;

122 
	mnb_ab‹ts_vÆid©e_ªad
;

123 
	mnb_ab‹ts_vÆid©e_wrôe
;

124 
	mnb_ab‹ts_vÆid©e_commô
;

125 
	mnb_ab‹ts_övÆid_mem‹y
;

126 
	mmax_ªåõs
;

127 
	m£ed
;

128 
ht_öt£t_t
 *
	m£t
;

129 
b¨rõr_t
 *
	mb¨rõr
;

130 } 
	tthªad_d©a_t
;

133 *
	$ã°
(*
d©a
) {

134 
vÆ_t
 
vÆ
 = 0;

135 
vÆ2
, 
numtx
, 
r
, 
œ°
 = -1;

136 
u√xt
, 
m√xt
, 
˙ext
;

138 
thªad_d©a_t
 *
d
 = (thªad_d©a_à*)
d©a
;

141 
	`b¨rõr_¸oss
(
d
->
b¨rõr
);

143 
d
->
nb_move
 = 0;

144 
d
->
nb_moved
 = 0;

145 
d
->
nb_add
 = 0;

146 
d
->
nb_added
 = 0;

147 
d
->
nb_ªmoved
 = 0;

148 
d
->
nb_¢≠shŸed
 = 0;

149 
d
->
nb_¢≠shŸ
 = 0;

150 
d
->
nb_c⁄èös
 = 0;

151 
d
->
nb_found
 = 0;

154 
r
 = 
	`ønd_ønge_ª
(&
d
->
£ed
, 100) - 1;

155 
u√xt
 = (
r
 < 
d
->
upd©e
);

156 
m√xt
 = (
r
 < 
d
->
move
);

157 
˙ext
 = (
r
 >
d
->
upd©e
 + d->
¢≠shŸ
);

159 
num_add
 = 0;

160 #ifde‡
ICC


161 
num_add
 < ()(1000/
g_nb_thªad
)){

163 
num_add
 < ()(1000/
g_nb_thªad
)) {

165 
num_add
++;

166 i‡(
u√xt
) {

168 
vÆ
 = 
	`ønd_ønge_ª
(&
d
->
£ed
, d->
ønge
);

169 i‡(
	`ht_add
(
d
->
£t
, 
vÆ
, 
TRANSACTIONAL
)) {

170 
d
->
nb_added
++;

171 
œ°
 = 
vÆ
;

173 
d
->
nb_add
++;

175 i‡(
m√xt
) {

177 i‡(
œ°
 =-1Ë
vÆ
 = 
	`ønd_ønge_ª
(&
d
->
£ed
, d->
ønge
);

178 
vÆ2
 = 
	`ønd_ønge_ª
(&
d
->
£ed
, d->
ønge
);

179 i‡(
	`ht_move
(
d
->
£t
, 
vÆ
, 
vÆ2
, 
TRANSACTIONAL
)) {

180 
d
->
nb_moved
++;

181 
œ°
 = -1;

183 
d
->
nb_move
++;

185 } i‡(
œ°
 < 0) {

187 
vÆ
 = 
	`ønd_ønge_ª
(&
d
->
£ed
, d->
ønge
);

188 i‡(
	`ht_add
(
d
->
£t
, 
vÆ
, 
TRANSACTIONAL
)) {

189 
d
->
nb_added
++;

190 
œ°
 = 
vÆ
;

192 
d
->
nb_add
++;

196 i‡(
d
->
Æã∫©e
) {

197 i‡(
	`ht_ªmove
(
d
->
£t
, 
œ°
, 
TRANSACTIONAL
)) {

198 
d
->
nb_ªmoved
++;

199 
œ°
 = -1;

203 
vÆ
 = 
	`ønd_ønge_ª
(&
d
->
£ed
, d->
ønge
);

205 i‡(
	`ht_ªmove
(
d
->
£t
, 
vÆ
, 
TRANSACTIONAL
)) {

206 
d
->
nb_ªmoved
++;

208 
œ°
 = -1;

211 
d
->
nb_ªmove
++;

219 i‡(
˙ext
) {

221 i‡(
d
->
Æã∫©e
) {

222 i‡(
d
->
upd©e
 == 0) {

223 i‡(
œ°
 < 0) {

224 
vÆ
 = 
d
->
fú°
;

225 
œ°
 = 
vÆ
;

227 
vÆ
 = 
	`ønd_ønge_ª
(&
d
->
£ed
, d->
ønge
);

228 
œ°
 = -1;

231 i‡(
œ°
 < 0) {

232 
vÆ
 = 
	`ønd_ønge_ª
(&
d
->
£ed
, d->
ønge
);

235 
vÆ
 = 
œ°
;

238 } 
vÆ
 = 
	`ønd_ønge_ª
(&
d
->
£ed
, d->
ønge
);

240 i‡(
	`ht_c⁄èös
(
d
->
£t
, 
vÆ
, 
TRANSACTIONAL
))

241 
d
->
nb_found
++;

242 
d
->
nb_c⁄èös
++;

246 i‡(
	`ht_¢≠shŸ
(
d
->
£t
, 
TRANSACTIONAL
))

247 
d
->
nb_¢≠shŸed
++;

248 
d
->
nb_¢≠shŸ
++;

253 
u√xt
 = 1;

256 i‡(
d
->
ef„˘ive
) {

257 
numtx
 = 
d
->
nb_c⁄èös
 + d->
nb_add
 + d->
nb_ªmove
 + d->
nb_move
 + d->
nb_¢≠shŸ
;

258 
u√xt
 = ((100.0 * (
d
->
nb_added
 + d->
nb_ªmoved
 + d->
nb_moved
)Ë< (d->
upd©e
 * 
numtx
));

259 
m√xt
 = ((100.0 * 
d
->
nb_moved
Ë< (d->
move
 * 
numtx
));

260 
˙ext
 = !((100.0 * 
d
->
nb_¢≠shŸed
Ë< (d->
¢≠shŸ
 * 
numtx
));

262 
r
 = 
	`ønd_ønge_ª
(&
d
->
£ed
, 100) - 1;

263 
u√xt
 = (
r
 < 
d
->
upd©e
);

264 
m√xt
 = (
r
 < 
d
->
move
);

265 
˙ext
 = (
r
 >
d
->
upd©e
 + d->
¢≠shŸ
);

268 #ifde‡
ICC


274  
NULL
;

277 
	`maö
(
¨gc
, **
¨gv
)

279 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

281 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

282 {"Æã∫©e", 
no_¨gumít
, 
NULL
, 'A'},

283 {"ef„˘ive", 
ªquúed_¨gumít
, 
NULL
, 'f'},

284 {"duøti⁄", 
ªquúed_¨gumít
, 
NULL
, 'd'},

285 {"öôül-size", 
ªquúed_¨gumít
, 
NULL
, 'i'},

286 {"num-thªads", 
ªquúed_¨gumít
, 
NULL
, 't'},

287 {"ønge", 
ªquúed_¨gumít
, 
NULL
, 'r'},

288 {"£ed", 
ªquúed_¨gumít
, 
NULL
, 'S'},

289 {"upd©e-øã", 
ªquúed_¨gumít
, 
NULL
, 'u'},

290 {"move-øã", 
ªquúed_¨gumít
, 
NULL
, 'a'},

291 {"¢≠shŸ-øã", 
ªquúed_¨gumít
, 
NULL
, 's'},

292 {"lock-Æg", 
ªquúed_¨gumít
, 
NULL
, 'x'},

293 {
NULL
, 0, NULL, 0}

296 
ht_öt£t_t
 *
£t
;

297 
i
, 
c
, 
size
;

298 
vÆ_t
 
œ°
 = 0;

299 
vÆ_t
 
vÆ
 = 0;

300 
ªads
, 
ef‰óds
, 
upd©es
, 
effupds
, 
moves
, 
moved
, 
¢≠shŸs
,

301 
¢≠shŸed
, 
ab‹ts
, 
ab‹ts_locked_ªad
, 
ab‹ts_locked_wrôe
,

302 
ab‹ts_vÆid©e_ªad
, 
ab‹ts_vÆid©e_wrôe
, 
ab‹ts_vÆid©e_commô
,

303 
ab‹ts_övÆid_mem‹y
, 
max_ªåõs
;

304 
thªad_d©a_t
 *
d©a
;

305 
±hªad_t
 *
thªads
;

306 
±hªad_©å_t
 
©å
;

307 
b¨rõr_t
 
b¨rõr
;

308 
timevÆ
 
°¨t
, 
íd
;

309 
time•ec
 
timeout
;

310 
duøti⁄
 = 
DEFAULT_DURATION
;

311 
öôül
 = 
DEFAULT_INITIAL
;

312 
nb_thªads
 = 
DEFAULT_NB_THREADS
;

313 
g_nb_thªad
 = 
nb_thªads
;

314 
ønge
 = 
DEFAULT_RANGE
;

315 
£ed
 = 
DEFAULT_SEED
;

316 
upd©e
 = 
DEFAULT_UPDATE
;

317 
lﬂd_Á˘‹
 = 
DEFAULT_LOAD
;

318 
move
 = 
DEFAULT_MOVE
;

319 
¢≠shŸ
 = 
DEFAULT_SNAPSHOT
;

320 
unô_tx
 = 
DEFAULT_ELASTICITY
;

321 
Æã∫©e
 = 
DEFAULT_ALTERNATE
;

322 
ef„˘ive
 = 
DEFAULT_EFFECTIVE
;

323 
sig£t_t
 
block_£t
;

325 
i
 = 0;

326 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "hAf:d:i:t:r:S:u:a:s:l:x:", 
l⁄g_›ti⁄s
, &
i
);

328 if(
c
 == -1)

331 if(
c
 =0 && 
l⁄g_›ti⁄s
[
i
].
Êag
 == 0)

332 
c
 = 
l⁄g_›ti⁄s
[
i
].
vÆ
;

334 
c
) {

339 
	`¥ötf
("intset -- STM stressÅest "

351 " upd©êtx†mu°Éf„˘ivñy wrôê(0Òrül, 1Ûf„˘ive, deÁu…=" 
	`XSTR
(
DEFAULT_EFFECTIVE
) ")\n"

353 " Te° duøti⁄ i¿mûli£c⁄d†(0=öföôe, deÁu…=" 
	`XSTR
(
DEFAULT_DURATION
) ")\n"

355 " Numbî o‡ñemít†tÿö£π bef‹êã° (deÁu…=" 
	`XSTR
(
DEFAULT_INITIAL
) ")\n"

357 " Numbî o‡thªad†(deÁu…=" 
	`XSTR
(
DEFAULT_NB_THREADS
) ")\n"

359 " R™gêo‡öãgî vÆue†ö£πed i¿£à(deÁu…=" 
	`XSTR
(
DEFAULT_RANGE
) ")\n"

361 " RNG sìd (0Òime-ba£d, deÁu…=" 
	`XSTR
(
DEFAULT_SEED
) ")\n"

363 " Pî˚¡agêo‡upd©êå™ß˘i⁄†(deÁu…=" 
	`XSTR
(
DEFAULT_UPDATE
) ")\n"

365 " Pî˚¡agêo‡movêå™ß˘i⁄†(deÁu…=" 
	`XSTR
(
DEFAULT_MOVE
) ")\n"

367 " Pî˚¡agêo‡¢≠shŸÅønß˘i⁄†(deÁu…=" 
	`XSTR
(
DEFAULT_SNAPSHOT
) ")\n"

369 " R©iÿo‡key†ovî buckë†(deÁu…=" 
	`XSTR
(
DEFAULT_LOAD
) ")\n"

380 
	`exô
(0);

382 
Æã∫©e
 = 1;

385 
ef„˘ive
 = 
	`©oi
(
›èrg
);

388 
duøti⁄
 = 
	`©oi
(
›èrg
);

391 
öôül
 = 
	`©oi
(
›èrg
);

394 
nb_thªads
 = 
	`©oi
(
›èrg
);

395 
g_nb_thªad
 = 
nb_thªads
;

398 
ønge
 = 
	`©ﬁ
(
›èrg
);

401 
£ed
 = 
	`©oi
(
›èrg
);

404 
upd©e
 = 
	`©oi
(
›èrg
);

407 
move
 = 
	`©oi
(
›èrg
);

410 
¢≠shŸ
 = 
	`©oi
(
›èrg
);

413 
lﬂd_Á˘‹
 = 
	`©oi
(
›èrg
);

416 
unô_tx
 = 
	`©oi
(
›èrg
);

419 
	`¥ötf
("Use -h or --help for help\n");

420 
	`exô
(0);

422 
	`exô
(1);

426 
	`as£π
(
duøti⁄
 >= 0);

427 
	`as£π
(
öôül
 >= 0);

428 
	`as£π
(
nb_thªads
 > 0);

429 
	`as£π
(
ønge
 > 0 &&Ñ™gê>
öôül
);

430 
	`as£π
(
upd©e
 >= 0 && update <= 100);

431 
	`as£π
(
move
 >0 && movê<
upd©e
);

432 
	`as£π
(
¢≠shŸ
 >0 && s«pshŸ <(100-
upd©e
));

433 
	`as£π
(
lﬂd_Á˘‹
 >= 1);

435 
	`¥ötf
("SetÅype : hashÅable\n");

436 
	`¥ötf
("Duøti⁄ : %d\n", 
duøti⁄
);

437 
	`¥ötf
("Inôü»sizê: %d\n", 
öôül
);

438 
	`¥ötf
("NbÅhªad† : %d\n", 
nb_thªads
);

439 
	`¥ötf
("VÆuêøngê : %ld\n", 
ønge
);

440 
	`¥ötf
("Sìd : %d\n", 
£ed
);

441 
	`¥ötf
("Upd©êøã : %d\n", 
upd©e
);

442 
	`¥ötf
("Lﬂd fa˘‹ : %d\n", 
lﬂd_Á˘‹
);

443 
	`¥ötf
("Movêøã : %d\n", 
move
);

444 
	`¥ötf
("S«pshŸÑ©e: %d\n", 
¢≠shŸ
);

445 
	`¥ötf
("Lockálg. : %d\n", 
unô_tx
);

446 
	`¥ötf
("A…î«ã : %d\n", 
Æã∫©e
);

447 
	`¥ötf
("Ef„˘ivê : %d\n", 
ef„˘ive
);

448 
	`¥ötf
("Type sizes : int=%d/long=%d/ptr=%d/word=%d\n",

452 ()(
uöçå_t
));

454 
timeout
.
tv_£c
 = 
duøti⁄
 / 1000;

455 
timeout
.
tv_n£c
 = (
duøti⁄
 % 1000) * 1000000;

457 i‡((
d©a
 = (
thªad_d©a_t
 *)
	`mÆloc
(
nb_thªads
 * —hªad_d©a_t))Ë=
NULL
) {

458 
	`≥º‹
("malloc");

459 
	`exô
(1);

461 i‡((
thªads
 = (
±hªad_t
 *)
	`mÆloc
(
nb_thªads
 * ’thªad_t))Ë=
NULL
) {

462 
	`≥º‹
("malloc");

463 
	`exô
(1);

466 i‡(
£ed
 == 0)

467 
	`§™d
(()
	`time
(0));

469 
	`§™d
(
£ed
);

471 
maxhéígth
 = (Ë
öôül
 / 
lﬂd_Á˘‹
;

472 
£t
 = 
	`ht_√w
();

474 
°›
 = 0;

477 
	`¥ötf
("Addög %dÉ¡rõ†tÿ£t\n", 
öôül
);

478 
i
 = 0;

480 
i
 < 
öôül
) {

481 
vÆ
 = (
	`ønd
(Ë% 
ønge
) + 1;

482 i‡(
	`ht_add
(
£t
, 
vÆ
, 0)) {

483 
œ°
 = 
vÆ
;

484 
i
++;

487 
size
 = 
	`ht_size
(
£t
);

488 
	`¥ötf
("Së sizê : %d\n", 
size
);

489 
	`¥ötf
("Buckëámou¡: %d\n", 
maxhéígth
);

490 
	`¥ötf
("Lﬂd : %d\n", 
lﬂd_Á˘‹
);

493 
	`b¨rõr_öô
(&
b¨rõr
, 
nb_thªads
 + 1);

494 
	`±hªad_©å_öô
(&
©å
);

495 
	`±hªad_©å_£tdëach°©e
(&
©å
, 
PTHREAD_CREATE_JOINABLE
);

496 
i
 = 0; i < 
nb_thªads
; i++) {

497 
	`¥ötf
("Cª©ögÅhªad %d\n", 
i
);

498 
d©a
[
i
].
fú°
 = 
œ°
;

499 
d©a
[
i
].
ønge
 =Ñange;

500 
d©a
[
i
].
upd©e
 = update;

501 
d©a
[
i
].
lﬂd_Á˘‹
 =Üoad_factor;

502 
d©a
[
i
].
move
 = move;

503 
d©a
[
i
].
¢≠shŸ
 = snapshot;

504 
d©a
[
i
].
unô_tx
 = unit_tx;

505 
d©a
[
i
].
Æã∫©e
 =álternate;

506 
d©a
[
i
].
ef„˘ive
 =Éffective;

507 
d©a
[
i
].
nb_add
 = 0;

508 
d©a
[
i
].
nb_added
 = 0;

509 
d©a
[
i
].
nb_ªmove
 = 0;

510 
d©a
[
i
].
nb_ªmoved
 = 0;

511 
d©a
[
i
].
nb_move
 = 0;

512 
d©a
[
i
].
nb_moved
 = 0;

513 
d©a
[
i
].
nb_¢≠shŸ
 = 0;

514 
d©a
[
i
].
nb_¢≠shŸed
 = 0;

515 
d©a
[
i
].
nb_c⁄èös
 = 0;

516 
d©a
[
i
].
nb_found
 = 0;

517 
d©a
[
i
].
nb_ab‹ts
 = 0;

518 
d©a
[
i
].
nb_ab‹ts_locked_ªad
 = 0;

519 
d©a
[
i
].
nb_ab‹ts_locked_wrôe
 = 0;

520 
d©a
[
i
].
nb_ab‹ts_vÆid©e_ªad
 = 0;

521 
d©a
[
i
].
nb_ab‹ts_vÆid©e_wrôe
 = 0;

522 
d©a
[
i
].
nb_ab‹ts_vÆid©e_commô
 = 0;

523 
d©a
[
i
].
nb_ab‹ts_övÆid_mem‹y
 = 0;

524 
d©a
[
i
].
max_ªåõs
 = 0;

525 
d©a
[
i
].
£ed
 = 
	`ønd
();

526 
d©a
[
i
].
£t
 = set;

527 
d©a
[
i
].
b¨rõr
 = &barrier;

528 i‡(
	`±hªad_¸óã
(&
thªads
[
i
], &
©å
, 
ã°
, (*)(&
d©a
[i])) != 0) {

529 
	`Ârötf
(
°dîr
, "Error creatingÅhread\n");

530 
	`exô
(1);

533 
	`±hªad_©å_de°roy
(&
©å
);

536 
	`b¨rõr_¸oss
(&
b¨rõr
);

538 
	`¥ötf
("STARTING...\n");

539 
	`gëtimeofday
(&
°¨t
, 
NULL
);

540 i‡(
duøti⁄
 > 0) {

541 
	`«no¶ìp
(&
timeout
, 
NULL
);

546 
	`AO_°‹e_fuŒ
(&
°›
, 1);

547 
	`gëtimeofday
(&
íd
, 
NULL
);

548 
	`¥ötf
("STOPPING...\n");

551 
i
 = 0; i < 
nb_thªads
; i++) {

552 i‡(
	`±hªad_joö
(
thªads
[
i
], 
NULL
) != 0) {

553 
	`Ârötf
(
°dîr
, "Error waiting forÅhread completion\n");

554 
	`exô
(1);

558 
duøti⁄
 = (
íd
.
tv_£c
 * 1000 +Énd.
tv_u£c
 / 1000Ë- (
°¨t
.tv_sec * 1000 + start.tv_usec / 1000);

559 
ab‹ts
 = 0;

560 
ab‹ts_locked_ªad
 = 0;

561 
ab‹ts_locked_wrôe
 = 0;

562 
ab‹ts_vÆid©e_ªad
 = 0;

563 
ab‹ts_vÆid©e_wrôe
 = 0;

564 
ab‹ts_vÆid©e_commô
 = 0;

565 
ab‹ts_övÆid_mem‹y
 = 0;

566 
ªads
 = 0;

567 
ef‰óds
 = 0;

568 
upd©es
 = 0;

569 
effupds
 = 0;

570 
moves
 = 0;

571 
moved
 = 0;

572 
¢≠shŸs
 = 0;

573 
¢≠shŸed
 = 0;

574 
max_ªåõs
 = 0;

575 
i
 = 0; i < 
nb_thªads
; i++) {

576 
	`¥ötf
("Thªad %d\n", 
i
);

577 
	`¥ötf
(" #add : %lu\n", 
d©a
[
i
].
nb_add
);

578 
	`¥ötf
(" #added : %lu\n", 
d©a
[
i
].
nb_added
);

579 
	`¥ötf
(" #ªmovê : %lu\n", 
d©a
[
i
].
nb_ªmove
);

580 
	`¥ötf
(" #ªmoved : %lu\n", 
d©a
[
i
].
nb_ªmoved
);

581 
	`¥ötf
(" #c⁄èö† : %lu\n", 
d©a
[
i
].
nb_c⁄èös
);

582 
	`¥ötf
(" #found : %lu\n", 
d©a
[
i
].
nb_found
);

583 
	`¥ötf
(" #movê : %lu\n", 
d©a
[
i
].
nb_move
);

584 
	`¥ötf
(" #moved : %lu\n", 
d©a
[
i
].
nb_moved
);

585 
	`¥ötf
(" #¢≠shŸ : %lu\n", 
d©a
[
i
].
nb_¢≠shŸ
);

586 
	`¥ötf
(" #¢≠shŸed : %lu\n", 
d©a
[
i
].
nb_¢≠shŸed
);

587 
	`¥ötf
(" #ab‹t† : %lu\n", 
d©a
[
i
].
nb_ab‹ts
);

588 
	`¥ötf
(" #lock-∏ : %lu\n", 
d©a
[
i
].
nb_ab‹ts_locked_ªad
);

589 
	`¥ötf
(" #lock-w : %lu\n", 
d©a
[
i
].
nb_ab‹ts_locked_wrôe
);

590 
	`¥ötf
(" #vÆ-∏ : %lu\n", 
d©a
[
i
].
nb_ab‹ts_vÆid©e_ªad
);

591 
	`¥ötf
(" #vÆ-w : %lu\n", 
d©a
[
i
].
nb_ab‹ts_vÆid©e_wrôe
);

592 
	`¥ötf
(" #vÆ-¯ : %lu\n", 
d©a
[
i
].
nb_ab‹ts_vÆid©e_commô
);

593 
	`¥ötf
(" #öv-mem : %lu\n", 
d©a
[
i
].
nb_ab‹ts_övÆid_mem‹y
);

594 
	`¥ötf
(" MaxÑërõ†: %lu\n", 
d©a
[
i
].
max_ªåõs
);

595 
ab‹ts
 +
d©a
[
i
].
nb_ab‹ts
;

596 
ab‹ts_locked_ªad
 +
d©a
[
i
].
nb_ab‹ts_locked_ªad
;

597 
ab‹ts_locked_wrôe
 +
d©a
[
i
].
nb_ab‹ts_locked_wrôe
;

598 
ab‹ts_vÆid©e_ªad
 +
d©a
[
i
].
nb_ab‹ts_vÆid©e_ªad
;

599 
ab‹ts_vÆid©e_wrôe
 +
d©a
[
i
].
nb_ab‹ts_vÆid©e_wrôe
;

600 
ab‹ts_vÆid©e_commô
 +
d©a
[
i
].
nb_ab‹ts_vÆid©e_commô
;

601 
ab‹ts_övÆid_mem‹y
 +
d©a
[
i
].
nb_ab‹ts_övÆid_mem‹y
;

602 
ªads
 +
d©a
[
i
].
nb_c⁄èös
;

603 
ef‰óds
 +
d©a
[
i
].
nb_c⁄èös
 +

604 (
d©a
[
i
].
nb_add
 - d©a[i].
nb_added
) +

605 (
d©a
[
i
].
nb_ªmove
 - d©a[i].
nb_ªmoved
) +

606 (
d©a
[
i
].
nb_move
 - d©a[i].
nb_moved
) +

607 
d©a
[
i
].
nb_¢≠shŸed
;

608 
upd©es
 +(
d©a
[
i
].
nb_add
 + d©a[i].
nb_ªmove
);

609 
effupds
 +
d©a
[
i
].
nb_ªmoved
 + d©a[i].
nb_added
 + d©a[i].
nb_moved
;

610 
moves
 +
d©a
[
i
].
nb_move
;

611 
moved
 +
d©a
[
i
].
nb_moved
;

612 
¢≠shŸs
 +
d©a
[
i
].
nb_¢≠shŸ
;

613 
¢≠shŸed
 +
d©a
[
i
].
nb_¢≠shŸed
;

614 
size
 +
d©a
[
i
].
nb_added
 - d©a[i].
nb_ªmoved
;

615 i‡(
max_ªåõs
 < 
d©a
[
i
].max_retries)

616 
max_ªåõs
 = 
d©a
[
i
].max_retries;

618 
	`¥ötf
("Së sizê : %d (ex≥˘ed: %d)\n", 
	`ht_size
(
£t
), 
size
);

619 
	`¥ötf
("Duøti⁄ : %d (ms)\n", 
duøti⁄
);

620 
	`¥ötf
("#tx† : %lu (%‡/ s)\n", 
ªads
 + 
upd©es
 + 
moves
 + 
¢≠shŸs
 , (ªad†+ upd©e†+ move†+ s«pshŸsË* 1000.0 / 
duøti⁄
);

622 
	`¥ötf
("#readÅxs : ");

623 i‡(
ef„˘ive
) {

624 
	`¥ötf
("%lu (%‡/ s)\n", 
ef‰óds
,Éf‰ód†* 1000.0 / 
duøti⁄
);

625 
	`¥ötf
(" #c⁄èö† : %lu (%‡/ s)\n", 
ªads
,Ñód†* 1000.0 / 
duøti⁄
);

626 } 
	`¥ötf
("%lu (%‡/ s)\n", 
ªads
,Ñód†* 1000.0 / 
duøti⁄
);

628 
	`¥ötf
("#eff. updÑ©e: %‡\n", 100.0 * 
effupds
 / (effupd†+ 
ef‰óds
));

630 
	`¥ötf
("#updateÅxs : ");

631 i‡(
ef„˘ive
) {

632 
	`¥ötf
("%lu (%‡/ s)\n", 
effupds
,Éffupd†* 1000.0 / 
duøti⁄
);

633 
	`¥ötf
(" #updÅrül†: %lu (%‡/ s)\n", 
upd©es
, updates * 1000.0 /

634 
duøti⁄
);

635 } 
	`¥ötf
("%lu (%‡/ s)\n", 
upd©es
, upd©e†* 1000.0 / 
duøti⁄
);

637 
	`¥ötf
("#movêtx† : %lu (%‡/ s)\n", 
moves
, move†* 1000.0 / 
duøti⁄
);

638 
	`¥ötf
(" #moved : %lu (%‡/ s)\n", 
moved
, moved * 1000.0 / 
duøti⁄
);

639 
	`¥ötf
("#¢≠shŸÅx†: %lu (%‡/ s)\n", 
¢≠shŸs
, s«pshŸ†* 1000.0 / 
duøti⁄
);

640 
	`¥ötf
(" #¢≠shŸed : %lu (%‡/ s)\n", 
¢≠shŸed
, s«pshŸed * 1000.0 / 
duøti⁄
);

641 
	`¥ötf
("#ab‹t† : %lu (%‡/ s)\n", 
ab‹ts
,áb‹t†* 1000.0 / 
duøti⁄
);

642 
	`¥ötf
(" #lock-∏ : %lu (%‡/ s)\n", 
ab‹ts_locked_ªad
,áb‹ts_locked_ªad * 1000.0 / 
duøti⁄
);

643 
	`¥ötf
(" #lock-w : %lu (%‡/ s)\n", 
ab‹ts_locked_wrôe
,áb‹ts_locked_wrôê* 1000.0 / 
duøti⁄
);

644 
	`¥ötf
(" #vÆ-∏ : %lu (%‡/ s)\n", 
ab‹ts_vÆid©e_ªad
,áb‹ts_vÆid©e_ªad * 1000.0 / 
duøti⁄
);

645 
	`¥ötf
(" #vÆ-w : %lu (%‡/ s)\n", 
ab‹ts_vÆid©e_wrôe
,áb‹ts_vÆid©e_wrôê* 1000.0 / 
duøti⁄
);

646 
	`¥ötf
(" #vÆ-¯ : %lu (%‡/ s)\n", 
ab‹ts_vÆid©e_commô
,áb‹ts_vÆid©e_commô * 1000.0 / 
duøti⁄
);

647 
	`¥ötf
(" #öv-mem : %lu (%‡/ s)\n", 
ab‹ts_övÆid_mem‹y
,áb‹ts_övÆid_mem‹y * 1000.0 / 
duøti⁄
);

648 
	`¥ötf
("MaxÑërõ† : %lu\n", 
max_ªåõs
);

653 
	`ht_dñëe
(
£t
);

655 
	`‰ì
(
thªads
);

656 
	`‰ì
(
d©a
);

	@hashtables/lockfree-ht/hashtable.c

27 
	~"hashèbÀ.h
"

29 
	$ht_dñëe
(
ht_öt£t_t
 *
£t
) {

30 
node_t
 *
node
, *
√xt
;

31 
i
;

33 
i
=0; i < 
maxhéígth
; i++) {

34 
node
 = 
£t
->
buckës
[
i
]->
hód
;

35 
node
 !
NULL
) {

36 
√xt
 = 
node
->next;

37 
	`‰ì
(
node
);

38 
node
 = 
√xt
;

40 
	`‰ì
(
£t
->
buckës
[
i
]);

42 
	`‰ì
(
£t
->
buckës
);

43 
	`‰ì
(
£t
);

44 
	}
}

46 
	$ht_size
(
ht_öt£t_t
 *
£t
) {

47 
size
 = 0;

48 
node_t
 *
node
;

49 
i
;

51 
i
=0; i < 
maxhéígth
; i++) {

52 
node
 = 
£t
->
buckës
[
i
]->
hód
->
√xt
;

53 
node
->
√xt
) {

54 
size
++;

55 
node
 =Çode->
√xt
;

59  
size
;

60 
	}
}

62 
	$Êo‹_log_2
(
n
) {

63 
pos
 = 0;

64 
	`¥ötf
("¿ªsu… = %d\n", 
n
);

65 i‡(
n
 >1<<16Ë{Ç >>16; 
pos
 += 16; }

66 i‡(
n
 >1<< 8Ë{Ç >>8; 
pos
 += 8; }

67 i‡(
n
 >1<< 4Ë{Ç >>4; 
pos
 += 4; }

68 i‡(
n
 >1<< 2Ë{Ç >>2; 
pos
 += 2; }

69 i‡(
n
 >1<< 1Ë{ 
pos
 += 1; }

70 
	`¥ötf
("Êo‹Ñesu… = %d\n", 
pos
);

71  ((
n
 =0Ë? (-1Ë: 
pos
);

72 
	}
}

74 
ht_öt£t_t
 *
	$ht_√w
() {

75 
ht_öt£t_t
 *
£t
;

76 
i
;

78 i‡((
£t
 = (
ht_öt£t_t
 *)
	`mÆloc
((ht_öt£t_t))Ë=
NULL
) {

79 
	`≥º‹
("malloc");

80 
	`exô
(1);

82 i‡((
£t
->
buckës
 = (*)
	`mÆloc
((
maxhéígth
 + 1)* (
öt£t_t
 *))Ë=
NULL
) {

83 
	`≥º‹
("malloc");

84 
	`exô
(1);

87 
i
=0; i < 
maxhéígth
; i++) {

88 
£t
->
buckës
[
i
] = 
	`£t_√w
();

90  
£t
;

91 
	}
}

	@hashtables/lockfree-ht/hashtable.h

24 
	~"../../lökedli°s/lock‰ì-li°/öt£t.h
"

26 
	#DEFAULT_MOVE
 0

	)

27 
	#DEFAULT_SNAPSHOT
 0

	)

28 
	#DEFAULT_LOAD
 1

	)

29 
	#DEFAULT_ELASTICITY
 4

	)

30 
	#DEFAULT_ALTERNATE
 0

	)

31 
	#DEFAULT_EFFECTIVE
 1

	)

33 
	#MAXHTLENGTH
 65536

	)

36 
maxhéígth
;

39 #ifde‡
TLS


40 
__thªad
 *
∫g_£ed
;

42 
±hªad_key_t
 
∫g_£ed_key
;

45 
	sht_öt£t
 {

46 
öt£t_t
 **
	mbuckës
;

47 } 
	tht_öt£t_t
;

49 
ht_dñëe
(
ht_öt£t_t
 *
£t
);

50 
ht_size
(
ht_öt£t_t
 *
£t
);

51 
Êo‹_log_2
(
n
);

52 
ht_öt£t_t
 *
ht_√w
();

	@hashtables/lockfree-ht/intset.c

24 
	~"öt£t.h
"

26 
	$ht_c⁄èös
(
ht_öt£t_t
 *
£t
, 
vÆ
, 
å™ß˘i⁄Æ
) {

27 
addr
;

29 
addr
 = 
vÆ
 % 
maxhéígth
;

30 i‡(
å™ß˘i⁄Æ
 == 5)

31  
	`£t_c⁄èös
(
£t
->
buckës
[
addr
], 
vÆ
, 4);

33  
	`£t_c⁄èös
(
£t
->
buckës
[
addr
], 
vÆ
, 
å™ß˘i⁄Æ
);

34 
	}
}

36 
	$ht_add
(
ht_öt£t_t
 *
£t
, 
vÆ
, 
å™ß˘i⁄Æ
) {

37 
addr
;

39 
addr
 = 
vÆ
 % 
maxhéígth
;

40 i‡(
å™ß˘i⁄Æ
 == 5)

41  
	`£t_add
(
£t
->
buckës
[
addr
], 
vÆ
, 4);

43  
	`£t_add
(
£t
->
buckës
[
addr
], 
vÆ
, 
å™ß˘i⁄Æ
);

44 
	}
}

46 
	$ht_ªmove
(
ht_öt£t_t
 *
£t
, 
vÆ
, 
å™ß˘i⁄Æ
) {

47 
addr
;

49 
addr
 = 
vÆ
 % 
maxhéígth
;

50 i‡(
å™ß˘i⁄Æ
 == 5)

51  
	`£t_ªmove
(
£t
->
buckës
[
addr
], 
vÆ
, 4);

53  
	`£t_ªmove
(
£t
->
buckës
[
addr
], 
vÆ
, 
å™ß˘i⁄Æ
);

54 
	}
}

64 
	$ht_move_«ive
(
ht_öt£t_t
 *
£t
, 
vÆ1
, 
vÆ2
, 
å™ß˘i⁄Æ
) {

65 
ªsu…
 = 0;

67 #ifde‡
SEQUENTIAL


69 
addr1
, 
addr2
;

71 
addr1
 = 
vÆ1
 % 
maxhéígth
;

72 
addr2
 = 
vÆ2
 % 
maxhéígth
;

73 
ªsu…
 = (
	`£t_ªmove
(
£t
->
buckës
[
addr1
], 
vÆ1
, 
å™ß˘i⁄Æ
) &&

74 
	`£t_add
(
£t
->
buckës
[
addr2
], 
vÆ2
, 
å™ß˘i⁄Æ
));

76 #ñi‡
deföed
 
STM


78 
v
, 
addr1
, 
addr2
;

79 
node_t
 *
n
, *
¥ev
, *
√xt
;

81 i‡(
å™ß˘i⁄Æ
 > 1) {

83 
	`TX_START
(
EL
);

84 
addr1
 = 
vÆ1
 % 
maxhéígth
;

85 
¥ev
 = (
node_t
 *)
	`TX_LOAD
(&
£t
->
buckës
[
addr1
]->
hód
);

86 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

88 
v
 = 
	`TX_LOAD
(&
√xt
->
vÆ
);

89 i‡(
v
 >
vÆ1
) ;

90 
¥ev
 = 
√xt
;

91 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

93 i‡(
v
 =
vÆ1
) {

95 
n
 = (
node_t
 *)
	`TX_LOAD
(&
√xt
->next);

96 
	`TX_STORE
(&
¥ev
->
√xt
, 
n
);

97 
	`FREE
(
√xt
, (
node_t
));

99 
addr2
 = 
vÆ2
 % 
maxhéígth
;

100 
¥ev
 = (
node_t
 *)
	`TX_LOAD
(&
£t
->
buckës
[
addr2
]->
hód
);

101 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

103 
v
 = 
	`TX_LOAD
(&
√xt
->
vÆ
);

104 i‡(
v
 >
vÆ2
) ;

105 
¥ev
 = 
√xt
;

106 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

108 i‡(
v
 !
vÆ2
) {

109 
	`TX_STORE
(&
¥ev
->
√xt
, 
	`√w_node
(
vÆ2
,Çext, 
å™ß˘i⁄Æ
));

112 
ªsu…
 = 1;

113 } 
ªsu…
 = 0;

114 
TX_END
;

118 
	`TX_START
(
NL
);

119 
addr1
 = 
vÆ1
 % 
maxhéígth
;

120 
¥ev
 = (
node_t
 *)
	`TX_LOAD
(&
£t
->
buckës
[
addr1
]->
hód
);

121 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

123 
v
 = 
	`TX_LOAD
(&
√xt
->
vÆ
);

124 i‡(
v
 >
vÆ1
) ;

125 
¥ev
 = 
√xt
;

126 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

128 i‡(
v
 =
vÆ1
) {

130 
n
 = (
node_t
 *)
	`TX_LOAD
(&
√xt
->next);

131 
	`TX_STORE
(&
¥ev
->
√xt
, 
n
);

132 
	`FREE
(
√xt
, (
node_t
));

134 
addr2
 = 
vÆ2
 % 
maxhéígth
;

135 
¥ev
 = (
node_t
 *)
	`TX_LOAD
(&
£t
->
buckës
[
addr2
]->
hód
);

136 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

138 
v
 = 
	`TX_LOAD
(&
√xt
->
vÆ
);

139 i‡(
v
 >
vÆ2
) ;

140 
¥ev
 = 
√xt
;

141 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

143 i‡(
v
 !
vÆ2
) {

144 
	`TX_STORE
(&
¥ev
->
√xt
, 
	`√w_node
(
vÆ2
,Çext, 
å™ß˘i⁄Æ
));

147 
ªsu…
 = 1;

148 } 
ªsu…
 = 0;

149 
TX_END
;

153 #ñi‡
deföed
 
LOCKFREE


155 
	`¥ötf
("ht_snapshot: No other implementation ofátomic snapshot isávailable\n");

156 
	`exô
(1);

160  
ªsu…
;

161 
	}
}

168 
	$ht_move
(
ht_öt£t_t
 *
£t
, 
vÆ1
, 
vÆ2
, 
å™ß˘i⁄Æ
) {

169 
ªsu…
 = 0;

171 #ifde‡
SEQUENTIAL


173 
addr1
, 
addr2
;

175 
addr1
 = 
vÆ1
 % 
maxhéígth
;

176 
addr2
 = 
vÆ2
 % 
maxhéígth
;

178 i‡(
	`£t_ªmove
(
£t
->
buckës
[
addr1
], 
vÆ1
, 0))

179 
ªsu…
 = 1;

180 
	`£t_£q_add
(
£t
->
buckës
[
addr2
], 
vÆ2
, 0);

181  
ªsu…
;

183 #ñi‡
deföed
 
STM


185 
v
, 
addr1
, 
addr2
;

186 
node_t
 *
n
, *
¥ev
, *
√xt
, *
¥ev1
, *
√xt1
;

188 i‡(
å™ß˘i⁄Æ
 > 1) {

190 
	`TX_START
(
EL
);

191 
ªsu…
 = 0;

192 
addr1
 = 
vÆ1
 % 
maxhéígth
;

193 
¥ev
 = (
node_t
 *)
	`TX_LOAD
(&
£t
->
buckës
[
addr1
]->
hód
);

194 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

196 
v
 = 
	`TX_LOAD
(&
√xt
->
vÆ
);

197 i‡(
v
 >
vÆ1
) ;

198 
¥ev
 = 
√xt
;

199 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

201 
¥ev1
 = 
¥ev
;

202 
√xt1
 = 
√xt
;

203 i‡(
v
 =
vÆ1
) {

205 
addr2
 = 
vÆ2
 % 
maxhéígth
;

206 
¥ev
 = (
node_t
 *)
	`TX_LOAD
(&
£t
->
buckës
[
addr2
]->
hód
);

207 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

209 
v
 = 
	`TX_LOAD
(&
√xt
->
vÆ
);

210 i‡(
v
 >
vÆ2
) ;

211 
¥ev
 = 
√xt
;

212 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

214 i‡(
v
 !
vÆ2
 && 
¥ev
 !
¥ev1
 &&Öªv !
√xt1
) {

216 
ªsu…
 = 1;

219 
n
 = (
node_t
 *)
	`TX_LOAD
(&
√xt1
->
√xt
);

220 
	`TX_STORE
(&
¥ev1
->
√xt
, 
n
);

221 
	`TX_STORE
(&
¥ev
->
√xt
, 
	`√w_node
(
vÆ2
,Çext, 
å™ß˘i⁄Æ
));

222 
	`FREE
(
√xt1
, (
node_t
));

224 } 
ªsu…
 = 0;

225 
TX_END
;

229 
	`TX_START
(
NL
);

230 
ªsu…
 = 0;

231 
addr1
 = 
vÆ1
 % 
maxhéígth
;

232 
¥ev
 = (
node_t
 *)
	`TX_LOAD
(&
£t
->
buckës
[
addr1
]->
hód
);

233 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

235 
v
 = 
	`TX_LOAD
(&
√xt
->
vÆ
);

236 i‡(
v
 >
vÆ1
) ;

237 
¥ev
 = 
√xt
;

238 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

240 
¥ev1
 = 
¥ev
;

241 
√xt1
 = 
√xt
;

242 i‡(
v
 =
vÆ1
) {

244 
addr2
 = 
vÆ2
 % 
maxhéígth
;

245 
¥ev
 = (
node_t
 *)
	`TX_LOAD
(&
£t
->
buckës
[
addr2
]->
hód
);

246 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

248 
v
 = 
	`TX_LOAD
(&
√xt
->
vÆ
);

249 i‡(
v
 >
vÆ2
) ;

250 
¥ev
 = 
√xt
;

251 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

253 i‡(
v
 !
vÆ2
 && 
¥ev
 !
¥ev1
 &&Öªv !
√xt1
) {

255 
ªsu…
 = 1;

258 
n
 = (
node_t
 *)
	`TX_LOAD
(&
√xt1
->
√xt
);

259 
	`TX_STORE
(&
¥ev1
->
√xt
, 
n
);

260 
	`TX_STORE
(&
¥ev
->
√xt
, 
	`√w_node
(
vÆ2
,Çext, 
å™ß˘i⁄Æ
));

261 
	`FREE
(
√xt1
, (
node_t
));

263 } 
ªsu…
 = 0;

264 
TX_END
;

268 #ñi‡
deföed
 
LOCKFREE


270 
	`¥ötf
("ht_snapshot: No other implementation ofátomic snapshot isávailable\n");

271 
	`exô
(1);

275  
ªsu…
;

276 
	}
}

283 
	$ht_move_‹rﬁlback
(
ht_öt£t_t
 *
£t
, 
vÆ1
, 
vÆ2
, 
å™ß˘i⁄Æ
) {

284 
ªsu…
 = 0;

286 #ifde‡
SEQUENTIAL


288 
addr1
, 
addr2
;

289 
addr1
 = 
vÆ1
 % 
maxhéígth
;

290 
addr2
 = 
vÆ2
 % 
maxhéígth
;

291 
ªsu…
 = (
	`£t_ªmove
(
£t
->
buckës
[
addr1
], 
vÆ1
, 
å™ß˘i⁄Æ
) &&

292 
	`£t_add
(
£t
->
buckës
[
addr2
], 
vÆ2
, 
å™ß˘i⁄Æ
));

294 #ñi‡
deföed
 
STM


296 
v
, 
addr1
, 
addr2
;

297 
node_t
 *
n
, *
¥ev
, *
√xt
, *
¥ev1
, *
√xt1
;

299 i‡(
å™ß˘i⁄Æ
 > 1) {

301 
	`TX_START
(
EL
);

302 
ªsu…
 = 0;

303 
addr1
 = 
vÆ1
 % 
maxhéígth
;

304 
¥ev
 = (
node_t
 *)
	`TX_LOAD
(&
£t
->
buckës
[
addr1
]->
hód
);

305 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

307 
v
 = 
	`TX_LOAD
(&
√xt
->
vÆ
);

308 i‡(
v
 >
vÆ1
) ;

309 
¥ev
 = 
√xt
;

310 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

312 
¥ev1
 = 
¥ev
;

313 
√xt1
 = 
√xt
;

314 i‡(
v
 =
vÆ1
) {

316 
n
 = (
node_t
 *)
	`TX_LOAD
(&
√xt
->next);

317 
	`TX_STORE
(&
¥ev
->
√xt
, 
n
);

319 
addr2
 = 
vÆ2
 % 
maxhéígth
;

320 
¥ev
 = (
node_t
 *)
	`TX_LOAD
(&
£t
->
buckës
[
addr2
]->
hód
);

321 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

323 
v
 = 
	`TX_LOAD
(&
√xt
->
vÆ
);

324 i‡(
v
 >
vÆ2
) ;

325 
¥ev
 = 
√xt
;

326 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

328 i‡(
v
 !
vÆ2
) {

329 
	`TX_STORE
(&
¥ev
->
√xt
, 
	`√w_node
(
vÆ2
,Çext, 
å™ß˘i⁄Æ
));

330 
	`FREE
(
√xt1
, (
node_t
));

332 
	`TX_STORE
(&
¥ev1
->
√xt
, 
	`TX_LOAD
(&
√xt1
));

335 
ªsu…
 = 1;

336 } 
ªsu…
 = 0;

337 
TX_END
;

342 
	`TX_START
(
NL
);

343 
ªsu…
 = 0;

344 
addr1
 = 
vÆ1
 % 
maxhéígth
;

345 
¥ev
 = (
node_t
 *)
	`TX_LOAD
(&
£t
->
buckës
[
addr1
]->
hód
);

346 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

348 
v
 = 
	`TX_LOAD
(&
√xt
->
vÆ
);

349 i‡(
v
 >
vÆ1
) ;

350 
¥ev
 = 
√xt
;

351 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

353 
¥ev1
 = 
¥ev
;

354 
√xt1
 = 
√xt
;

355 i‡(
v
 =
vÆ1
) {

357 
n
 = (
node_t
 *)
	`TX_LOAD
(&
√xt
->next);

358 
	`TX_STORE
(&
¥ev
->
√xt
, 
n
);

360 
addr2
 = 
vÆ2
 % 
maxhéígth
;

361 
¥ev
 = (
node_t
 *)
	`TX_LOAD
(&
£t
->
buckës
[
addr2
]->
hód
);

362 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

364 
v
 = 
	`TX_LOAD
(&
√xt
->
vÆ
);

365 i‡(
v
 >
vÆ2
) ;

366 
¥ev
 = 
√xt
;

367 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

369 i‡(
v
 !
vÆ2
) {

370 
	`TX_STORE
(&
¥ev
->
√xt
, 
	`√w_node
(
vÆ2
,Çext, 
å™ß˘i⁄Æ
));

371 
	`FREE
(
√xt1
, (
node_t
));

373 
	`TX_STORE
(&
¥ev1
->
√xt
, 
	`TX_LOAD
(&
√xt1
));

376 
ªsu…
 = 1;

377 } 
ªsu…
 = 0;

378 
TX_END
;

382 #ñi‡
deföed
 
LOCKFREE


384 
	`¥ötf
("ht_snapshot: No other implementation ofátomic snapshot isávailable\n");

385 
	`exô
(1);

389  
ªsu…
;

390 
	}
}

401 
	$ht_¢≠shŸ
(
ht_öt£t_t
 *
£t
, 
å™ß˘i⁄Æ
) {

402 
ªsu…
 = 0;

404 #ifde‡
SEQUENTIAL


406 
i
, 
sum
 = 0;

407 
node_t
 *
√xt
;

409 
i
=0; i < 
maxhéígth
; i++) {

410 
√xt
 = 
£t
->
buckës
[
i
]->
hód
->next;

411 
√xt
->next) {

412 
sum
 +
√xt
->
vÆ
;

413 
√xt
 =Çext->next;

416 
ªsu…
 = 1;

418 #ñi‡
deföed
 
STM


420 
i
, 
sum
 = 0;

421 
node_t
 *
√xt
;

424 
	`TX_START
(
NL
);

425 
ªsu…
 = 0;

426 
i
=0; i < 
maxhéígth
; i++) {

427 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
£t
->
buckës
[
i
]->
hód
->next);

428 
√xt
->next) {

429 
sum
 +
	`TX_LOAD
(&
√xt
->
vÆ
);

430 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&next->next);

433 
TX_END
;

434 
ªsu…
 = 1;

436 #ñi‡
deföed
 
LOCKFREE


438 
	`¥ötf
("ht_snapshot: No other implementation ofátomic snapshot isávailable\n");

439 
	`exô
(1);

443  
ªsu…
;

444 
	}
}

	@hashtables/lockfree-ht/intset.h

25 
	~"hashèbÀ.h
"

27 
ht_c⁄èös
(
ht_öt£t_t
 *
£t
, 
vÆ
, 
å™ß˘i⁄Æ
);

28 
ht_add
(
ht_öt£t_t
 *
£t
, 
vÆ
, 
å™ß˘i⁄Æ
);

29 
ht_ªmove
(
ht_öt£t_t
 *
£t
, 
vÆ
, 
å™ß˘i⁄Æ
);

35 
ht_move
(
ht_öt£t_t
 *
£t
, 
vÆ1
, 
vÆ2
, 
å™ß˘i⁄Æ
);

45 
ht_¢≠shŸ
(
ht_öt£t_t
 *
£t
, 
å™ß˘i⁄Æ
);

	@hashtables/lockfree-ht/test.c

24 
	~"öt£t.h
"

27 
	gmaxhéígth
;

28 
	gg_nb_thªad
;

31 #ifde‡
TLS


32 
__thªad
 *
	g∫g_£ed
;

34 
±hªad_key_t
 
	g∫g_£ed_key
;

37 
	sb¨rõr
 {

38 
±hªad_c⁄d_t
 
	mcom∂ëe
;

39 
±hªad_muãx_t
 
	mmuãx
;

40 
	mcou¡
;

41 
	m¸ossög
;

42 } 
	tb¨rõr_t
;

45 
	$b¨rõr_öô
(
b¨rõr_t
 *
b
, 
n
)

47 
	`±hªad_c⁄d_öô
(&
b
->
com∂ëe
, 
NULL
);

48 
	`±hªad_muãx_öô
(&
b
->
muãx
, 
NULL
);

49 
b
->
cou¡
 = 
n
;

50 
b
->
¸ossög
 = 0;

51 
	}
}

53 
	$b¨rõr_¸oss
(
b¨rõr_t
 *
b
)

55 
	`±hªad_muãx_lock
(&
b
->
muãx
);

57 
b
->
¸ossög
++;

59 i‡(
b
->
¸ossög
 < b->
cou¡
) {

60 
	`±hªad_c⁄d_waô
(&
b
->
com∂ëe
, &b->
muãx
);

62 
	`±hªad_c⁄d_brﬂdˇ°
(&
b
->
com∂ëe
);

64 
b
->
¸ossög
 = 0;

66 
	`±hªad_muãx_u∆ock
(&
b
->
muãx
);

67 
	}
}

77 
ölöe
 
	$ønd_ønge
(
r
) {

78 
m
 = 
RAND_MAX
;

79 
d
, 
v
 = 0;

82 
d
 = (
m
 > 
r
 ?Ñ : m);

83 
v
 +1 + ()(
d
 * (()
	`ønd
()/(()(
m
)+1.0)));

84 
r
 -
m
;

85 } 
r
 > 0);

86  
v
;

87 
	}
}

88 
ønd_ønge
(
r
);

91 
ölöe
 
	$ønd_ønge_ª
(*
£ed
, 
r
) {

92 
m
 = 
RAND_MAX
;

93 
d
, 
v
 = 0;

96 
d
 = (
m
 > 
r
 ?Ñ : m);

97 
v
 +1 + ()(
d
 * (()
	`ønd_r
(
£ed
)/(()(
m
)+1.0)));

98 
r
 -
m
;

99 } 
r
 > 0);

100  
v
;

101 
	}
}

102 
ønd_ønge_ª
(*
£ed
, 
r
);

104 
	sthªad_d©a
 {

105 
vÆ_t
 
	mfú°
;

106 
	mønge
;

107 
	mupd©e
;

108 
	mmove
;

109 
	m¢≠shŸ
;

110 
	munô_tx
;

111 
	mÆã∫©e
;

112 
	mef„˘ive
;

113 
	mnb_add
;

114 
	mnb_added
;

115 
	mnb_ªmove
;

116 
	mnb_ªmoved
;

117 
	mnb_c⁄èös
;

119 
	mlﬂd_Á˘‹
;

120 
	mnb_move
;

121 
	mnb_moved
;

122 
	mnb_¢≠shŸ
;

123 
	mnb_¢≠shŸed
;

125 
	mnb_found
;

126 
	mnb_ab‹ts
;

127 
	mnb_ab‹ts_locked_ªad
;

128 
	mnb_ab‹ts_locked_wrôe
;

129 
	mnb_ab‹ts_vÆid©e_ªad
;

130 
	mnb_ab‹ts_vÆid©e_wrôe
;

131 
	mnb_ab‹ts_vÆid©e_commô
;

132 
	mnb_ab‹ts_övÆid_mem‹y
;

133 
	mnb_ab‹ts_doubÀ_wrôe
;

134 
	mmax_ªåõs
;

135 
	m£ed
;

136 
ht_öt£t_t
 *
	m£t
;

137 
b¨rõr_t
 *
	mb¨rõr
;

138 
	mÁûuªs_beˇu£_c⁄ã¡i⁄
;

139 } 
	tthªad_d©a_t
;

142 *
	$ã°
(*
d©a
) {

143 
vÆ2
, 
numtx
, 
r
, 
œ°
 = -1;

144 
cuº_ªåy
 = 0;

145 
vÆ_t
 
vÆ
 = 0;

146 
u√xt
, 
m√xt
, 
˙ext
;

147 
ªt
 = 0;

149 
thªad_d©a_t
 *
d
 = (thªad_d©a_à*)
d©a
;

152 
	`TM_THREAD_ENTER
();

154 
	`b¨rõr_¸oss
(
d
->
b¨rõr
);

157 
r
 = 
	`ønd_ønge_ª
(&
d
->
£ed
, 100) - 1;

158 
u√xt
 = (
r
 < 
d
->
upd©e
);

159 
m√xt
 = (
r
 < 
d
->
move
);

160 
˙ext
 = (
r
 >
d
->
upd©e
 + d->
¢≠shŸ
);

162 
num_add
 = 0;

163 #ifde‡
ICC


164 
num_add
 < 10000000/
g_nb_thªad
) {

167 
num_add
 < 10000000/
g_nb_thªad
) {

169 
num_add
++;

171 i‡(
u√xt
) {

173 
vÆ
 = 
	`ønd_ønge_ª
(&
d
->
£ed
, d->
ønge
);

175 
cuº_ªåy
 = 0;

176 (
ªt
 = 
	`ht_add
(
d
->
£t
, 
vÆ
, 
TRANSACTIONAL
)) == -1) {

180 
d
->
nb_ab‹ts
++;

181 
cuº_ªåy
++;

182 if(
cuº_ªåy
 > 
d
->
max_ªåõs
){

183 
d
->
Áûuªs_beˇu£_c⁄ã¡i⁄
++;

187 if(
ªt
 > 0)

188 
d
->
nb_added
++;

189 
d
->
nb_add
++;

191 i‡(
m√xt
) {

193 i‡(
œ°
 =-1Ë
vÆ
 = 
	`ønd_ønge_ª
(&
d
->
£ed
, d->
ønge
);

194 
vÆ
 = 
œ°
;

195 
vÆ2
 = 
	`ønd_ønge_ª
(&
d
->
£ed
, d->
ønge
);

196 i‡(
	`ht_move
(
d
->
£t
, 
vÆ
, 
vÆ2
, 
TRANSACTIONAL
)) {

197 
d
->
nb_moved
++;

198 
œ°
 = -1;

200 
d
->
nb_move
++;

202 } i‡(
œ°
 < 0) {

204 
vÆ
 = 
	`ønd_ønge_ª
(&
d
->
£ed
, d->
ønge
);

205 i‡(
	`ht_add
(
d
->
£t
, 
vÆ
, 
TRANSACTIONAL
)) {

206 
d
->
nb_added
++;

207 
œ°
 = 
vÆ
;

209 
d
->
nb_add
++;

213 i‡(
d
->
Æã∫©e
) {

214 i‡(
	`ht_ªmove
(
d
->
£t
, 
œ°
, 
TRANSACTIONAL
)) {

215 
d
->
nb_ªmoved
++;

216 
œ°
 = -1;

220 
vÆ
 = 
	`ønd_ønge_ª
(&
d
->
£ed
, d->
ønge
);

222 i‡(
	`ht_ªmove
(
d
->
£t
, 
vÆ
, 
TRANSACTIONAL
)) {

223 
d
->
nb_ªmoved
++;

225 
œ°
 = -1;

228 
d
->
nb_ªmove
++;

234 i‡(
˙ext
) {

236 i‡(
d
->
Æã∫©e
) {

237 i‡(
d
->
upd©e
 == 0) {

238 i‡(
œ°
 < 0) {

239 
vÆ
 = 
d
->
fú°
;

240 
œ°
 = 
vÆ
;

242 
vÆ
 = 
	`ønd_ønge_ª
(&
d
->
£ed
, d->
ønge
);

243 
œ°
 = -1;

246 i‡(
œ°
 < 0) {

247 
vÆ
 = 
	`ønd_ønge_ª
(&
d
->
£ed
, d->
ønge
);

250 
vÆ
 = 
œ°
;

253 } 
vÆ
 = 
	`ønd_ønge_ª
(&
d
->
£ed
, d->
ønge
);

255 i‡(
	`ht_c⁄èös
(
d
->
£t
, 
vÆ
, 
TRANSACTIONAL
))

256 
d
->
nb_found
++;

257 
d
->
nb_c⁄èös
++;

261 i‡(
	`ht_¢≠shŸ
(
d
->
£t
, 
TRANSACTIONAL
))

262 
d
->
nb_¢≠shŸed
++;

263 
d
->
nb_¢≠shŸ
++;

268 
u√xt
 = 1;

271 i‡(
d
->
ef„˘ive
) {

272 
numtx
 = 
d
->
nb_c⁄èös
 + d->
nb_add
 + d->
nb_ªmove
 + d->
nb_move
 + d->
nb_¢≠shŸ
;

273 
u√xt
 = ((100.0 * (
d
->
nb_added
 + d->
nb_ªmoved
 + d->
nb_moved
)Ë< (d->
upd©e
 * 
numtx
));

274 
m√xt
 = ((100.0 * 
d
->
nb_moved
Ë< (d->
move
 * 
numtx
));

275 
˙ext
 = !((100.0 * 
d
->
nb_¢≠shŸed
Ë< (d->
¢≠shŸ
 * 
numtx
));

277 
r
 = 
	`ønd_ønge_ª
(&
d
->
£ed
, 100) - 1;

278 
u√xt
 = (
r
 < 
d
->
upd©e
);

279 
m√xt
 = (
r
 < 
d
->
move
);

280 
˙ext
 = (
r
 >
d
->
upd©e
 + d->
¢≠shŸ
);

284 #ifde‡
ICC


291 
	`TM_THREAD_EXIT
();

293  
NULL
;

297 *
	`ã°2
(*
d©a
)

299 
vÆ
, 
√wvÆ
, 
œ°
, 
Êag
 = 1;

300 
thªad_d©a_t
 *
d
 = (thªad_d©a_à*)
d©a
;

303 
	`TM_THREAD_ENTER
();

305 
	`b¨rõr_¸oss
(
d
->
b¨rõr
);

307 
œ°
 = 0;

308 
°›
 == 0) {

310 
vÆ
 = 
	`ønd_ønge_ª
(&
d
->
£ed
, 100) - 1;

312 i‡(
vÆ
 < 
d
->
upd©e
) {

313 i‡(
vÆ
 >
d
->
move
) {

314 i‡(
Êag
) {

316 
vÆ
 = (
	`ønd_r
(&
d
->
£ed
Ë% d->
ønge
) + 1;

317 i‡(
	`ht_add
(
d
->
£t
, 
vÆ
, 
TRANSACTIONAL
)) {

318 
d
->
nb_added
++;

319 
œ°
 = 
vÆ
;

320 
Êag
 = 0;

322 
d
->
nb_add
++;

324 i‡(
d
->
Æã∫©e
) {

326 i‡(
	`ht_ªmove
(
d
->
£t
, 
œ°
, 
TRANSACTIONAL
))

327 
d
->
nb_ªmoved
++;

328 
d
->
nb_ªmove
++;

329 
Êag
 = 1;

332 
√wvÆ
 = 
	`ønd_ønge_ª
(&
d
->
£ed
, d->
ønge
);

333 i‡(
	`ht_ªmove
(
d
->
£t
, 
√wvÆ
, 
TRANSACTIONAL
)) {

334 
d
->
nb_ªmoved
++;

336 
Êag
 = 1;

338 
d
->
nb_ªmove
++;

342 
vÆ
 = 
	`ønd_ønge_ª
(&
d
->
£ed
, d->
ønge
);

343 i‡(
	`ht_move
(
d
->
£t
, 
œ°
, 
vÆ
, 
TRANSACTIONAL
)) {

344 
d
->
nb_moved
++;

345 
œ°
 = 
vÆ
;

347 
d
->
nb_move
++;

350 i‡(
vÆ
 >
d
->
upd©e
 + d->
¢≠shŸ
) {

352 
vÆ
 = 
	`ønd_ønge_ª
(&
d
->
£ed
, d->
ønge
);

353 i‡(
	`ht_c⁄èös
(
d
->
£t
, 
vÆ
, 
TRANSACTIONAL
))

354 
d
->
nb_found
++;

355 
d
->
nb_c⁄èös
++;

357 i‡(
	`ht_¢≠shŸ
(
d
->
£t
, 
TRANSACTIONAL
))

358 
d
->
nb_¢≠shŸed
++;

359 
d
->
nb_¢≠shŸ
++;

365 
	`TM_THREAD_EXIT
();

366  
NULL
;

369 
	`¥öt_£t
(
öt£t_t
 *
£t
) {

370 
node_t
 *
cuº
, *
tmp
;

372 
cuº
 = 
£t
->
hód
;

373 
tmp
 = 
cuº
;

375 
	`¥ötf
(" - v%d", (Ë
cuº
->
vÆ
);

376 
tmp
 = 
cuº
;

377 
cuº
 = 
tmp
->
√xt
;

378 } 
cuº
->
vÆ
 !
VAL_MAX
);

379 
	`¥ötf
(" - v%d", (Ë
cuº
->
vÆ
);

380 
	`¥ötf
("\n");

383 
	`¥öt_ht
(
ht_öt£t_t
 *
£t
) {

384 
i
;

385 
i
=0; i < 
maxhéígth
; i++) {

386 
	`¥öt_£t
(
£t
->
buckës
[
i
]);

390 
	`maö
(
¨gc
, **
¨gv
)

392 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

394 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

395 {"duøti⁄", 
ªquúed_¨gumít
, 
NULL
, 'd'},

396 {"öôül-size", 
ªquúed_¨gumít
, 
NULL
, 'i'},

397 {"thªad-num", 
ªquúed_¨gumít
, 
NULL
, 't'},

398 {"ønge", 
ªquúed_¨gumít
, 
NULL
, 'r'},

399 {"£ed", 
ªquúed_¨gumít
, 
NULL
, 'S'},

400 {"upd©e-øã", 
ªquúed_¨gumít
, 
NULL
, 'u'},

401 {"move-øã", 
ªquúed_¨gumít
, 
NULL
, 'a'},

402 {"¢≠shŸ-øã", 
ªquúed_¨gumít
, 
NULL
, 's'},

403 {"ña°icôy", 
ªquúed_¨gumít
, 
NULL
, 'x'},

404 {"ªåy", 
ªquúed_¨gumít
, 
NULL
, 'e'},

405 {
NULL
, 0, NULL, 0}

408 
ht_öt£t_t
 *
£t
;

409 
i
, 
c
, 
size
;

410 
vÆ_t
 
œ°
 = 0;

411 
vÆ_t
 
vÆ
 = 0;

412 
ªads
, 
ef‰óds
, 
upd©es
, 
effupds
, 
moves
, 
moved
, 
¢≠shŸs
,

413 
¢≠shŸed
, 
ab‹ts
, 
ab‹ts_locked_ªad
, 
ab‹ts_locked_wrôe
,

414 
ab‹ts_vÆid©e_ªad
, 
ab‹ts_vÆid©e_wrôe
, 
ab‹ts_vÆid©e_commô
,

415 
ab‹ts_övÆid_mem‹y
, 
ab‹ts_doubÀ_wrôe
,

416 
max_ªåõs
, 
Áûuªs_beˇu£_c⁄ã¡i⁄
;

417 
thªad_d©a_t
 *
d©a
;

418 
±hªad_t
 *
thªads
;

419 
±hªad_©å_t
 
©å
;

420 
b¨rõr_t
 
b¨rõr
;

421 
timevÆ
 
°¨t
, 
íd
;

422 
time•ec
 
timeout
;

423 
duøti⁄
 = 
DEFAULT_DURATION
;

424 
öôül
 = 
DEFAULT_INITIAL
;

425 
nb_thªads
 = 
DEFAULT_NB_THREADS
;

426 
ønge
 = 
DEFAULT_RANGE
;

427 
£ed
 = 
DEFAULT_SEED
;

428 
upd©e
 = 
DEFAULT_UPDATE
;

429 
lﬂd_Á˘‹
 = 
DEFAULT_LOAD
;

430 
move
 = 
DEFAULT_MOVE
;

431 
¢≠shŸ
 = 
DEFAULT_SNAPSHOT
;

432 
unô_tx
 = 
DEFAULT_ELASTICITY
;

433 
Æã∫©e
 = 
DEFAULT_ALTERNATE
;

434 
ef„˘ive
 = 
DEFAULT_EFFECTIVE
;

435 
ªåy
 = 0;

436 
sig£t_t
 
block_£t
;

439 
i
 = 0;

440 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "e:hAf:d:i:t:r:S:u:a:s:l:x:", 
l⁄g_›ti⁄s
, &
i
);

442 if(
c
 == -1)

445 if(
c
 =0 && 
l⁄g_›ti⁄s
[
i
].
Êag
 == 0)

446 
c
 = 
l⁄g_›ti⁄s
[
i
].
vÆ
;

448 
c
) {

453 
	`¥ötf
("intset -- STM stressÅest "

467 " upd©êtx†mu°Éf„˘ivñy wrôê(0Òrül, 1Ûf„˘ive, deÁu…=" 
	`XSTR
(
DEFAULT_EFFECTIVE
) ")\n"

469 " Te° duøti⁄ i¿mûli£c⁄d†(0=öföôe, deÁu…=" 
	`XSTR
(
DEFAULT_DURATION
) ")\n"

471 " Numbî o‡ñemít†tÿö£π bef‹êã° (deÁu…=" 
	`XSTR
(
DEFAULT_INITIAL
) ")\n"

473 " Numbî o‡thªad†(deÁu…=" 
	`XSTR
(
DEFAULT_NB_THREADS
) ")\n"

475 " R™gêo‡öãgî vÆue†ö£πed i¿£à(deÁu…=" 
	`XSTR
(
DEFAULT_RANGE
) ")\n"

477 " RNG sìd (0Òime-ba£d, deÁu…=" 
	`XSTR
(
DEFAULT_SEED
) ")\n"

479 " Pî˚¡agêo‡upd©êå™ß˘i⁄†(deÁu…=" 
	`XSTR
(
DEFAULT_UPDATE
) ")\n"

481 " Pî˚¡agêo‡movêå™ß˘i⁄†(deÁu…=" 
	`XSTR
(
DEFAULT_MOVE
) ")\n"

483 " Pî˚¡agêo‡¢≠shŸÅønß˘i⁄†(deÁu…=" 
	`XSTR
(
DEFAULT_SNAPSHOT
) ")\n"

485 " R©iÿo‡key†ovî buckë†(deÁu…=" 
	`XSTR
(
DEFAULT_LOAD
) ")\n"

495 
	`exô
(0);

497 
ªåy
 = 
	`©oi
(
›èrg
);

500 
Æã∫©e
 = 1;

503 
ef„˘ive
 = 
	`©oi
(
›èrg
);

506 
duøti⁄
 = 
	`©oi
(
›èrg
);

509 
öôül
 = 
	`©oi
(
›èrg
);

512 
nb_thªads
 = 
	`©oi
(
›èrg
);

513 
g_nb_thªad
 = 
nb_thªads
;

516 
ønge
 = 
	`©ﬁ
(
›èrg
);

519 
£ed
 = 
	`©oi
(
›èrg
);

522 
upd©e
 = 
	`©oi
(
›èrg
);

525 
move
 = 
	`©oi
(
›èrg
);

528 
¢≠shŸ
 = 
	`©oi
(
›èrg
);

531 
lﬂd_Á˘‹
 = 
	`©oi
(
›èrg
);

534 
unô_tx
 = 
	`©oi
(
›èrg
);

537 
	`¥ötf
("Use -h or --help for help\n");

538 
	`exô
(0);

540 
	`exô
(1);

544 
	`as£π
(
duøti⁄
 >= 0);

545 
	`as£π
(
öôül
 >= 0);

546 
	`as£π
(
nb_thªads
 > 0);

547 
	`as£π
(
ønge
 > 0 &&Ñ™gê>
öôül
);

548 
	`as£π
(
upd©e
 >= 0 && update <= 100);

549 
	`as£π
(
move
 >0 && movê<
upd©e
);

550 
	`as£π
(
¢≠shŸ
 >0 && s«pshŸ <(100-
upd©e
));

551 
	`as£π
(
öôül
 < 
MAXHTLENGTH
);

552 
	`as£π
(
öôül
 >
lﬂd_Á˘‹
);

554 
	`¥ötf
("SetÅype :Üock-free hashÅable\n");

555 
	`¥ötf
("Duøti⁄ : %d\n", 
duøti⁄
);

556 
	`¥ötf
("Inôü»sizê: %d\n", 
öôül
);

557 
	`¥ötf
("NbÅhªad† : %d\n", 
nb_thªads
);

558 
	`¥ötf
("VÆuêøngê : %ld\n", 
ønge
);

559 
	`¥ötf
("Sìd : %d\n", 
£ed
);

560 
	`¥ötf
("Upd©êøã : %d\n", 
upd©e
);

561 
	`¥ötf
("Lﬂd fa˘‹ : %d\n", 
lﬂd_Á˘‹
);

562 
	`¥ötf
("Movêøã : %d\n", 
move
);

563 
	`¥ötf
("S«pshŸÑ©e: %d\n", 
¢≠shŸ
);

564 
	`¥ötf
("Eœ°icôy : %d\n", 
unô_tx
);

565 
	`¥ötf
("A…î«ã : %d\n", 
Æã∫©e
);

566 
	`¥ötf
("Ef„˘ivê : %d\n", 
ef„˘ive
);

567 
	`¥ötf
("Type sizes : int=%d/long=%d/ptr=%d/word=%d\n",

571 ()(
uöçå_t
));

573 
timeout
.
tv_£c
 = 
duøti⁄
 / 1000;

574 
timeout
.
tv_n£c
 = (
duøti⁄
 % 1000) * 1000000;

576 i‡((
d©a
 = (
thªad_d©a_t
 *)
	`mÆloc
(
nb_thªads
 * —hªad_d©a_t))Ë=
NULL
) {

577 
	`≥º‹
("malloc");

578 
	`exô
(1);

580 i‡((
thªads
 = (
±hªad_t
 *)
	`mÆloc
(
nb_thªads
 * ’thªad_t))Ë=
NULL
) {

581 
	`≥º‹
("malloc");

582 
	`exô
(1);

585 i‡(
£ed
 == 0)

586 
	`§™d
(()
	`time
(0));

588 
	`§™d
(
£ed
);

590 
maxhéígth
 = (Ë
öôül
 / 
lﬂd_Á˘‹
;

591 
£t
 = 
	`ht_√w
();

593 
°›
 = 0;

596 
	`¥ötf
("Initializing STM\n");

598 
	`TM_STARTUP
();

601 
	`¥ötf
("Addög %dÉ¡rõ†tÿ£t\n", 
öôül
);

602 
i
 = 0;

603 
maxhéígth
 = (Ë(
öôül
 / 
lﬂd_Á˘‹
);

604 
i
 < 
öôül
) {

605 
vÆ
 = 
	`ønd_ønge
(
ønge
);

606 i‡(
	`ht_add
(
£t
, 
vÆ
, 0)) {

607 
œ°
 = 
vÆ
;

608 
i
++;

611 
size
 = 
	`ht_size
(
£t
);

612 
	`¥ötf
("Së sizê : %d\n", 
size
);

613 
	`¥ötf
("Buckëámou¡: %d\n", 
maxhéígth
);

614 
	`¥ötf
("Lﬂd : %d\n", 
lﬂd_Á˘‹
);

617 
	`b¨rõr_öô
(&
b¨rõr
, 
nb_thªads
 + 1);

618 
	`±hªad_©å_öô
(&
©å
);

619 
	`±hªad_©å_£tdëach°©e
(&
©å
, 
PTHREAD_CREATE_JOINABLE
);

620 
i
 = 0; i < 
nb_thªads
; i++) {

621 
	`¥ötf
("Cª©ögÅhªad %d\n", 
i
);

622 
d©a
[
i
].
fú°
 = 
œ°
;

623 
d©a
[
i
].
ønge
 =Ñange;

624 
d©a
[
i
].
upd©e
 = update;

625 
d©a
[
i
].
lﬂd_Á˘‹
 =Üoad_factor;

626 
d©a
[
i
].
move
 = move;

627 
d©a
[
i
].
¢≠shŸ
 = snapshot;

628 
d©a
[
i
].
unô_tx
 = unit_tx;

629 
d©a
[
i
].
Æã∫©e
 =álternate;

630 
d©a
[
i
].
ef„˘ive
 =Éffective;

631 
d©a
[
i
].
nb_add
 = 0;

632 
d©a
[
i
].
nb_added
 = 0;

633 
d©a
[
i
].
nb_ªmove
 = 0;

634 
d©a
[
i
].
nb_ªmoved
 = 0;

635 
d©a
[
i
].
nb_move
 = 0;

636 
d©a
[
i
].
nb_moved
 = 0;

637 
d©a
[
i
].
nb_¢≠shŸ
 = 0;

638 
d©a
[
i
].
nb_¢≠shŸed
 = 0;

639 
d©a
[
i
].
nb_c⁄èös
 = 0;

640 
d©a
[
i
].
nb_found
 = 0;

641 
d©a
[
i
].
nb_ab‹ts
 = 0;

642 
d©a
[
i
].
nb_ab‹ts_locked_ªad
 = 0;

643 
d©a
[
i
].
nb_ab‹ts_locked_wrôe
 = 0;

644 
d©a
[
i
].
nb_ab‹ts_vÆid©e_ªad
 = 0;

645 
d©a
[
i
].
nb_ab‹ts_vÆid©e_wrôe
 = 0;

646 
d©a
[
i
].
nb_ab‹ts_vÆid©e_commô
 = 0;

647 
d©a
[
i
].
nb_ab‹ts_övÆid_mem‹y
 = 0;

648 
d©a
[
i
].
nb_ab‹ts_doubÀ_wrôe
 = 0;

649 
d©a
[
i
].
max_ªåõs
 = 
ªåy
;

650 
d©a
[
i
].
£ed
 = 
	`ønd
();

651 
d©a
[
i
].
£t
 = set;

652 
d©a
[
i
].
b¨rõr
 = &barrier;

653 
d©a
[
i
].
Áûuªs_beˇu£_c⁄ã¡i⁄
 = 0;

654 i‡(
	`±hªad_¸óã
(&
thªads
[
i
], &
©å
, 
ã°
, (*)(&
d©a
[i])) != 0) {

655 
	`Ârötf
(
°dîr
, "Error creatingÅhread\n");

656 
	`exô
(1);

659 
	`±hªad_©å_de°roy
(&
©å
);

662 
	`b¨rõr_¸oss
(&
b¨rõr
);

664 
	`¥ötf
("STARTING...\n");

665 
	`gëtimeofday
(&
°¨t
, 
NULL
);

666 i‡(
duøti⁄
 > 0) {

667 
	`«no¶ìp
(&
timeout
, 
NULL
);

672 
	`AO_°‹e_fuŒ
(&
°›
, 1);

673 
	`gëtimeofday
(&
íd
, 
NULL
);

674 
	`¥ötf
("STOPPING...\n");

679 
i
 = 0; i < 
nb_thªads
; i++) {

680 i‡(
	`±hªad_joö
(
thªads
[
i
], 
NULL
) != 0) {

681 
	`Ârötf
(
°dîr
, "Error waiting forÅhread completion\n");

682 
	`exô
(1);

685 
duøti⁄
 = (
íd
.
tv_£c
 * 1000 +Énd.
tv_u£c
 / 1000Ë- (
°¨t
.tv_sec * 1000 + start.tv_usec / 1000);

686 
ab‹ts
 = 0;

687 
ab‹ts_locked_ªad
 = 0;

688 
ab‹ts_locked_wrôe
 = 0;

689 
ab‹ts_vÆid©e_ªad
 = 0;

690 
ab‹ts_vÆid©e_wrôe
 = 0;

691 
ab‹ts_vÆid©e_commô
 = 0;

692 
ab‹ts_övÆid_mem‹y
 = 0;

693 
ab‹ts_doubÀ_wrôe
 = 0;

694 
Áûuªs_beˇu£_c⁄ã¡i⁄
 = 0;

695 
ªads
 = 0;

696 
ef‰óds
 = 0;

697 
upd©es
 = 0;

698 
effupds
 = 0;

699 
moves
 = 0;

700 
moved
 = 0;

701 
¢≠shŸs
 = 0;

702 
¢≠shŸed
 = 0;

703 
max_ªåõs
 = 0;

704 
i
 = 0; i < 
nb_thªads
; i++) {

705 
	`¥ötf
("Thªad %d\n", 
i
);

706 
	`¥ötf
(" #add : %lu\n", 
d©a
[
i
].
nb_add
);

707 
	`¥ötf
(" #added : %lu\n", 
d©a
[
i
].
nb_added
);

708 
	`¥ötf
(" #ªmovê : %lu\n", 
d©a
[
i
].
nb_ªmove
);

709 
	`¥ötf
(" #ªmoved : %lu\n", 
d©a
[
i
].
nb_ªmoved
);

710 
	`¥ötf
(" #c⁄èö† : %lu\n", 
d©a
[
i
].
nb_c⁄èös
);

711 
	`¥ötf
(" #found : %lu\n", 
d©a
[
i
].
nb_found
);

712 
	`¥ötf
(" #movê : %lu\n", 
d©a
[
i
].
nb_move
);

713 
	`¥ötf
(" #moved : %lu\n", 
d©a
[
i
].
nb_moved
);

714 
	`¥ötf
(" #¢≠shŸ : %lu\n", 
d©a
[
i
].
nb_¢≠shŸ
);

715 
	`¥ötf
(" #¢≠shŸed : %lu\n", 
d©a
[
i
].
nb_¢≠shŸed
);

716 
	`¥ötf
(" #ab‹t† : %lu\n", 
d©a
[
i
].
nb_ab‹ts
);

717 
	`¥ötf
(" #lock-∏ : %lu\n", 
d©a
[
i
].
nb_ab‹ts_locked_ªad
);

718 
	`¥ötf
(" #lock-w : %lu\n", 
d©a
[
i
].
nb_ab‹ts_locked_wrôe
);

719 
	`¥ötf
(" #vÆ-∏ : %lu\n", 
d©a
[
i
].
nb_ab‹ts_vÆid©e_ªad
);

720 
	`¥ötf
(" #vÆ-w : %lu\n", 
d©a
[
i
].
nb_ab‹ts_vÆid©e_wrôe
);

721 
	`¥ötf
(" #vÆ-¯ : %lu\n", 
d©a
[
i
].
nb_ab‹ts_vÆid©e_commô
);

722 
	`¥ötf
(" #öv-mem : %lu\n", 
d©a
[
i
].
nb_ab‹ts_övÆid_mem‹y
);

723 
	`¥ötf
(" #dup-w : %lu\n", 
d©a
[
i
].
nb_ab‹ts_doubÀ_wrôe
);

724 
	`¥ötf
(" #Áûuª†: %lu\n", 
d©a
[
i
].
Áûuªs_beˇu£_c⁄ã¡i⁄
);

725 
	`¥ötf
(" MaxÑërõ†: %lu\n", 
d©a
[
i
].
max_ªåõs
);

726 
ab‹ts
 +
d©a
[
i
].
nb_ab‹ts
;

727 
ab‹ts_locked_ªad
 +
d©a
[
i
].
nb_ab‹ts_locked_ªad
;

728 
ab‹ts_locked_wrôe
 +
d©a
[
i
].
nb_ab‹ts_locked_wrôe
;

729 
ab‹ts_vÆid©e_ªad
 +
d©a
[
i
].
nb_ab‹ts_vÆid©e_ªad
;

730 
ab‹ts_vÆid©e_wrôe
 +
d©a
[
i
].
nb_ab‹ts_vÆid©e_wrôe
;

731 
ab‹ts_vÆid©e_commô
 +
d©a
[
i
].
nb_ab‹ts_vÆid©e_commô
;

732 
ab‹ts_övÆid_mem‹y
 +
d©a
[
i
].
nb_ab‹ts_övÆid_mem‹y
;

733 
ab‹ts_doubÀ_wrôe
 +
d©a
[
i
].
nb_ab‹ts_doubÀ_wrôe
;

734 
Áûuªs_beˇu£_c⁄ã¡i⁄
 +
d©a
[
i
].failures_because_contention;

735 
ªads
 +
d©a
[
i
].
nb_c⁄èös
;

736 
ef‰óds
 +
d©a
[
i
].
nb_c⁄èös
 +

737 (
d©a
[
i
].
nb_add
 - d©a[i].
nb_added
) +

738 (
d©a
[
i
].
nb_ªmove
 - d©a[i].
nb_ªmoved
) +

739 (
d©a
[
i
].
nb_move
 - d©a[i].
nb_moved
) +

740 
d©a
[
i
].
nb_¢≠shŸed
;

741 
upd©es
 +(
d©a
[
i
].
nb_add
 + d©a[i].
nb_ªmove
 + d©a[i].
nb_move
);

742 
effupds
 +
d©a
[
i
].
nb_ªmoved
 + d©a[i].
nb_added
 + d©a[i].
nb_moved
;

743 
moves
 +
d©a
[
i
].
nb_move
;

744 
moved
 +
d©a
[
i
].
nb_moved
;

745 
¢≠shŸs
 +
d©a
[
i
].
nb_¢≠shŸ
;

746 
¢≠shŸed
 +
d©a
[
i
].
nb_¢≠shŸed
;

747 
size
 +
d©a
[
i
].
nb_added
 - d©a[i].
nb_ªmoved
;

748 i‡(
max_ªåõs
 < 
d©a
[
i
].max_retries)

749 
max_ªåõs
 = 
d©a
[
i
].max_retries;

751 
	`¥ötf
("Së sizê : %d (ex≥˘ed: %d)\n", 
	`ht_size
(
£t
), 
size
);

752 
	`¥ötf
("Duøti⁄ : %d (ms)\n", 
duøti⁄
);

753 
	`¥ötf
("#tx† : %lu (%‡/ s)\n", 
ªads
 + 
upd©es
 + 
¢≠shŸs
, (ªad†+ upd©e†+ s«pshŸsË* 1000.0 / 
duøti⁄
);

755 
	`¥ötf
("#readÅxs : ");

756 i‡(
ef„˘ive
) {

757 
	`¥ötf
("%lu (%‡/ s)\n", 
ef‰óds
,Éf‰ód†* 1000.0 / 
duøti⁄
);

758 
	`¥ötf
(" #c⁄t/¢psht: %lu (%‡/ s)\n", 
ªads
,Ñód†* 1000.0 / 
duøti⁄
);

759 } 
	`¥ötf
("%lu (%‡/ s)\n", 
ªads
,Ñód†* 1000.0 / 
duøti⁄
);

761 
	`¥ötf
("#eff. updÑ©e: %‡\n", 100.0 * 
effupds
 / (effupd†+ 
ef‰óds
));

763 
	`¥ötf
("#updateÅxs : ");

764 i‡(
ef„˘ive
) {

765 
	`¥ötf
("%lu (%‡/ s)\n", 
effupds
,Éffupd†* 1000.0 / 
duøti⁄
);

766 
	`¥ötf
(" #updÅrül†: %lu (%‡/ s)\n", 
upd©es
, updates * 1000.0 /

767 
duøti⁄
);

768 } 
	`¥ötf
("%lu (%‡/ s)\n", 
upd©es
, upd©e†* 1000.0 / 
duøti⁄
);

770 
	`¥ötf
("#movêtx† : %lu (%‡/ s)\n", 
moves
, move†* 1000.0 / 
duøti⁄
);

771 
	`¥ötf
(" #moved : %lu (%‡/ s)\n", 
moved
, moved * 1000.0 / 
duøti⁄
);

772 
	`¥ötf
("#¢≠shŸÅx†: %lu (%‡/ s)\n", 
¢≠shŸs
, s«pshŸ†* 1000.0 / 
duøti⁄
);

773 
	`¥ötf
(" #¢≠shŸed : %lu (%‡/ s)\n", 
¢≠shŸed
, s«pshŸed * 1000.0 / 
duøti⁄
);

774 
	`¥ötf
("#ab‹t† : %lu (%‡/ s)\n", 
ab‹ts
,áb‹t†* 1000.0 / 
duøti⁄
);

775 
	`¥ötf
(" #lock-∏ : %lu (%‡/ s)\n", 
ab‹ts_locked_ªad
,áb‹ts_locked_ªad * 1000.0 / 
duøti⁄
);

776 
	`¥ötf
(" #lock-w : %lu (%‡/ s)\n", 
ab‹ts_locked_wrôe
,áb‹ts_locked_wrôê* 1000.0 / 
duøti⁄
);

777 
	`¥ötf
(" #vÆ-∏ : %lu (%‡/ s)\n", 
ab‹ts_vÆid©e_ªad
,áb‹ts_vÆid©e_ªad * 1000.0 / 
duøti⁄
);

778 
	`¥ötf
(" #vÆ-w : %lu (%‡/ s)\n", 
ab‹ts_vÆid©e_wrôe
,áb‹ts_vÆid©e_wrôê* 1000.0 / 
duøti⁄
);

779 
	`¥ötf
(" #vÆ-¯ : %lu (%‡/ s)\n", 
ab‹ts_vÆid©e_commô
,áb‹ts_vÆid©e_commô * 1000.0 / 
duøti⁄
);

780 
	`¥ötf
(" #öv-mem : %lu (%‡/ s)\n", 
ab‹ts_övÆid_mem‹y
,áb‹ts_övÆid_mem‹y * 1000.0 / 
duøti⁄
);

781 
	`¥ötf
(" #dup-w : %lu (%‡/ s)\n", 
ab‹ts_doubÀ_wrôe
,áb‹ts_doubÀ_wrôê* 1000.0 / 
duøti⁄
);

782 
	`¥ötf
(" #Áûuª† : %lu\n", 
Áûuªs_beˇu£_c⁄ã¡i⁄
);

783 
	`¥ötf
("MaxÑërõ† : %lu\n", 
max_ªåõs
);

785 
	`¥ötf
("FAILURE RATE : %f\n", 
Áûuªs_beˇu£_c⁄ã¡i⁄
 / 10000000.0);

788 
	`ht_dñëe
(
£t
);

791 
	`TM_SHUTDOWN
();

793 
	`‰ì
(
thªads
);

794 
	`‰ì
(
d©a
);

	@include/estm.h

1 
	~"°m.h
"

2 
	~"mod_mem.h
"

3 
	#TX_START
(
ty≥
Ë{ 
sigjmp_buf
 *
_e
 = 
	`°m_gë_ív
(); 
	`sig£tjmp
(*_e, 0); 
	`°m_°¨t
(_e, 0,Åy≥)

	)

4 
	#TX_LOAD
(
addr
Ë
	`°m_lﬂd
((
°m_w‹d_t
 *Ôddr)

	)

5 
	#TX_STORE
(
addr
, 
vÆ
Ë
	`°m_°‹e
((
°m_w‹d_t
 *Ôddr, (°m_w‹d_t)vÆ)

	)

6 
	#TX_END
 
	`°m_commô
(); }

	)

7 
	#FREE
(
addr
, 
size
Ë
	`°m_‰ì
◊ddr, size)

	)

8 
	#MALLOC
(
size
Ë
	`°m_mÆloc
(size)

	)

9 
	#TM_CALLABLE


	)

10 
	#TM_ARGDECL_ALONE


	)

11 
	#TM_ARGDECL


	)

12 
	#TM_ARG


	)

13 
	#TM_ARG_LAST


	)

14 
	#TM_ARG_ALONE


	)

15 
	#TM_STARTUP
() \

16 *
s
; \

17 
	`°m_öô
(); \

18 
	`mod_mem_öô
(); \

19 i‡(
	`°m_gë_∑ømëî
("compûe_Êags", &
s
)) \

20 
	`¥ötf
("STM fœg† : %s\n", 
s
)

	)

21 
	#TM_SHUTDOWN
() \

22 
u
; \

23 i‡(
	`°m_gë_°©s
("globÆ_nb_commôs", &
u
) != 0) \

24 
	`¥ötf
("#commô† : %lu\n", 
u
); \

25 i‡(
	`°m_gë_°©s
("globÆ_nb_ab‹ts", &
u
) != 0) \

26 
	`¥ötf
("#ab‹t† : %lu\n", 
u
); \

27 i‡(
	`°m_gë_°©s
("globÆ_max_ªåõs", &
u
) != 0) \

28 
	`¥ötf
("MaxÑërõ†: %lu\n", 
u
); \

29 
	`°m_exô
()

	)

30 
	#TM_THREAD_ENTER
(Ë
	`°m_öô_thªad
()

	)

31 
	#TM_THREAD_EXIT
() \

32 
	`°m_gë_°©s
("nb_ab‹ts", &
d
->
nb_ab‹ts
); \

33 
	`°m_gë_°©s
("nb_ab‹ts_locked_ªad", &
d
->
nb_ab‹ts_locked_ªad
); \

34 
	`°m_gë_°©s
("nb_ab‹ts_locked_wrôe", &
d
->
nb_ab‹ts_locked_wrôe
); \

35 
	`°m_gë_°©s
("nb_ab‹ts_vÆid©e_ªad", &
d
->
nb_ab‹ts_vÆid©e_ªad
); \

36 
	`°m_gë_°©s
("nb_ab‹ts_vÆid©e_wrôe", &
d
->
nb_ab‹ts_vÆid©e_wrôe
); \

37 
	`°m_gë_°©s
("nb_ab‹ts_vÆid©e_commô", &
d
->
nb_ab‹ts_vÆid©e_commô
); \

38 
	`°m_gë_°©s
("nb_ab‹ts_övÆid_mem‹y", &
d
->
nb_ab‹ts_övÆid_mem‹y
); \

39 
	`°m_gë_°©s
("nb_ab‹ts_doubÀ_wrôe", &
d
->
nb_ab‹ts_övÆid_mem‹y
); \

40 
	`°m_gë_°©s
("max_ªåõs", &
d
->
max_ªåõs
); \

41 
	`°m_exô_thªad
()

	)

	@include/icc.h

2 
__©åibuã__
((
	$tm_wøµög
(
mÆloc
))Ë*
	`wÕd°m_icc_mÆloc
(
size_t
 
size
);

3 
	`__©åibuã__
((
	$tm_wøµög
(
‰ì
))Ë
	`wÕd°m_icc_‰ì
(*
±r
);

4 
	#NL
 1

	)

5 
	#EL
 0

	)

6 
	#START
 
__tm_©omic
 {

	)

7 
	#START_ID
(
ID
Ë
__tm_©omic
 {

	)

8 
	#START_RO
 
__tm_©omic
 {

	)

9 
	#START_RO_ID
(
ID
Ë
__tm_©omic
 {

	)

10 
	#LOAD
(
addr
Ë(*◊ddr))

	)

11 
	#STORE
(
addr
, 
vÆue
Ë(*◊ddrË(vÆue))

	)

12 
	#COMMIT
 }

	)

13 
	#MALLOC
(
size
Ë
	`mÆloc
(size)

	)

14 
	#FREE
(
addr
, 
size
Ë
	`‰ì
◊ddr)

	)

15 
	#TM_CALLABLE
 
	`__©åibuã__
 ((
tm_ˇŒabÀ
))

	)

16 
	#TM_ARGDECL_ALONE


	)

17 
	#TM_ARGDECL


	)

18 
	#TM_ARG


	)

19 
	#TM_ARG_ALONE


	)

20 
	#TM_ARG_LAST


	)

21 
	#TM_STARTUP
(Ë

	)

22 
	#TM_SHUTDOWN
(Ë

	)

23 
	#TM_THREAD_ENTER
(Ë

	)

24 
	#TM_THREAD_EXIT
(Ë

	)

	@include/lockfree.h

1 
	~<immöåö.h
>

2 
	#NL
 1

	)

3 
	#EL
 0

	)

4 
	#TX_START
(
ty≥
Ë

	)

5 
	#TX_LOAD
(
addr
Ë(*◊ddr))

	)

6 
	#TX_STORE
(
addr
, 
vÆ
Ë(*◊ddrË(vÆ))

	)

7 
	#TX_END


	)

8 
	#FREE
(
addr
, 
size
Ë
	`‰ì
◊ddr)

	)

9 
	#MALLOC
(
size
Ë
	`mÆloc
(size)

	)

10 
	#TM_CALLABLE


	)

11 
	#TM_ARGDECL_ALONE


	)

12 
	#TM_ARGDECL


	)

13 
	#TM_ARG


	)

14 
	#TM_ARG_ALONE


	)

15 
	#TM_ARG_LAST


	)

16 
	#TM_STARTUP
(Ë

	)

17 
	#TM_SHUTDOWN
(Ë

	)

18 
	#TM_STARTUP
(Ë

	)

19 
	#TM_SHUTDOWN
(Ë

	)

20 
	#TM_THREAD_ENTER
(Ë

	)

21 
	#TM_THREAD_EXIT
(Ë

	)

	@include/lpdwstm.h

2 
	~"°m.h
"

3 
	#NL
 1

	)

4 
	#EL
 0

	)

5 
	#TX_START
(
ty≥
Ë
BEGIN_TRANSACTION


	)

6 
	#TX_LOAD
(
addr
Ë
	`wÕd°m_ªad_w‹d
((
W‹d
 *)◊ddr))

	)

7 
	#TX_STORE
(
addr
, 
vÆ
Ë
	`wÕd°m_wrôe_w‹d
((
W‹d
 *Ôddr, (W‹d)vÆ)

	)

8 
	#TX_END
 
END_TRANSACTION


	)

9 
	#FREE
(
addr
, 
size
Ë
	`wÕd°m_tx_‰ì
◊ddr, size)

	)

10 
	#MALLOC
(
size
Ë
	`wÕd°m_tx_mÆloc
(size)

	)

11 
	#TM_CALLABLE


	)

12 
	#TM_ARGDECL_ALONE


	)

13 
	#TM_ARGDECL


	)

14 
	#TM_ARG


	)

15 
	#TM_ARG_LAST


	)

16 
	#TM_ARG_ALONE


	)

17 
	#TM_STARTUP
(Ë
	`wÕd°m_globÆ_öô
()

	)

18 #ifde‡
COLLECT_STATS


19 
	#TM_SHUTDOWN
(Ë
	`wÕd°m_¥öt_°©s
()

	)

21 
	#TM_SHUTDOWN
(Ë

	)

23 
	#TM_THREAD_ENTER
(Ë
	`wÕd°m_thªad_öô
(); \

24 
tx_desc
 *
tx
 = 
	`wÕd°m_gë_tx_desc
()

	)

25 
	#TM_THREAD_EXIT
(Ë

	)

	@include/sequential.h

2 
	#NL
 1

	)

3 
	#EL
 0

	)

4 
	#TX_START
(
ty≥
Ë

	)

5 
	#TX_LOAD
(
addr
Ë(*◊ddr))

	)

6 
	#TX_STORE
(
addr
, 
vÆ
Ë(*◊ddrË(vÆ))

	)

7 
	#TX_END


	)

8 
	#FREE
(
addr
, 
size
Ë
	`‰ì
◊ddr)

	)

9 
	#MALLOC
(
size
Ë
	`mÆloc
(size)

	)

10 
	#TM_CALLABLE


	)

11 
	#TM_ARGDECL_ALONE


	)

12 
	#TM_ARGDECL


	)

13 
	#TM_ARG


	)

14 
	#TM_ARG_ALONE


	)

15 
	#TM_ARG_LAST


	)

16 
	#TM_STARTUP
(Ë

	)

17 
	#TM_SHUTDOWN
(Ë

	)

18 
	#TM_STARTUP
(Ë

	)

19 
	#TM_SHUTDOWN
(Ë

	)

20 
	#TM_THREAD_ENTER
(Ë

	)

21 
	#TM_THREAD_EXIT
(Ë

	)

	@include/tinystm.h

6 #ifde‡
TINY098


8 
	~"°m.h
"

9 
	~"mod_mem.h
"

10 
	~"mod_°©s.h
"

11 
	#NL
 1

	)

12 
	#EL
 0

	)

13 
	#TX_START
(
ty≥
Ë{ 
sigjmp_buf
 *
_e
 = 
	`°m_gë_ív
(); 
	`sig£tjmp
(*_e, 0); 
	`°m_°¨t
(_e, 0)

	)

14 
	#TX_LOAD
(
addr
Ë
	`°m_lﬂd
((
°m_w‹d_t
 *Ôddr)

	)

15 
	#TX_STORE
(
addr
, 
vÆ
Ë
	`°m_°‹e
((
°m_w‹d_t
 *Ôddr, (°m_w‹d_t)vÆ)

	)

16 
	#TX_END
 
	`°m_commô
(); }

	)

17 
	#FREE
(
addr
, 
size
Ë
	`°m_‰ì
◊ddr, size)

	)

18 
	#MALLOC
(
size
Ë
	`°m_mÆloc
(size)

	)

19 
	#TM_CALLABLE


	)

20 
	#TM_ARGDECL_ALONE


	)

21 
	#TM_ARGDECL


	)

22 
	#TM_ARG


	)

23 
	#TM_ARG_LAST


	)

24 
	#TM_ARG_ALONE


	)

25 
	#TM_STARTUP
(
numThªad
) \

27 
	`Ârötf
(
°dîr
, "Error: unsupportedÜongándÖointer sizes\n"); \

28 
	`exô
(1); \

30 
	`°m_öô
(); \

31 
	`mod_mem_öô
(); \

32 
	`mod_°©s_öô
()

	)

33 
	#TM_SHUTDOWN
() \

34 
u
; \

35 i‡(
	`°m_gë_°©s
("globÆ_nb_commôs", &
u
) != 0) \

36 
	`¥ötf
("#commô† : %lu\n", 
u
); \

37 i‡(
	`°m_gë_°©s
("globÆ_nb_ab‹ts", &
u
) != 0) \

38 
	`¥ötf
("#ab‹t† : %lu\n", 
u
); \

39 i‡(
	`°m_gë_°©s
("globÆ_max_ªåõs", &
u
) != 0) \

40 
	`¥ötf
("MaxÑërõ†: %lu\n", 
u
); \

41 
	`°m_exô
()

	)

42 
	#TM_THREAD_ENTER
(Ë
	`°m_öô_thªad
()

	)

43 
	#TM_THREAD_EXIT
() \

44 
	`°m_gë_°©s
("nb_ab‹ts", &
d
->
nb_ab‹ts
); \

45 
	`°m_gë_°©s
("nb_ab‹ts_locked_ªad", &
d
->
nb_ab‹ts_locked_ªad
); \

46 
	`°m_gë_°©s
("nb_ab‹ts_locked_wrôe", &
d
->
nb_ab‹ts_locked_wrôe
); \

47 
	`°m_gë_°©s
("nb_ab‹ts_vÆid©e_ªad", &
d
->
nb_ab‹ts_vÆid©e_ªad
); \

48 
	`°m_gë_°©s
("nb_ab‹ts_vÆid©e_wrôe", &
d
->
nb_ab‹ts_vÆid©e_wrôe
); \

49 
	`°m_gë_°©s
("nb_ab‹ts_vÆid©e_commô", &
d
->
nb_ab‹ts_vÆid©e_commô
); \

50 
	`°m_gë_°©s
("nb_ab‹ts_övÆid_mem‹y", &
d
->
nb_ab‹ts_övÆid_mem‹y
); \

51 
	`°m_gë_°©s
("nb_ab‹ts_doubÀ_wrôe", &
d
->
nb_ab‹ts_övÆid_mem‹y
); \

52 
	`°m_gë_°©s
("max_ªåõs", &
d
->
max_ªåõs
); \

53 
	`°m_exô_thªad
()

	)

55 #ñi‡
deföed
 
TINY099


57 
	~"°m.h
"

58 
	~"mod_mem.h
"

59 
	~"mod_°©s.h
"

60 
	#NL
 1

	)

61 
	#EL
 0

	)

62 
	#TX_START
(
ty≥
Ë{ 
sigjmp_buf
 *
_e
 = 
	`°m_gë_ív
(); 
	`sig£tjmp
(*_e, 0); 
	`°m_°¨t
(_e, 0)

	)

63 
	#TX_LOAD
(
addr
Ë
	`°m_lﬂd
((
°m_w‹d_t
 *Ôddr)

	)

64 
	#TX_STORE
(
addr
, 
vÆ
Ë
	`°m_°‹e
((
°m_w‹d_t
 *Ôddr, (°m_w‹d_t)vÆ)

	)

65 
	#TX_END
 
	`°m_commô
(); }

	)

66 
	#FREE
(
addr
, 
size
Ë
	`°m_‰ì
◊ddr, size)

	)

67 
	#MALLOC
(
size
Ë
	`°m_mÆloc
(size)

	)

68 
	#TM_CALLABLE


	)

69 
	#TM_ARGDECL_ALONE


	)

70 
	#TM_ARGDECL


	)

71 
	#TM_ARG


	)

72 
	#TM_ARG_LAST


	)

73 
	#TM_ARG_ALONE


	)

74 
	#TM_THREAD_ENTER
(Ë
	`°m_öô_thªad
()

	)

75 
	#TM_THREAD_EXIT
() \

76 
	`°m_gë_°©s
("nb_ab‹ts", &
d
->
nb_ab‹ts
); \

77 
	`°m_gë_°©s
("nb_ab‹ts_locked_ªad", &
d
->
nb_ab‹ts_locked_ªad
); \

78 
	`°m_gë_°©s
("nb_ab‹ts_locked_wrôe", &
d
->
nb_ab‹ts_locked_wrôe
); \

79 
	`°m_gë_°©s
("nb_ab‹ts_vÆid©e_ªad", &
d
->
nb_ab‹ts_vÆid©e_ªad
); \

80 
	`°m_gë_°©s
("nb_ab‹ts_vÆid©e_wrôe", &
d
->
nb_ab‹ts_vÆid©e_wrôe
); \

81 
	`°m_gë_°©s
("nb_ab‹ts_vÆid©e_commô", &
d
->
nb_ab‹ts_vÆid©e_commô
); \

82 
	`°m_gë_°©s
("nb_ab‹ts_övÆid_mem‹y", &
d
->
nb_ab‹ts_övÆid_mem‹y
); \

83 
	`°m_gë_°©s
("nb_ab‹ts_doubÀ_wrôe", &
d
->
nb_ab‹ts_övÆid_mem‹y
); \

84 
	`°m_gë_°©s
("max_ªåõs", &
d
->
max_ªåõs
); \

85 
	`°m_exô_thªad
()

	)

86 
	#TM_STARTUP
() \

88 
	`Ârötf
(
°dîr
, "Error: unsupportedÜongándÖointer sizes\n"); \

89 
	`exô
(1); \

91 
	`°m_öô
(); \

92 
	`mod_mem_öô
(); \

93 i‡(
	`gëív
("STM_STATS"Ë!
NULL
) { \

94 
	`mod_°©s_öô
(); \

95 }

	)

96 
	#TM_SHUTDOWN
() \

97 i‡(
	`gëív
("STM_STATS"Ë!
NULL
) { \

98 
u
; \

99 i‡(
	`°m_gë_°©s
("globÆ_nb_commôs", &
u
) != 0) \

100 
	`¥ötf
("#commô† : %lu\n", 
u
); \

101 i‡(
	`°m_gë_°©s
("globÆ_nb_ab‹ts", &
u
) != 0) \

102 
	`¥ötf
("#ab‹t† : %lu\n", 
u
); \

103 i‡(
	`°m_gë_°©s
("globÆ_max_ªåõs", &
u
) != 0) \

104 
	`¥ötf
("MaxÑërõ†: %lu\n", 
u
); \

106 
	`°m_exô
()

	)

108 #ñi‡
deföed
(
TINY100
Ë|| deföed(
TINY10B
)

110 
	~"°m.h
"

111 
	~"mod_mem.h
"

112 
	~"mod_°©s.h
"

113 
	#NL
 1

	)

114 
	#EL
 0

	)

115 
	#TX_START
(
ty≥
Ë{ 
sigjmp_buf
 *
_e
 = 
	`°m_°¨t
(0); i‡(_ê!
NULL
Ë
	`sig£tjmp
(*_e, 0);

	)

116 
	#TX_LOAD
(
addr
Ë
	`°m_lﬂd
((
°m_w‹d_t
 *Ôddr)

	)

118 
	#TX_UNIT_LOAD
(
addr
Ë
	`°m_unô_lﬂd
((
°m_w‹d_t
 *Ôddr, 
NULL
)

	)

119 
	#TX_UNIT_LOAD_TS
(
addr
, 
time°amp
Ë
	`°m_unô_lﬂd
((
°m_w‹d_t
 *Ôddr, (°m_w‹d_à*Èime°amp)

	)

120 
	#TX_STORE
(
addr
, 
vÆ
Ë
	`°m_°‹e
((
°m_w‹d_t
 *Ôddr, (°m_w‹d_t)vÆ)

	)

121 
	#TX_END
 
	`°m_commô
(); }

	)

122 
	#FREE
(
addr
, 
size
Ë
	`°m_‰ì
◊ddr, size)

	)

123 
	#MALLOC
(
size
Ë
	`°m_mÆloc
(size)

	)

124 
	#TM_CALLABLE


	)

125 
	#TM_ARGDECL_ALONE


	)

126 
	#TM_ARGDECL


	)

127 
	#TM_ARG


	)

128 
	#TM_ARG_LAST


	)

129 
	#TM_ARG_ALONE


	)

130 
	#TM_THREAD_ENTER
(Ë
	`°m_öô_thªad
()

	)

131 
	#TM_THREAD_EXIT
() \

132 
	`°m_gë_°©s
("nb_ab‹ts", &
d
->
nb_ab‹ts
); \

133 
	`°m_gë_°©s
("nb_ab‹ts_locked_ªad", &
d
->
nb_ab‹ts_locked_ªad
); \

134 
	`°m_gë_°©s
("nb_ab‹ts_locked_wrôe", &
d
->
nb_ab‹ts_locked_wrôe
); \

135 
	`°m_gë_°©s
("nb_ab‹ts_vÆid©e_ªad", &
d
->
nb_ab‹ts_vÆid©e_ªad
); \

136 
	`°m_gë_°©s
("nb_ab‹ts_vÆid©e_wrôe", &
d
->
nb_ab‹ts_vÆid©e_wrôe
); \

137 
	`°m_gë_°©s
("nb_ab‹ts_vÆid©e_commô", &
d
->
nb_ab‹ts_vÆid©e_commô
); \

138 
	`°m_gë_°©s
("nb_ab‹ts_övÆid_mem‹y", &
d
->
nb_ab‹ts_övÆid_mem‹y
); \

139 
	`°m_gë_°©s
("nb_ab‹ts_doubÀ_wrôe", &
d
->
nb_ab‹ts_övÆid_mem‹y
); \

140 
	`°m_gë_°©s
("max_ªåõs", &
d
->
max_ªåõs
); \

141 
	`°m_exô_thªad
()

	)

142 
	#TM_STARTUP
() \

144 
	`Ârötf
(
°dîr
, "Error: unsupportedÜongándÖointer sizes\n"); \

145 
	`exô
(1); \

147 
	`°m_öô
(); \

148 
	`mod_mem_öô
(0); \

149 i‡(
	`gëív
("STM_STATS"Ë!
NULL
) { \

150 
	`mod_°©s_öô
(); \

151 }

	)

152 
	#TM_SHUTDOWN
() \

153 i‡(
	`gëív
("STM_STATS"Ë!
NULL
) { \

154 
u
; \

155 i‡(
	`°m_gë_°©s
("globÆ_nb_commôs", &
u
) != 0) \

156 
	`¥ötf
("#commô† : %lu\n", 
u
); \

157 i‡(
	`°m_gë_°©s
("globÆ_nb_ab‹ts", &
u
) != 0) \

158 
	`¥ötf
("#ab‹t† : %lu\n", 
u
); \

159 i‡(
	`°m_gë_°©s
("globÆ_max_ªåõs", &
u
) != 0) \

160 
	`¥ötf
("MaxÑërõ†: %lu\n", 
u
); \

162 
	`°m_exô
()

	)

	@include/tl2-mbench.h

1 
	~<°rög.h
>

2 
	~"°m.h
"

5 
	#NL
 1

	)

6 
	#EL
 0

	)

7 
	#TX_START
(
ty≥
Ë
	`STM_BEGIN_WR
()

	)

8 
	#TX_END
 
	`STM_END
()

	)

9 
	#MALLOC
(
size
Ë
	`mÆloc
(size)

	)

10 
	#FREE
(
addr
, 
±r
Ë
	`‰ì
’å)

	)

11 
	#TM_MALLOC
(
size
Ë
	`MALLOC
(size)

	)

12 
	#TM_FREE
(
±r
Ë
	`FREE
(0,Öå)

	)

13 
	#TM_RESTART
(Ë
	`STM_RESTART
()

	)

14 
	#TM_CALLABLE


	)

15 
	#TM_ARG
 
STM_SELF
,

	)

16 
	#TM_ARG_ALONE
 
STM_SELF


	)

17 
	#TM_ARGDECL
 
STM_THREAD_T
* 
TM_ARG


	)

18 
	#TM_ARGDECL_ALONE
 
STM_THREAD_T
* 
TM_ARG_ALONE


	)

19 
	#TM_STARTUP
(
numThªad
Ë
	`STM_STARTUP
()

	)

21 
	#TM_SHUTDOWN
(Ë
	`STM_SHUTDOWN
()

	)

22 
	#TM_THREAD_ENTER
(Ë
TM_ARGDECL_ALONE
 = 
	`STM_NEW_THREAD
(); \

23 
	`STM_INIT_THREAD
(
TM_ARG_ALONE
, 0)

	)

24 
	#TM_THREAD_EXIT
(Ë
	`STM_FREE_THREAD
(
TM_ARG_ALONE
)

	)

26 
	#TM_SHARED_READ
(
v¨
Ë
	`STM_READ
(v¨)

	)

27 
	#TM_SHARED_READ_P
(
v¨
Ë
	`STM_READ_P
(v¨)

	)

28 
	#TM_SHARED_READ_F
(
v¨
Ë
	`STM_READ_F
(v¨)

	)

30 
	#TM_SHARED_WRITE
(
v¨
, 
vÆ
Ë
	`STM_WRITE
((v¨), vÆ)

	)

31 
	#TM_SHARED_WRITE_P
(
v¨
, 
vÆ
Ë
	`STM_WRITE_P
((v¨), vÆ)

	)

32 
	#TM_SHARED_WRITE_F
(
v¨
, 
vÆ
Ë
	`STM_WRITE_F
((v¨), vÆ)

	)

34 
	#TM_LOCAL_WRITE
(
v¨
, 
vÆ
Ë
	`STM_LOCAL_WRITE
(v¨, vÆ)

	)

35 
	#TM_LOCAL_WRITE_P
(
v¨
, 
vÆ
Ë
	`STM_LOCAL_WRITE_P
(v¨, vÆ)

	)

36 
	#TM_LOCAL_WRITE_F
(
v¨
, 
vÆ
Ë
	`STM_LOCAL_WRITE_F
(v¨, vÆ)

	)

	@include/tm.h

2 #ifde‡
ESTM


3 
	~"e°m.h
"

4 #ñi‡
deföed
(
TINY100
Ë|| deföed(
TINY10B
Ë|| deföed(
TINY099
Ë|| deföed(
TINY098
)

5 
	~"töy°m.h
"

6 #ñi‡
deföed
 
WPLDSTM


7 
	~"wÕd°m.h
"

8 #ñi‡
deföed
 
LOCKFREE


9 
	~"lock‰ì.h
"

10 #ñi‡
deföed
 
TL2


11 
	~"é2-mbích.h
"

12 #ñi‡
deföed
 
ICC


13 
	~"icc.h
"

14 #ñi‡
deföed
 
SEQUENTIAL


15 
	~"£quítül.h
"

	@linkedlists/lazy-list/coupling.c

24 
	~"cou∂ög.h
"

31 
	$lockc_dñëe
(
öt£t_l_t
 *
£t
, 
vÆ_t
 
vÆ
) {

32 
node_l_t
 *
cuº
, *
√xt
;

33 
found
;

35 
	`LOCK
(&
£t
->
hód
->
lock
);

36 
cuº
 = 
£t
->
hód
;

37 
	`LOCK
(&
cuº
->
√xt
->
lock
);

38 
√xt
 = 
cuº
->next;

40 
√xt
->
vÆ
 < val) {

41 
	`UNLOCK
(&
cuº
->
lock
);

42 
cuº
 = 
√xt
;

43 
	`LOCK
(&
√xt
->√xt->
lock
);

44 
√xt
 =Çext->next;

46 
found
 = (
vÆ
 =
√xt
->val);

47 i‡(
found
) {

48 
cuº
->
√xt
 =Çext->next;

49 
	`UNLOCK
(&
√xt
->
lock
);

50 
	`node_dñëe_l
(
√xt
);

51 
	`UNLOCK
(&
cuº
->
lock
);

53 
	`UNLOCK
(&
cuº
->
lock
);

54 
	`UNLOCK
(&
√xt
->
lock
);

56  
found
;

57 
	}
}

59 
	$lockc_föd
(
öt£t_l_t
 *
£t
, 
vÆ_t
 
vÆ
) {

60 
node_l_t
 *
cuº
, *
√xt
;

61 
found
;

63 
	`LOCK
(&
£t
->
hód
->
lock
);

64 
cuº
 = 
£t
->
hód
;

65 
	`LOCK
(&
cuº
->
√xt
->
lock
);

66 
√xt
 = 
cuº
->next;

68 
√xt
->
vÆ
 < val) {

69 
	`UNLOCK
(&
cuº
->
lock
);

70 
cuº
 = 
√xt
;

71 
	`LOCK
(&
√xt
->√xt->
lock
);

72 
√xt
 = 
cuº
->next;

74 
found
 = (
vÆ
 =
√xt
->val);

75 
	`UNLOCK
(&
cuº
->
lock
);

76 
	`UNLOCK
(&
√xt
->
lock
);

77  
found
;

78 
	}
}

80 
	$lockc_ö£π
(
öt£t_l_t
 *
£t
, 
vÆ_t
 
vÆ
) {

81 
node_l_t
 *
cuº
, *
√xt
, *
√wnode
;

82 
found
;

84 
	`LOCK
(&
£t
->
hód
->
lock
);

85 
cuº
 = 
£t
->
hód
;

86 
	`LOCK
(&
cuº
->
√xt
->
lock
);

87 
√xt
 = 
cuº
->next;

89 
√xt
->
vÆ
 < val) {

91 
	`UNLOCK
(&
cuº
->
lock
);

92 
cuº
 = 
√xt
;

93 
	`LOCK
(&
√xt
->√xt->
lock
);

94 
√xt
 = 
cuº
->next;

97 
found
 = (
vÆ
 =
√xt
->val);

98 i‡(!
found
) {

99 
√wnode
 = 
	`√w_node_l
(
vÆ
, 
√xt
, 0);

100 
cuº
->
√xt
 = 
√wnode
;

102 
	`UNLOCK
(&
cuº
->
lock
);

103 
	`UNLOCK
(&
√xt
->
lock
);

104  !
found
;

105 
	}
}

	@linkedlists/lazy-list/coupling.h

24 
	~"lökedli°-lock.h
"

26 
lockc_dñëe
(
öt£t_l_t
 *
£t
, 
vÆ_t
 
vÆ
);

27 
lockc_föd
(
öt£t_l_t
 *
£t
, 
vÆ_t
 
vÆ
);

28 
lockc_ö£π
(
öt£t_l_t
 *
£t
, 
vÆ_t
 
vÆ
);

	@linkedlists/lazy-list/intset.c

24 
	~"œzy.h
"

26 
	$£t_c⁄èös_l
(
öt£t_l_t
 *
£t
, 
vÆ_t
 
vÆ
, 
å™ß˘i⁄Æ
)

30  
	`lockc_föd
(
£t
, 
vÆ
);

31 
	}
}

33 
	$£t_add_l
(
öt£t_l_t
 *
£t
, 
vÆ_t
 
vÆ
, 
å™ß˘i⁄Æ
)

37  
	`lockc_ö£π
(
£t
, 
vÆ
);

38 
	}
}

40 
	$£t_ªmove_l
(
öt£t_l_t
 *
£t
, 
vÆ_t
 
vÆ
, 
å™ß˘i⁄Æ
)

44  
	`lockc_dñëe
(
£t
, 
vÆ
);

45 
	}
}

	@linkedlists/lazy-list/intset.h

24 
	~"œzy.h
"

26 
£t_c⁄èös_l
(
öt£t_l_t
 *
£t
, 
vÆ_t
 
vÆ
, 
å™ß˘i⁄Æ
);

27 
£t_add_l
(
öt£t_l_t
 *
£t
, 
vÆ_t
 
vÆ
, 
å™ß˘i⁄Æ
);

28 
£t_ªmove_l
(
öt£t_l_t
 *
£t
, 
vÆ_t
 
vÆ
, 
å™ß˘i⁄Æ
);

	@linkedlists/lazy-list/lazy.c

27 
	~"œzy.h
"

29 
ölöe
 
	$is_m¨ked_ªf
(
i
) {

30  (Ë(
i
 &
LONG_MIN
+1);

31 
	}
}

33 
ölöe
 
	$un£t_m¨k
(
i
) {

34 
i
 &
LONG_MAX
-1;

35  
i
;

36 
	}
}

38 
ölöe
 
	$£t_m¨k
(
i
) {

39 
i
 = 
	`un£t_m¨k
(i);

40 
i
 += 1;

41  
i
;

42 
	}
}

44 
ölöe
 
node_l_t
 *
	$gë_unm¨ked_ªf
(
node_l_t
 *
n
) {

45  (
node_l_t
 *Ë
	`un£t_m¨k
((Ë
n
);

46 
	}
}

48 
ölöe
 
node_l_t
 *
	$gë_m¨ked_ªf
(
node_l_t
 *
n
) {

49  (
node_l_t
 *Ë
	`£t_m¨k
((Ë
n
);

50 
	}
}

56 
ölöe
 
	$∑r£_vÆid©e
(
node_l_t
 *
¥ed
,Çode_l_à*
cuº
) {

57  (!
	`is_m¨ked_ªf
((Ë
¥ed
Ë&& !is_m¨ked_ªf((Ë
cuº
Ë&& (¥ed->
√xt
 == curr));

58 
	}
}

60 
	$∑r£_föd
(
öt£t_l_t
 *
£t
, 
vÆ_t
 
vÆ
) {

61 
node_l_t
 *
cuº
;

62 
cuº
 = 
£t
->
hód
;

63 
cuº
->
vÆ
 < val)

64 
cuº
 = 
	`gë_unm¨ked_ªf
(cuº->
√xt
);

65  ((
cuº
->
vÆ
 =vÆË&& !
	`is_m¨ked_ªf
(() curr));

66 
	}
}

68 
	$∑r£_ö£π
(
öt£t_l_t
 *
£t
, 
vÆ_t
 
vÆ
) {

69 
node_l_t
 *
cuº
, *
¥ed
, *
√wnode
;

70 
ªsu…
;

72 
¥ed
 = 
£t
->
hód
;

73 
cuº
 = 
	`gë_unm¨ked_ªf
(
¥ed
->
√xt
);

74 
cuº
->
vÆ
 < val) {

75 
¥ed
 = 
cuº
;

76 
cuº
 = 
	`gë_unm¨ked_ªf
(cuº->
√xt
);

78 
	`LOCK
(&
¥ed
->
lock
);

79 
	`LOCK
(&
cuº
->
lock
);

80 
ªsu…
 = (
	`∑r£_vÆid©e
(
¥ed
, 
cuº
Ë&& (cuº->
vÆ
 != val));

81 i‡(
ªsu…
) {

82 
√wnode
 = 
	`√w_node_l
(
vÆ
, 
cuº
, 0);

83 
¥ed
->
√xt
 = 
√wnode
;

85 
	`UNLOCK
(&
cuº
->
lock
);

86 
	`UNLOCK
(&
¥ed
->
lock
);

87  
ªsu…
;

88 
	}
}

99 
	$∑r£_dñëe
(
öt£t_l_t
 *
£t
, 
vÆ_t
 
vÆ
) {

100 
node_l_t
 *
¥ed
, *
cuº
;

101 
ªsu…
;

103 
¥ed
 = 
£t
->
hód
;

104 
cuº
 = 
	`gë_unm¨ked_ªf
(
¥ed
->
√xt
);

105 
cuº
->
vÆ
 < val) {

106 
¥ed
 = 
cuº
;

107 
cuº
 = 
	`gë_unm¨ked_ªf
(cuº->
√xt
);

109 
	`LOCK
(&
¥ed
->
lock
);

110 
	`LOCK
(&
cuº
->
lock
);

111 
ªsu…
 = (
	`∑r£_vÆid©e
(
¥ed
, 
cuº
Ë&& (
vÆ
 == curr->val));

112 i‡(
ªsu…
) {

113 
cuº
->
√xt
 = 
	`gë_m¨ked_ªf
(curr->next);

114 
¥ed
->
√xt
 = 
	`gë_unm¨ked_ªf
(
cuº
->next);

116 
	`UNLOCK
(&
cuº
->
lock
);

117 
	`UNLOCK
(&
¥ed
->
lock
);

118  
ªsu…
;

119 
	}
}

	@linkedlists/lazy-list/lazy.h

27 
	~"cou∂ög.h
"

30 
ölöe
 
is_m¨ked_ªf
(
i
);

31 
ölöe
 
un£t_m¨k
(
i
);

32 
ölöe
 
£t_m¨k
(
i
);

33 
ölöe
 
node_l_t
 *
gë_unm¨ked_ªf
“ode_l_à*
n
);

34 
ölöe
 
node_l_t
 *
gë_m¨ked_ªf
“ode_l_à*
n
);

37 
∑r£_vÆid©e
(
node_l_t
 *
¥ed
,Çode_l_à*
cuº
);

38 
∑r£_föd
(
öt£t_l_t
 *
£t
, 
vÆ_t
 
vÆ
);

39 
∑r£_ö£π
(
öt£t_l_t
 *
£t
, 
vÆ_t
 
vÆ
);

40 
∑r£_dñëe
(
öt£t_l_t
 *
£t
, 
vÆ_t
 
vÆ
);

	@linkedlists/lazy-list/linkedlist-lock.c

24 
	~"öt£t.h
"

26 
node_l_t
 *
	$√w_node_l
(
vÆ_t
 
vÆ
, 
node_l_t
 *
√xt
, 
å™ß˘i⁄Æ
)

28 
node_l_t
 *
node_l
;

30 
node_l
 = (
node_l_t
 *)
	`mÆloc
((node_l_t));

31 i‡(
node_l
 =
NULL
) {

32 
	`≥º‹
("malloc");

33 
	`exô
(1);

35 
node_l
->
vÆ
 = val;

36 
node_l
->
√xt
 =Çext;

37 
	`INIT_LOCK
(&
node_l
->
lock
);

38  
node_l
;

39 
	}
}

41 
öt£t_l_t
 *
	$£t_√w_l
()

43 
öt£t_l_t
 *
£t
;

44 
node_l_t
 *
mö
, *
max
;

46 i‡((
£t
 = (
öt£t_l_t
 *)
	`mÆloc
((öt£t_l_t))Ë=
NULL
) {

47 
	`≥º‹
("malloc");

48 
	`exô
(1);

50 
max
 = 
	`√w_node_l
(
VAL_MAX
, 
NULL
, 0);

51 
mö
 = 
	`√w_node_l
(
VAL_MIN
, 
max
, 0);

52 
£t
->
hód
 = 
mö
;

54  
£t
;

55 
	}
}

57 
	$node_dñëe_l
(
node_l_t
 *
node
) {

58 
	`DESTROY_LOCK
(&
node
->
lock
);

59 
	`‰ì
(
node
);

60 
	}
}

62 
	$£t_dñëe_l
(
öt£t_l_t
 *
£t
)

64 
node_l_t
 *
node
, *
√xt
;

66 
node
 = 
£t
->
hód
;

67 
node
 !
NULL
) {

68 
√xt
 = 
node
->next;

69 
	`DESTROY_LOCK
(&
node
->
lock
);

70 
	`‰ì
(
node
);

71 
node
 = 
√xt
;

73 
	`‰ì
(
£t
);

74 
	}
}

76 
	$£t_size_l
(
öt£t_l_t
 *
£t
)

78 
size
 = 0;

79 
node_l_t
 *
node
;

82 
node
 = 
£t
->
hód
->
√xt
;

83 
node
->
√xt
 !
NULL
) {

84 
size
++;

85 
node
 =Çode->
√xt
;

88  
size
;

89 
	}
}

	@linkedlists/lazy-list/linkedlist-lock.h

24 
	~<as£π.h
>

25 
	~<gë›t.h
>

26 
	~<limôs.h
>

27 
	~<±hªad.h
>

28 
	~<sig«l.h
>

29 
	~<°dlib.h
>

30 
	~<°dio.h
>

31 
	~<sys/time.h
>

32 
	~<time.h
>

33 
	~<°döt.h
>

35 
	~<immöåö.h
>

37 
	~<©omic_›s.h
>

39 
	#DEFAULT_DURATION
 10000

	)

40 
	#DEFAULT_INITIAL
 256

	)

41 
	#DEFAULT_NB_THREADS
 4

	)

42 
	#DEFAULT_RANGE
 0x7FFFFFFF

	)

43 
	#DEFAULT_SEED
 0

	)

44 
	#DEFAULT_UPDATE
 20

	)

45 
	#DEFAULT_LOCKTYPE
 2

	)

46 
	#DEFAULT_ALTERNATE
 0

	)

47 
	#DEFAULT_EFFECTIVE
 1

	)

49 
	#XSTR
(
s
Ë
	`STR
(s)

	)

50 
	#STR
(
s
Ë#s

	)

52 
	#ATOMIC_CAS_MB_FBAR
(
a
, 
e
, 
v
Ë(
	`AO_com∑ª_™d_sw≠_fuŒ
((vﬁ©ûê
AO_t
 *)◊), (AO_t)”), (AO_t)(v)))

	)

54 
	#ATOMIC_CAS_MB_NOBAR
(
a
, 
e
, 
v
Ë(
	`AO_com∑ª_™d_sw≠
((vﬁ©ûê
AO_t
 *)◊), (AO_t)”), (AO_t)(v)))

	)

56 vﬁ©ûê
AO_t
 
	g°›
;

58 
	#TRANSACTIONAL
 
d
->
unô_tx


	)

60 
	#TRUE
 1

	)

61 
	#FALSE
 0

	)

63 
öçå_t
 
	tvÆ_t
;

64 
	#VAL_MIN
 
INT_MIN


	)

65 
	#VAL_MAX
 
INT_MAX


	)

67 #ifde‡
MUTEX


68 
	t±lock_t
;

69 
	#INIT_LOCK
(
lock
) { \

70 *(vﬁ©ûê*)
lock
 = 0; \

71 }

	)

73 
	#DESTROY_LOCK
(
lock
Ë

	)

75 
	#LOCK
(
lock
) { \

76 
	`__©omic_exch™ge_n
((vﬁ©ûê*)
lock
, 1, 
__ATOMIC_ACQUIRE
 | 
__ATOMIC_HLE_ACQUIRE
)){ \

78 
	`_mm_∑u£
(); \

79 }*(vﬁ©ûê*)
lock
 == 1); \

81 }

	)

83 
	#UNLOCK
(
lock
) { \

84 
	`__©omic_°‹e_n
((vﬁ©ûê*)
lock
, 0, 
__ATOMIC_RELEASE
 | 
__ATOMIC_HLE_RELEASE
); \

85 }

	)

88 
±hªad_•ölock_t
 
	t±lock_t
;

89 
	#INIT_LOCK
(
lock
Ë
	`±hªad_•ö_öô
((
±hªad_•ölock_t
 *Ëlock, 
PTHREAD_PROCESS_PRIVATE
);

	)

90 
	#DESTROY_LOCK
(
lock
Ë
	`±hªad_•ö_de°roy
((
±hªad_•ölock_t
 *Ëlock)

	)

91 
	#LOCK
(
lock
Ë
	`±hªad_•ö_lock
((
±hªad_•ölock_t
 *Ëlock)

	)

92 
	#UNLOCK
(
lock
Ë
	`±hªad_•ö_u∆ock
((
±hªad_•ölock_t
 *Ëlock)

	)

95 
	snode_l
 {

96 
vÆ_t
 
	mvÆ
;

97 
node_l
 *
	m√xt
;

98 vﬁ©ûê
±lock_t
 
	mlock
;

99 } 
	tnode_l_t
;

101 
	söt£t_l
 {

102 
node_l_t
 *
	mhód
;

103 } 
	töt£t_l_t
;

105 
node_l_t
 *
√w_node_l
(
vÆ_t
 
vÆ
,Çode_l_à*
√xt
, 
å™ß˘i⁄Æ
);

106 
öt£t_l_t
 *
£t_√w_l
();

107 
£t_dñëe_l
(
öt£t_l_t
 *
£t
);

108 
£t_size_l
(
öt£t_l_t
 *
£t
);

109 
node_dñëe_l
(
node_l_t
 *
node
);

	@linkedlists/lazy-list/test.c

24 
	~"öt£t.h
"

26 
	sb¨rõr
 {

27 
±hªad_c⁄d_t
 
	mcom∂ëe
;

28 
±hªad_muãx_t
 
	mmuãx
;

29 
	mcou¡
;

30 
	m¸ossög
;

31 } 
	tb¨rõr_t
;

33 
	$b¨rõr_öô
(
b¨rõr_t
 *
b
, 
n
)

35 
	`±hªad_c⁄d_öô
(&
b
->
com∂ëe
, 
NULL
);

36 
	`±hªad_muãx_öô
(&
b
->
muãx
, 
NULL
);

37 
b
->
cou¡
 = 
n
;

38 
b
->
¸ossög
 = 0;

39 
	}
}

41 
	$b¨rõr_¸oss
(
b¨rõr_t
 *
b
)

43 
	`±hªad_muãx_lock
(&
b
->
muãx
);

45 
b
->
¸ossög
++;

47 i‡(
b
->
¸ossög
 < b->
cou¡
) {

48 
	`±hªad_c⁄d_waô
(&
b
->
com∂ëe
, &b->
muãx
);

50 
	`±hªad_c⁄d_brﬂdˇ°
(&
b
->
com∂ëe
);

52 
b
->
¸ossög
 = 0;

54 
	`±hªad_muãx_u∆ock
(&
b
->
muãx
);

55 
	}
}

65 
ölöe
 
	$ønd_ønge
(
r
) {

66 
m
 = 
RAND_MAX
;

67 
d
, 
v
 = 0;

70 
d
 = (
m
 > 
r
 ?Ñ : m);

71 
v
 +1 + ()(
d
 * (()
	`ønd
()/(()(
m
)+1.0)));

72 
r
 -
m
;

73 } 
r
 > 0);

74  
v
;

75 
	}
}

76 
ønd_ønge
(
r
);

79 
ölöe
 
	$ønd_ønge_ª
(*
£ed
, 
r
) {

80 
m
 = 
RAND_MAX
;

81 
d
, 
v
 = 0;

84 
d
 = (
m
 > 
r
 ?Ñ : m);

85 
v
 +1 + ()(
d
 * (()
	`ønd_r
(
£ed
)/(()(
m
)+1.0)));

86 
r
 -
m
;

87 } 
r
 > 0);

88  
v
;

89 
	}
}

90 
ønd_ønge_ª
(*
£ed
, 
r
);

92 
	sthªad_d©a
 {

93 
vÆ_t
 
	mfú°
;

94 
	mønge
;

95 
	mupd©e
;

96 
	munô_tx
;

97 
	mÆã∫©e
;

98 
	mef„˘ive
;

99 
	mnb_add
;

100 
	mnb_added
;

101 
	mnb_ªmove
;

102 
	mnb_ªmoved
;

103 
	mnb_c⁄èös
;

104 
	mnb_found
;

105 
	mnb_ab‹ts
;

106 
	mnb_ab‹ts_locked_ªad
;

107 
	mnb_ab‹ts_locked_wrôe
;

108 
	mnb_ab‹ts_vÆid©e_ªad
;

109 
	mnb_ab‹ts_vÆid©e_wrôe
;

110 
	mnb_ab‹ts_vÆid©e_commô
;

111 
	mnb_ab‹ts_övÆid_mem‹y
;

112 
	mmax_ªåõs
;

113 
	m£ed
;

114 
öt£t_l_t
 *
	m£t
;

115 
b¨rõr_t
 *
	mb¨rõr
;

116 } 
	tthªad_d©a_t
;

119 *
	$ã°
(*
d©a
) {

120 
u√xt
, 
œ°
 = -1;

121 
vÆ_t
 
vÆ
 = 0;

123 
thªad_d©a_t
 *
d
 = (thªad_d©a_à*)
d©a
;

126 
	`b¨rõr_¸oss
(
d
->
b¨rõr
);

129 
u√xt
 = (
	`ønd_ønge_ª
(&
d
->
£ed
, 100Ë- 1 < d->
upd©e
);

131 
°›
 == 0) {

133 i‡(
u√xt
) {

135 i‡(
œ°
 < 0) {

137 
vÆ
 = 
	`ønd_ønge_ª
(&
d
->
£ed
, d->
ønge
);

138 i‡(
	`£t_add_l
(
d
->
£t
, 
vÆ
, 
TRANSACTIONAL
)) {

139 
d
->
nb_added
++;

140 
œ°
 = 
vÆ
;

142 
d
->
nb_add
++;

146 i‡(
d
->
Æã∫©e
) {

148 i‡(
	`£t_ªmove_l
(
d
->
£t
, 
œ°
, 
TRANSACTIONAL
)) {

149 
d
->
nb_ªmoved
++;

151 
œ°
 = -1;

155 
vÆ
 = 
	`ønd_ønge_ª
(&
d
->
£ed
, d->
ønge
);

156 i‡(
	`£t_ªmove_l
(
d
->
£t
, 
vÆ
, 
TRANSACTIONAL
)) {

157 
d
->
nb_ªmoved
++;

158 
œ°
 = -1;

162 
d
->
nb_ªmove
++;

167 i‡(
d
->
Æã∫©e
) {

168 i‡(
d
->
upd©e
 == 0) {

169 i‡(
œ°
 < 0) {

170 
vÆ
 = 
d
->
fú°
;

171 
œ°
 = 
vÆ
;

173 
vÆ
 = 
	`ønd_ønge_ª
(&
d
->
£ed
, d->
ønge
);

174 
œ°
 = -1;

177 i‡(
œ°
 < 0) {

178 
vÆ
 = 
	`ønd_ønge_ª
(&
d
->
£ed
, d->
ønge
);

181 
vÆ
 = 
œ°
;

184 } 
vÆ
 = 
	`ønd_ønge_ª
(&
d
->
£ed
, d->
ønge
);

186 i‡(
	`£t_c⁄èös_l
(
d
->
£t
, 
vÆ
, 
TRANSACTIONAL
))

187 
d
->
nb_found
++;

188 
d
->
nb_c⁄èös
++;

192 i‡(
d
->
ef„˘ive
) {

193 
u√xt
 = ((100 * (
d
->
nb_added
 + d->
nb_ªmoved
))

194 < (
d
->
upd©e
 * (d->
nb_add
 + d->
nb_ªmove
 + d->
nb_c⁄èös
)));

196 
u√xt
 = (
	`ønd_ønge_ª
(&
d
->
£ed
, 100Ë- 1 < d->
upd©e
);

200  
NULL
;

201 
	}
}

203 
	$maö
(
¨gc
, **
¨gv
)

205 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

207 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

208 {"duøti⁄", 
ªquúed_¨gumít
, 
NULL
, 'd'},

209 {"öôül-size", 
ªquúed_¨gumít
, 
NULL
, 'i'},

210 {"thªad-num", 
ªquúed_¨gumít
, 
NULL
, 't'},

211 {"ønge", 
ªquúed_¨gumít
, 
NULL
, 'r'},

212 {"£ed", 
ªquúed_¨gumít
, 
NULL
, 'S'},

213 {"upd©e-øã", 
ªquúed_¨gumít
, 
NULL
, 'u'},

214 {"unô-tx", 
ªquúed_¨gumít
, 
NULL
, 'x'},

215 {
NULL
, 0, NULL, 0}

218 
öt£t_l_t
 *
£t
;

219 
i
, 
c
, 
size
;

220 
vÆ_t
 
œ°
 = 0;

221 
vÆ_t
 
vÆ
 = 0;

222 
ªads
, 
ef‰óds
, 
upd©es
, 
effupds
, 
ab‹ts
, 
ab‹ts_locked_ªad
, 
ab‹ts_locked_wrôe
,

223 
ab‹ts_vÆid©e_ªad
, 
ab‹ts_vÆid©e_wrôe
, 
ab‹ts_vÆid©e_commô
,

224 
ab‹ts_övÆid_mem‹y
, 
max_ªåõs
;

225 
thªad_d©a_t
 *
d©a
;

226 
±hªad_t
 *
thªads
;

227 
±hªad_©å_t
 
©å
;

228 
b¨rõr_t
 
b¨rõr
;

229 
timevÆ
 
°¨t
, 
íd
;

230 
time•ec
 
timeout
;

231 
duøti⁄
 = 
DEFAULT_DURATION
;

232 
öôül
 = 
DEFAULT_INITIAL
;

233 
nb_thªads
 = 
DEFAULT_NB_THREADS
;

234 
ønge
 = 
DEFAULT_RANGE
;

235 
£ed
 = 
DEFAULT_SEED
;

236 
upd©e
 = 
DEFAULT_UPDATE
;

237 
unô_tx
 = 
DEFAULT_LOCKTYPE
;

238 
Æã∫©e
 = 
DEFAULT_ALTERNATE
;

239 
ef„˘ive
 = 
DEFAULT_EFFECTIVE
;

240 
sig£t_t
 
block_£t
;

243 
i
 = 0;

244 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "hAf:d:i:t:r:S:u:x:", 
l⁄g_›ti⁄s
, &
i
);

246 if(
c
 == -1)

249 if(
c
 =0 && 
l⁄g_›ti⁄s
[
i
].
Êag
 == 0)

250 
c
 = 
l⁄g_›ti⁄s
[
i
].
vÆ
;

252 
c
) {

257 
	`¥ötf
("intset -- STM stressÅest "

266 " -A, --Æã∫©ê(deÁu…="
	`XSTR
(
DEFAULT_ALTERNATE
)")\n"

269 " upd©êtx†mu°Éf„˘ivñy wrôê(0Òrül, 1Ûf„˘ive, deÁu…=" 
	`XSTR
(
DEFAULT_EFFECTIVE
) ")\n"

271 " Te° duøti⁄ i¿mûli£c⁄d†(0=öföôe, deÁu…=" 
	`XSTR
(
DEFAULT_DURATION
) ")\n"

273 " Numbî o‡ñemít†tÿö£π bef‹êã° (deÁu…=" 
	`XSTR
(
DEFAULT_INITIAL
) ")\n"

275 " Numbî o‡thªad†(deÁu…=" 
	`XSTR
(
DEFAULT_NB_THREADS
) ")\n"

277 " R™gêo‡öãgî vÆue†ö£πed i¿£à(deÁu…=" 
	`XSTR
(
DEFAULT_RANGE
) ")\n"

279 " RNG sìd (0Òime-ba£d, deÁu…=" 
	`XSTR
(
DEFAULT_SEED
) ")\n"

281 " Pî˚¡agêo‡upd©êå™ß˘i⁄†(deÁu…=" 
	`XSTR
(
DEFAULT_UPDATE
) ")\n"

287 
	`exô
(0);

289 
Æã∫©e
 = 1;

292 
ef„˘ive
 = 
	`©oi
(
›èrg
);

295 
duøti⁄
 = 
	`©oi
(
›èrg
);

298 
öôül
 = 
	`©oi
(
›èrg
);

301 
nb_thªads
 = 
	`©oi
(
›èrg
);

304 
ønge
 = 
	`©ﬁ
(
›èrg
);

307 
£ed
 = 
	`©oi
(
›èrg
);

310 
upd©e
 = 
	`©oi
(
›èrg
);

313 
	`¥ötf
("TheÖarameter x isÇot valid forÅhis benchmark.\n");

314 
	`exô
(0);

316 
	`¥ötf
("TheÖarameterá isÇot valid forÅhis benchmark.\n");

317 
	`exô
(0);

319 
	`¥ötf
("TheÖarameter s isÇot valid forÅhis benchmark.\n");

320 
	`exô
(0);

322 
	`¥ötf
("Use -h or --help for help.\n");

323 
	`exô
(0);

325 
	`exô
(1);

329 
	`as£π
(
duøti⁄
 >= 0);

330 
	`as£π
(
öôül
 >= 0);

331 
	`as£π
(
nb_thªads
 > 0);

332 
	`as£π
(
ønge
 > 0 &&Ñ™gê>
öôül
);

333 
	`as£π
(
upd©e
 >= 0 && update <= 100);

335 
	`¥ötf
("SetÅype :ÜazyÜinkedÜist\n");

336 
	`¥ötf
("Lígth : %d\n", 
duøti⁄
);

337 
	`¥ötf
("Inôü»sizê: %d\n", 
öôül
);

338 
	`¥ötf
("ThªadÇum : %d\n", 
nb_thªads
);

339 
	`¥ötf
("VÆuêøngê : %ld\n", 
ønge
);

340 
	`¥ötf
("Sìd : %d\n", 
£ed
);

341 
	`¥ötf
("Upd©êøã : %d\n", 
upd©e
);

342 
	`¥ötf
("Lockálg : %d\n", 
unô_tx
);

343 
	`¥ötf
("A…î«ã : %d\n", 
Æã∫©e
);

344 
	`¥ötf
("Ef„˘ivê : %d\n", 
ef„˘ive
);

345 
	`¥ötf
("Type sizes : int=%d/long=%d/ptr=%d/word=%d\n",

349 ()(
uöçå_t
));

351 
timeout
.
tv_£c
 = 
duøti⁄
 / 1000;

352 
timeout
.
tv_n£c
 = (
duøti⁄
 % 1000) * 1000000;

354 i‡((
d©a
 = (
thªad_d©a_t
 *)
	`mÆloc
(
nb_thªads
 * —hªad_d©a_t))Ë=
NULL
) {

355 
	`≥º‹
("malloc");

356 
	`exô
(1);

358 i‡((
thªads
 = (
±hªad_t
 *)
	`mÆloc
(
nb_thªads
 * ’thªad_t))Ë=
NULL
) {

359 
	`≥º‹
("malloc");

360 
	`exô
(1);

363 i‡(
£ed
 == 0)

364 
	`§™d
(()
	`time
(0));

366 
	`§™d
(
£ed
);

368 
£t
 = 
	`£t_√w_l
();

370 
°›
 = 0;

373 
	`¥ötf
("Initializing STM\n");

376 
	`¥ötf
("Addög %dÉ¡rõ†tÿ£t\n", 
öôül
);

377 
i
 = 0;

378 
i
 < 
öôül
) {

379 
vÆ
 = (
	`ønd
(Ë% 
ønge
) + 1;

380 i‡(
	`£t_add_l
(
£t
, 
vÆ
, 0)) {

381 
œ°
 = 
vÆ
;

382 
i
++;

385 
size
 = 
	`£t_size_l
(
£t
);

386 
	`¥ötf
("Së sizê : %d\n", 
size
);

389 
	`b¨rõr_öô
(&
b¨rõr
, 
nb_thªads
 + 1);

390 
	`±hªad_©å_öô
(&
©å
);

391 
	`±hªad_©å_£tdëach°©e
(&
©å
, 
PTHREAD_CREATE_JOINABLE
);

392 
i
 = 0; i < 
nb_thªads
; i++) {

393 
	`¥ötf
("Cª©ögÅhªad %d\n", 
i
);

394 
d©a
[
i
].
fú°
 = 
œ°
;

395 
d©a
[
i
].
ønge
 =Ñange;

396 
d©a
[
i
].
upd©e
 = update;

397 
d©a
[
i
].
Æã∫©e
 =álternate;

398 
d©a
[
i
].
unô_tx
 = unit_tx;

399 
d©a
[
i
].
Æã∫©e
 =álternate;

400 
d©a
[
i
].
ef„˘ive
 =Éffective;

401 
d©a
[
i
].
nb_add
 = 0;

402 
d©a
[
i
].
nb_added
 = 0;

403 
d©a
[
i
].
nb_ªmove
 = 0;

404 
d©a
[
i
].
nb_ªmoved
 = 0;

405 
d©a
[
i
].
nb_c⁄èös
 = 0;

406 
d©a
[
i
].
nb_found
 = 0;

407 
d©a
[
i
].
nb_ab‹ts
 = 0;

408 
d©a
[
i
].
nb_ab‹ts_locked_ªad
 = 0;

409 
d©a
[
i
].
nb_ab‹ts_locked_wrôe
 = 0;

410 
d©a
[
i
].
nb_ab‹ts_vÆid©e_ªad
 = 0;

411 
d©a
[
i
].
nb_ab‹ts_vÆid©e_wrôe
 = 0;

412 
d©a
[
i
].
nb_ab‹ts_vÆid©e_commô
 = 0;

413 
d©a
[
i
].
nb_ab‹ts_övÆid_mem‹y
 = 0;

414 
d©a
[
i
].
max_ªåõs
 = 0;

415 
d©a
[
i
].
£ed
 = 
	`ønd
();

416 
d©a
[
i
].
£t
 = set;

417 
d©a
[
i
].
b¨rõr
 = &barrier;

418 i‡(
	`±hªad_¸óã
(&
thªads
[
i
], &
©å
, 
ã°
, (*)(&
d©a
[i])) != 0) {

419 
	`Ârötf
(
°dîr
, "Error creatingÅhread\n");

420 
	`exô
(1);

423 
	`±hªad_©å_de°roy
(&
©å
);

426 
	`b¨rõr_¸oss
(&
b¨rõr
);

428 
	`¥ötf
("STARTING...\n");

429 
	`gëtimeofday
(&
°¨t
, 
NULL
);

430 i‡(
duøti⁄
 > 0) {

431 
	`«no¶ìp
(&
timeout
, 
NULL
);

433 
	`sigem±y£t
(&
block_£t
);

434 
	`sigsu•íd
(&
block_£t
);

436 
	`AO_°‹e_fuŒ
(&
°›
, 1);

437 
	`gëtimeofday
(&
íd
, 
NULL
);

438 
	`¥ötf
("STOPPING...\n");

441 
i
 = 0; i < 
nb_thªads
; i++) {

442 i‡(
	`±hªad_joö
(
thªads
[
i
], 
NULL
) != 0) {

443 
	`Ârötf
(
°dîr
, "Error waiting forÅhread completion\n");

444 
	`exô
(1);

448 
duøti⁄
 = (
íd
.
tv_£c
 * 1000 +Énd.
tv_u£c
 / 1000Ë- (
°¨t
.tv_sec * 1000 + start.tv_usec / 1000);

449 
ab‹ts
 = 0;

450 
ab‹ts_locked_ªad
 = 0;

451 
ab‹ts_locked_wrôe
 = 0;

452 
ab‹ts_vÆid©e_ªad
 = 0;

453 
ab‹ts_vÆid©e_wrôe
 = 0;

454 
ab‹ts_vÆid©e_commô
 = 0;

455 
ab‹ts_övÆid_mem‹y
 = 0;

456 
ªads
 = 0;

457 
ef‰óds
 = 0;

458 
upd©es
 = 0;

459 
effupds
 = 0;

460 
max_ªåõs
 = 0;

461 
i
 = 0; i < 
nb_thªads
; i++) {

462 
	`¥ötf
("Thªad %d\n", 
i
);

463 
	`¥ötf
(" #add : %lu\n", 
d©a
[
i
].
nb_add
);

464 
	`¥ötf
(" #added : %lu\n", 
d©a
[
i
].
nb_added
);

465 
	`¥ötf
(" #ªmovê : %lu\n", 
d©a
[
i
].
nb_ªmove
);

466 
	`¥ötf
(" #ªmoved : %lu\n", 
d©a
[
i
].
nb_ªmoved
);

467 
	`¥ötf
(" #c⁄èö† : %lu\n", 
d©a
[
i
].
nb_c⁄èös
);

468 
	`¥ötf
(" #found : %lu\n", 
d©a
[
i
].
nb_found
);

469 
	`¥ötf
(" #ab‹t† : %lu\n", 
d©a
[
i
].
nb_ab‹ts
);

470 
	`¥ötf
(" #lock-∏ : %lu\n", 
d©a
[
i
].
nb_ab‹ts_locked_ªad
);

471 
	`¥ötf
(" #lock-w : %lu\n", 
d©a
[
i
].
nb_ab‹ts_locked_wrôe
);

472 
	`¥ötf
(" #vÆ-∏ : %lu\n", 
d©a
[
i
].
nb_ab‹ts_vÆid©e_ªad
);

473 
	`¥ötf
(" #vÆ-w : %lu\n", 
d©a
[
i
].
nb_ab‹ts_vÆid©e_wrôe
);

474 
	`¥ötf
(" #vÆ-¯ : %lu\n", 
d©a
[
i
].
nb_ab‹ts_vÆid©e_commô
);

475 
	`¥ötf
(" #öv-mem : %lu\n", 
d©a
[
i
].
nb_ab‹ts_övÆid_mem‹y
);

476 
	`¥ötf
(" MaxÑërõ†: %lu\n", 
d©a
[
i
].
max_ªåõs
);

477 
ab‹ts
 +
d©a
[
i
].
nb_ab‹ts
;

478 
ab‹ts_locked_ªad
 +
d©a
[
i
].
nb_ab‹ts_locked_ªad
;

479 
ab‹ts_locked_wrôe
 +
d©a
[
i
].
nb_ab‹ts_locked_wrôe
;

480 
ab‹ts_vÆid©e_ªad
 +
d©a
[
i
].
nb_ab‹ts_vÆid©e_ªad
;

481 
ab‹ts_vÆid©e_wrôe
 +
d©a
[
i
].
nb_ab‹ts_vÆid©e_wrôe
;

482 
ab‹ts_vÆid©e_commô
 +
d©a
[
i
].
nb_ab‹ts_vÆid©e_commô
;

483 
ab‹ts_övÆid_mem‹y
 +
d©a
[
i
].
nb_ab‹ts_övÆid_mem‹y
;

484 
ªads
 +
d©a
[
i
].
nb_c⁄èös
;

485 
ef‰óds
 +
d©a
[
i
].
nb_c⁄èös
 +

486 (
d©a
[
i
].
nb_add
 - d©a[i].
nb_added
) +

487 (
d©a
[
i
].
nb_ªmove
 - d©a[i].
nb_ªmoved
);

488 
upd©es
 +(
d©a
[
i
].
nb_add
 + d©a[i].
nb_ªmove
);

489 
effupds
 +
d©a
[
i
].
nb_ªmoved
 + d©a[i].
nb_added
;

492 
size
 +
d©a
[
i
].
nb_added
 - d©a[i].
nb_ªmoved
;

493 i‡(
max_ªåõs
 < 
d©a
[
i
].max_retries)

494 
max_ªåõs
 = 
d©a
[
i
].max_retries;

496 
	`¥ötf
("Së sizê : %d (ex≥˘ed: %d)\n", 
	`£t_size_l
(
£t
), 
size
);

497 
	`¥ötf
("Duøti⁄ : %d (ms)\n", 
duøti⁄
);

498 
	`¥ötf
("#tx† : %lu (%‡/ s)\n", 
ªads
 + 
upd©es
, (ªad†+ upd©esË* 1000.0 / 
duøti⁄
);

500 
	`¥ötf
("#readÅxs : ");

501 i‡(
ef„˘ive
) {

502 
	`¥ötf
("%lu (%‡/ s)\n", 
ef‰óds
,Éf‰ód†* 1000.0 / 
duøti⁄
);

503 
	`¥ötf
(" #c⁄èö† : %lu (%‡/ s)\n", 
ªads
,Ñód†* 1000.0 / 
duøti⁄
);

504 } 
	`¥ötf
("%lu (%‡/ s)\n", 
ªads
,Ñód†* 1000.0 / 
duøti⁄
);

506 
	`¥ötf
("#eff. updÑ©e: %‡\n", 100.0 * 
effupds
 / (effupd†+ 
ef‰óds
));

508 
	`¥ötf
("#updateÅxs : ");

509 i‡(
ef„˘ive
) {

510 
	`¥ötf
("%lu (%‡/ s)\n", 
effupds
,Éffupd†* 1000.0 / 
duøti⁄
);

511 
	`¥ötf
(" #updÅrül†: %lu (%‡/ s)\n", 
upd©es
, updates * 1000.0 /

512 
duøti⁄
);

513 } 
	`¥ötf
("%lu (%‡/ s)\n", 
upd©es
, upd©e†* 1000.0 / 
duøti⁄
);

515 
	`¥ötf
("#ab‹t† : %lu (%‡/ s)\n", 
ab‹ts
,áb‹t†* 1000.0 / 
duøti⁄
);

516 
	`¥ötf
(" #lock-∏ : %lu (%‡/ s)\n", 
ab‹ts_locked_ªad
,áb‹ts_locked_ªad * 1000.0 / 
duøti⁄
);

517 
	`¥ötf
(" #lock-w : %lu (%‡/ s)\n", 
ab‹ts_locked_wrôe
,áb‹ts_locked_wrôê* 1000.0 / 
duøti⁄
);

518 
	`¥ötf
(" #vÆ-∏ : %lu (%‡/ s)\n", 
ab‹ts_vÆid©e_ªad
,áb‹ts_vÆid©e_ªad * 1000.0 / 
duøti⁄
);

519 
	`¥ötf
(" #vÆ-w : %lu (%‡/ s)\n", 
ab‹ts_vÆid©e_wrôe
,áb‹ts_vÆid©e_wrôê* 1000.0 / 
duøti⁄
);

520 
	`¥ötf
(" #vÆ-¯ : %lu (%‡/ s)\n", 
ab‹ts_vÆid©e_commô
,áb‹ts_vÆid©e_commô * 1000.0 / 
duøti⁄
);

521 
	`¥ötf
(" #öv-mem : %lu (%‡/ s)\n", 
ab‹ts_övÆid_mem‹y
,áb‹ts_övÆid_mem‹y * 1000.0 / 
duøti⁄
);

522 
	`¥ötf
("MaxÑërõ† : %lu\n", 
max_ªåõs
);

525 
	`£t_dñëe_l
(
£t
);

527 
	`‰ì
(
thªads
);

528 
	`‰ì
(
d©a
);

531 
	}
}

	@linkedlists/lock-coupling-list/coupling.c

24 
	~"cou∂ög.h
"

31 
	$lockc_dñëe
(
öt£t_l_t
 *
£t
, 
vÆ_t
 
vÆ
) {

32 
node_l_t
 *
cuº
, *
√xt
;

33 
found
;

35 
	`LOCK
(&
£t
->
hód
->
lock
);

36 
cuº
 = 
£t
->
hód
;

37 
	`LOCK
(&
cuº
->
√xt
->
lock
);

38 
√xt
 = 
cuº
->next;

40 
√xt
->
vÆ
 < val) {

41 
	`UNLOCK
(&
cuº
->
lock
);

42 
cuº
 = 
√xt
;

43 
	`LOCK
(&
√xt
->√xt->
lock
);

44 
√xt
 =Çext->next;

46 
found
 = (
vÆ
 =
√xt
->val);

47 i‡(
found
) {

48 
cuº
->
√xt
 =Çext->next;

49 
	`UNLOCK
(&
√xt
->
lock
);

50 
	`node_dñëe_l
(
√xt
);

51 
	`UNLOCK
(&
cuº
->
lock
);

53 
	`UNLOCK
(&
cuº
->
lock
);

54 
	`UNLOCK
(&
√xt
->
lock
);

56  
found
;

57 
	}
}

59 
	$lockc_föd
(
öt£t_l_t
 *
£t
, 
vÆ_t
 
vÆ
) {

60 
node_l_t
 *
cuº
, *
√xt
;

61 
found
;

63 
	`LOCK
(&
£t
->
hód
->
lock
);

64 
cuº
 = 
£t
->
hód
;

65 
	`LOCK
(&
cuº
->
√xt
->
lock
);

66 
√xt
 = 
cuº
->next;

68 
√xt
->
vÆ
 < val) {

69 
	`UNLOCK
(&
cuº
->
lock
);

70 
cuº
 = 
√xt
;

71 
	`LOCK
(&
√xt
->√xt->
lock
);

72 
√xt
 = 
cuº
->next;

74 
found
 = (
vÆ
 =
√xt
->val);

75 
	`UNLOCK
(&
cuº
->
lock
);

76 
	`UNLOCK
(&
√xt
->
lock
);

77  
found
;

78 
	}
}

80 
	$lockc_ö£π
(
öt£t_l_t
 *
£t
, 
vÆ_t
 
vÆ
) {

81 
node_l_t
 *
cuº
, *
√xt
, *
√wnode
;

82 
found
;

84 
	`LOCK
(&
£t
->
hód
->
lock
);

85 
cuº
 = 
£t
->
hód
;

86 
	`LOCK
(&
cuº
->
√xt
->
lock
);

87 
√xt
 = 
cuº
->next;

89 
√xt
->
vÆ
 < val) {

91 
	`UNLOCK
(&
cuº
->
lock
);

92 
cuº
 = 
√xt
;

93 
	`LOCK
(&
√xt
->√xt->
lock
);

94 
√xt
 = 
cuº
->next;

97 
found
 = (
vÆ
 =
√xt
->val);

98 i‡(!
found
) {

99 
√wnode
 = 
	`√w_node_l
(
vÆ
, 
√xt
, 0);

100 
cuº
->
√xt
 = 
√wnode
;

102 
	`UNLOCK
(&
cuº
->
lock
);

103 
	`UNLOCK
(&
√xt
->
lock
);

104  !
found
;

105 
	}
}

	@linkedlists/lock-coupling-list/coupling.h

24 
	~"lökedli°-lock.h
"

26 
lockc_dñëe
(
öt£t_l_t
 *
£t
, 
vÆ_t
 
vÆ
);

27 
lockc_föd
(
öt£t_l_t
 *
£t
, 
vÆ_t
 
vÆ
);

28 
lockc_ö£π
(
öt£t_l_t
 *
£t
, 
vÆ_t
 
vÆ
);

	@linkedlists/lock-coupling-list/intset.c

24 
	~"œzy.h
"

26 
	$£t_c⁄èös_l
(
öt£t_l_t
 *
£t
, 
vÆ_t
 
vÆ
, 
å™ß˘i⁄Æ
)

28 i‡(
å™ß˘i⁄Æ
 =2Ë 
	`∑r£_föd
(
£t
, 
vÆ
);

29  
	`lockc_föd
(
£t
, 
vÆ
);

30 
	}
}

32 
	$£t_add_l
(
öt£t_l_t
 *
£t
, 
vÆ_t
 
vÆ
, 
å™ß˘i⁄Æ
)

34 i‡(
å™ß˘i⁄Æ
 =2Ë 
	`∑r£_ö£π
(
£t
, 
vÆ
);

35  
	`lockc_ö£π
(
£t
, 
vÆ
);

36 
	}
}

38 
	$£t_ªmove_l
(
öt£t_l_t
 *
£t
, 
vÆ_t
 
vÆ
, 
å™ß˘i⁄Æ
)

40 i‡(
å™ß˘i⁄Æ
 =2Ë 
	`∑r£_dñëe
(
£t
, 
vÆ
);

41  
	`lockc_dñëe
(
£t
, 
vÆ
);

42 
	}
}

	@linkedlists/lock-coupling-list/intset.h

24 
	~"œzy.h
"

26 
£t_c⁄èös_l
(
öt£t_l_t
 *
£t
, 
vÆ_t
 
vÆ
, 
å™ß˘i⁄Æ
);

27 
£t_add_l
(
öt£t_l_t
 *
£t
, 
vÆ_t
 
vÆ
, 
å™ß˘i⁄Æ
);

28 
£t_ªmove_l
(
öt£t_l_t
 *
£t
, 
vÆ_t
 
vÆ
, 
å™ß˘i⁄Æ
);

	@linkedlists/lock-coupling-list/lazy.c

27 
	~"œzy.h
"

29 
ölöe
 
	$is_m¨ked_ªf
(
i
) {

30  (Ë(
i
 &
LONG_MIN
+1);

31 
	}
}

33 
ölöe
 
	$un£t_m¨k
(
i
) {

34 
i
 &
LONG_MAX
-1;

35  
i
;

36 
	}
}

38 
ölöe
 
	$£t_m¨k
(
i
) {

39 
i
 = 
	`un£t_m¨k
(i);

40 
i
 += 1;

41  
i
;

42 
	}
}

44 
ölöe
 
	$gë_unm¨ked_ªf
(
w
) {

45  
	`un£t_m¨k
(
w
);

46 
	}
}

48 
ölöe
 
	$gë_m¨ked_ªf
(
w
) {

49  
	`£t_m¨k
(
w
);

50 
	}
}

56 
ölöe
 
	$∑r£_vÆid©e
(
node_l_t
 *
¥ed
,Çode_l_à*
cuº
) {

57  (!
	`is_m¨ked_ªf
((Ë
¥ed
Ë&& !is_m¨ked_ªf((Ë¥edË&& (¥ed->
√xt
 =
cuº
));

58 
	}
}

60 
	$∑r£_föd
(
öt£t_l_t
 *
£t
, 
vÆ_t
 
vÆ
) {

61 
node_l_t
 *
cuº
;

62 
cuº
 = 
£t
->
hód
;

63 
cuº
->
vÆ
 < val)

64 
cuº
 = cuº->
√xt
;

65  ((
cuº
->
vÆ
 =vÆË&& !
	`is_m¨ked_ªf
(() curr));

66 
	}
}

68 
	$∑r£_ö£π
(
öt£t_l_t
 *
£t
, 
vÆ_t
 
vÆ
) {

69 
node_l_t
 *
cuº
, *
¥ed
, *
√wnode
;

70 
ªsu…
;

72 
¥ed
 = 
£t
->
hód
;

73 
cuº
 = 
¥ed
->
√xt
;

74 
cuº
->
vÆ
 < val) {

75 
¥ed
 = 
cuº
;

76 
cuº
 = cuº->
√xt
;

78 
	`LOCK
(&
¥ed
->
lock
);

79 
	`LOCK
(&
cuº
->
lock
);

80 
ªsu…
 = (
	`∑r£_vÆid©e
(
¥ed
, 
cuº
Ë&& (cuº->
vÆ
 != val));

81 i‡(
ªsu…
) {

82 
√wnode
 = 
	`√w_node_l
(
vÆ
, 
cuº
, 0);

83 
¥ed
->
√xt
 = 
√wnode
;

85 
	`UNLOCK
(&
cuº
->
lock
);

86 
	`UNLOCK
(&
¥ed
->
lock
);

87  
ªsu…
;

88 
	}
}

99 
	$∑r£_dñëe
(
öt£t_l_t
 *
£t
, 
vÆ_t
 
vÆ
) {

100 
node_l_t
 *
¥ed
, *
cuº
;

101 
ªsu…
;

103 
¥ed
 = 
£t
->
hód
;

104 
cuº
 = 
¥ed
->
√xt
;

105 
cuº
->
vÆ
 < val) {

106 
¥ed
 = 
cuº
;

107 
cuº
 = cuº->
√xt
;

109 
	`LOCK
(&
¥ed
->
lock
);

110 
	`LOCK
(&
cuº
->
lock
);

111 
ªsu…
 = (
	`∑r£_vÆid©e
(
¥ed
, 
cuº
Ë&& (
vÆ
 == curr->val));

112 i‡(
ªsu…
) {

113 
	`£t_m¨k
((Ë
cuº
);

114 
¥ed
->
√xt
 = 
cuº
->next;

116 
	`UNLOCK
(&
cuº
->
lock
);

117 
	`UNLOCK
(&
¥ed
->
lock
);

118  
ªsu…
;

119 
	}
}

	@linkedlists/lock-coupling-list/lazy.h

27 
	~"cou∂ög.h
"

30 
ölöe
 
is_m¨ked_ªf
(
i
);

31 
ölöe
 
un£t_m¨k
(
i
);

32 
ölöe
 
£t_m¨k
(
i
);

33 
ölöe
 
gë_unm¨ked_ªf
(
w
);

34 
ölöe
 
gë_m¨ked_ªf
(
w
);

37 
∑r£_vÆid©e
(
node_l_t
 *
¥ed
,Çode_l_à*
cuº
);

38 
∑r£_föd
(
öt£t_l_t
 *
£t
, 
vÆ_t
 
vÆ
);

39 
∑r£_ö£π
(
öt£t_l_t
 *
£t
, 
vÆ_t
 
vÆ
);

40 
∑r£_dñëe
(
öt£t_l_t
 *
£t
, 
vÆ_t
 
vÆ
);

	@linkedlists/lock-coupling-list/linkedlist-lock.c

24 
	~"öt£t.h
"

26 
node_l_t
 *
	$√w_node_l
(
vÆ_t
 
vÆ
, 
node_l_t
 *
√xt
, 
å™ß˘i⁄Æ
)

28 
node_l_t
 *
node_l
;

30 
node_l
 = (
node_l_t
 *)
	`mÆloc
((node_l_t));

31 i‡(
node_l
 =
NULL
) {

32 
	`≥º‹
("malloc");

33 
	`exô
(1);

35 
node_l
->
vÆ
 = val;

36 
node_l
->
√xt
 =Çext;

37 
	`INIT_LOCK
(&
node_l
->
lock
);

38  
node_l
;

39 
	}
}

41 
öt£t_l_t
 *
	$£t_√w_l
()

43 
öt£t_l_t
 *
£t
;

44 
node_l_t
 *
mö
, *
max
;

46 i‡((
£t
 = (
öt£t_l_t
 *)
	`mÆloc
((öt£t_l_t))Ë=
NULL
) {

47 
	`≥º‹
("malloc");

48 
	`exô
(1);

50 
max
 = 
	`√w_node_l
(
VAL_MAX
, 
NULL
, 0);

51 
mö
 = 
	`√w_node_l
(
VAL_MIN
, 
max
, 0);

52 
£t
->
hód
 = 
mö
;

54  
£t
;

55 
	}
}

57 
	$node_dñëe_l
(
node_l_t
 *
node
) {

58 
	`DESTROY_LOCK
(&
node
->
lock
);

59 
	`‰ì
(
node
);

60 
	}
}

62 
	$£t_dñëe_l
(
öt£t_l_t
 *
£t
)

64 
node_l_t
 *
node
, *
√xt
;

66 
node
 = 
£t
->
hód
;

67 
node
 !
NULL
) {

68 
√xt
 = 
node
->next;

69 
	`DESTROY_LOCK
(&
node
->
lock
);

70 
	`‰ì
(
node
);

71 
node
 = 
√xt
;

73 
	`‰ì
(
£t
);

74 
	}
}

76 
	$£t_size_l
(
öt£t_l_t
 *
£t
)

78 
size
 = 0;

79 
node_l_t
 *
node
;

82 
node
 = 
£t
->
hód
->
√xt
;

83 
node
->
√xt
 !
NULL
) {

84 
size
++;

85 
node
 =Çode->
√xt
;

88  
size
;

89 
	}
}

	@linkedlists/lock-coupling-list/linkedlist-lock.h

24 
	~<as£π.h
>

25 
	~<gë›t.h
>

26 
	~<limôs.h
>

27 
	~<±hªad.h
>

28 
	~<sig«l.h
>

29 
	~<°dlib.h
>

30 
	~<°dio.h
>

31 
	~<sys/time.h
>

32 
	~<time.h
>

33 
	~<°döt.h
>

35 
	~<©omic_›s.h
>

37 
	#DEFAULT_DURATION
 10000

	)

38 
	#DEFAULT_INITIAL
 256

	)

39 
	#DEFAULT_NB_THREADS
 1

	)

40 
	#DEFAULT_RANGE
 0x7FFFFFFF

	)

41 
	#DEFAULT_SEED
 0

	)

42 
	#DEFAULT_UPDATE
 20

	)

43 
	#DEFAULT_LOCKTYPE
 1

	)

44 
	#DEFAULT_ALTERNATE
 0

	)

45 
	#DEFAULT_EFFECTIVE
 1

	)

47 
	#XSTR
(
s
Ë
	`STR
(s)

	)

48 
	#STR
(
s
Ë#s

	)

50 
	#ATOMIC_CAS_MB_FBAR
(
a
, 
e
, 
v
Ë(
	`AO_com∑ª_™d_sw≠_fuŒ
((vﬁ©ûê
AO_t
 *)◊), (AO_t)”), (AO_t)(v)))

	)

52 
	#ATOMIC_CAS_MB_NOBAR
(
a
, 
e
, 
v
Ë(
	`AO_com∑ª_™d_sw≠
((vﬁ©ûê
AO_t
 *)◊), (AO_t)”), (AO_t)(v)))

	)

54 vﬁ©ûê
AO_t
 
	g°›
;

56 
	#TRANSACTIONAL
 
d
->
unô_tx


	)

58 
öçå_t
 
	tvÆ_t
;

59 
	#VAL_MIN
 
INT_MIN


	)

60 
	#VAL_MAX
 
INT_MAX


	)

62 #ifde‡
MUTEX


63 
±hªad_muãx_t
 
	t±lock_t
;

64 
	#INIT_LOCK
(
lock
Ë
	`±hªad_muãx_öô
((
±hªad_muãx_t
 *Ëlock, 
NULL
);

	)

65 
	#DESTROY_LOCK
(
lock
Ë
	`±hªad_muãx_de°roy
((
±hªad_muãx_t
 *Ëlock)

	)

66 
	#LOCK
(
lock
Ë
	`±hªad_muãx_lock
((
±hªad_muãx_t
 *Ëlock)

	)

67 
	#UNLOCK
(
lock
Ë
	`±hªad_muãx_u∆ock
((
±hªad_muãx_t
 *Ëlock)

	)

69 
±hªad_•ölock_t
 
	t±lock_t
;

70 
	#INIT_LOCK
(
lock
Ë
	`±hªad_•ö_öô
((
±hªad_•ölock_t
 *Ëlock, 
PTHREAD_PROCESS_PRIVATE
);

	)

71 
	#DESTROY_LOCK
(
lock
Ë
	`±hªad_•ö_de°roy
((
±hªad_•ölock_t
 *Ëlock)

	)

72 
	#LOCK
(
lock
Ë
	`±hªad_•ö_lock
((
±hªad_•ölock_t
 *Ëlock)

	)

73 
	#UNLOCK
(
lock
Ë
	`±hªad_•ö_u∆ock
((
±hªad_•ölock_t
 *Ëlock)

	)

76 
	snode_l
 {

77 
vÆ_t
 
	mvÆ
;

78 
node_l
 *
	m√xt
;

79 vﬁ©ûê
±lock_t
 
	mlock
;

80 } 
	tnode_l_t
;

82 
	söt£t_l
 {

83 
node_l_t
 *
	mhód
;

84 } 
	töt£t_l_t
;

86 
node_l_t
 *
√w_node_l
(
vÆ_t
 
vÆ
,Çode_l_à*
√xt
, 
å™ß˘i⁄Æ
);

87 
öt£t_l_t
 *
£t_√w_l
();

88 
£t_dñëe_l
(
öt£t_l_t
 *
£t
);

89 
£t_size_l
(
öt£t_l_t
 *
£t
);

90 
node_dñëe_l
(
node_l_t
 *
node
);

	@linkedlists/lock-coupling-list/test.c

24 
	~"öt£t.h
"

26 
	sb¨rõr
 {

27 
±hªad_c⁄d_t
 
	mcom∂ëe
;

28 
±hªad_muãx_t
 
	mmuãx
;

29 
	mcou¡
;

30 
	m¸ossög
;

31 } 
	tb¨rõr_t
;

33 
	$b¨rõr_öô
(
b¨rõr_t
 *
b
, 
n
)

35 
	`±hªad_c⁄d_öô
(&
b
->
com∂ëe
, 
NULL
);

36 
	`±hªad_muãx_öô
(&
b
->
muãx
, 
NULL
);

37 
b
->
cou¡
 = 
n
;

38 
b
->
¸ossög
 = 0;

39 
	}
}

41 
	$b¨rõr_¸oss
(
b¨rõr_t
 *
b
)

43 
	`±hªad_muãx_lock
(&
b
->
muãx
);

45 
b
->
¸ossög
++;

47 i‡(
b
->
¸ossög
 < b->
cou¡
) {

48 
	`±hªad_c⁄d_waô
(&
b
->
com∂ëe
, &b->
muãx
);

50 
	`±hªad_c⁄d_brﬂdˇ°
(&
b
->
com∂ëe
);

52 
b
->
¸ossög
 = 0;

54 
	`±hªad_muãx_u∆ock
(&
b
->
muãx
);

55 
	}
}

65 
ölöe
 
	$ønd_ønge
(
r
) {

66 
m
 = 
RAND_MAX
;

67 
d
, 
v
 = 0;

70 
d
 = (
m
 > 
r
 ?Ñ : m);

71 
v
 +1 + ()(
d
 * (()
	`ønd
()/(()(
m
)+1.0)));

72 
r
 -
m
;

73 } 
r
 > 0);

74  
v
;

75 
	}
}

76 
ønd_ønge
(
r
);

79 
ölöe
 
	$ønd_ønge_ª
(*
£ed
, 
r
) {

80 
m
 = 
RAND_MAX
;

81 
d
, 
v
 = 0;

84 
d
 = (
m
 > 
r
 ?Ñ : m);

85 
v
 +1 + ()(
d
 * (()
	`ønd_r
(
£ed
)/(()(
m
)+1.0)));

86 
r
 -
m
;

87 } 
r
 > 0);

88  
v
;

89 
	}
}

90 
ønd_ønge_ª
(*
£ed
, 
r
);

92 
	sthªad_d©a
 {

93 
vÆ_t
 
	mfú°
;

94 
	mønge
;

95 
	mupd©e
;

96 
	munô_tx
;

97 
	mÆã∫©e
;

98 
	mef„˘ive
;

99 
	mnb_add
;

100 
	mnb_added
;

101 
	mnb_ªmove
;

102 
	mnb_ªmoved
;

103 
	mnb_c⁄èös
;

104 
	mnb_found
;

105 
	mnb_ab‹ts
;

106 
	mnb_ab‹ts_locked_ªad
;

107 
	mnb_ab‹ts_locked_wrôe
;

108 
	mnb_ab‹ts_vÆid©e_ªad
;

109 
	mnb_ab‹ts_vÆid©e_wrôe
;

110 
	mnb_ab‹ts_vÆid©e_commô
;

111 
	mnb_ab‹ts_övÆid_mem‹y
;

112 
	mmax_ªåõs
;

113 
	m£ed
;

114 
öt£t_l_t
 *
	m£t
;

115 
b¨rõr_t
 *
	mb¨rõr
;

116 } 
	tthªad_d©a_t
;

119 *
	$ã°
(*
d©a
) {

120 
u√xt
, 
œ°
 = -1;

121 
vÆ_t
 
vÆ
 = 0;

123 
thªad_d©a_t
 *
d
 = (thªad_d©a_à*)
d©a
;

126 
	`b¨rõr_¸oss
(
d
->
b¨rõr
);

129 
u√xt
 = (
	`ønd_ønge_ª
(&
d
->
£ed
, 100Ë- 1 < d->
upd©e
);

131 
°›
 == 0) {

133 i‡(
u√xt
) {

135 i‡(
œ°
 < 0) {

137 
vÆ
 = 
	`ønd_ønge_ª
(&
d
->
£ed
, d->
ønge
);

138 i‡(
	`£t_add_l
(
d
->
£t
, 
vÆ
, 
TRANSACTIONAL
)) {

139 
d
->
nb_added
++;

140 
œ°
 = 
vÆ
;

142 
d
->
nb_add
++;

146 i‡(
d
->
Æã∫©e
) {

148 i‡(
	`£t_ªmove_l
(
d
->
£t
, 
œ°
, 
TRANSACTIONAL
)) {

149 
d
->
nb_ªmoved
++;

151 
œ°
 = -1;

155 
vÆ
 = 
	`ønd_ønge_ª
(&
d
->
£ed
, d->
ønge
);

156 i‡(
	`£t_ªmove_l
(
d
->
£t
, 
vÆ
, 
TRANSACTIONAL
)) {

157 
d
->
nb_ªmoved
++;

158 
œ°
 = -1;

162 
d
->
nb_ªmove
++;

167 i‡(
d
->
Æã∫©e
) {

168 i‡(
d
->
upd©e
 == 0) {

169 i‡(
œ°
 < 0) {

170 
vÆ
 = 
d
->
fú°
;

171 
œ°
 = 
vÆ
;

173 
vÆ
 = 
	`ønd_ønge_ª
(&
d
->
£ed
, d->
ønge
);

174 
œ°
 = -1;

177 i‡(
œ°
 < 0) {

178 
vÆ
 = 
	`ønd_ønge_ª
(&
d
->
£ed
, d->
ønge
);

181 
vÆ
 = 
œ°
;

184 } 
vÆ
 = 
	`ønd_ønge_ª
(&
d
->
£ed
, d->
ønge
);

186 i‡(
	`£t_c⁄èös_l
(
d
->
£t
, 
vÆ
, 
TRANSACTIONAL
))

187 
d
->
nb_found
++;

188 
d
->
nb_c⁄èös
++;

192 i‡(
d
->
ef„˘ive
) {

193 
u√xt
 = ((100 * (
d
->
nb_added
 + d->
nb_ªmoved
))

194 < (
d
->
upd©e
 * (d->
nb_add
 + d->
nb_ªmove
 + d->
nb_c⁄èös
)));

196 
u√xt
 = (
	`ønd_ønge_ª
(&
d
->
£ed
, 100Ë- 1 < d->
upd©e
);

200  
NULL
;

201 
	}
}

203 
	$maö
(
¨gc
, **
¨gv
)

205 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

207 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

208 {"duøti⁄", 
ªquúed_¨gumít
, 
NULL
, 'd'},

209 {"öôül-size", 
ªquúed_¨gumít
, 
NULL
, 'i'},

210 {"thªad", 
ªquúed_¨gumít
, 
NULL
, 't'},

211 {"ønge", 
ªquúed_¨gumít
, 
NULL
, 'r'},

212 {"£ed", 
ªquúed_¨gumít
, 
NULL
, 'S'},

213 {"upd©e-øã", 
ªquúed_¨gumít
, 
NULL
, 'u'},

214 {"unô-tx", 
ªquúed_¨gumít
, 
NULL
, 'x'},

215 {
NULL
, 0, NULL, 0}

218 
öt£t_l_t
 *
£t
;

219 
i
, 
c
, 
size
;

220 
vÆ_t
 
œ°
 = 0;

221 
vÆ_t
 
vÆ
 = 0;

222 
ªads
, 
ef‰óds
, 
upd©es
, 
effupds
, 
ab‹ts
, 
ab‹ts_locked_ªad
, 
ab‹ts_locked_wrôe
,

223 
ab‹ts_vÆid©e_ªad
, 
ab‹ts_vÆid©e_wrôe
, 
ab‹ts_vÆid©e_commô
,

224 
ab‹ts_övÆid_mem‹y
, 
max_ªåõs
;

225 
thªad_d©a_t
 *
d©a
;

226 
±hªad_t
 *
thªads
;

227 
±hªad_©å_t
 
©å
;

228 
b¨rõr_t
 
b¨rõr
;

229 
timevÆ
 
°¨t
, 
íd
;

230 
time•ec
 
timeout
;

231 
duøti⁄
 = 
DEFAULT_DURATION
;

232 
öôül
 = 
DEFAULT_INITIAL
;

233 
nb_thªads
 = 
DEFAULT_NB_THREADS
;

234 
ønge
 = 
DEFAULT_RANGE
;

235 
£ed
 = 
DEFAULT_SEED
;

236 
upd©e
 = 
DEFAULT_UPDATE
;

237 
unô_tx
 = 
DEFAULT_LOCKTYPE
;

238 
Æã∫©e
 = 
DEFAULT_ALTERNATE
;

239 
ef„˘ive
 = 
DEFAULT_EFFECTIVE
;

240 
sig£t_t
 
block_£t
;

243 
i
 = 0;

244 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "hAf:d:i:t:r:S:u:x:"

245 , 
l⁄g_›ti⁄s
, &
i
);

247 if(
c
 == -1)

250 if(
c
 =0 && 
l⁄g_›ti⁄s
[
i
].
Êag
 == 0)

251 
c
 = 
l⁄g_›ti⁄s
[
i
].
vÆ
;

253 
c
) {

258 
	`¥ötf
("intset -- STM stressÅest "

267 " -A, --Æã∫©ê(deÁu…="
	`XSTR
(
DEFAULT_ALTERNATE
)")\n"

270 " upd©êtx†mu°Éf„˘ivñy wrôê(0Òrül, 1Ûf„˘ive, deÁu…=" 
	`XSTR
(
DEFAULT_EFFECTIVE
) ")\n"

272 " Te° duøti⁄ i¿mûli£c⁄d†(0=öföôe, deÁu…=" 
	`XSTR
(
DEFAULT_DURATION
) ")\n"

274 " Numbî o‡ñemít†tÿö£π bef‹êã° (deÁu…=" 
	`XSTR
(
DEFAULT_INITIAL
) ")\n"

276 " Numbî o‡thªad†(deÁu…=" 
	`XSTR
(
DEFAULT_NB_THREADS
) ")\n"

278 " R™gêo‡öãgî vÆue†ö£πed i¿£à(deÁu…=" 
	`XSTR
(
DEFAULT_RANGE
) ")\n"

280 " RNG sìd (0Òime-ba£d, deÁu…=" 
	`XSTR
(
DEFAULT_SEED
) ")\n"

282 " Pî˚¡agêo‡upd©êå™ß˘i⁄†(deÁu…=" 
	`XSTR
(
DEFAULT_UPDATE
) ")\n"

284 
	`exô
(0);

286 
Æã∫©e
 = 1;

289 
ef„˘ive
 = 
	`©oi
(
›èrg
);

292 
duøti⁄
 = 
	`©oi
(
›èrg
);

295 
öôül
 = 
	`©oi
(
›èrg
);

298 
nb_thªads
 = 
	`©oi
(
›èrg
);

301 
ønge
 = 
	`©ﬁ
(
›èrg
);

304 
£ed
 = 
	`©oi
(
›èrg
);

307 
upd©e
 = 
	`©oi
(
›èrg
);

310 
	`¥ötf
("TheÖarameter x isÇot valid forÅhis benchmark.\n");

311 
	`exô
(0);

313 
	`¥ötf
("TheÖarameterá isÇot valid forÅhis benchmark.\n");

314 
	`exô
(0);

316 
	`¥ötf
("TheÖarameter s isÇot valid forÅhis benchmark.\n");

317 
	`exô
(0);

319 
	`¥ötf
("Use -h or --help for help\n");

320 
	`exô
(0);

322 
	`exô
(1);

326 
	`as£π
(
duøti⁄
 >= 0);

327 
	`as£π
(
öôül
 >= 0);

328 
	`as£π
(
nb_thªads
 > 0);

329 
	`as£π
(
ønge
 > 0 &&Ñ™gê>
öôül
);

330 
	`as£π
(
upd©e
 >= 0 && update <= 100);

332 
	`¥ötf
("SetÅype :ÜinkedÜist\n");

333 
	`¥ötf
("Lígth : %d\n", 
duøti⁄
);

334 
	`¥ötf
("Inôü»sizê: %d\n", 
öôül
);

335 
	`¥ötf
("NbÅhªad† : %d\n", 
nb_thªads
);

336 
	`¥ötf
("VÆuêøngê : %ld\n", 
ønge
);

337 
	`¥ötf
("Sìd : %d\n", 
£ed
);

338 
	`¥ötf
("Upd©êøã : %d\n", 
upd©e
);

339 
	`¥ötf
("Lockálg : %d\n", 
unô_tx
);

340 
	`¥ötf
("A…î«ã : %d\n", 
Æã∫©e
);

341 
	`¥ötf
("Ef„˘ivê : %d\n", 
ef„˘ive
);

342 
	`¥ötf
("Type sizes : int=%d/long=%d/ptr=%d/word=%d\n",

346 ()(
uöçå_t
));

348 
timeout
.
tv_£c
 = 
duøti⁄
 / 1000;

349 
timeout
.
tv_n£c
 = (
duøti⁄
 % 1000) * 1000000;

351 i‡((
d©a
 = (
thªad_d©a_t
 *)
	`mÆloc
(
nb_thªads
 * —hªad_d©a_t))Ë=
NULL
) {

352 
	`≥º‹
("malloc");

353 
	`exô
(1);

355 i‡((
thªads
 = (
±hªad_t
 *)
	`mÆloc
(
nb_thªads
 * ’thªad_t))Ë=
NULL
) {

356 
	`≥º‹
("malloc");

357 
	`exô
(1);

360 i‡(
£ed
 == 0)

361 
	`§™d
(()
	`time
(0));

363 
	`§™d
(
£ed
);

365 
£t
 = 
	`£t_√w_l
();

367 
°›
 = 0;

370 
	`¥ötf
("Initializing STM\n");

373 
	`¥ötf
("Addög %dÉ¡rõ†tÿ£t\n", 
öôül
);

374 
i
 = 0;

375 
i
 < 
öôül
) {

376 
vÆ
 = (
	`ønd
(Ë% 
ønge
) + 1;

377 i‡(
	`£t_add_l
(
£t
, 
vÆ
, 0)) {

378 
œ°
 = 
vÆ
;

379 
i
++;

382 
size
 = 
	`£t_size_l
(
£t
);

383 
	`¥ötf
("Së sizê : %d\n", 
size
);

386 
	`b¨rõr_öô
(&
b¨rõr
, 
nb_thªads
 + 1);

387 
	`±hªad_©å_öô
(&
©å
);

388 
	`±hªad_©å_£tdëach°©e
(&
©å
, 
PTHREAD_CREATE_JOINABLE
);

389 
i
 = 0; i < 
nb_thªads
; i++) {

390 
	`¥ötf
("Cª©ögÅhªad %d\n", 
i
);

391 
d©a
[
i
].
fú°
 = 
œ°
;

392 
d©a
[
i
].
ønge
 =Ñange;

393 
d©a
[
i
].
upd©e
 = update;

394 
d©a
[
i
].
Æã∫©e
 =álternate;

395 
d©a
[
i
].
unô_tx
 = unit_tx;

396 
d©a
[
i
].
Æã∫©e
 =álternate;

397 
d©a
[
i
].
ef„˘ive
 =Éffective;

398 
d©a
[
i
].
nb_add
 = 0;

399 
d©a
[
i
].
nb_added
 = 0;

400 
d©a
[
i
].
nb_ªmove
 = 0;

401 
d©a
[
i
].
nb_ªmoved
 = 0;

402 
d©a
[
i
].
nb_c⁄èös
 = 0;

403 
d©a
[
i
].
nb_found
 = 0;

404 
d©a
[
i
].
nb_ab‹ts
 = 0;

405 
d©a
[
i
].
nb_ab‹ts_locked_ªad
 = 0;

406 
d©a
[
i
].
nb_ab‹ts_locked_wrôe
 = 0;

407 
d©a
[
i
].
nb_ab‹ts_vÆid©e_ªad
 = 0;

408 
d©a
[
i
].
nb_ab‹ts_vÆid©e_wrôe
 = 0;

409 
d©a
[
i
].
nb_ab‹ts_vÆid©e_commô
 = 0;

410 
d©a
[
i
].
nb_ab‹ts_övÆid_mem‹y
 = 0;

411 
d©a
[
i
].
max_ªåõs
 = 0;

412 
d©a
[
i
].
£ed
 = 
	`ønd
();

413 
d©a
[
i
].
£t
 = set;

414 
d©a
[
i
].
b¨rõr
 = &barrier;

415 i‡(
	`±hªad_¸óã
(&
thªads
[
i
], &
©å
, 
ã°
, (*)(&
d©a
[i])) != 0) {

416 
	`Ârötf
(
°dîr
, "Error creatingÅhread\n");

417 
	`exô
(1);

420 
	`±hªad_©å_de°roy
(&
©å
);

423 
	`b¨rõr_¸oss
(&
b¨rõr
);

425 
	`¥ötf
("STARTING...\n");

426 
	`gëtimeofday
(&
°¨t
, 
NULL
);

427 i‡(
duøti⁄
 > 0) {

428 
	`«no¶ìp
(&
timeout
, 
NULL
);

430 
	`sigem±y£t
(&
block_£t
);

431 
	`sigsu•íd
(&
block_£t
);

433 
	`AO_°‹e_fuŒ
(&
°›
, 1);

434 
	`gëtimeofday
(&
íd
, 
NULL
);

435 
	`¥ötf
("STOPPING...\n");

438 
i
 = 0; i < 
nb_thªads
; i++) {

439 i‡(
	`±hªad_joö
(
thªads
[
i
], 
NULL
) != 0) {

440 
	`Ârötf
(
°dîr
, "Error waiting forÅhread completion\n");

441 
	`exô
(1);

445 
duøti⁄
 = (
íd
.
tv_£c
 * 1000 +Énd.
tv_u£c
 / 1000Ë- (
°¨t
.tv_sec * 1000 + start.tv_usec / 1000);

446 
ab‹ts
 = 0;

447 
ab‹ts_locked_ªad
 = 0;

448 
ab‹ts_locked_wrôe
 = 0;

449 
ab‹ts_vÆid©e_ªad
 = 0;

450 
ab‹ts_vÆid©e_wrôe
 = 0;

451 
ab‹ts_vÆid©e_commô
 = 0;

452 
ab‹ts_övÆid_mem‹y
 = 0;

453 
ªads
 = 0;

454 
ef‰óds
 = 0;

455 
upd©es
 = 0;

456 
effupds
 = 0;

457 
max_ªåõs
 = 0;

458 
i
 = 0; i < 
nb_thªads
; i++) {

459 
	`¥ötf
("Thªad %d\n", 
i
);

460 
	`¥ötf
(" #add : %lu\n", 
d©a
[
i
].
nb_add
);

461 
	`¥ötf
(" #added : %lu\n", 
d©a
[
i
].
nb_added
);

462 
	`¥ötf
(" #ªmovê : %lu\n", 
d©a
[
i
].
nb_ªmove
);

463 
	`¥ötf
(" #ªmoved : %lu\n", 
d©a
[
i
].
nb_ªmoved
);

464 
	`¥ötf
(" #c⁄èö† : %lu\n", 
d©a
[
i
].
nb_c⁄èös
);

465 
	`¥ötf
(" #found : %lu\n", 
d©a
[
i
].
nb_found
);

466 
	`¥ötf
(" #ab‹t† : %lu\n", 
d©a
[
i
].
nb_ab‹ts
);

467 
	`¥ötf
(" #lock-∏ : %lu\n", 
d©a
[
i
].
nb_ab‹ts_locked_ªad
);

468 
	`¥ötf
(" #lock-w : %lu\n", 
d©a
[
i
].
nb_ab‹ts_locked_wrôe
);

469 
	`¥ötf
(" #vÆ-∏ : %lu\n", 
d©a
[
i
].
nb_ab‹ts_vÆid©e_ªad
);

470 
	`¥ötf
(" #vÆ-w : %lu\n", 
d©a
[
i
].
nb_ab‹ts_vÆid©e_wrôe
);

471 
	`¥ötf
(" #vÆ-¯ : %lu\n", 
d©a
[
i
].
nb_ab‹ts_vÆid©e_commô
);

472 
	`¥ötf
(" #öv-mem : %lu\n", 
d©a
[
i
].
nb_ab‹ts_övÆid_mem‹y
);

473 
	`¥ötf
(" MaxÑërõ†: %lu\n", 
d©a
[
i
].
max_ªåõs
);

474 
ab‹ts
 +
d©a
[
i
].
nb_ab‹ts
;

475 
ab‹ts_locked_ªad
 +
d©a
[
i
].
nb_ab‹ts_locked_ªad
;

476 
ab‹ts_locked_wrôe
 +
d©a
[
i
].
nb_ab‹ts_locked_wrôe
;

477 
ab‹ts_vÆid©e_ªad
 +
d©a
[
i
].
nb_ab‹ts_vÆid©e_ªad
;

478 
ab‹ts_vÆid©e_wrôe
 +
d©a
[
i
].
nb_ab‹ts_vÆid©e_wrôe
;

479 
ab‹ts_vÆid©e_commô
 +
d©a
[
i
].
nb_ab‹ts_vÆid©e_commô
;

480 
ab‹ts_övÆid_mem‹y
 +
d©a
[
i
].
nb_ab‹ts_övÆid_mem‹y
;

481 
ªads
 +
d©a
[
i
].
nb_c⁄èös
;

482 
ef‰óds
 +
d©a
[
i
].
nb_c⁄èös
 +

483 (
d©a
[
i
].
nb_add
 - d©a[i].
nb_added
) +

484 (
d©a
[
i
].
nb_ªmove
 - d©a[i].
nb_ªmoved
);

485 
upd©es
 +(
d©a
[
i
].
nb_add
 + d©a[i].
nb_ªmove
);

486 
effupds
 +
d©a
[
i
].
nb_ªmoved
 + d©a[i].
nb_added
;

489 
size
 +
d©a
[
i
].
nb_added
 - d©a[i].
nb_ªmoved
;

490 i‡(
max_ªåõs
 < 
d©a
[
i
].max_retries)

491 
max_ªåõs
 = 
d©a
[
i
].max_retries;

493 
	`¥ötf
("Së sizê : %d (ex≥˘ed: %d)\n", 
	`£t_size_l
(
£t
), 
size
);

494 
	`¥ötf
("Duøti⁄ : %d (ms)\n", 
duøti⁄
);

495 
	`¥ötf
("#tx† : %lu (%‡/ s)\n", 
ªads
 + 
upd©es
, (ªad†+ upd©esË* 1000.0 / 
duøti⁄
);

497 
	`¥ötf
("#readÅxs : ");

498 i‡(
ef„˘ive
) {

499 
	`¥ötf
("%lu (%‡/ s)\n", 
ef‰óds
,Éf‰ód†* 1000.0 / 
duøti⁄
);

500 
	`¥ötf
(" #c⁄èö† : %lu (%‡/ s)\n", 
ªads
,Ñód†* 1000.0 / 
duøti⁄
);

501 } 
	`¥ötf
("%lu (%‡/ s)\n", 
ªads
,Ñód†* 1000.0 / 
duøti⁄
);

503 
	`¥ötf
("#eff. updÑ©e: %‡\n", 100.0 * 
effupds
 / (effupd†+ 
ef‰óds
));

505 
	`¥ötf
("#updateÅxs : ");

506 i‡(
ef„˘ive
) {

507 
	`¥ötf
("%lu (%‡/ s)\n", 
effupds
,Éffupd†* 1000.0 / 
duøti⁄
);

508 
	`¥ötf
(" #updÅrül†: %lu (%‡/ s)\n", 
upd©es
, updates * 1000.0 /

509 
duøti⁄
);

510 } 
	`¥ötf
("%lu (%‡/ s)\n", 
upd©es
, upd©e†* 1000.0 / 
duøti⁄
);

512 
	`¥ötf
("#ab‹t† : %lu (%‡/ s)\n", 
ab‹ts
,áb‹t†* 1000.0 / 
duøti⁄
);

513 
	`¥ötf
(" #lock-∏ : %lu (%‡/ s)\n", 
ab‹ts_locked_ªad
,áb‹ts_locked_ªad * 1000.0 / 
duøti⁄
);

514 
	`¥ötf
(" #lock-w : %lu (%‡/ s)\n", 
ab‹ts_locked_wrôe
,áb‹ts_locked_wrôê* 1000.0 / 
duøti⁄
);

515 
	`¥ötf
(" #vÆ-∏ : %lu (%‡/ s)\n", 
ab‹ts_vÆid©e_ªad
,áb‹ts_vÆid©e_ªad * 1000.0 / 
duøti⁄
);

516 
	`¥ötf
(" #vÆ-w : %lu (%‡/ s)\n", 
ab‹ts_vÆid©e_wrôe
,áb‹ts_vÆid©e_wrôê* 1000.0 / 
duøti⁄
);

517 
	`¥ötf
(" #vÆ-¯ : %lu (%‡/ s)\n", 
ab‹ts_vÆid©e_commô
,áb‹ts_vÆid©e_commô * 1000.0 / 
duøti⁄
);

518 
	`¥ötf
(" #öv-mem : %lu (%‡/ s)\n", 
ab‹ts_övÆid_mem‹y
,áb‹ts_övÆid_mem‹y * 1000.0 / 
duøti⁄
);

519 
	`¥ötf
("MaxÑërõ† : %lu\n", 
max_ªåõs
);

522 
	`£t_dñëe_l
(
£t
);

524 
	`‰ì
(
thªads
);

525 
	`‰ì
(
d©a
);

528 
	}
}

	@linkedlists/lockfree-list/harris.c

26 
	~"h¨ris.h
"

35 
ölöe
 
	$is_m¨ked_ªf
(
i
) {

36  (Ë(
i
 & (
LONG_MIN
+1));

37 
	}
}

39 
ölöe
 
	$un£t_m¨k
(
i
) {

40 
i
 &
LONG_MAX
-1;

41  
i
;

42 
	}
}

44 
ölöe
 
	$£t_m¨k
(
i
) {

45 
i
 = 
	`un£t_m¨k
(i);

46 
i
 += 1;

47  
i
;

48 
	}
}

50 
ölöe
 
	$gë_unm¨ked_ªf
(
w
) {

51  
	`un£t_m¨k
(
w
);

52 
	}
}

54 
ölöe
 
	$gë_m¨ked_ªf
(
w
) {

55  
	`£t_m¨k
(
w
);

56 
	}
}

66 
node_t
 *
	$h¨ris_£¨ch
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
, 
node_t
 **
À·_node
) {

67 
node_t
 *
À·_node_√xt
, *
right_node
;

68 
À·_node_√xt
 = 
£t
->
hód
;

70 
£¨ch_agaö
:

72 
node_t
 *
t
 = 
£t
->
hód
;

73 
node_t
 *
t_√xt
 = 
£t
->
hód
->
√xt
;

77 i‡(!
	`is_m¨ked_ªf
((Ë
t_√xt
)) {

78 (*
À·_node
Ë
t
;

79 
À·_node_√xt
 = 
t_√xt
;

81 
t
 = (
node_t
 *Ë
	`gë_unm¨ked_ªf
((Ë
t_√xt
);

82 i‡(!
t
->
√xt
) ;

83 
t_√xt
 = 
t
->
√xt
;

84 } 
	`is_m¨ked_ªf
((Ë
t_√xt
Ë|| (
t
->
vÆ
 < val));

85 
right_node
 = 
t
;

88 i‡(
À·_node_√xt
 =
right_node
) {

89 i‡(
right_node
->
√xt
 && 
	`is_m¨ked_ªf
(()Ñight_node->next))

90 
£¨ch_agaö
;

91  
right_node
;

95 i‡(
	`ATOMIC_CAS_MB
(&(*
À·_node
)->
√xt
,

96 
À·_node_√xt
,

97 
right_node
)) {

98 i‡(
right_node
->
√xt
 && 
	`is_m¨ked_ªf
(()Ñight_node->next))

99 
£¨ch_agaö
;

100  
right_node
;

104 
	}
}

109 
	$h¨ris_föd
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
) {

110 
node_t
 *
right_node
, *
À·_node
;

111 
À·_node
 = 
£t
->
hód
;

113 
right_node
 = 
	`h¨ris_£¨ch
(
£t
, 
vÆ
, &
À·_node
);

114 i‡((!
right_node
->
√xt
Ë||Ñight_node->
vÆ
 != val)

118 
	}
}

124 
	$h¨ris_ö£π
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
) {

125 
node_t
 *
√wnode
, *
right_node
, *
À·_node
;

126 
À·_node
 = 
£t
->
hód
;

129 
right_node
 = 
	`h¨ris_£¨ch
(
£t
, 
vÆ
, &
À·_node
);

130 i‡(
right_node
->
vÆ
 == val)

132 
√wnode
 = 
	`√w_node
(
vÆ
, 
right_node
, 0);

134 
	`AO_n›_fuŒ
();

135 i‡(
	`ATOMIC_CAS_MB
(&
À·_node
->
√xt
, 
right_node
, 
√wnode
))

138 
	}
}

145 
	$h¨ris_dñëe
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
) {

146 
node_t
 *
right_node
, *
right_node_√xt
, *
À·_node
;

147 
À·_node
 = 
£t
->
hód
;

150 
right_node
 = 
	`h¨ris_£¨ch
(
£t
, 
vÆ
, &
À·_node
);

151 i‡(
right_node
->
vÆ
 != val)

153 
right_node_√xt
 = 
right_node
->
√xt
;

154 i‡(!
	`is_m¨ked_ªf
((Ë
right_node_√xt
))

155 i‡(
	`ATOMIC_CAS_MB
(&
right_node
->
√xt
,

156 
right_node_√xt
,

157 
	`gë_m¨ked_ªf
((Ë
right_node_√xt
)))

160 i‡(!
	`ATOMIC_CAS_MB
(&
À·_node
->
√xt
, 
right_node
, 
right_node_√xt
))

161 
right_node
 = 
	`h¨ris_£¨ch
(
£t
,Ñight_node->
vÆ
, &
À·_node
);

163 
	}
}

	@linkedlists/lockfree-list/harris.h

27 
	~"lökedli°.h
"

33 
ölöe
 
is_m¨ked_ªf
(
i
);

34 
ölöe
 
un£t_m¨k
(
i
);

35 
ölöe
 
£t_m¨k
(
i
);

36 
ölöe
 
gë_unm¨ked_ªf
(
w
);

37 
ölöe
 
gë_m¨ked_ªf
(
w
);

39 
node_t
 *
h¨ris_£¨ch
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
,Çode_à**
À·_node
);

40 
h¨ris_föd
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
);

41 
h¨ris_ö£π
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
);

42 
h¨ris_dñëe
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
);

	@linkedlists/lockfree-list/intset.c

12 
	~"öt£t.h
"

14 
	$£t_c⁄èös
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
, 
å™ß˘i⁄Æ
)

16 
ªsu…
;

18 #ifde‡
DEBUG


23 #ifde‡
SEQUENTIAL


24 
node_t
 *
¥ev
, *
√xt
;

26 
¥ev
 = 
£t
->
hód
;

27 
√xt
 = 
¥ev
->next;

28 
√xt
->
vÆ
 < val) {

29 
¥ev
 = 
√xt
;

30 
√xt
 = 
¥ev
->next;

32 
ªsu…
 = (
√xt
->
vÆ
 == val);

34 #ñi‡
deföed
 
STM


35 
°©us
;

36 
node_t
 *
¥ev
, *
√xt
;

37 
vÆ_t
 
v
 = 0;

39 i‡(
å™ß˘i⁄Æ
 > 1) {

41 if((
°©us
 = 
	`_xbegö
()Ë=
_XBEGIN_STARTED
){

42 
¥ev
 = 
£t
->
hód
;

43 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

45 
v
 = 
	`TX_LOAD
((
uöçå_t
 *Ë&
√xt
->
vÆ
);

46 i‡(
v
 >
vÆ
)

48 
¥ev
 = 
√xt
;

49 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

51 
ªsu…
 = (
v
 =
vÆ
);

52 
	`_xíd
();

56 
ªsu…
 = 
	`h¨ris_föd
(
£t
, 
vÆ
);

61 
	`TX_START
(
NL
);

62 
¥ev
 = 
£t
->
hód
;

63 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

65 
v
 = 
	`TX_LOAD
((
uöçå_t
 *Ë&
√xt
->
vÆ
);

66 i‡(
v
 >
vÆ
)

68 
¥ev
 = 
√xt
;

69 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

71 
TX_END
;

72 
ªsu…
 = (
v
 =
vÆ
);

76 #ñi‡
deföed
 
LOCKFREE


80  
ªsu…
;

81 
	}
}

83 
ölöe
 
	$£t_£q_add
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
)

85 
ªsu…
;

86 
node_t
 *
¥ev
, *
√xt
;

88 
¥ev
 = 
£t
->
hód
;

89 
√xt
 = 
¥ev
->next;

90 
√xt
->
vÆ
 < val) {

91 
¥ev
 = 
√xt
;

92 
√xt
 = 
¥ev
->next;

94 
ªsu…
 = (
√xt
->
vÆ
 != val);

95 i‡(
ªsu…
) {

96 
¥ev
->
√xt
 = 
	`√w_node
(
vÆ
,Çext, 0);

98  
ªsu…
;

99 
	}
}

102 
	$£t_add
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
, 
å™ß˘i⁄Æ
)

104 
ªsu…
;

106 #ifde‡
DEBUG


111 i‡(!
å™ß˘i⁄Æ
) {

113 
ªsu…
 = 
	`£t_£q_add
(
£t
, 
vÆ
);

117 #ifde‡
SEQUENTIAL


119 
ªsu…
 = 
	`£t_£q_add
(
£t
, 
vÆ
);

122 #ñi‡
deföed
 
STM


124 
node_t
 *
¥ev
, *
√xt
;

125 
vÆ_t
 
v
;

127 i‡(
å™ß˘i⁄Æ
 > 2) {

129 
°©us
;

130 
node_t
 *
n_node
 = 
	`√w_node
(
vÆ
, 
NULL
, 
å™ß˘i⁄Æ
);

131 if((
°©us
 = 
	`_xbegö
()Ë=
_XBEGIN_STARTED
) {

132 
¥ev
 = 
£t
->
hód
;

133 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

135 
v
 = 
	`TX_LOAD
((
uöçå_t
 *Ë&
√xt
->
vÆ
);

136 i‡(
v
 >
vÆ
)

138 
¥ev
 = 
√xt
;

139 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

141 
ªsu…
 = (
v
 !
vÆ
);

142 i‡(
ªsu…
) {

143 
n_node
->
√xt
 =Çext;

144 
	`TX_STORE
(&
¥ev
->
√xt
, 
n_node
);

146 
	`_xíd
();

150 
ªsu…
 = -1;

154 
	`¥ötf
("set_addÇoÅransactional\n");

155 
	`TX_START
(
NL
);

156 
¥ev
 = 
£t
->
hód
;

157 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

159 
v
 = 
	`TX_LOAD
((
uöçå_t
 *Ë&
√xt
->
vÆ
);

160 i‡(
v
 >
vÆ
)

162 
¥ev
 = 
√xt
;

163 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

165 
ªsu…
 = (
v
 !
vÆ
);

166 i‡(
ªsu…
) {

167 
	`TX_STORE
(&
¥ev
->
√xt
, 
	`√w_node
(
vÆ
,Çext, 
å™ß˘i⁄Æ
));

169 
TX_END
;

177  
ªsu…
;

178 
	}
}

180 
	$£t_ªmove
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
, 
å™ß˘i⁄Æ
)

182 
ªsu…
 = 0;

184 #ifde‡
DEBUG


189 #ifde‡
SEQUENTIAL


191 
node_t
 *
¥ev
, *
√xt
;

193 
¥ev
 = 
£t
->
hód
;

194 
√xt
 = 
¥ev
->next;

195 
√xt
->
vÆ
 < val) {

196 
¥ev
 = 
√xt
;

197 
√xt
 = 
¥ev
->next;

199 
ªsu…
 = (
√xt
->
vÆ
 == val);

200 i‡(
ªsu…
) {

201 
¥ev
->
√xt
 =Çext->next;

202 
	`‰ì
(
√xt
);

205 #ñi‡
deföed
 
STM


207 
node_t
 *
¥ev
, *
√xt
;

208 
vÆ_t
 
v
;

209 
node_t
 *
n
;

210 
°©us
;

212 i‡(
å™ß˘i⁄Æ
 > 3) {

214 if((
°©us
 = 
	`_xbegö
()Ë=
_XBEGIN_STARTED
) {

215 
¥ev
 = 
£t
->
hód
;

216 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

218 
v
 = 
	`TX_LOAD
((
uöçå_t
 *Ë&
√xt
->
vÆ
);

219 i‡(
v
 >
vÆ
)

221 
¥ev
 = 
√xt
;

222 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

224 
ªsu…
 = (
v
 =
vÆ
);

225 i‡(
ªsu…
) {

226 
n
 = (
node_t
 *)
	`TX_LOAD
(&
√xt
->next);

227 
	`TX_STORE
(&
¥ev
->
√xt
, 
n
);

229 
	`_xíd
();

231 if(
ªsu…
)

232 
	`FREE
(
√xt
, (
node_t
));

236 
ªsu…
 = 
	`h¨ris_dñëe
(
£t
, 
vÆ
);

240 
	`TX_START
(
NL
);

241 
¥ev
 = 
£t
->
hód
;

242 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

244 
v
 = 
	`TX_LOAD
((
uöçå_t
 *Ë&
√xt
->
vÆ
);

245 i‡(
v
 >
vÆ
)

247 
¥ev
 = 
√xt
;

248 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

250 
ªsu…
 = (
v
 =
vÆ
);

251 i‡(
ªsu…
) {

252 
n
 = (
node_t
 *)
	`TX_LOAD
(&
√xt
->next);

253 
	`TX_STORE
(&
¥ev
->
√xt
, 
n
);

254 
	`FREE
(
√xt
, (
node_t
));

256 
TX_END
;

259 #ñi‡
deföed
 
LOCKFREE


263  
ªsu…
;

264 
	}
}

	@linkedlists/lockfree-list/intset.h

10 
	~"h¨ris.h
"

12 
£t_c⁄èös
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
, 
å™ß˘i⁄Æ
);

13 
£t_add
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
, 
å™ß˘i⁄Æ
);

14 
£t_ªmove
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
, 
å™ß˘i⁄Æ
);

	@linkedlists/lockfree-list/linkedlist.c

11 
	~"lökedli°.h
"

13 
node_t
 *
	$√w_node
(
vÆ_t
 
vÆ
, 
node_t
 *
√xt
, 
å™ß˘i⁄Æ
)

15 
node_t
 *
node
;

17 i‡(
å™ß˘i⁄Æ
) {

18 
node
 = (
node_t
 *)
	`MALLOC
((node_t));

20 
node
 = (
node_t
 *)
	`mÆloc
((node_t));

22 i‡(
node
 =
NULL
) {

23 
	`≥º‹
("malloc");

24 
	`exô
(1);

27 
node
->
vÆ
 = val;

28 
node
->
√xt
 =Çext;

30  
node
;

31 
	}
}

33 
öt£t_t
 *
	$£t_√w
()

35 
öt£t_t
 *
£t
;

36 
node_t
 *
mö
, *
max
;

38 i‡((
£t
 = (
öt£t_t
 *)
	`mÆloc
((öt£t_t))Ë=
NULL
) {

39 
	`≥º‹
("malloc");

40 
	`exô
(1);

42 
max
 = 
	`√w_node
(
VAL_MAX
, 
NULL
, 0);

43 
mö
 = 
	`√w_node
(
VAL_MIN
, 
max
, 0);

44 
£t
->
hód
 = 
mö
;

46  
£t
;

47 
	}
}

49 
	$£t_dñëe
(
öt£t_t
 *
£t
)

51 
node_t
 *
node
, *
√xt
;

53 
node
 = 
£t
->
hód
;

54 
node
 !
NULL
) {

55 
√xt
 = 
node
->next;

56 
	`‰ì
(
node
);

57 
node
 = 
√xt
;

59 
	`‰ì
(
£t
);

60 
	}
}

62 
	$£t_size
(
öt£t_t
 *
£t
)

64 
size
 = 0;

65 
node_t
 *
node
;

68 
node
 = 
£t
->
hód
->
√xt
;

69 
node
->
√xt
 !
NULL
) {

70 
size
++;

71 
node
 =Çode->
√xt
;

74  
size
;

75 
	}
}

	@linkedlists/lockfree-list/linkedlist.h

10 
	~<as£π.h
>

11 
	~<gë›t.h
>

12 
	~<limôs.h
>

13 
	~<±hªad.h
>

14 
	~<sig«l.h
>

15 
	~<°dlib.h
>

16 
	~<°dio.h
>

17 
	~<sys/time.h
>

18 
	~<time.h
>

19 
	~<°döt.h
>

21 
	~<©omic_›s.h
>

23 
	~"lock‰ì.h
"

25 #ifde‡
DEBUG


26 
	#IO_FLUSH
 
	`fÊush
(
NULL
)

	)

30 
	#DEFAULT_DURATION
 10000

	)

31 
	#DEFAULT_INITIAL
 256

	)

32 
	#DEFAULT_NB_THREADS
 4

	)

33 
	#DEFAULT_RANGE
 0x7FFFFFFF

	)

34 
	#DEFAULT_SEED
 0

	)

35 
	#DEFAULT_UPDATE
 20

	)

36 
	#DEFAULT_ELASTICITY
 4

	)

37 
	#DEFAULT_ALTERNATE
 0

	)

38 
	#DEFAULT_EFFECTIVE
 1

	)

40 
	#XSTR
(
s
Ë
	`STR
(s)

	)

41 
	#STR
(
s
Ë#s

	)

43 
	#ATOMIC_CAS_MB
(
a
, 
e
, 
v
Ë(
	`AO_com∑ª_™d_sw≠_fuŒ
((vﬁ©ûê
AO_t
 *)◊), (AO_t)”), (AO_t)(v)))

	)

45 vﬁ©ûê
AO_t
 
	g°›
;

47 
	#TRANSACTIONAL
 
d
->
unô_tx


	)

49 
öçå_t
 
	tvÆ_t
;

50 
	#VAL_MIN
 
INT_MIN


	)

51 
	#VAL_MAX
 
INT_MAX


	)

53 
	snode
 {

54 
vÆ_t
 
	mvÆ
;

55 
node
 *
	m√xt
;

56 } 
	tnode_t
;

58 
	söt£t
 {

59 
node_t
 *
	mhód
;

60 } 
	töt£t_t
;

62 
node_t
 *
√w_node
(
vÆ_t
 
vÆ
,Çode_à*
√xt
, 
å™ß˘i⁄Æ
);

63 
öt£t_t
 *
£t_√w
();

64 
£t_dñëe
(
öt£t_t
 *
£t
);

65 
£t_size
(
öt£t_t
 *
£t
);

	@linkedlists/lockfree-list/test.c

24 
	~"öt£t.h
"

26 
	sb¨rõr
 {

27 
±hªad_c⁄d_t
 
	mcom∂ëe
;

28 
±hªad_muãx_t
 
	mmuãx
;

29 
	mcou¡
;

30 
	m¸ossög
;

31 } 
	tb¨rõr_t
;

33 
	$b¨rõr_öô
(
b¨rõr_t
 *
b
, 
n
)

35 
	`±hªad_c⁄d_öô
(&
b
->
com∂ëe
, 
NULL
);

36 
	`±hªad_muãx_öô
(&
b
->
muãx
, 
NULL
);

37 
b
->
cou¡
 = 
n
;

38 
b
->
¸ossög
 = 0;

39 
	}
}

41 
	$b¨rõr_¸oss
(
b¨rõr_t
 *
b
)

43 
	`±hªad_muãx_lock
(&
b
->
muãx
);

45 
b
->
¸ossög
++;

47 i‡(
b
->
¸ossög
 < b->
cou¡
) {

48 
	`±hªad_c⁄d_waô
(&
b
->
com∂ëe
, &b->
muãx
);

50 
	`±hªad_c⁄d_brﬂdˇ°
(&
b
->
com∂ëe
);

52 
b
->
¸ossög
 = 0;

54 
	`±hªad_muãx_u∆ock
(&
b
->
muãx
);

55 
	}
}

67 
ölöe
 
	$ønd_ønge
(
r
) {

69 
m
 = 2147483647;

70 
d
, 
v
 = 0;

73 
d
 = (
m
 > 
r
 ?Ñ : m);

74 
v
 +1 + ()(
d
 * (()
	`ønd
()/(()(
m
)+1.0)));

75 
r
 -
m
;

76 } 
r
 > 0);

77  
v
;

78 
	}
}

79 
ønd_ønge
(
r
);

82 
ölöe
 
	$ønd_ønge_ª
(*
£ed
, 
r
) {

83 
m
 = 2147483647;

84 
d
, 
v
 = 0;

87 
d
 = (
m
 > 
r
 ?Ñ : m);

88 
v
 +1 + ()(
d
 * (()
	`ønd_r
(
£ed
)/(()(
m
)+1.0)));

89 
r
 -
m
;

90 } 
r
 > 0);

91  
v
;

92 
	}
}

93 
ønd_ønge_ª
(*
£ed
, 
r
);

96 
	sthªad_d©a
 {

97 
vÆ_t
 
	mfú°
;

98 
	mønge
;

99 
	mupd©e
;

100 
	munô_tx
;

101 
	mÆã∫©e
;

102 
	mef„˘ive
;

103 
	mnb_add
;

104 
	mnb_added
;

105 
	mnb_ªmove
;

106 
	mnb_ªmoved
;

107 
	mnb_c⁄èös
;

108 
	mnb_found
;

109 
	mnb_ab‹ts
;

110 
	mnb_ab‹ts_locked_ªad
;

111 
	mnb_ab‹ts_locked_wrôe
;

112 
	mnb_ab‹ts_vÆid©e_ªad
;

113 
	mnb_ab‹ts_vÆid©e_wrôe
;

114 
	mnb_ab‹ts_vÆid©e_commô
;

115 
	mnb_ab‹ts_övÆid_mem‹y
;

116 
	mnb_ab‹ts_doubÀ_wrôe
;

117 
	mmax_ªåõs
;

118 
	m£ed
;

119 
öt£t_t
 *
	m£t
;

120 
b¨rõr_t
 *
	mb¨rõr
;

121 
	mÁûuªs_beˇu£_c⁄ã¡i⁄
;

122 } 
	tthªad_d©a_t
;

124 *
	$ã°
(*
d©a
) {

125 
u√xt
, 
œ°
 = -1;

126 
vÆ_t
 
vÆ
 = 0;

128 
thªad_d©a_t
 *
d
 = (thªad_d©a_à*)
d©a
;

131 
	`TM_THREAD_ENTER
();

133 
	`b¨rõr_¸oss
(
d
->
b¨rõr
);

136 
u√xt
 = (
	`ønd_ønge_ª
(&
d
->
£ed
, 100Ë- 1 < d->
upd©e
);

138 #ifde‡
ICC


139 
°›
 == 0) {

141 
	`AO_lﬂd_fuŒ
(&
°›
) == 0) {

144 i‡(
u√xt
) {

146 i‡(
œ°
 < 0) {

148 
vÆ
 = 
	`ønd_ønge_ª
(&
d
->
£ed
, d->
ønge
);

149 i‡(
	`£t_add
(
d
->
£t
, 
vÆ
, 
TRANSACTIONAL
)) {

150 
d
->
nb_added
++;

151 
œ°
 = 
vÆ
;

153 
d
->
nb_add
++;

157 i‡(
d
->
Æã∫©e
) {

158 i‡(
	`£t_ªmove
(
d
->
£t
, 
œ°
, 
TRANSACTIONAL
)) {

159 
d
->
nb_ªmoved
++;

161 
œ°
 = -1;

164 
vÆ
 = 
	`ønd_ønge_ª
(&
d
->
£ed
, d->
ønge
);

166 i‡(
	`£t_ªmove
(
d
->
£t
, 
vÆ
, 
TRANSACTIONAL
)) {

167 
d
->
nb_ªmoved
++;

169 
œ°
 = -1;

172 
d
->
nb_ªmove
++;

177 i‡(
d
->
Æã∫©e
) {

178 i‡(
d
->
upd©e
 == 0) {

179 i‡(
œ°
 < 0) {

180 
vÆ
 = 
d
->
fú°
;

181 
œ°
 = 
vÆ
;

183 
vÆ
 = 
	`ønd_ønge_ª
(&
d
->
£ed
, d->
ønge
);

184 
œ°
 = -1;

187 i‡(
œ°
 < 0) {

188 
vÆ
 = 
	`ønd_ønge_ª
(&
d
->
£ed
, d->
ønge
);

191 
vÆ
 = 
œ°
;

194 } 
vÆ
 = 
	`ønd_ønge_ª
(&
d
->
£ed
, d->
ønge
);

196 i‡(
	`£t_c⁄èös
(
d
->
£t
, 
vÆ
, 
TRANSACTIONAL
))

197 
d
->
nb_found
++;

198 
d
->
nb_c⁄èös
++;

203 i‡(
d
->
ef„˘ive
) {

204 
u√xt
 = ((100 * (
d
->
nb_added
 + d->
nb_ªmoved
))

205 < (
d
->
upd©e
 * (d->
nb_add
 + d->
nb_ªmove
 + d->
nb_c⁄èös
)));

207 
u√xt
 = (
	`ønd_ønge_ª
(&
d
->
£ed
, 100Ë- 1 < d->
upd©e
);

210 #ifde‡
ICC


217 
	`TM_THREAD_EXIT
();

219  
NULL
;

220 
	}
}

226 
	$maö
(
¨gc
, **
¨gv
) {

227 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

229 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

230 {"duøti⁄", 
ªquúed_¨gumít
, 
NULL
, 'd'},

231 {"öôül-size", 
ªquúed_¨gumít
, 
NULL
, 'i'},

232 {"thªad-num", 
ªquúed_¨gumít
, 
NULL
, 't'},

233 {"ønge", 
ªquúed_¨gumít
, 
NULL
, 'r'},

234 {"£ed", 
ªquúed_¨gumít
, 
NULL
, 'S'},

235 {"upd©e-øã", 
ªquúed_¨gumít
, 
NULL
, 'u'},

236 {"ña°icôy", 
ªquúed_¨gumít
, 
NULL
, 'x'},

237 {
NULL
, 0, NULL, 0}

240 
öt£t_t
 *
£t
;

241 
i
, 
c
, 
size
;

242 
vÆ_t
 
œ°
 = 0;

243 
vÆ_t
 
vÆ
 = 0;

244 
ªads
, 
ef‰óds
, 
upd©es
, 
effupds
, 
ab‹ts
, 
ab‹ts_locked_ªad
,

245 
ab‹ts_locked_wrôe
, 
ab‹ts_vÆid©e_ªad
, 
ab‹ts_vÆid©e_wrôe
,

246 
ab‹ts_vÆid©e_commô
, 
ab‹ts_övÆid_mem‹y
, 
ab‹ts_doubÀ_wrôe
,

247 
max_ªåõs
, 
Áûuªs_beˇu£_c⁄ã¡i⁄
;

248 
thªad_d©a_t
 *
d©a
;

249 
±hªad_t
 *
thªads
;

250 
±hªad_©å_t
 
©å
;

251 
b¨rõr_t
 
b¨rõr
;

252 
timevÆ
 
°¨t
, 
íd
;

253 
time•ec
 
timeout
;

254 
duøti⁄
 = 
DEFAULT_DURATION
;

255 
öôül
 = 
DEFAULT_INITIAL
;

256 
nb_thªads
 = 
DEFAULT_NB_THREADS
;

257 
ønge
 = 
DEFAULT_RANGE
;

258 
£ed
 = 
DEFAULT_SEED
;

259 
upd©e
 = 
DEFAULT_UPDATE
;

260 
unô_tx
 = 
DEFAULT_ELASTICITY
;

261 
Æã∫©e
 = 
DEFAULT_ALTERNATE
;

262 
ef„˘ive
 = 
DEFAULT_EFFECTIVE
;

263 
sig£t_t
 
block_£t
;

266 
i
 = 0;

267 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "hAf:d:i:t:r:S:u:x:", 
l⁄g_›ti⁄s
, &
i
);

269 if(
c
 == -1)

272 if(
c
 =0 && 
l⁄g_›ti⁄s
[
i
].
Êag
 == 0)

273 
c
 = 
l⁄g_›ti⁄s
[
i
].
vÆ
;

275 
c
) {

280 
	`¥ötf
("intset -- STM stressÅest "

289 " -A, --Æã∫©ê(deÁu…="
	`XSTR
(
DEFAULT_ALTERNATE
)")\n"

292 " upd©êtx†mu°Éf„˘ivñy wrôê(0Òrül, 1Ûf„˘ive, deÁu…=" 
	`XSTR
(
DEFAULT_EFFECTIVE
) ")\n"

294 " Te° duøti⁄ i¿mûli£c⁄d†(0=öföôe, deÁu…=" 
	`XSTR
(
DEFAULT_DURATION
) ")\n"

296 " Numbî o‡ñemít†tÿö£π bef‹êã° (deÁu…=" 
	`XSTR
(
DEFAULT_INITIAL
) ")\n"

298 " Numbî o‡thªad†(deÁu…=" 
	`XSTR
(
DEFAULT_NB_THREADS
) ")\n"

300 " R™gêo‡öãgî vÆue†ö£πed i¿£à(deÁu…=" 
	`XSTR
(
DEFAULT_RANGE
) ")\n"

302 " RNG sìd (0Òime-ba£d, deÁu…=" 
	`XSTR
(
DEFAULT_SEED
) ")\n"

304 " Pî˚¡agêo‡upd©êå™ß˘i⁄†(deÁu…=" 
	`XSTR
(
DEFAULT_UPDATE
) ")\n"

315 
	`exô
(0);

317 
Æã∫©e
 = 1;

320 
ef„˘ive
 = 
	`©oi
(
›èrg
);

323 
duøti⁄
 = 
	`©oi
(
›èrg
);

326 
öôül
 = 
	`©oi
(
›èrg
);

329 
nb_thªads
 = 
	`©oi
(
›èrg
);

332 
ønge
 = 
	`©ﬁ
(
›èrg
);

335 
£ed
 = 
	`©oi
(
›èrg
);

338 
upd©e
 = 
	`©oi
(
›èrg
);

341 
unô_tx
 = 
	`©oi
(
›èrg
);

344 
	`¥ötf
("Use -h or --help for help\n");

345 
	`exô
(0);

347 
	`exô
(1);

351 
	`as£π
(
duøti⁄
 >= 0);

352 
	`as£π
(
öôül
 >= 0);

353 
	`as£π
(
nb_thªads
 > 0);

354 
	`as£π
(
ønge
 > 0 &&Ñ™gê>
öôül
);

355 
	`as£π
(
upd©e
 >= 0 && update <= 100);

357 
	`¥ötf
("BenchÅype :ÜinkedÜist\n");

358 
	`¥ötf
("Duøti⁄ : %d\n", 
duøti⁄
);

359 
	`¥ötf
("Inôü»sizê: %d\n", 
öôül
);

360 
	`¥ötf
("NbÅhªad† : %d\n", 
nb_thªads
);

361 
	`¥ötf
("VÆuêøngê : %ld\n", 
ønge
);

362 
	`¥ötf
("Sìd : %d\n", 
£ed
);

363 
	`¥ötf
("Upd©êøã : %d\n", 
upd©e
);

364 
	`¥ötf
("Eœ°icôy : %d\n", 
unô_tx
);

365 
	`¥ötf
("A…î«ã : %d\n", 
Æã∫©e
);

366 
	`¥ötf
("Ef„˘ivê : %d\n", 
ef„˘ive
);

367 
	`¥ötf
("Type sizes : int=%d/long=%d/ptr=%d/word=%d\n",

371 ()(
uöçå_t
));

373 
timeout
.
tv_£c
 = 
duøti⁄
 / 1000;

374 
timeout
.
tv_n£c
 = (
duøti⁄
 % 1000) * 1000000;

376 i‡((
d©a
 = (
thªad_d©a_t
 *)
	`mÆloc
(
nb_thªads
 * —hªad_d©a_t))Ë=
NULL
) {

377 
	`≥º‹
("malloc");

378 
	`exô
(1);

380 i‡((
thªads
 = (
±hªad_t
 *)
	`mÆloc
(
nb_thªads
 * ’thªad_t))Ë=
NULL
) {

381 
	`≥º‹
("malloc");

382 
	`exô
(1);

385 i‡(
£ed
 == 0)

386 
	`§™d
(()
	`time
(0));

388 
	`§™d
(
£ed
);

390 
£t
 = 
	`£t_√w
();

391 
°›
 = 0;

394 
	`¥ötf
("Initializing STM\n");

396 
	`TM_STARTUP
();

399 
	`¥ötf
("Addög %dÉ¡rõ†tÿ£t\n", 
öôül
);

400 
i
 = 0;

401 
i
 < 
öôül
) {

402 
vÆ
 = 
	`ønd_ønge
(
ønge
);

403 i‡(
	`£t_add
(
£t
, 
vÆ
, 0)) {

404 
œ°
 = 
vÆ
;

405 
i
++;

408 
size
 = 
	`£t_size
(
£t
);

409 
	`¥ötf
("Së sizê : %d\n", 
size
);

412 
	`b¨rõr_öô
(&
b¨rõr
, 
nb_thªads
 + 1);

413 
	`±hªad_©å_öô
(&
©å
);

414 
	`±hªad_©å_£tdëach°©e
(&
©å
, 
PTHREAD_CREATE_JOINABLE
);

415 
i
 = 0; i < 
nb_thªads
; i++) {

416 
	`¥ötf
("Cª©ögÅhªad %d\n", 
i
);

417 
d©a
[
i
].
fú°
 = 
œ°
;

418 
d©a
[
i
].
ønge
 =Ñange;

419 
d©a
[
i
].
upd©e
 = update;

420 
d©a
[
i
].
unô_tx
 = unit_tx;

421 
d©a
[
i
].
Æã∫©e
 =álternate;

422 
d©a
[
i
].
ef„˘ive
 =Éffective;

423 
d©a
[
i
].
nb_add
 = 0;

424 
d©a
[
i
].
nb_added
 = 0;

425 
d©a
[
i
].
nb_ªmove
 = 0;

426 
d©a
[
i
].
nb_ªmoved
 = 0;

427 
d©a
[
i
].
nb_c⁄èös
 = 0;

428 
d©a
[
i
].
nb_found
 = 0;

429 
d©a
[
i
].
nb_ab‹ts
 = 0;

430 
d©a
[
i
].
nb_ab‹ts_locked_ªad
 = 0;

431 
d©a
[
i
].
nb_ab‹ts_locked_wrôe
 = 0;

432 
d©a
[
i
].
nb_ab‹ts_vÆid©e_ªad
 = 0;

433 
d©a
[
i
].
nb_ab‹ts_vÆid©e_wrôe
 = 0;

434 
d©a
[
i
].
nb_ab‹ts_vÆid©e_commô
 = 0;

435 
d©a
[
i
].
nb_ab‹ts_övÆid_mem‹y
 = 0;

436 
d©a
[
i
].
nb_ab‹ts_doubÀ_wrôe
 = 0;

437 
d©a
[
i
].
max_ªåõs
 = 0;

438 
d©a
[
i
].
£ed
 = 
	`ønd
();

439 
d©a
[
i
].
£t
 = set;

440 
d©a
[
i
].
b¨rõr
 = &barrier;

441 
d©a
[
i
].
Áûuªs_beˇu£_c⁄ã¡i⁄
 = 0;

442 i‡(
	`±hªad_¸óã
(&
thªads
[
i
], &
©å
, 
ã°
, (*)(&
d©a
[i])) != 0) {

443 
	`Ârötf
(
°dîr
, "Error creatingÅhread\n");

444 
	`exô
(1);

447 
	`±hªad_©å_de°roy
(&
©å
);

450 
	`b¨rõr_¸oss
(&
b¨rõr
);

452 
	`¥ötf
("STARTING...\n");

453 
	`gëtimeofday
(&
°¨t
, 
NULL
);

454 i‡(
duøti⁄
 > 0) {

455 
	`«no¶ìp
(&
timeout
, 
NULL
);

457 
	`sigem±y£t
(&
block_£t
);

458 
	`sigsu•íd
(&
block_£t
);

461 #ifde‡
ICC


462 
°›
 = 1;

464 
	`AO_°‹e_fuŒ
(&
°›
, 1);

467 
	`gëtimeofday
(&
íd
, 
NULL
);

468 
	`¥ötf
("STOPPING...\n");

471 
i
 = 0; i < 
nb_thªads
; i++) {

472 i‡(
	`±hªad_joö
(
thªads
[
i
], 
NULL
) != 0) {

473 
	`Ârötf
(
°dîr
, "Error waiting forÅhread completion\n");

474 
	`exô
(1);

478 
duøti⁄
 = (
íd
.
tv_£c
 * 1000 +Énd.
tv_u£c
 / 1000Ë- (
°¨t
.tv_sec * 1000 + start.tv_usec / 1000);

479 
ab‹ts
 = 0;

480 
ab‹ts_locked_ªad
 = 0;

481 
ab‹ts_locked_wrôe
 = 0;

482 
ab‹ts_vÆid©e_ªad
 = 0;

483 
ab‹ts_vÆid©e_wrôe
 = 0;

484 
ab‹ts_vÆid©e_commô
 = 0;

485 
ab‹ts_övÆid_mem‹y
 = 0;

486 
ab‹ts_doubÀ_wrôe
 = 0;

487 
Áûuªs_beˇu£_c⁄ã¡i⁄
 = 0;

488 
ªads
 = 0;

489 
ef‰óds
 = 0;

490 
upd©es
 = 0;

491 
effupds
 = 0;

492 
max_ªåõs
 = 0;

493 
i
 = 0; i < 
nb_thªads
; i++) {

494 
	`¥ötf
("Thªad %d\n", 
i
);

495 
	`¥ötf
(" #add : %lu\n", 
d©a
[
i
].
nb_add
);

496 
	`¥ötf
(" #added : %lu\n", 
d©a
[
i
].
nb_added
);

497 
	`¥ötf
(" #ªmovê : %lu\n", 
d©a
[
i
].
nb_ªmove
);

498 
	`¥ötf
(" #ªmoved : %lu\n", 
d©a
[
i
].
nb_ªmoved
);

499 
	`¥ötf
(" #c⁄èö† : %lu\n", 
d©a
[
i
].
nb_c⁄èös
);

500 
	`¥ötf
(" #found : %lu\n", 
d©a
[
i
].
nb_found
);

501 
	`¥ötf
(" #ab‹t† : %lu\n", 
d©a
[
i
].
nb_ab‹ts
);

502 
	`¥ötf
(" #lock-∏ : %lu\n", 
d©a
[
i
].
nb_ab‹ts_locked_ªad
);

503 
	`¥ötf
(" #lock-w : %lu\n", 
d©a
[
i
].
nb_ab‹ts_locked_wrôe
);

504 
	`¥ötf
(" #vÆ-∏ : %lu\n", 
d©a
[
i
].
nb_ab‹ts_vÆid©e_ªad
);

505 
	`¥ötf
(" #vÆ-w : %lu\n", 
d©a
[
i
].
nb_ab‹ts_vÆid©e_wrôe
);

506 
	`¥ötf
(" #vÆ-¯ : %lu\n", 
d©a
[
i
].
nb_ab‹ts_vÆid©e_commô
);

507 
	`¥ötf
(" #öv-mem : %lu\n", 
d©a
[
i
].
nb_ab‹ts_övÆid_mem‹y
);

508 
	`¥ötf
(" #öv-mem : %lu\n", 
d©a
[
i
].
nb_ab‹ts_doubÀ_wrôe
);

509 
	`¥ötf
(" #Áûuª†: %lu\n", 
d©a
[
i
].
Áûuªs_beˇu£_c⁄ã¡i⁄
);

510 
	`¥ötf
(" MaxÑërõ†: %lu\n", 
d©a
[
i
].
max_ªåõs
);

511 
ab‹ts
 +
d©a
[
i
].
nb_ab‹ts
;

512 
ab‹ts_locked_ªad
 +
d©a
[
i
].
nb_ab‹ts_locked_ªad
;

513 
ab‹ts_locked_wrôe
 +
d©a
[
i
].
nb_ab‹ts_locked_wrôe
;

514 
ab‹ts_vÆid©e_ªad
 +
d©a
[
i
].
nb_ab‹ts_vÆid©e_ªad
;

515 
ab‹ts_vÆid©e_wrôe
 +
d©a
[
i
].
nb_ab‹ts_vÆid©e_wrôe
;

516 
ab‹ts_vÆid©e_commô
 +
d©a
[
i
].
nb_ab‹ts_vÆid©e_commô
;

517 
ab‹ts_övÆid_mem‹y
 +
d©a
[
i
].
nb_ab‹ts_övÆid_mem‹y
;

518 
ab‹ts_doubÀ_wrôe
 +
d©a
[
i
].
nb_ab‹ts_doubÀ_wrôe
;

519 
Áûuªs_beˇu£_c⁄ã¡i⁄
 +
d©a
[
i
].failures_because_contention;

520 
ªads
 +
d©a
[
i
].
nb_c⁄èös
;

521 
ef‰óds
 +
d©a
[
i
].
nb_c⁄èös
 +

522 (
d©a
[
i
].
nb_add
 - d©a[i].
nb_added
) +

523 (
d©a
[
i
].
nb_ªmove
 - d©a[i].
nb_ªmoved
);

524 
upd©es
 +(
d©a
[
i
].
nb_add
 + d©a[i].
nb_ªmove
);

525 
effupds
 +
d©a
[
i
].
nb_ªmoved
 + d©a[i].
nb_added
;

526 
size
 +
d©a
[
i
].
nb_added
 - d©a[i].
nb_ªmoved
;

527 i‡(
max_ªåõs
 < 
d©a
[
i
].max_retries)

528 
max_ªåõs
 = 
d©a
[
i
].max_retries;

530 
	`¥ötf
("Së sizê : %d (ex≥˘ed: %d)\n", 
	`£t_size
(
£t
), 
size
);

531 
	`¥ötf
("Duøti⁄ : %d (ms)\n", 
duøti⁄
);

532 
	`¥ötf
("#tx† : %lu (%‡/ s)\n", 
ªads
 + 
upd©es
,

533 (
ªads
 + 
upd©es
Ë* 1000.0 / 
duøti⁄
);

535 
	`¥ötf
("#readÅxs : ");

536 i‡(
ef„˘ive
) {

537 
	`¥ötf
("%lu (%‡/ s)\n", 
ef‰óds
,Éf‰ód†* 1000.0 / 
duøti⁄
);

538 
	`¥ötf
(" #c⁄èö† : %lu (%‡/ s)\n", 
ªads
,Ñód†* 1000.0 / 
duøti⁄
);

539 } 
	`¥ötf
("%lu (%‡/ s)\n", 
ªads
,Ñód†* 1000.0 / 
duøti⁄
);

541 
	`¥ötf
("#eff. updÑ©e: %‡\n", 100.0 * 
effupds
 / (effupd†+ 
ef‰óds
));

543 
	`¥ötf
("#updateÅxs : ");

544 i‡(
ef„˘ive
) {

545 
	`¥ötf
("%lu (%‡/ s)\n", 
effupds
,Éffupd†* 1000.0 / 
duøti⁄
);

546 
	`¥ötf
(" #updÅrül†: %lu (%‡/ s)\n", 
upd©es
, updates * 1000.0 /

547 
duøti⁄
);

548 } 
	`¥ötf
("%lu (%‡/ s)\n", 
upd©es
, upd©e†* 1000.0 / 
duøti⁄
);

551 
	`¥ötf
("#ab‹t† : %lu (%‡/ s)\n", 
ab‹ts
,

552 
ab‹ts
 * 1000.0 / 
duøti⁄
);

553 
	`¥ötf
(" #lock-∏ : %lu (%‡/ s)\n", 
ab‹ts_locked_ªad
,

554 
ab‹ts_locked_ªad
 * 1000.0 / 
duøti⁄
);

555 
	`¥ötf
(" #lock-w : %lu (%‡/ s)\n", 
ab‹ts_locked_wrôe
,

556 
ab‹ts_locked_wrôe
 * 1000.0 / 
duøti⁄
);

557 
	`¥ötf
(" #vÆ-∏ : %lu (%‡/ s)\n", 
ab‹ts_vÆid©e_ªad
,

558 
ab‹ts_vÆid©e_ªad
 * 1000.0 / 
duøti⁄
);

559 
	`¥ötf
(" #vÆ-w : %lu (%‡/ s)\n", 
ab‹ts_vÆid©e_wrôe
,

560 
ab‹ts_vÆid©e_wrôe
 * 1000.0 / 
duøti⁄
);

561 
	`¥ötf
(" #vÆ-¯ : %lu (%‡/ s)\n", 
ab‹ts_vÆid©e_commô
,

562 
ab‹ts_vÆid©e_commô
 * 1000.0 / 
duøti⁄
);

563 
	`¥ötf
(" #öv-mem : %lu (%‡/ s)\n", 
ab‹ts_övÆid_mem‹y
,

564 
ab‹ts_övÆid_mem‹y
 * 1000.0 / 
duøti⁄
);

565 
	`¥ötf
(" #dup-w : %lu (%‡/ s)\n", 
ab‹ts_doubÀ_wrôe
,

566 
ab‹ts_doubÀ_wrôe
 * 1000.0 / 
duøti⁄
);

567 
	`¥ötf
(" #Áûuª† : %lu\n", 
Áûuªs_beˇu£_c⁄ã¡i⁄
);

568 
	`¥ötf
("MaxÑërõ† : %lu\n", 
max_ªåõs
);

571 
	`£t_dñëe
(
£t
);

574 
	`TM_SHUTDOWN
();

576 
	`‰ì
(
thªads
);

577 
	`‰ì
(
d©a
);

580 
	}
}

	@linkedlists/selfish/fomitchev.c

8 
	~"öt£t.h
"

9 
	~"fomôchev.h
"

12 
	~"mixö.c
"

21 
ölöe
 
	$is_m¨ked
(
node_t
 *
n
) {

22  (Ë((
uöçå_t
Ë
n
 & (uintptr_t) 2);

23 
	}
}

26 
ölöe
 
	$is_Êagged
(
node_t
 *
n
) {

27  (Ë((
uöçå_t
Ë
n
 & (uintptr_t) 1);

28 
	}
}

31 
ölöe
 
node_t
* 
	$gë_right
(
node_t
 *
n
) {

32  (
node_t
 *Ë((
uöçå_t
Ë
n
 & ~(uintptr_t) 3);

33 
	}
}

36 
ölöe
 
node_t
 *
	$∑ck_tu∂e
(
node_t
 *
right
, 
m¨k
, 
Êag
) {

37 
uöçå_t
 
tu∂e
 = (uöçå_tË
	`gë_right
(
right
);

38 i‡(
Êag
Ë
tu∂e
 |(
uöçå_t
) 1;

39 i‡(
m¨k
Ë
tu∂e
 |(
uöçå_t
) 2;

40  (
node_t
 *Ë
tu∂e
;

41 
	}
}

45 
fomôchev_£¨ch‰om
(
vÆ_t
 
vÆ
, 
node_t
 *
cuº_node
,Çode_à**
n1
,Çode_à**
n2
);

46 
fomôchev_£¨ch‰om2
(
vÆ_t
 
vÆ
, 
node_t
 *
cuº_node
,Çode_à**
n1
,Çode_à**
n2
);

47 
fomôchev_hñpm¨ked
(
node_t
 *
¥ev_node
,Çode_à*
dñ_node
);

48 
fomôchev_hñpÊagged
(
node_t
 *
¥ev_node
,Çode_à*
dñ_node
);

49 
fomôchev_åym¨k
(
node_t
 *
dñ_node
);

50 
fomôchev_åyÊag
(
node_t
 *
¥ev_node
,Çode_à*
èrgë_node
,Çode_t** 
ªt_node
);

54 
	$fomôchev_£¨ch‰om
(
vÆ_t
 
vÆ
, 
node_t
 *
cuº_node
,Çode_à**
n1
,Çode_à**
n2
) {

55 
node_t
 *
√xt_node
 = 
	`gë_right
(
cuº_node
->
√xt
);

56 
√xt_node
->
vÆ
 <= val) {

60 
	`is_m¨ked
(
√xt_node
->
√xt
) &&

61 (!
	`is_m¨ked
(
cuº_node
->
√xt
Ë|| 
	`gë_right
(cuº_node->√xtË!
√xt_node
)) {

62 i‡(
	`gë_right
(
cuº_node
->
√xt
Ë=
√xt_node
) {

63 
	`fomôchev_hñpm¨ked
(
cuº_node
, 
√xt_node
);

65 
√xt_node
 = 
	`gë_right
(
cuº_node
->
√xt
);

67 i‡(
√xt_node
->
vÆ
 <= val) {

68 
cuº_node
 = 
√xt_node
;

69 
√xt_node
 = 
	`gë_right
(
cuº_node
->
√xt
);

74 *
n1
 = 
cuº_node
;

75 *
n2
 = 
√xt_node
;

76 
	}
}

80 
	$fomôchev_£¨ch‰om2
(
vÆ_t
 
vÆ
, 
node_t
 *
cuº_node
,Çode_à**
n1
,Çode_à**
n2
) {

81 
node_t
 *
√xt_node
 = 
	`gë_right
(
cuº_node
->
√xt
);

82 
√xt_node
->
vÆ
 < val) {

86 
	`is_m¨ked
(
√xt_node
->
√xt
) &&

87 (!
	`is_m¨ked
(
cuº_node
->
√xt
Ë|| 
	`gë_right
(cuº_node->√xtË!
√xt_node
)) {

88 i‡(
	`gë_right
(
cuº_node
->
√xt
Ë=
√xt_node
) {

89 
	`fomôchev_hñpm¨ked
(
cuº_node
, 
√xt_node
);

91 
√xt_node
 = 
	`gë_right
(
cuº_node
->
√xt
);

93 i‡(
√xt_node
->
vÆ
 < val) {

94 
cuº_node
 = 
√xt_node
;

95 
√xt_node
 = 
	`gë_right
(
cuº_node
->
√xt
);

100 *
n1
 = 
cuº_node
;

101 *
n2
 = 
√xt_node
;

102 
	}
}

107 
	$fomôchev_hñpm¨ked
(
node_t
 *
¥ev_node
,Çode_à*
dñ_node
) {

108 
node_t
 *
√xt_node
 = 
	`gë_right
(
dñ_node
->
√xt
);

109 
node_t
 *
ex≥˘ed
 = 
	`∑ck_tu∂e
(
dñ_node
, 0, 1);

110 
	`©omic_com∑ª_exch™ge_°r⁄g
(

111 &
¥ev_node
->
√xt
,

112 &
ex≥˘ed
,

113 
	`∑ck_tu∂e
(
√xt_node
, 0, 0));

114 
	}
}

119 
	$fomôchev_hñpÊagged
(
node_t
 *
¥ev_node
,Çode_à*
dñ_node
) {

120 
dñ_node
->
backlök
 = 
¥ev_node
;

121 i‡(!
	`is_m¨ked
(
dñ_node
->
√xt
))

122 
	`fomôchev_åym¨k
(
dñ_node
);

123 
	`fomôchev_hñpm¨ked
(
¥ev_node
, 
dñ_node
);

124 
	}
}

128 
	$fomôchev_åym¨k
(
node_t
 *
dñ_node
) {

130 
node_t
 *
√xt_node
 = 
	`gë_right
(
dñ_node
->
√xt
);

131 
node_t
 *
ex≥˘ed
 = 
	`∑ck_tu∂e
(
√xt_node
, 0, 0);

132 
	`©omic_com∑ª_exch™ge_°r⁄g
(

133 &
dñ_node
->
√xt
,

134 &
ex≥˘ed
,

135 
	`∑ck_tu∂e
(
√xt_node
, 1, 0));

136 i‡(
	`is_Êagged
(
ex≥˘ed
)) {

138 
	`fomôchev_hñpÊagged
(
dñ_node
, 
	`gë_right
(
ex≥˘ed
));

140 } !
	`is_m¨ked
(
dñ_node
->
√xt
));

141 
	}
}

151 
	$fomôchev_åyÊag
(
node_t
 *
¥ev_node
,Çode_à*
èrgë_node
,Çode_t** 
ªt_node
) {

153 i‡(
¥ev_node
->
√xt
 =
	`∑ck_tu∂e
(
èrgë_node
, 0, 1)) {

155 *
ªt_node
 = 
¥ev_node
;

160 
node_t
 *
ex≥˘ed
 = 
	`∑ck_tu∂e
(
èrgë_node
, 0, 0);

161 
	`©omic_com∑ª_exch™ge_°r⁄g
(

162 &
¥ev_node
->
√xt
,

163 &
ex≥˘ed
,

164 
	`∑ck_tu∂e
(
èrgë_node
, 0, 1));

166 i‡(
ex≥˘ed
 =
	`∑ck_tu∂e
(
èrgë_node
, 0, 0)) {

168 *
ªt_node
 = 
¥ev_node
;

171 i‡(
ex≥˘ed
 =
	`∑ck_tu∂e
(
èrgë_node
, 0, 1)) {

173 *
ªt_node
 = 
¥ev_node
;

178 
	`is_m¨ked
(
¥ev_node
->
√xt
)) {

179 
¥ev_node
 =Öªv_node->
backlök
;

182 
node_t
 *
dñ_node
;

183 
	`fomôchev_£¨ch‰om2
(
èrgë_node
->
vÆ
, 
¥ev_node
, &¥ev_node, &
dñ_node
);

184 i‡(
dñ_node
 !
èrgë_node
) {

186 *
ªt_node
 = 
NULL
;

190 
	}
}

196 
	$£t_c⁄èös
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
) {

197 
node_t
 *
cuº_node
, *
√xt_node
;

198 
	`fomôchev_£¨ch‰om
(
vÆ
, 
£t
->
hód
, &
cuº_node
, &
√xt_node
);

199 i‡(
cuº_node
->
vÆ
 == val)

202 
	}
}

205 
	$£t_ö£π
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
) {

206 
node_t
 *
¥ev_node
, *
√xt_node
;

207 
	`fomôchev_£¨ch‰om
(
vÆ
, 
£t
->
hód
, &
¥ev_node
, &
√xt_node
);

208 i‡(
¥ev_node
->
vÆ
 == val)

211 
node_t
 *
√wnode
 = 
	`√w_node
(
vÆ
, 
NULL
);

213 
node_t
 *
¥ev_√xt
 = 
¥ev_node
->
√xt
;

214 i‡(
	`is_Êagged
(
¥ev_√xt
)) {

215 
	`fomôchev_hñpÊagged
(
¥ev_node
, 
	`gë_right
(
¥ev_√xt
));

217 
√wnode
->
√xt
 = 
	`∑ck_tu∂e
(
√xt_node
, 0, 0);

218 
node_t
 *
ex≥˘ed
 = 
	`∑ck_tu∂e
(
√xt_node
, 0, 0);

219 
	`©omic_com∑ª_exch™ge_°r⁄g
(

220 &
¥ev_node
->
√xt
,

221 &
ex≥˘ed
,

222 
	`∑ck_tu∂e
(
√wnode
, 0, 0));

223 i‡(
ex≥˘ed
 =
	`∑ck_tu∂e
(
√xt_node
, 0, 0)) {

228 i‡(
	`is_Êagged
(
ex≥˘ed
)) {

229 
	`fomôchev_hñpÊagged
(
¥ev_node
, 
	`gë_right
(
ex≥˘ed
));

232 
	`is_m¨ked
(
¥ev_node
->
√xt
)) {

233 
¥ev_node
 =Öªv_node->
backlök
;

237 
	`fomôchev_£¨ch‰om
(
vÆ
, 
¥ev_node
, &¥ev_node, &
√xt_node
);

238 i‡(
¥ev_node
->
vÆ
 == val) {

243 
	}
}

247 
	$£t_ªmove
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
) {

248 
node_t
 *
¥ev_node
, *
dñ_node
;

249 
	`fomôchev_£¨ch‰om2
(
vÆ
, 
£t
->
hód
, &
¥ev_node
, &
dñ_node
);

250 i‡(
dñ_node
->
vÆ
 != val) {

253 
ªsu…
 = 
	`fomôchev_åyÊag
(
¥ev_node
, 
dñ_node
, &prev_node);

254 i‡(
¥ev_node
 !
NULL
) {

255 
	`fomôchev_hñpÊagged
(
¥ev_node
, 
dñ_node
);

257 i‡(!
ªsu…
) {

262 
	}
}

	@linkedlists/selfish/fomitchev.h

1 
	#ALGONAME
 "Fomôchev & RuµîàlökedÜi°"

	)

3 
	snode
 {

4 
vÆ_t
 
	mvÆ
;

5 
_Atomic
(
node
 *Ë
	m√xt
;

6 
node
 * 
	mbacklök
;

9 
	söt£t
 {

10 
node_t
 *
	mhód
;

	@linkedlists/selfish/intset.h

1 
	~<°dlib.h
>

2 
	~<limôs.h
>

3 
	~<°dio.h
>

4 
	~<°döt.h
>

5 
	~<°d©omic.h
>

6 
	~<±hªad.h
>

8 
	tvÆ_t
;

9 
	#VAL_MIN
 
INT_MIN


	)

10 
	#VAL_MAX
 
INT_MAX


	)

13 
node
 
	tnode_t
;

14 
öt£t
 
	töt£t_t
;

18 
öt£t_t
 *
£t_√w
();

19 
£t_dñëe
(
öt£t_t
 *
£t
);

20 
£t_size
(
öt£t_t
 *
£t
);

21 
node_t
 *
√w_node
(
vÆ
,Çode_à*
√xt
);

22 
£t_¥öt
(
öt£t_t
 *
£t
);

25 
£t_c⁄èös
(
öt£t_t
 *
£t
, 
vÆ
);

26 
£t_ö£π
(
öt£t_t
 *
£t
, 
vÆ
);

27 
£t_ªmove
(
öt£t_t
 *
£t
, 
vÆ
);

30 #ifde‡
MUTEX


31 
±hªad_muãx_t
 
	t±lock_t
;

32 
	#INIT_LOCK
(
lock
Ë
	`±hªad_muãx_öô
((
±hªad_muãx_t
 *Ëlock, 
NULL
);

	)

33 
	#DESTROY_LOCK
(
lock
Ë
	`±hªad_muãx_de°roy
((
±hªad_muãx_t
 *Ëlock)

	)

34 
	#LOCK
(
lock
Ë
	`±hªad_muãx_lock
((
±hªad_muãx_t
 *Ëlock)

	)

35 
	#UNLOCK
(
lock
Ë
	`±hªad_muãx_u∆ock
((
±hªad_muãx_t
 *Ëlock)

	)

37 
±hªad_•ölock_t
 
	t±lock_t
;

38 
	#INIT_LOCK
(
lock
Ë
	`±hªad_•ö_öô
((
±hªad_•ölock_t
 *Ëlock, 
PTHREAD_PROCESS_PRIVATE
);

	)

39 
	#DESTROY_LOCK
(
lock
Ë
	`±hªad_•ö_de°roy
((
±hªad_•ölock_t
 *Ëlock)

	)

40 
	#LOCK
(
lock
Ë
	`±hªad_•ö_lock
((
±hªad_•ölock_t
 *Ëlock)

	)

41 
	#UNLOCK
(
lock
Ë
	`±hªad_•ö_u∆ock
((
±hªad_•ölock_t
 *Ëlock)

	)

	@linkedlists/selfish/mixin.c

7 
öt£t_t
 *
	$£t_√w
() {

8 
öt£t_t
 *
£t
 = 
	`mÆloc
((intset_t));

9 i‡(
NULL
 =
£t
) {

10 
	`≥º‹
("malloc");

11 
	`exô
(1);

14 
node_t
 *
max
 = 
	`√w_node
(
VAL_MAX
, 
NULL
);

15 
node_t
 *
mö
 = 
	`√w_node
(
VAL_MIN
, 
max
);

16 
£t
->
hód
 = 
mö
;

17  
£t
;

18 
	}
}

21 
	$£t_dñëe
(
öt£t_t
 *
£t
) {

22 
node_t
 *
¥ev
, *
cuº
;

24 
cuº
 = 
£t
->
hód
;

25 
NULL
 !
cuº
) {

26 
¥ev
 = 
cuº
;

27 
cuº
 = cuº->
√xt
;

28 
	`‰ì
(
¥ev
);

30 
	`‰ì
(
£t
);

31 
	}
}

35 
	$£t_size
(
öt£t_t
 *
£t
) {

36 
size
 = 0;

37 
node_t
 *
cuº
 = 
£t
->
hód
->
√xt
;

38 
cuº
->
√xt
 !
NULL
) {

39 
size
++;

40 
cuº
 = cuº->
√xt
;

42  
size
;

43 
	}
}

45 
node_t
 *
	$√w_node
(
vÆ_t
 
vÆ
, 
node_t
 *
√xt
) {

46 
node_t
 *
node
 = 
	`ˇŒoc
((node_t), 1);

47 i‡(
NULL
 =
node
) {

48 
	`≥º‹
("malloc");

49 
	`exô
(1);

51 
node
->
vÆ
 = val;

52 
node
->
√xt
 =Çext;

53  
node
;

54 
	}
}

57 
	$£t_¥öt
(
öt£t_t
 *
£t
) {

58 
node_t
 *
cuº
 = 
£t
->
hód
;

59 
cuº
 !
NULL
) {

60 
	`¥ötf
("%d", 
cuº
->
vÆ
);

61 i‡(
cuº
->
√xt
 !
NULL
)

62 
	`¥ötf
(" -> ");

63 
cuº
 = cuº->
√xt
;

65 
	`¥ötf
("\n");

66 
	}
}

	@linkedlists/selfish/selfish.c

12 
	~"öt£t.h
"

13 
	~"fomôchev.h
"

16 
	~"mixö.c
"

25 
ölöe
 
	$is_m¨ked
(
node_t
 *
n
) {

26  (Ë((
uöçå_t
Ë
n
 & (uintptr_t) 2);

27 
	}
}

30 
ölöe
 
	$is_Êagged
(
node_t
 *
n
) {

31  (Ë((
uöçå_t
Ë
n
 & (uintptr_t) 1);

32 
	}
}

35 
ölöe
 
node_t
* 
	$gë_right
(
node_t
 *
n
) {

36  (
node_t
 *Ë((
uöçå_t
Ë
n
 & ~(uintptr_t) 3);

37 
	}
}

40 
ölöe
 
node_t
 *
	$∑ck_tu∂e
(
node_t
 *
right
, 
m¨k
, 
Êag
) {

41 
uöçå_t
 
tu∂e
 = (uöçå_tË
	`gë_right
(
right
);

42 i‡(
Êag
Ë
tu∂e
 |(
uöçå_t
) 1;

43 i‡(
m¨k
Ë
tu∂e
 |(
uöçå_t
) 2;

44  (
node_t
 *Ë
tu∂e
;

45 
	}
}

49 
fomôchev_£¨ch‰om
(
vÆ_t
 
vÆ
, 
node_t
 *
cuº_node
,Çode_à**
n1
,Çode_à**
n2
);

50 
fomôchev_£¨ch‰om2
(
vÆ_t
 
vÆ
, 
node_t
 *
cuº_node
,Çode_à**
n1
,Çode_à**
n2
);

51 
fomôchev_hñpm¨ked
(
node_t
 *
¥ev_node
,Çode_à*
dñ_node
);

52 
fomôchev_hñpÊagged
(
node_t
 *
¥ev_node
,Çode_à*
dñ_node
);

53 
fomôchev_åym¨k
(
node_t
 *
dñ_node
);

54 
fomôchev_åyÊag
(
node_t
 *
¥ev_node
,Çode_à*
èrgë_node
,Çode_t** 
ªt_node
);

58 
	$fomôchev_£¨ch‰om
(
vÆ_t
 
vÆ
, 
node_t
 *
cuº_node
,Çode_à**
n1
,Çode_à**
n2
) {

59 
node_t
 *
√xt_node
 = 
	`gë_right
(
cuº_node
->
√xt
);

60 
√xt_node
->
vÆ
 <= val) {

64 
	`is_m¨ked
(
√xt_node
->
√xt
) &&

65 (!
	`is_m¨ked
(
cuº_node
->
√xt
Ë|| 
	`gë_right
(cuº_node->√xtË!
√xt_node
)) {

66 i‡(
	`gë_right
(
cuº_node
->
√xt
Ë=
√xt_node
) {

67 
	`fomôchev_hñpm¨ked
(
cuº_node
, 
√xt_node
);

69 
√xt_node
 = 
	`gë_right
(
cuº_node
->
√xt
);

71 i‡(
√xt_node
->
vÆ
 <= val) {

72 
cuº_node
 = 
√xt_node
;

73 
√xt_node
 = 
	`gë_right
(
cuº_node
->
√xt
);

78 *
n1
 = 
cuº_node
;

79 *
n2
 = 
√xt_node
;

80 
	}
}

84 
	$fomôchev_£¨ch‰om2
(
vÆ_t
 
vÆ
, 
node_t
 *
cuº_node
,Çode_à**
n1
,Çode_à**
n2
) {

85 
node_t
 *
√xt_node
 = 
	`gë_right
(
cuº_node
->
√xt
);

86 
√xt_node
->
vÆ
 < val) {

90 
	`is_m¨ked
(
√xt_node
->
√xt
) &&

91 (!
	`is_m¨ked
(
cuº_node
->
√xt
Ë|| 
	`gë_right
(cuº_node->√xtË!
√xt_node
)) {

92 i‡(
	`gë_right
(
cuº_node
->
√xt
Ë=
√xt_node
) {

93 
	`fomôchev_hñpm¨ked
(
cuº_node
, 
√xt_node
);

95 
√xt_node
 = 
	`gë_right
(
cuº_node
->
√xt
);

97 i‡(
√xt_node
->
vÆ
 < val) {

98 
cuº_node
 = 
√xt_node
;

99 
√xt_node
 = 
	`gë_right
(
cuº_node
->
√xt
);

104 *
n1
 = 
cuº_node
;

105 *
n2
 = 
√xt_node
;

106 
	}
}

111 
	$fomôchev_hñpm¨ked
(
node_t
 *
¥ev_node
,Çode_à*
dñ_node
) {

112 
node_t
 *
√xt_node
 = 
	`gë_right
(
dñ_node
->
√xt
);

113 
node_t
 *
ex≥˘ed
 = 
	`∑ck_tu∂e
(
dñ_node
, 0, 1);

114 
	`©omic_com∑ª_exch™ge_°r⁄g
(

115 &
¥ev_node
->
√xt
,

116 &
ex≥˘ed
,

117 
	`∑ck_tu∂e
(
√xt_node
, 0, 0));

118 
	}
}

123 
	$fomôchev_hñpÊagged
(
node_t
 *
¥ev_node
,Çode_à*
dñ_node
) {

124 
dñ_node
->
backlök
 = 
¥ev_node
;

125 i‡(!
	`is_m¨ked
(
dñ_node
->
√xt
))

126 
	`fomôchev_åym¨k
(
dñ_node
);

127 
	`fomôchev_hñpm¨ked
(
¥ev_node
, 
dñ_node
);

128 
	}
}

132 
	$fomôchev_åym¨k
(
node_t
 *
dñ_node
) {

134 
node_t
 *
√xt_node
 = 
	`gë_right
(
dñ_node
->
√xt
);

135 
node_t
 *
ex≥˘ed
 = 
	`∑ck_tu∂e
(
√xt_node
, 0, 0);

136 
	`©omic_com∑ª_exch™ge_°r⁄g
(

137 &
dñ_node
->
√xt
,

138 &
ex≥˘ed
,

139 
	`∑ck_tu∂e
(
√xt_node
, 1, 0));

140 i‡(
	`is_Êagged
(
ex≥˘ed
)) {

142 
	`fomôchev_hñpÊagged
(
dñ_node
, 
	`gë_right
(
ex≥˘ed
));

144 } !
	`is_m¨ked
(
dñ_node
->
√xt
));

145 
	}
}

155 
	$fomôchev_åyÊag
(
node_t
 *
¥ev_node
,Çode_à*
èrgë_node
,Çode_t** 
ªt_node
) {

157 i‡(
¥ev_node
->
√xt
 =
	`∑ck_tu∂e
(
èrgë_node
, 0, 1)) {

159 *
ªt_node
 = 
¥ev_node
;

164 
node_t
 *
ex≥˘ed
 = 
	`∑ck_tu∂e
(
èrgë_node
, 0, 0);

165 
	`©omic_com∑ª_exch™ge_°r⁄g
(

166 &
¥ev_node
->
√xt
,

167 &
ex≥˘ed
,

168 
	`∑ck_tu∂e
(
èrgë_node
, 0, 1));

170 i‡(
ex≥˘ed
 =
	`∑ck_tu∂e
(
èrgë_node
, 0, 0)) {

172 *
ªt_node
 = 
¥ev_node
;

175 i‡(
ex≥˘ed
 =
	`∑ck_tu∂e
(
èrgë_node
, 0, 1)) {

177 *
ªt_node
 = 
¥ev_node
;

182 
	`is_m¨ked
(
¥ev_node
->
√xt
)) {

183 
¥ev_node
 =Öªv_node->
backlök
;

186 
node_t
 *
dñ_node
;

187 
	`fomôchev_£¨ch‰om2
(
èrgë_node
->
vÆ
, 
¥ev_node
, &¥ev_node, &
dñ_node
);

188 i‡(
dñ_node
 !
èrgë_node
) {

190 *
ªt_node
 = 
NULL
;

194 
	}
}

200 
	$£t_c⁄èös
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
) {

201 
node_t
 *
cuº
 = 
£t
->
hód
;

202 
m¨ked
 = 0;

203 
cuº
->
vÆ
 < val) {

204 
node_t
 *
cuº_√xt
 = 
cuº
->
√xt
;

205 
m¨ked
 = 
	`is_m¨ked
(
cuº_√xt
);

206 
cuº
 = 
	`gë_right
(
cuº_√xt
);

208  (
cuº
->
vÆ
 =vÆ && !
m¨ked
);

209 
	}
}

213 
	$£t_ö£π
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
) {

214 
node_t
 *
¥ev_node
, *
√xt_node
;

215 
	`fomôchev_£¨ch‰om
(
vÆ
, 
£t
->
hód
, &
¥ev_node
, &
√xt_node
);

216 i‡(
¥ev_node
->
vÆ
 == val)

219 
node_t
 *
√wnode
 = 
	`√w_node
(
vÆ
, 
NULL
);

221 
node_t
 *
¥ev_√xt
 = 
¥ev_node
->
√xt
;

222 i‡(
	`is_Êagged
(
¥ev_√xt
)) {

223 
	`fomôchev_hñpÊagged
(
¥ev_node
, 
	`gë_right
(
¥ev_√xt
));

225 
√wnode
->
√xt
 = 
	`∑ck_tu∂e
(
√xt_node
, 0, 0);

226 
node_t
 *
ex≥˘ed
 = 
	`∑ck_tu∂e
(
√xt_node
, 0, 0);

227 
	`©omic_com∑ª_exch™ge_°r⁄g
(

228 &
¥ev_node
->
√xt
,

229 &
ex≥˘ed
,

230 
	`∑ck_tu∂e
(
√wnode
, 0, 0));

231 i‡(
ex≥˘ed
 =
	`∑ck_tu∂e
(
√xt_node
, 0, 0)) {

236 i‡(
	`is_Êagged
(
ex≥˘ed
)) {

237 
	`fomôchev_hñpÊagged
(
¥ev_node
, 
	`gë_right
(
ex≥˘ed
));

240 
	`is_m¨ked
(
¥ev_node
->
√xt
)) {

241 
¥ev_node
 =Öªv_node->
backlök
;

245 
	`fomôchev_£¨ch‰om
(
vÆ
, 
¥ev_node
, &¥ev_node, &
√xt_node
);

246 i‡(
¥ev_node
->
vÆ
 == val) {

251 
	}
}

255 
	$£t_ªmove
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
) {

256 
node_t
 *
¥ev_node
, *
dñ_node
;

257 
	`fomôchev_£¨ch‰om2
(
vÆ
, 
£t
->
hód
, &
¥ev_node
, &
dñ_node
);

258 i‡(
dñ_node
->
vÆ
 != val) {

261 
ªsu…
 = 
	`fomôchev_åyÊag
(
¥ev_node
, 
dñ_node
, &prev_node);

262 i‡(
¥ev_node
 !
NULL
) {

263 
	`fomôchev_hñpÊagged
(
¥ev_node
, 
dñ_node
);

265 i‡(!
ªsu…
) {

270 
	}
}

	@linkedlists/selfish/selfish.h

1 
	#ALGONAME
 "Fomôchev & RuµîàlökedÜi° wôh waô-‰ì c⁄èös"

	)

3 
	snode
 {

4 
vÆ_t
 
	mvÆ
;

5 
_Atomic
(
node
 *Ë
	m√xt
;

6 
node
 * 
	mbacklök
;

9 
	söt£t
 {

10 
node_t
 *
	mhód
;

	@linkedlists/selfish/test.c

24 
	~<as£π.h
>

25 
	~<gë›t.h
>

26 
	~<limôs.h
>

27 
	~<±hªad.h
>

28 
	~<sig«l.h
>

29 
	~<°dlib.h
>

30 
	~<°dio.h
>

31 
	~<sys/time.h
>

32 
	~<time.h
>

33 
	~<°döt.h
>

34 
	~<°d©omic.h
>

36 
	~"öt£t.h
"

38 #i‡
deföed
 
SEQUENTIAL


39 
	~"£quítül.h
"

40 #ñi‡
deföed
 
HARRIS


41 
	~"h¨ris.h
"

42 #ñi‡
deföed
 
VERSIONED


43 
	~"vîsi⁄ed.h
"

44 #ñi‡
deföed
 
FOMITCHEV


45 
	~"fomôchev.h
"

46 #ñi‡
deföed
 
LAZY


47 
	~"œzy.h
"

48 #ñi‡
deföed
 
COUPLING


49 
	~"cou∂ög.h
"

50 #ñi‡
deföed
 
UNIVERSAL


51 
	~"univîßl.h
"

52 #ñi‡
deföed
 
SELFISH


53 
	~"£lfish.h
"

58 
	#DEFAULT_DURATION
 10000

	)

59 
	#DEFAULT_INITIAL
 256

	)

60 
	#DEFAULT_NB_THREADS
 1

	)

61 
	#DEFAULT_RANGE
 0x7FFFFFFF

	)

62 
	#DEFAULT_BIAS_RANGE
 (-1)

	)

63 
	#DEFAULT_BIAS_OFFSET
 (-1)

	)

64 
	#DEFAULT_SEED
 0

	)

65 
	#DEFAULT_UPDATE
 20

	)

66 
	#DEFAULT_ELASTICITY
 4

	)

67 
	#DEFAULT_LOCKTYPE
 2

	)

68 
	#DEFAULT_ALTERNATE
 0

	)

69 
	#DEFAULT_EFFECTIVE
 1

	)

70 
	#XSTR
(
s
Ë
	`STR
(s)

	)

71 
	#STR
(
s
Ë#s

	)

74 
	$_Atomic
(Ë
°›
;

76 
	sb¨rõr
 {

77 
±hªad_c⁄d_t
 
com∂ëe
;

78 
±hªad_muãx_t
 
muãx
;

79 
cou¡
;

80 
¸ossög
;

81 } 
	tb¨rõr_t
;

83 
	$b¨rõr_öô
(
b¨rõr_t
 *
b
, 
n
)

85 
	`±hªad_c⁄d_öô
(&
b
->
com∂ëe
, 
NULL
);

86 
	`±hªad_muãx_öô
(&
b
->
muãx
, 
NULL
);

87 
b
->
cou¡
 = 
n
;

88 
b
->
¸ossög
 = 0;

89 
	}
}

91 
	$b¨rõr_¸oss
(
b¨rõr_t
 *
b
)

93 
	`±hªad_muãx_lock
(&
b
->
muãx
);

95 
b
->
¸ossög
++;

97 i‡(
b
->
¸ossög
 < b->
cou¡
) {

98 
	`±hªad_c⁄d_waô
(&
b
->
com∂ëe
, &b->
muãx
);

100 
	`±hªad_c⁄d_brﬂdˇ°
(&
b
->
com∂ëe
);

102 
b
->
¸ossög
 = 0;

104 
	`±hªad_muãx_u∆ock
(&
b
->
muãx
);

105 
	}
}

115 
ölöe
 
	$ønd_ønge
(
r
) {

116 
m
 = 2147483647;

117 
d
, 
v
 = 0;

120 
d
 = (
m
 > 
r
 ?Ñ : m);

121 
v
 +1 + ()(
d
 * (()
	`ønd
()/(()(
m
)+1.0)));

122 
r
 -
m
;

123 } 
r
 > 0);

124  
v
;

125 
	}
}

126 
ønd_ønge
(
r
);

129 
ölöe
 
	$ønd_ønge_ª
(*
£ed
, 
r
) {

130 
m
 = 2147483647;

131 
d
, 
v
 = 0;

134 
d
 = (
m
 > 
r
 ?Ñ : m);

135 
v
 +1 + ()(
d
 * (()
	`ønd_r
(
£ed
)/(()(
m
)+1.0)));

136 
r
 -
m
;

137 } 
r
 > 0);

138  
v
;

139 
	}
}

140 
ønd_ønge_ª
(*
£ed
, 
r
);

143 
	sthªad_d©a
 {

144 
vÆ_t
 
	mfú°
;

145 
	mønge
;

146 
	mbüs_íabÀd
;

147 
	mbüs_ønge
;

148 
	mbüs_off£t
;

149 
	mupd©e
;

150 
	munô_tx
;

151 
	mÆã∫©e
;

152 
	mef„˘ive
;

153 
	mnb_add
;

154 
	mnb_added
;

155 
	mnb_ªmove
;

156 
	mnb_ªmoved
;

157 
	mnb_c⁄èös
;

158 
	mnb_found
;

159 
	mnb_ab‹ts
;

160 
	mnb_ab‹ts_locked_ªad
;

161 
	mnb_ab‹ts_locked_wrôe
;

162 
	mnb_ab‹ts_vÆid©e_ªad
;

163 
	mnb_ab‹ts_vÆid©e_wrôe
;

164 
	mnb_ab‹ts_vÆid©e_commô
;

165 
	mnb_ab‹ts_övÆid_mem‹y
;

166 
	mnb_ab‹ts_doubÀ_wrôe
;

167 
	mmax_ªåõs
;

168 
	m£ed
;

169 
öt£t_t
 *
	m£t
;

170 
b¨rõr_t
 *
	mb¨rõr
;

171 
	mÁûuªs_beˇu£_c⁄ã¡i⁄
;

172 } 
	tthªad_d©a_t
;

174 *
	$ã°
(*
d©a
) {

176 
thªad_d©a_t
 
d
 = *—hªad_d©a_à*)
d©a
;

179 
	`b¨rõr_¸oss
(
d
.
b¨rõr
);

183 
œ°
 = -1;

187 i‡(
d
.
büs_íabÀd
)

188 
œ°
 = 
d
.
büs_off£t
;

190 
	`©omic_lﬂd
(&
°›
) == 0) {

192 
do_upd©e
;

193 i‡(
d
.
ef„˘ive
)

194 
do_upd©e
 = (100 * (
d
.
nb_added
 + d.
nb_ªmoved
)Ë< (d.
upd©e
 * (d.
nb_add
 + d.
nb_ªmove
 + d.
nb_c⁄èös
));

196 
do_upd©e
 = 
	`ønd_ønge_ª
(&
d
.
£ed
, 100Ë- 1 < d.
upd©e
;

200 
vÆue
 = 
	`ønd_ønge_ª
(&
d
.
£ed
, d.
ønge
);

203 i‡(
d
.
büs_íabÀd
) {

204 
vÆue
 = 
d
.
büs_off£t
 + 
	`ønd_ønge_ª
(&d.
£ed
, d.
büs_ønge
) - 1;

205 
œ°
 = (
	`ønd_ønge_ª
(&
d
.
£ed
, 2Ë=1Ë? -1 : 
vÆue
;

208 i‡(
do_upd©e
 && 
œ°
 < 0) {

210 i‡(
	`£t_ö£π
(
d
.
£t
, 
vÆue
)) {

211 
d
.
nb_added
++;

212 
œ°
 = 
vÆue
;

214 
d
.
nb_add
++;

215 } i‡(
do_upd©e
 && 
œ°
 >= 0) {

219 i‡(
d
.
Æã∫©e
) {

220 i‡(
	`£t_ªmove
(
d
.
£t
, 
œ°
))

221 
d
.
nb_ªmoved
++;

222 
œ°
 = -1;

224 i‡(
	`£t_ªmove
(
d
.
£t
, 
vÆue
)) {

225 
d
.
nb_ªmoved
++;

226 
œ°
 = -1;

229 
d
.
nb_ªmove
++;

232 i‡(
d
.
Æã∫©e
) {

233 i‡(
d
.
upd©e
 == 0) {

234 i‡(
œ°
 < 0)

235 
œ°
 = 
vÆue
 = 
d
.
fú°
;

237 
œ°
 = -1;

239 i‡(
œ°
 >= 0)

240 
vÆue
 = 
œ°
;

244 i‡(
	`£t_c⁄èös
(
d
.
£t
, 
vÆue
))

245 
d
.
nb_found
++;

246 
d
.
nb_c⁄èös
++;

250 *(
thªad_d©a_t
 *)
d©a
 = 
d
;

252  
NULL
;

253 
	}
}

255 
	$maö
(
¨gc
, **
¨gv
) {

256 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

258 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

259 {"duøti⁄", 
ªquúed_¨gumít
, 
NULL
, 'd'},

260 {"öôül-size", 
ªquúed_¨gumít
, 
NULL
, 'i'},

261 {"thªad-num", 
ªquúed_¨gumít
, 
NULL
, 't'},

262 {"ønge", 
ªquúed_¨gumít
, 
NULL
, 'r'},

263 {"£ed", 
ªquúed_¨gumít
, 
NULL
, 'S'},

264 {"upd©e-øã", 
ªquúed_¨gumít
, 
NULL
, 'u'},

265 {"büs-ønge", 
ªquúed_¨gumít
, 
NULL
, 'b'},

266 {"büs-off£t", 
ªquúed_¨gumít
, 
NULL
, 'u'},

267 {"ña°icôy", 
ªquúed_¨gumít
, 
NULL
, 'x'},

268 {
NULL
, 0, NULL, 0}

271 
öt£t_t
 *
£t
;

272 
i
, 
c
, 
size
;

273 
vÆ_t
 
œ°
 = 0;

274 
vÆ_t
 
vÆ
 = 0;

275 
ªads
, 
ef‰óds
, 
upd©es
, 
effupds
, 
ab‹ts
, 
ab‹ts_locked_ªad
,

276 
ab‹ts_locked_wrôe
, 
ab‹ts_vÆid©e_ªad
, 
ab‹ts_vÆid©e_wrôe
,

277 
ab‹ts_vÆid©e_commô
, 
ab‹ts_övÆid_mem‹y
, 
ab‹ts_doubÀ_wrôe
,

278 
max_ªåõs
, 
Áûuªs_beˇu£_c⁄ã¡i⁄
;

279 
thªad_d©a_t
 *
d©a
;

280 
±hªad_t
 *
thªads
;

281 
±hªad_©å_t
 
©å
;

282 
b¨rõr_t
 
b¨rõr
;

283 
timevÆ
 
°¨t
, 
íd
;

284 
time•ec
 
timeout
;

285 
duøti⁄
 = 
DEFAULT_DURATION
;

286 
öôül
 = 
DEFAULT_INITIAL
;

287 
nb_thªads
 = 
DEFAULT_NB_THREADS
;

288 
ønge
 = 
DEFAULT_RANGE
;

289 
büs_ønge
 = 
DEFAULT_BIAS_RANGE
;

290 
büs_off£t
 = 
DEFAULT_BIAS_OFFSET
;

291 
büs_íabÀd
 = 0;

292 
£ed
 = 
DEFAULT_SEED
;

293 
upd©e
 = 
DEFAULT_UPDATE
;

294 
unô_tx
 = 
DEFAULT_ELASTICITY
;

295 
Æã∫©e
 = 
DEFAULT_ALTERNATE
;

296 
ef„˘ive
 = 
DEFAULT_EFFECTIVE
;

297 
sig£t_t
 
block_£t
;

300 
i
 = 0;

301 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "hAf:d:i:t:r:S:u:b:B:x:", 
l⁄g_›ti⁄s
, &
i
);

303 if(
c
 == -1)

306 if(
c
 =0 && 
l⁄g_›ti⁄s
[
i
].
Êag
 == 0)

307 
c
 = 
l⁄g_›ti⁄s
[
i
].
vÆ
;

309 
c
) {

314 
	`¥ötf
("intset -- STM stressÅest "

323 " -A, --Æã∫©ê(deÁu…="
	`XSTR
(
DEFAULT_ALTERNATE
)")\n"

326 " upd©êtx†mu°Éf„˘ivñy wrôê(0Òrül, 1Ûf„˘ive, deÁu…=" 
	`XSTR
(
DEFAULT_EFFECTIVE
) ")\n"

328 " Te° duøti⁄ i¿mûli£c⁄d†(0=öföôe, deÁu…=" 
	`XSTR
(
DEFAULT_DURATION
) ")\n"

330 " Numbî o‡ñemít†tÿö£π bef‹êã° (deÁu…=" 
	`XSTR
(
DEFAULT_INITIAL
) ")\n"

332 " Numbî o‡thªad†(deÁu…=" 
	`XSTR
(
DEFAULT_NB_THREADS
) ")\n"

334 " R™gêo‡öãgî vÆue†ö£πed i¿£à(deÁu…=" 
	`XSTR
(
DEFAULT_RANGE
) ")\n"

336 " RNG sìd (0Òime-ba£d, deÁu…=" 
	`XSTR
(
DEFAULT_SEED
) ")\n"

338 " Pî˚¡agêo‡upd©êå™ß˘i⁄†(deÁu…=" 
	`XSTR
(
DEFAULT_UPDATE
) ")\n"

353 
	`exô
(0);

355 
Æã∫©e
 = 1;

358 
ef„˘ive
 = 
	`©oi
(
›èrg
);

361 
duøti⁄
 = 
	`©oi
(
›èrg
);

364 
öôül
 = 
	`©oi
(
›èrg
);

367 
nb_thªads
 = 
	`©oi
(
›èrg
);

370 
ønge
 = 
	`©ﬁ
(
›èrg
);

373 
£ed
 = 
	`©oi
(
›èrg
);

376 
upd©e
 = 
	`©oi
(
›èrg
);

379 
büs_ønge
 = 
	`©ﬁ
(
›èrg
);

382 
büs_off£t
 = 
	`©ﬁ
(
›èrg
);

385 
unô_tx
 = 
	`©oi
(
›èrg
);

388 
	`¥ötf
("Use -h or --help for help\n");

389 
	`exô
(0);

391 
	`exô
(1);

395 
	`as£π
(
duøti⁄
 >= 0);

396 
	`as£π
(
öôül
 >= 0);

397 
	`as£π
(
nb_thªads
 > 0);

398 
	`as£π
(
ønge
 > 0 &&Ñ™gê>
öôül
);

399 
	`as£π
(
upd©e
 >= 0 && update <= 100);

400 i‡(
büs_ønge
 !
DEFAULT_BIAS_RANGE
 || 
büs_off£t
 !
DEFAULT_BIAS_OFFSET
) {

401 
büs_íabÀd
 = 1;

402 
	`as£π
(
büs_ønge
 >= 0);

403 
	`as£π
(
büs_off£t
 > 0);

406 
	`¥ötf
("BíchÅy≥ : " 
ALGONAME
 "\n");

407 
	`¥ötf
("Duøti⁄ : %d\n", 
duøti⁄
);

408 
	`¥ötf
("Inôü»sizê: %d\n", 
öôül
);

409 
	`¥ötf
("NbÅhªad† : %d\n", 
nb_thªads
);

410 
	`¥ötf
("VÆuêøngê : %ld\n", 
ønge
);

411 i‡(
büs_íabÀd
) {

412 
	`¥ötf
("Bü£dÑ™ge: [%ld, %ld)\n", 
büs_off£t
, büs_off£t+
büs_ønge
);

414 
	`¥ötf
("Sìd : %d\n", 
£ed
);

415 
	`¥ötf
("Upd©êøã : %d\n", 
upd©e
);

416 
	`¥ötf
("Eœ°icôy : %d\n", 
unô_tx
);

417 
	`¥ötf
("A…î«ã : %d\n", 
Æã∫©e
);

418 
	`¥ötf
("Ef„˘ivê : %d\n", 
ef„˘ive
);

419 
	`¥ötf
("Type sizes : int=%d/long=%d/ptr=%d/word=%d\n",

423 ()(
uöçå_t
));

424 
	`¥ötf
("Nodêsizê : %d\n", ()(
node_t
));

426 
timeout
.
tv_£c
 = 
duøti⁄
 / 1000;

427 
timeout
.
tv_n£c
 = (
duøti⁄
 % 1000) * 1000000;

429 i‡((
d©a
 = (
thªad_d©a_t
 *)
	`mÆloc
(
nb_thªads
 * —hªad_d©a_t))Ë=
NULL
) {

430 
	`≥º‹
("malloc");

431 
	`exô
(1);

433 i‡((
thªads
 = (
±hªad_t
 *)
	`mÆloc
(
nb_thªads
 * ’thªad_t))Ë=
NULL
) {

434 
	`≥º‹
("malloc");

435 
	`exô
(1);

438 i‡(
£ed
 == 0)

439 
	`§™d
(()
	`time
(0));

441 
	`§™d
(
£ed
);

443 
£t
 = 
	`£t_√w
();

444 
°›
 = 0;

447 
	`¥ötf
("Addög %dÉ¡rõ†tÿ£t\n", 
öôül
);

448 
i
 = 0;

449 
i
 < 
öôül
) {

450 
vÆ
 = 
	`ønd_ønge
(
ønge
);

451 i‡(
	`£t_ö£π
(
£t
, 
vÆ
)) {

452 
œ°
 = 
vÆ
;

453 
i
++;

456 
size
 = 
	`£t_size
(
£t
);

457 
	`¥ötf
("Së sizê : %d\n", 
size
);

460 
	`b¨rõr_öô
(&
b¨rõr
, 
nb_thªads
 + 1);

461 
	`±hªad_©å_öô
(&
©å
);

462 
	`±hªad_©å_£tdëach°©e
(&
©å
, 
PTHREAD_CREATE_JOINABLE
);

463 
i
 = 0; i < 
nb_thªads
; i++) {

464 
	`¥ötf
("Cª©ögÅhªad %d\n", 
i
);

465 
d©a
[
i
].
fú°
 = 
œ°
;

466 
d©a
[
i
].
büs_íabÀd
 = bias_enabled;

467 
d©a
[
i
].
büs_ønge
 = bias_range;

468 
d©a
[
i
].
büs_off£t
 = bias_offset;

469 
d©a
[
i
].
ønge
 =Ñange;

470 
d©a
[
i
].
upd©e
 = update;

471 
d©a
[
i
].
unô_tx
 = unit_tx;

472 
d©a
[
i
].
Æã∫©e
 =álternate;

473 
d©a
[
i
].
ef„˘ive
 =Éffective;

474 
d©a
[
i
].
nb_add
 = 0;

475 
d©a
[
i
].
nb_added
 = 0;

476 
d©a
[
i
].
nb_ªmove
 = 0;

477 
d©a
[
i
].
nb_ªmoved
 = 0;

478 
d©a
[
i
].
nb_c⁄èös
 = 0;

479 
d©a
[
i
].
nb_found
 = 0;

480 
d©a
[
i
].
nb_ab‹ts
 = 0;

481 
d©a
[
i
].
nb_ab‹ts_locked_ªad
 = 0;

482 
d©a
[
i
].
nb_ab‹ts_locked_wrôe
 = 0;

483 
d©a
[
i
].
nb_ab‹ts_vÆid©e_ªad
 = 0;

484 
d©a
[
i
].
nb_ab‹ts_vÆid©e_wrôe
 = 0;

485 
d©a
[
i
].
nb_ab‹ts_vÆid©e_commô
 = 0;

486 
d©a
[
i
].
nb_ab‹ts_övÆid_mem‹y
 = 0;

487 
d©a
[
i
].
nb_ab‹ts_doubÀ_wrôe
 = 0;

488 
d©a
[
i
].
max_ªåõs
 = 0;

489 
d©a
[
i
].
£ed
 = 
	`ønd
();

490 
d©a
[
i
].
£t
 = set;

491 
d©a
[
i
].
b¨rõr
 = &barrier;

492 
d©a
[
i
].
Áûuªs_beˇu£_c⁄ã¡i⁄
 = 0;

493 i‡(
	`±hªad_¸óã
(&
thªads
[
i
], &
©å
, 
ã°
, (*)(&
d©a
[i])) != 0) {

494 
	`Ârötf
(
°dîr
, "Error creatingÅhread\n");

495 
	`exô
(1);

498 
	`±hªad_©å_de°roy
(&
©å
);

501 
	`b¨rõr_¸oss
(&
b¨rõr
);

503 
	`¥ötf
("STARTING...\n");

504 
	`gëtimeofday
(&
°¨t
, 
NULL
);

505 i‡(
duøti⁄
 > 0) {

506 
	`«no¶ìp
(&
timeout
, 
NULL
);

508 
	`sigem±y£t
(&
block_£t
);

509 
	`sigsu•íd
(&
block_£t
);

519 
	`©omic_°‹e
(&
°›
, 1);

521 
	`gëtimeofday
(&
íd
, 
NULL
);

522 
	`¥ötf
("STOPPING...\n");

525 
i
 = 0; i < 
nb_thªads
; i++) {

526 i‡(
	`±hªad_joö
(
thªads
[
i
], 
NULL
) != 0) {

527 
	`Ârötf
(
°dîr
, "Error waiting forÅhread completion\n");

528 
	`exô
(1);

532 
duøti⁄
 = (
íd
.
tv_£c
 * 1000 +Énd.
tv_u£c
 / 1000Ë- (
°¨t
.tv_sec * 1000 + start.tv_usec / 1000);

533 
ab‹ts
 = 0;

534 
ab‹ts_locked_ªad
 = 0;

535 
ab‹ts_locked_wrôe
 = 0;

536 
ab‹ts_vÆid©e_ªad
 = 0;

537 
ab‹ts_vÆid©e_wrôe
 = 0;

538 
ab‹ts_vÆid©e_commô
 = 0;

539 
ab‹ts_övÆid_mem‹y
 = 0;

540 
ab‹ts_doubÀ_wrôe
 = 0;

541 
Áûuªs_beˇu£_c⁄ã¡i⁄
 = 0;

542 
ªads
 = 0;

543 
ef‰óds
 = 0;

544 
upd©es
 = 0;

545 
effupds
 = 0;

546 
max_ªåõs
 = 0;

547 
i
 = 0; i < 
nb_thªads
; i++) {

548 
	`¥ötf
("Thªad %d\n", 
i
);

549 
	`¥ötf
(" #add : %lu\n", 
d©a
[
i
].
nb_add
);

550 
	`¥ötf
(" #added : %lu\n", 
d©a
[
i
].
nb_added
);

551 
	`¥ötf
(" #ªmovê : %lu\n", 
d©a
[
i
].
nb_ªmove
);

552 
	`¥ötf
(" #ªmoved : %lu\n", 
d©a
[
i
].
nb_ªmoved
);

553 
	`¥ötf
(" #c⁄èö† : %lu\n", 
d©a
[
i
].
nb_c⁄èös
);

554 
	`¥ötf
(" #found : %lu\n", 
d©a
[
i
].
nb_found
);

555 
	`¥ötf
(" #ab‹t† : %lu\n", 
d©a
[
i
].
nb_ab‹ts
);

556 
	`¥ötf
(" #lock-∏ : %lu\n", 
d©a
[
i
].
nb_ab‹ts_locked_ªad
);

557 
	`¥ötf
(" #lock-w : %lu\n", 
d©a
[
i
].
nb_ab‹ts_locked_wrôe
);

558 
	`¥ötf
(" #vÆ-∏ : %lu\n", 
d©a
[
i
].
nb_ab‹ts_vÆid©e_ªad
);

559 
	`¥ötf
(" #vÆ-w : %lu\n", 
d©a
[
i
].
nb_ab‹ts_vÆid©e_wrôe
);

560 
	`¥ötf
(" #vÆ-¯ : %lu\n", 
d©a
[
i
].
nb_ab‹ts_vÆid©e_commô
);

561 
	`¥ötf
(" #öv-mem : %lu\n", 
d©a
[
i
].
nb_ab‹ts_övÆid_mem‹y
);

562 
	`¥ötf
(" #öv-mem : %lu\n", 
d©a
[
i
].
nb_ab‹ts_doubÀ_wrôe
);

563 
	`¥ötf
(" #Áûuª†: %lu\n", 
d©a
[
i
].
Áûuªs_beˇu£_c⁄ã¡i⁄
);

564 
	`¥ötf
(" MaxÑërõ†: %lu\n", 
d©a
[
i
].
max_ªåõs
);

565 
ab‹ts
 +
d©a
[
i
].
nb_ab‹ts
;

566 
ab‹ts_locked_ªad
 +
d©a
[
i
].
nb_ab‹ts_locked_ªad
;

567 
ab‹ts_locked_wrôe
 +
d©a
[
i
].
nb_ab‹ts_locked_wrôe
;

568 
ab‹ts_vÆid©e_ªad
 +
d©a
[
i
].
nb_ab‹ts_vÆid©e_ªad
;

569 
ab‹ts_vÆid©e_wrôe
 +
d©a
[
i
].
nb_ab‹ts_vÆid©e_wrôe
;

570 
ab‹ts_vÆid©e_commô
 +
d©a
[
i
].
nb_ab‹ts_vÆid©e_commô
;

571 
ab‹ts_övÆid_mem‹y
 +
d©a
[
i
].
nb_ab‹ts_övÆid_mem‹y
;

572 
ab‹ts_doubÀ_wrôe
 +
d©a
[
i
].
nb_ab‹ts_doubÀ_wrôe
;

573 
Áûuªs_beˇu£_c⁄ã¡i⁄
 +
d©a
[
i
].failures_because_contention;

574 
ªads
 +
d©a
[
i
].
nb_c⁄èös
;

575 
ef‰óds
 +
d©a
[
i
].
nb_c⁄èös
 +

576 (
d©a
[
i
].
nb_add
 - d©a[i].
nb_added
) +

577 (
d©a
[
i
].
nb_ªmove
 - d©a[i].
nb_ªmoved
);

578 
upd©es
 +(
d©a
[
i
].
nb_add
 + d©a[i].
nb_ªmove
);

579 
effupds
 +
d©a
[
i
].
nb_ªmoved
 + d©a[i].
nb_added
;

580 
size
 +
d©a
[
i
].
nb_added
 - d©a[i].
nb_ªmoved
;

581 i‡(
max_ªåõs
 < 
d©a
[
i
].max_retries)

582 
max_ªåõs
 = 
d©a
[
i
].max_retries;

584 
	`¥ötf
("Së sizê : %d (ex≥˘ed: %d)\n", 
	`£t_size
(
£t
), 
size
);

585 i‡(
	`£t_size
(
£t
Ë!
size
) {

586 
	`¥ötf
("ERROR: Set size didÇot matchÉxpected.\n");

588 
	`¥ötf
("Duøti⁄ : %d (ms)\n", 
duøti⁄
);

589 
	`¥ötf
("#tx† : %lu (%‡/ s)\n", 
ªads
 + 
upd©es
,

590 (
ªads
 + 
upd©es
Ë* 1000.0 / 
duøti⁄
);

592 
	`¥ötf
("#readÅxs : ");

593 i‡(
ef„˘ive
) {

594 
	`¥ötf
("%lu (%‡/ s)\n", 
ef‰óds
,Éf‰ód†* 1000.0 / 
duøti⁄
);

595 
	`¥ötf
(" #c⁄èö† : %lu (%‡/ s)\n", 
ªads
,Ñód†* 1000.0 / 
duøti⁄
);

596 } 
	`¥ötf
("%lu (%‡/ s)\n", 
ªads
,Ñód†* 1000.0 / 
duøti⁄
);

598 
	`¥ötf
("#eff. updÑ©e: %‡\n", 100.0 * 
effupds
 / (effupd†+ 
ef‰óds
));

600 
	`¥ötf
("#updateÅxs : ");

601 i‡(
ef„˘ive
) {

602 
	`¥ötf
("%lu (%‡/ s)\n", 
effupds
,Éffupd†* 1000.0 / 
duøti⁄
);

603 
	`¥ötf
(" #updÅrül†: %lu (%‡/ s)\n", 
upd©es
, updates * 1000.0 /

604 
duøti⁄
);

605 } 
	`¥ötf
("%lu (%‡/ s)\n", 
upd©es
, upd©e†* 1000.0 / 
duøti⁄
);

608 
	`¥ötf
("#ab‹t† : %lu (%‡/ s)\n", 
ab‹ts
,

609 
ab‹ts
 * 1000.0 / 
duøti⁄
);

610 
	`¥ötf
(" #lock-∏ : %lu (%‡/ s)\n", 
ab‹ts_locked_ªad
,

611 
ab‹ts_locked_ªad
 * 1000.0 / 
duøti⁄
);

612 
	`¥ötf
(" #lock-w : %lu (%‡/ s)\n", 
ab‹ts_locked_wrôe
,

613 
ab‹ts_locked_wrôe
 * 1000.0 / 
duøti⁄
);

614 
	`¥ötf
(" #vÆ-∏ : %lu (%‡/ s)\n", 
ab‹ts_vÆid©e_ªad
,

615 
ab‹ts_vÆid©e_ªad
 * 1000.0 / 
duøti⁄
);

616 
	`¥ötf
(" #vÆ-w : %lu (%‡/ s)\n", 
ab‹ts_vÆid©e_wrôe
,

617 
ab‹ts_vÆid©e_wrôe
 * 1000.0 / 
duøti⁄
);

618 
	`¥ötf
(" #vÆ-¯ : %lu (%‡/ s)\n", 
ab‹ts_vÆid©e_commô
,

619 
ab‹ts_vÆid©e_commô
 * 1000.0 / 
duøti⁄
);

620 
	`¥ötf
(" #öv-mem : %lu (%‡/ s)\n", 
ab‹ts_övÆid_mem‹y
,

621 
ab‹ts_övÆid_mem‹y
 * 1000.0 / 
duøti⁄
);

622 
	`¥ötf
(" #dup-w : %lu (%‡/ s)\n", 
ab‹ts_doubÀ_wrôe
,

623 
ab‹ts_doubÀ_wrôe
 * 1000.0 / 
duøti⁄
);

624 
	`¥ötf
(" #Áûuª† : %lu\n", 
Áûuªs_beˇu£_c⁄ã¡i⁄
);

625 
	`¥ötf
("MaxÑërõ† : %lu\n", 
max_ªåõs
);

628 
	`£t_dñëe
(
£t
);

630 
	`‰ì
(
thªads
);

631 
	`‰ì
(
d©a
);

634 
	}
}

	@linkedlists/versioned/intset.h

1 
	~<°dlib.h
>

2 
	~<limôs.h
>

3 
	~<°dio.h
>

4 
	~<°döt.h
>

5 
	~<°d©omic.h
>

6 
	~<±hªad.h
>

8 
	tvÆ_t
;

9 
	#VAL_MIN
 
INT_MIN


	)

10 
	#VAL_MAX
 
INT_MAX


	)

13 
node
 
	tnode_t
;

14 
öt£t
 
	töt£t_t
;

17 
öt£t_t
 *
£t_√w
();

18 
£t_dñëe
(
öt£t_t
 *
£t
);

19 
£t_size
(
öt£t_t
 *
£t
);

20 
node_t
 *
√w_node
(
vÆ_t
 
vÆ
,Çode_à*
√xt
);

21 
£t_¥öt
(
öt£t_t
 *
£t
);

24 
£t_c⁄èös
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
);

25 
£t_ö£π
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
);

26 
£t_ªmove
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
);

29 #ifde‡
MUTEX


30 
±hªad_muãx_t
 
	t±lock_t
;

31 
	#INIT_LOCK
(
lock
Ë
	`±hªad_muãx_öô
((
±hªad_muãx_t
 *Ëlock, 
NULL
);

	)

32 
	#DESTROY_LOCK
(
lock
Ë
	`±hªad_muãx_de°roy
((
±hªad_muãx_t
 *Ëlock)

	)

33 
	#LOCK
(
lock
Ë
	`±hªad_muãx_lock
((
±hªad_muãx_t
 *Ëlock)

	)

34 
	#UNLOCK
(
lock
Ë
	`±hªad_muãx_u∆ock
((
±hªad_muãx_t
 *Ëlock)

	)

36 
±hªad_•ölock_t
 
	t±lock_t
;

37 
	#INIT_LOCK
(
lock
Ë
	`±hªad_•ö_öô
((
±hªad_•ölock_t
 *Ëlock, 
PTHREAD_PROCESS_PRIVATE
);

	)

38 
	#DESTROY_LOCK
(
lock
Ë
	`±hªad_•ö_de°roy
((
±hªad_•ölock_t
 *Ëlock)

	)

39 
	#LOCK
(
lock
Ë
	`±hªad_•ö_lock
((
±hªad_•ölock_t
 *Ëlock)

	)

40 
	#UNLOCK
(
lock
Ë
	`±hªad_•ö_u∆ock
((
±hªad_•ölock_t
 *Ëlock)

	)

	@linkedlists/versioned/mixin.c

7 
öt£t_t
 *
	$£t_√w
() {

8 
öt£t_t
 *
£t
 = 
	`mÆloc
((intset_t));

9 i‡(
NULL
 =
£t
) {

10 
	`≥º‹
("malloc");

11 
	`exô
(1);

14 
node_t
 *
max
 = 
	`√w_node
(
VAL_MAX
, 
NULL
);

15 
node_t
 *
mö
 = 
	`√w_node
(
VAL_MIN
, 
max
);

16 
£t
->
hód
 = 
mö
;

17  
£t
;

18 
	}
}

21 
	$£t_dñëe
(
öt£t_t
 *
£t
) {

22 
node_t
 *
¥ev
, *
cuº
;

23 
cuº
 = 
£t
->
hód
;

24 
NULL
 !
cuº
) {

25 
¥ev
 = 
cuº
;

26 
cuº
 = cuº->
√xt
;

27 
	`‰ì
(
¥ev
);

29 
	`‰ì
(
£t
);

30 
	}
}

34 
	$£t_size
(
öt£t_t
 *
£t
) {

35 
size
 = 0;

36 
node_t
 *
cuº
 = 
£t
->
hód
->
√xt
;

37 
cuº
->
√xt
 !
NULL
) {

38 
size
++;

39 
cuº
 = cuº->
√xt
;

41  
size
;

42 
	}
}

44 
node_t
 *
	$√w_node
(
vÆ_t
 
vÆ
, 
node_t
 *
√xt
) {

45 
node_t
 *
node
 = 
	`ˇŒoc
((node_t), 1);

46 i‡(
NULL
 =
node
) {

47 
	`≥º‹
("malloc");

48 
	`exô
(1);

50 
node
->
vÆ
 = val;

51 
node
->
√xt
 =Çext;

52  
node
;

53 
	}
}

56 
	$£t_¥öt
(
öt£t_t
 *
£t
) {

57 
node_t
 *
cuº
 = 
£t
->
hód
;

58 
cuº
 !
NULL
) {

59 
	`¥ötf
("%d", 
cuº
->
vÆ
);

60 i‡(
cuº
->
√xt
 !
NULL
)

61 
	`¥ötf
(" -> ");

62 
cuº
 = cuº->
√xt
;

64 
	`¥ötf
("\n");

65 
	}
}

	@linkedlists/versioned/test.c

24 
	~<as£π.h
>

25 
	~<gë›t.h
>

26 
	~<limôs.h
>

27 
	~<±hªad.h
>

28 
	~<sig«l.h
>

29 
	~<°dlib.h
>

30 
	~<°dio.h
>

31 
	~<sys/time.h
>

32 
	~<time.h
>

33 
	~<°döt.h
>

34 
	~<°d©omic.h
>

36 
	~"öt£t.h
"

37 
	~"vîsi⁄ed-lökedli°.h
"

39 
	#DEFAULT_DURATION
 10000

	)

40 
	#DEFAULT_INITIAL
 256

	)

41 
	#DEFAULT_NB_THREADS
 1

	)

42 
	#DEFAULT_RANGE
 0x7FFFFFFF

	)

43 
	#DEFAULT_BIAS_RANGE
 (-1)

	)

44 
	#DEFAULT_BIAS_OFFSET
 (-1)

	)

45 
	#DEFAULT_SEED
 0

	)

46 
	#DEFAULT_UPDATE
 20

	)

47 
	#DEFAULT_ELASTICITY
 4

	)

48 
	#DEFAULT_LOCKTYPE
 2

	)

49 
	#DEFAULT_ALTERNATE
 0

	)

50 
	#DEFAULT_EFFECTIVE
 1

	)

51 
	#XSTR
(
s
Ë
	`STR
(s)

	)

52 
	#STR
(
s
Ë#s

	)

55 
	$_Atomic
(Ë
°›
;

57 
	sb¨rõr
 {

58 
±hªad_c⁄d_t
 
com∂ëe
;

59 
±hªad_muãx_t
 
muãx
;

60 
cou¡
;

61 
¸ossög
;

62 } 
	tb¨rõr_t
;

64 
	$b¨rõr_öô
(
b¨rõr_t
 *
b
, 
n
)

66 
	`±hªad_c⁄d_öô
(&
b
->
com∂ëe
, 
NULL
);

67 
	`±hªad_muãx_öô
(&
b
->
muãx
, 
NULL
);

68 
b
->
cou¡
 = 
n
;

69 
b
->
¸ossög
 = 0;

70 
	}
}

72 
	$b¨rõr_¸oss
(
b¨rõr_t
 *
b
)

74 
	`±hªad_muãx_lock
(&
b
->
muãx
);

76 
b
->
¸ossög
++;

78 i‡(
b
->
¸ossög
 < b->
cou¡
) {

79 
	`±hªad_c⁄d_waô
(&
b
->
com∂ëe
, &b->
muãx
);

81 
	`±hªad_c⁄d_brﬂdˇ°
(&
b
->
com∂ëe
);

83 
b
->
¸ossög
 = 0;

85 
	`±hªad_muãx_u∆ock
(&
b
->
muãx
);

86 
	}
}

98 
ölöe
 
	$ønd_ønge
(
r
) {

100 
m
 = 2147483647;

101 
d
, 
v
 = 0;

104 
d
 = (
m
 > 
r
 ?Ñ : m);

105 
v
 +1 + ()(
d
 * (()
	`ønd
()/(()(
m
)+1.0)));

106 
r
 -
m
;

107 } 
r
 > 0);

108  
v
;

109 
	}
}

110 
ønd_ønge
(
r
);

113 
ölöe
 
	$ønd_ønge_ª
(*
£ed
, 
r
) {

114 
m
 = 2147483647;

115 
d
, 
v
 = 0;

118 
d
 = (
m
 > 
r
 ?Ñ : m);

119 
v
 +1 + ()(
d
 * (()
	`ønd_r
(
£ed
)/(()(
m
)+1.0)));

120 
r
 -
m
;

121 } 
r
 > 0);

122  
v
;

123 
	}
}

124 
ønd_ønge_ª
(*
£ed
, 
r
);

127 
	sthªad_d©a
 {

128 
vÆ_t
 
	mfú°
;

129 
	mønge
;

130 
	mbüs_íabÀd
;

131 
	mbüs_ønge
;

132 
	mbüs_off£t
;

133 
	mupd©e
;

134 
	munô_tx
;

135 
	mÆã∫©e
;

136 
	mef„˘ive
;

137 
	mnb_add
;

138 
	mnb_added
;

139 
	mnb_ªmove
;

140 
	mnb_ªmoved
;

141 
	mnb_c⁄èös
;

142 
	mnb_found
;

143 
	mnb_ab‹ts
;

144 
	mnb_ab‹ts_locked_ªad
;

145 
	mnb_ab‹ts_locked_wrôe
;

146 
	mnb_ab‹ts_vÆid©e_ªad
;

147 
	mnb_ab‹ts_vÆid©e_wrôe
;

148 
	mnb_ab‹ts_vÆid©e_commô
;

149 
	mnb_ab‹ts_övÆid_mem‹y
;

150 
	mnb_ab‹ts_doubÀ_wrôe
;

151 
	mmax_ªåõs
;

152 
	m£ed
;

153 
öt£t_t
 *
	m£t
;

154 
b¨rõr_t
 *
	mb¨rõr
;

155 
	mÁûuªs_beˇu£_c⁄ã¡i⁄
;

156 } 
	tthªad_d©a_t
;

158 *
	$ã°
(*
d©a
) {

160 
thªad_d©a_t
 
d
 = *—hªad_d©a_à*)
d©a
;

163 
	`b¨rõr_¸oss
(
d
.
b¨rõr
);

167 
vÆ_t
 
œ°
 = -1;

171 i‡(
d
.
büs_íabÀd
)

172 
œ°
 = 
d
.
büs_off£t
;

174 
	`©omic_lﬂd
(&
°›
) == 0) {

176 
do_upd©e
;

177 i‡(
d
.
ef„˘ive
)

178 
do_upd©e
 = (100 * (
d
.
nb_added
 + d.
nb_ªmoved
)Ë< (d.
upd©e
 * (d.
nb_add
 + d.
nb_ªmove
 + d.
nb_c⁄èös
));

180 
do_upd©e
 = 
	`ønd_ønge_ª
(&
d
.
£ed
, 100Ë- 1 < d.
upd©e
;

184 
vÆ_t
 
vÆue
 = 
	`ønd_ønge_ª
(&
d
.
£ed
, d.
ønge
);

187 i‡(
d
.
büs_íabÀd
) {

188 
vÆue
 = 
d
.
büs_off£t
 + 
	`ønd_ønge_ª
(&d.
£ed
, d.
büs_ønge
) - 1;

189 
œ°
 = (
	`ønd_ønge_ª
(&
d
.
£ed
, 2Ë=1Ë? -1 : 
vÆue
;

192 i‡(
do_upd©e
 && 
œ°
 < 0) {

194 i‡(
	`£t_ö£π
(
d
.
£t
, 
vÆue
)) {

195 
d
.
nb_added
++;

196 
œ°
 = 
vÆue
;

198 
d
.
nb_add
++;

199 } i‡(
do_upd©e
 && 
œ°
 >= 0) {

203 i‡(
d
.
Æã∫©e
) {

204 i‡(
	`£t_ªmove
(
d
.
£t
, 
œ°
))

205 
d
.
nb_ªmoved
++;

206 
œ°
 = -1;

208 i‡(
	`£t_ªmove
(
d
.
£t
, 
vÆue
)) {

209 
d
.
nb_ªmoved
++;

210 
œ°
 = -1;

213 
d
.
nb_ªmove
++;

216 i‡(
d
.
Æã∫©e
) {

217 i‡(
d
.
upd©e
 == 0) {

218 i‡(
œ°
 < 0)

219 
œ°
 = 
vÆue
 = 
d
.
fú°
;

221 
œ°
 = -1;

223 i‡(
œ°
 >= 0)

224 
vÆue
 = 
œ°
;

228 i‡(
	`£t_c⁄èös
(
d
.
£t
, 
vÆue
))

229 
d
.
nb_found
++;

230 
d
.
nb_c⁄èös
++;

234 *(
thªad_d©a_t
 *)
d©a
 = 
d
;

236  
NULL
;

237 
	}
}

243 
	$maö
(
¨gc
, **
¨gv
) {

244 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

246 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

247 {"duøti⁄", 
ªquúed_¨gumít
, 
NULL
, 'd'},

248 {"öôül-size", 
ªquúed_¨gumít
, 
NULL
, 'i'},

249 {"thªad-num", 
ªquúed_¨gumít
, 
NULL
, 't'},

250 {"ønge", 
ªquúed_¨gumít
, 
NULL
, 'r'},

251 {"£ed", 
ªquúed_¨gumít
, 
NULL
, 'S'},

252 {"upd©e-øã", 
ªquúed_¨gumít
, 
NULL
, 'u'},

253 {"büs-ønge", 
ªquúed_¨gumít
, 
NULL
, 'b'},

254 {"büs-off£t", 
ªquúed_¨gumít
, 
NULL
, 'u'},

255 {"ña°icôy", 
ªquúed_¨gumít
, 
NULL
, 'x'},

256 {
NULL
, 0, NULL, 0}

259 
öt£t_t
 *
£t
;

260 
i
, 
c
, 
size
;

261 
vÆ_t
 
œ°
 = 0;

262 
vÆ_t
 
vÆ
 = 0;

263 
ªads
, 
ef‰óds
, 
upd©es
, 
effupds
, 
ab‹ts
, 
ab‹ts_locked_ªad
,

264 
ab‹ts_locked_wrôe
, 
ab‹ts_vÆid©e_ªad
, 
ab‹ts_vÆid©e_wrôe
,

265 
ab‹ts_vÆid©e_commô
, 
ab‹ts_övÆid_mem‹y
, 
ab‹ts_doubÀ_wrôe
,

266 
max_ªåõs
, 
Áûuªs_beˇu£_c⁄ã¡i⁄
;

267 
thªad_d©a_t
 *
d©a
;

268 
±hªad_t
 *
thªads
;

269 
±hªad_©å_t
 
©å
;

270 
b¨rõr_t
 
b¨rõr
;

271 
timevÆ
 
°¨t
, 
íd
;

272 
time•ec
 
timeout
;

273 
duøti⁄
 = 
DEFAULT_DURATION
;

274 
öôül
 = 
DEFAULT_INITIAL
;

275 
nb_thªads
 = 
DEFAULT_NB_THREADS
;

276 
ønge
 = 
DEFAULT_RANGE
;

277 
büs_ønge
 = 
DEFAULT_BIAS_RANGE
;

278 
büs_off£t
 = 
DEFAULT_BIAS_OFFSET
;

279 
büs_íabÀd
 = 0;

280 
£ed
 = 
DEFAULT_SEED
;

281 
upd©e
 = 
DEFAULT_UPDATE
;

282 
unô_tx
 = 
DEFAULT_ELASTICITY
;

283 
Æã∫©e
 = 
DEFAULT_ALTERNATE
;

284 
ef„˘ive
 = 
DEFAULT_EFFECTIVE
;

285 
sig£t_t
 
block_£t
;

288 
i
 = 0;

289 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "hAf:d:i:t:r:S:u:b:B:x:", 
l⁄g_›ti⁄s
, &
i
);

291 if(
c
 == -1)

294 if(
c
 =0 && 
l⁄g_›ti⁄s
[
i
].
Êag
 == 0)

295 
c
 = 
l⁄g_›ti⁄s
[
i
].
vÆ
;

297 
c
) {

302 
	`¥ötf
("intset -- STM stressÅest "

311 " -A, --Æã∫©ê(deÁu…="
	`XSTR
(
DEFAULT_ALTERNATE
)")\n"

314 " upd©êtx†mu°Éf„˘ivñy wrôê(0Òrül, 1Ûf„˘ive, deÁu…=" 
	`XSTR
(
DEFAULT_EFFECTIVE
) ")\n"

316 " Te° duøti⁄ i¿mûli£c⁄d†(0=öföôe, deÁu…=" 
	`XSTR
(
DEFAULT_DURATION
) ")\n"

318 " Numbî o‡ñemít†tÿö£π bef‹êã° (deÁu…=" 
	`XSTR
(
DEFAULT_INITIAL
) ")\n"

320 " Numbî o‡thªad†(deÁu…=" 
	`XSTR
(
DEFAULT_NB_THREADS
) ")\n"

322 " R™gêo‡öãgî vÆue†ö£πed i¿£à(deÁu…=" 
	`XSTR
(
DEFAULT_RANGE
) ")\n"

324 " RNG sìd (0Òime-ba£d, deÁu…=" 
	`XSTR
(
DEFAULT_SEED
) ")\n"

326 " Pî˚¡agêo‡upd©êå™ß˘i⁄†(deÁu…=" 
	`XSTR
(
DEFAULT_UPDATE
) ")\n"

341 
	`exô
(0);

343 
Æã∫©e
 = 1;

346 
ef„˘ive
 = 
	`©oi
(
›èrg
);

349 
duøti⁄
 = 
	`©oi
(
›èrg
);

352 
öôül
 = 
	`©oi
(
›èrg
);

355 
nb_thªads
 = 
	`©oi
(
›èrg
);

358 
ønge
 = 
	`©ﬁ
(
›èrg
);

361 
£ed
 = 
	`©oi
(
›èrg
);

364 
upd©e
 = 
	`©oi
(
›èrg
);

367 
büs_ønge
 = 
	`©ﬁ
(
›èrg
);

370 
büs_off£t
 = 
	`©ﬁ
(
›èrg
);

373 
unô_tx
 = 
	`©oi
(
›èrg
);

376 
	`¥ötf
("Use -h or --help for help\n");

377 
	`exô
(0);

379 
	`exô
(1);

383 
	`as£π
(
duøti⁄
 >= 0);

384 
	`as£π
(
öôül
 >= 0);

385 
	`as£π
(
nb_thªads
 > 0);

386 
	`as£π
(
ønge
 > 0 &&Ñ™gê>
öôül
);

387 
	`as£π
(
upd©e
 >= 0 && update <= 100);

388 i‡(
büs_ønge
 !
DEFAULT_BIAS_RANGE
 || 
büs_off£t
 !
DEFAULT_BIAS_OFFSET
) {

389 
büs_íabÀd
 = 1;

390 
	`as£π
(
büs_ønge
 >= 0);

391 
	`as£π
(
büs_off£t
 > 0);

394 
	`¥ötf
("BíchÅy≥ : " 
ALGONAME
 "\n");

395 
	`¥ötf
("Duøti⁄ : %d\n", 
duøti⁄
);

396 
	`¥ötf
("Inôü»sizê: %d\n", 
öôül
);

397 
	`¥ötf
("NbÅhªad† : %d\n", 
nb_thªads
);

398 
	`¥ötf
("VÆuêøngê : %ld\n", 
ønge
);

399 i‡(
büs_íabÀd
) {

400 
	`¥ötf
("Bü£dÑ™ge: [%ld, %ld)\n", 
büs_off£t
, büs_off£t+
büs_ønge
);

402 
	`¥ötf
("Sìd : %d\n", 
£ed
);

403 
	`¥ötf
("Upd©êøã : %d\n", 
upd©e
);

404 
	`¥ötf
("Eœ°icôy : %d\n", 
unô_tx
);

405 
	`¥ötf
("A…î«ã : %d\n", 
Æã∫©e
);

406 
	`¥ötf
("Ef„˘ivê : %d\n", 
ef„˘ive
);

407 
	`¥ötf
("Type sizes : int=%d/long=%d/ptr=%d/word=%d/val_t=%d\n",

411 ()(
uöçå_t
),

412 ()(
vÆ_t
));

413 
	`¥ötf
("Nodêsizê : %d\n", ()(
node_t
));

415 
timeout
.
tv_£c
 = 
duøti⁄
 / 1000;

416 
timeout
.
tv_n£c
 = (
duøti⁄
 % 1000) * 1000000;

418 i‡((
d©a
 = (
thªad_d©a_t
 *)
	`mÆloc
(
nb_thªads
 * —hªad_d©a_t))Ë=
NULL
) {

419 
	`≥º‹
("malloc");

420 
	`exô
(1);

422 i‡((
thªads
 = (
±hªad_t
 *)
	`mÆloc
(
nb_thªads
 * ’thªad_t))Ë=
NULL
) {

423 
	`≥º‹
("malloc");

424 
	`exô
(1);

427 i‡(
£ed
 == 0)

428 
	`§™d
(()
	`time
(0));

430 
	`§™d
(
£ed
);

432 
£t
 = 
	`£t_√w
();

433 
	`©omic_°‹e
(&
°›
, 0);

441 
	`¥ötf
("Addög %dÉ¡rõ†tÿ£t\n", 
öôül
);

442 
i
 = 0;

443 
i
 < 
öôül
) {

444 
vÆ
 = 
	`ønd_ønge
(
ønge
);

445 i‡(
	`£t_ö£π
(
£t
, 
vÆ
)) {

446 
œ°
 = 
vÆ
;

447 
i
++;

450 
size
 = 
	`£t_size
(
£t
);

451 
	`¥ötf
("Së sizê : %d\n", 
size
);

454 
	`b¨rõr_öô
(&
b¨rõr
, 
nb_thªads
 + 1);

455 
	`±hªad_©å_öô
(&
©å
);

456 
	`±hªad_©å_£tdëach°©e
(&
©å
, 
PTHREAD_CREATE_JOINABLE
);

457 
i
 = 0; i < 
nb_thªads
; i++) {

458 
	`¥ötf
("Cª©ögÅhªad %d\n", 
i
);

459 
d©a
[
i
].
fú°
 = 
œ°
;

460 
d©a
[
i
].
büs_íabÀd
 = bias_enabled;

461 
d©a
[
i
].
büs_ønge
 = bias_range;

462 
d©a
[
i
].
büs_off£t
 = bias_offset;

463 
d©a
[
i
].
ønge
 =Ñange;

464 
d©a
[
i
].
upd©e
 = update;

465 
d©a
[
i
].
unô_tx
 = unit_tx;

466 
d©a
[
i
].
Æã∫©e
 =álternate;

467 
d©a
[
i
].
ef„˘ive
 =Éffective;

468 
d©a
[
i
].
nb_add
 = 0;

469 
d©a
[
i
].
nb_added
 = 0;

470 
d©a
[
i
].
nb_ªmove
 = 0;

471 
d©a
[
i
].
nb_ªmoved
 = 0;

472 
d©a
[
i
].
nb_c⁄èös
 = 0;

473 
d©a
[
i
].
nb_found
 = 0;

474 
d©a
[
i
].
nb_ab‹ts
 = 0;

475 
d©a
[
i
].
nb_ab‹ts_locked_ªad
 = 0;

476 
d©a
[
i
].
nb_ab‹ts_locked_wrôe
 = 0;

477 
d©a
[
i
].
nb_ab‹ts_vÆid©e_ªad
 = 0;

478 
d©a
[
i
].
nb_ab‹ts_vÆid©e_wrôe
 = 0;

479 
d©a
[
i
].
nb_ab‹ts_vÆid©e_commô
 = 0;

480 
d©a
[
i
].
nb_ab‹ts_övÆid_mem‹y
 = 0;

481 
d©a
[
i
].
nb_ab‹ts_doubÀ_wrôe
 = 0;

482 
d©a
[
i
].
max_ªåõs
 = 0;

483 
d©a
[
i
].
£ed
 = 
	`ønd
();

484 
d©a
[
i
].
£t
 = set;

485 
d©a
[
i
].
b¨rõr
 = &barrier;

486 
d©a
[
i
].
Áûuªs_beˇu£_c⁄ã¡i⁄
 = 0;

487 i‡(
	`±hªad_¸óã
(&
thªads
[
i
], &
©å
, 
ã°
, (*)(&
d©a
[i])) != 0) {

488 
	`Ârötf
(
°dîr
, "Error creatingÅhread\n");

489 
	`exô
(1);

492 
	`±hªad_©å_de°roy
(&
©å
);

495 
	`b¨rõr_¸oss
(&
b¨rõr
);

497 
	`¥ötf
("STARTING...\n");

498 
	`gëtimeofday
(&
°¨t
, 
NULL
);

499 i‡(
duøti⁄
 > 0) {

500 
	`«no¶ìp
(&
timeout
, 
NULL
);

502 
	`sigem±y£t
(&
block_£t
);

503 
	`sigsu•íd
(&
block_£t
);

506 
	`©omic_°‹e
(&
°›
, 1);

508 
	`gëtimeofday
(&
íd
, 
NULL
);

509 
	`¥ötf
("STOPPING...\n");

512 
i
 = 0; i < 
nb_thªads
; i++) {

513 i‡(
	`±hªad_joö
(
thªads
[
i
], 
NULL
) != 0) {

514 
	`Ârötf
(
°dîr
, "Error waiting forÅhread completion\n");

515 
	`exô
(1);

519 
duøti⁄
 = (
íd
.
tv_£c
 * 1000 +Énd.
tv_u£c
 / 1000Ë- (
°¨t
.tv_sec * 1000 + start.tv_usec / 1000);

520 
ab‹ts
 = 0;

521 
ab‹ts_locked_ªad
 = 0;

522 
ab‹ts_locked_wrôe
 = 0;

523 
ab‹ts_vÆid©e_ªad
 = 0;

524 
ab‹ts_vÆid©e_wrôe
 = 0;

525 
ab‹ts_vÆid©e_commô
 = 0;

526 
ab‹ts_övÆid_mem‹y
 = 0;

527 
ab‹ts_doubÀ_wrôe
 = 0;

528 
Áûuªs_beˇu£_c⁄ã¡i⁄
 = 0;

529 
ªads
 = 0;

530 
ef‰óds
 = 0;

531 
upd©es
 = 0;

532 
effupds
 = 0;

533 
max_ªåõs
 = 0;

534 
i
 = 0; i < 
nb_thªads
; i++) {

535 
	`¥ötf
("Thªad %d\n", 
i
);

536 
	`¥ötf
(" #add : %lu\n", 
d©a
[
i
].
nb_add
);

537 
	`¥ötf
(" #added : %lu\n", 
d©a
[
i
].
nb_added
);

538 
	`¥ötf
(" #ªmovê : %lu\n", 
d©a
[
i
].
nb_ªmove
);

539 
	`¥ötf
(" #ªmoved : %lu\n", 
d©a
[
i
].
nb_ªmoved
);

540 
	`¥ötf
(" #c⁄èö† : %lu\n", 
d©a
[
i
].
nb_c⁄èös
);

541 
	`¥ötf
(" #found : %lu\n", 
d©a
[
i
].
nb_found
);

542 
	`¥ötf
(" #ab‹t† : %lu\n", 
d©a
[
i
].
nb_ab‹ts
);

543 
	`¥ötf
(" #lock-∏ : %lu\n", 
d©a
[
i
].
nb_ab‹ts_locked_ªad
);

544 
	`¥ötf
(" #lock-w : %lu\n", 
d©a
[
i
].
nb_ab‹ts_locked_wrôe
);

545 
	`¥ötf
(" #vÆ-∏ : %lu\n", 
d©a
[
i
].
nb_ab‹ts_vÆid©e_ªad
);

546 
	`¥ötf
(" #vÆ-w : %lu\n", 
d©a
[
i
].
nb_ab‹ts_vÆid©e_wrôe
);

547 
	`¥ötf
(" #vÆ-¯ : %lu\n", 
d©a
[
i
].
nb_ab‹ts_vÆid©e_commô
);

548 
	`¥ötf
(" #öv-mem : %lu\n", 
d©a
[
i
].
nb_ab‹ts_övÆid_mem‹y
);

549 
	`¥ötf
(" #öv-mem : %lu\n", 
d©a
[
i
].
nb_ab‹ts_doubÀ_wrôe
);

550 
	`¥ötf
(" #Áûuª†: %lu\n", 
d©a
[
i
].
Áûuªs_beˇu£_c⁄ã¡i⁄
);

551 
	`¥ötf
(" MaxÑërõ†: %lu\n", 
d©a
[
i
].
max_ªåõs
);

552 
ab‹ts
 +
d©a
[
i
].
nb_ab‹ts
;

553 
ab‹ts_locked_ªad
 +
d©a
[
i
].
nb_ab‹ts_locked_ªad
;

554 
ab‹ts_locked_wrôe
 +
d©a
[
i
].
nb_ab‹ts_locked_wrôe
;

555 
ab‹ts_vÆid©e_ªad
 +
d©a
[
i
].
nb_ab‹ts_vÆid©e_ªad
;

556 
ab‹ts_vÆid©e_wrôe
 +
d©a
[
i
].
nb_ab‹ts_vÆid©e_wrôe
;

557 
ab‹ts_vÆid©e_commô
 +
d©a
[
i
].
nb_ab‹ts_vÆid©e_commô
;

558 
ab‹ts_övÆid_mem‹y
 +
d©a
[
i
].
nb_ab‹ts_övÆid_mem‹y
;

559 
ab‹ts_doubÀ_wrôe
 +
d©a
[
i
].
nb_ab‹ts_doubÀ_wrôe
;

560 
Áûuªs_beˇu£_c⁄ã¡i⁄
 +
d©a
[
i
].failures_because_contention;

561 
ªads
 +
d©a
[
i
].
nb_c⁄èös
;

562 
ef‰óds
 +
d©a
[
i
].
nb_c⁄èös


563 + (
d©a
[
i
].
nb_add
 - d©a[i].
nb_added
)

564 + (
d©a
[
i
].
nb_ªmove
 - d©a[i].
nb_ªmoved
);

565 
upd©es
 +(
d©a
[
i
].
nb_add
 + d©a[i].
nb_ªmove
);

566 
effupds
 +
d©a
[
i
].
nb_ªmoved
 + d©a[i].
nb_added
;

567 
size
 +
d©a
[
i
].
nb_added
 - d©a[i].
nb_ªmoved
;

568 i‡(
max_ªåõs
 < 
d©a
[
i
].max_retries)

569 
max_ªåõs
 = 
d©a
[
i
].max_retries;

571 
	`¥ötf
("Së sizê : %d (ex≥˘ed: %d)\n", 
	`£t_size
(
£t
), 
size
);

572 i‡(
	`£t_size
(
£t
Ë!
size
) {

573 
	`¥ötf
("ERROR: Set size didÇot matchÉxpected.\n");

575 
	`¥ötf
("Duøti⁄ : %d (ms)\n", 
duøti⁄
);

576 
	`¥ötf
("#tx† : %lu (%‡/ s)\n", 
ªads
 + 
upd©es
, (ªad†+ upd©esË* 1000.0 / 
duøti⁄
);

578 
	`¥ötf
("#readÅxs : ");

579 i‡(
ef„˘ive
) {

580 
	`¥ötf
("%lu (%‡/ s)\n", 
ef‰óds
,Éf‰ód†* 1000.0 / 
duøti⁄
);

581 
	`¥ötf
(" #c⁄èö† : %lu (%‡/ s)\n", 
ªads
,Ñód†* 1000.0 / 
duøti⁄
);

582 } 
	`¥ötf
("%lu (%‡/ s)\n", 
ªads
,Ñód†* 1000.0 / 
duøti⁄
);

584 
	`¥ötf
("#eff. updÑ©e: %‡\n", 100.0 * 
effupds
 / (effupd†+ 
ef‰óds
));

586 
	`¥ötf
("#updateÅxs : ");

587 i‡(
ef„˘ive
) {

588 
	`¥ötf
("%lu (%‡/ s)\n", 
effupds
,Éffupd†* 1000.0 / 
duøti⁄
);

589 
	`¥ötf
(" #updÅrül†: %lu (%‡/ s)\n", 
upd©es
, updates * 1000.0 /

590 
duøti⁄
);

591 } 
	`¥ötf
("%lu (%‡/ s)\n", 
upd©es
, upd©e†* 1000.0 / 
duøti⁄
);

594 
	`¥ötf
("#ab‹t† : %lu (%‡/ s)\n", 
ab‹ts
,áb‹t†* 1000.0 / 
duøti⁄
);

595 
	`¥ötf
(" #lock-∏ : %lu (%‡/ s)\n", 
ab‹ts_locked_ªad
,áb‹ts_locked_ªad * 1000.0 / 
duøti⁄
);

596 
	`¥ötf
(" #lock-w : %lu (%‡/ s)\n", 
ab‹ts_locked_wrôe
,áb‹ts_locked_wrôê* 1000.0 / 
duøti⁄
);

597 
	`¥ötf
(" #vÆ-∏ : %lu (%‡/ s)\n", 
ab‹ts_vÆid©e_ªad
,áb‹ts_vÆid©e_ªad * 1000.0 / 
duøti⁄
);

598 
	`¥ötf
(" #vÆ-w : %lu (%‡/ s)\n", 
ab‹ts_vÆid©e_wrôe
,áb‹ts_vÆid©e_wrôê* 1000.0 / 
duøti⁄
);

599 
	`¥ötf
(" #vÆ-¯ : %lu (%‡/ s)\n", 
ab‹ts_vÆid©e_commô
,áb‹ts_vÆid©e_commô * 1000.0 / 
duøti⁄
);

600 
	`¥ötf
(" #öv-mem : %lu (%‡/ s)\n", 
ab‹ts_övÆid_mem‹y
,áb‹ts_övÆid_mem‹y * 1000.0 / 
duøti⁄
);

601 
	`¥ötf
(" #dup-w : %lu (%‡/ s)\n", 
ab‹ts_doubÀ_wrôe
,áb‹ts_doubÀ_wrôê* 1000.0 / 
duøti⁄
);

602 
	`¥ötf
(" #Áûuª† : %lu\n", 
Áûuªs_beˇu£_c⁄ã¡i⁄
);

603 
	`¥ötf
("MaxÑërõ† : %lu\n", 
max_ªåõs
);

606 
	`£t_dñëe
(
£t
);

611 
	`‰ì
(
thªads
);

612 
	`‰ì
(
d©a
);

615 
	}
}

	@linkedlists/versioned/versioned-linkedlist.c

23 
	~"öt£t.h
"

24 
	~"vîsi⁄ed-lökedli°.h
"

27 
	~"mixö.c
"

30 
	$£t_c⁄èös
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
) {

31 
node_t
* 
cuº
 = 
£t
->
hód
;

33 
cuº
->
vÆ
 < val) {

34 
cuº
 = cuº->
√xt
;

38  (
cuº
->
vÆ
 =vÆ && !cuº->
dñëed
);

39 
	}
}

42 
	$vÆid©e
(
vÆ_t
 
vÆ
, 
node_t
** 
¥ev
,Çode_t** 
cuº
, 
vîlock_t
* 
¥ev_vîsi⁄
) {

43 
∑πül_ab‹t
:

44 *
¥ev_vîsi⁄
 = 
	`gë_vîsi⁄
(&(*
¥ev
)->
lock
);

46 i‡((*
¥ev
)->
dñëed
){

48  
Ál£
;

51 *
cuº
 = (*
¥ev
)->
√xt
;

52 (*
cuº
)->
vÆ
 < val) {

53 *
¥ev_vîsi⁄
 = 
	`gë_vîsi⁄
(&(*
cuº
)->
lock
);

55 i‡((*
cuº
)->
dñëed
){

56 
∑πül_ab‹t
;

59 *
¥ev
 = *
cuº
;

60 *
cuº
 = (*cuº)->
√xt
;

63  
åue
;

64 
	}
}

67 
	$åavî£
(
vÆ_t
 
vÆ
, 
node_t
** 
¥ev
,Çode_t** 
cuº
,Çode_t* 
°¨t
) {

68 *
¥ev
 = 
°¨t
;

69 *
cuº
 = 
°¨t
;

72 (*
cuº
)->
vÆ
 < val) {

73 *
¥ev
 = *
cuº
;

74 *
cuº
 = (*cuº)->
√xt
;

77 
	}
}

79 
	$£t_ö£π
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
){

80 
node_t
* 
¥ev
 = 
NULL
;

81 
node_t
* 
cuº
 = 
NULL
;

82 
node_t
* 
√w
 = 
NULL
;

83 
vîlock_t
 
¥ev_vîsi⁄
;

86 
ª°¨t_‰om_åavî£
:

87 
	`åavî£
(
vÆ
, &
¥ev
, &
cuº
, 
£t
->
hód
);

90 
ª°¨t_‰om_vÆid©e
:

93 i‡(!
	`vÆid©e
(
vÆ
, &
¥ev
, &
cuº
, &
¥ev_vîsi⁄
)) {

95 
ª°¨t_‰om_åavî£
;

99 i‡(
cuº
->
dñëed
) {

100 
ª°¨t_‰om_åavî£
;

104 i‡(
cuº
->
vÆ
 == val) {

105  
Ál£
;

109 i‡(
√w
 =
NULL
) {

110 
√w
 = 
	`√w_node
(
vÆ
, 
NULL
);

114 
√w
->
√xt
 = 
cuº
;

117 i‡(!
	`åy_lock_©_vîsi⁄
(&
¥ev
->
lock
, 
¥ev_vîsi⁄
)) {

119 
ª°¨t_‰om_vÆid©e
;

123 
¥ev
->
√xt
 = 
√w
;

125 
	`u∆ock_™d_ö¸emít_vîsi⁄
(&
¥ev
->
lock
);

127  
åue
;

128 
	}
}

130 
	$£t_ªmove
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
) {

131 
node_t
* 
¥ev
 = 
NULL
;

132 
node_t
* 
cuº
 = 
NULL
;

133 
vîlock_t
 
¥ev_vîsi⁄
;

136 
ª°¨t_‰om_åavî£
:

137 
	`åavî£
(
vÆ
, &
¥ev
, &
cuº
, 
£t
->
hód
);

140 
ª°¨t_‰om_vÆid©e
:

143 i‡(!
	`vÆid©e
(
vÆ
, &
¥ev
, &
cuº
, &
¥ev_vîsi⁄
)) {

145 
ª°¨t_‰om_åavî£
;

149 i‡(
cuº
->
vÆ
 !vÆ || cuº->
dñëed
) {

150  
Ál£
;

154 i‡(!
	`åy_lock_©_vîsi⁄
(&
¥ev
->
lock
, 
¥ev_vîsi⁄
)) {

156 
ª°¨t_‰om_vÆid©e
;

160 
	`•ölock
(&
cuº
->
lock
);

163 
cuº
->
dñëed
 = 
åue
;

166 
¥ev
->
√xt
 = 
cuº
->next;

168 
	`u∆ock_™d_ö¸emít_vîsi⁄
(&
cuº
->
lock
);

169 
	`u∆ock_™d_ö¸emít_vîsi⁄
(&
¥ev
->
lock
);

171  
åue
;

172 
	}
}

	@linkedlists/versioned/versioned-linkedlist.h

23 #i‚de‡
_VERSIONED_LINKEDLIST_H


24 
	#_VERSIONED_LINKEDLIST_H


	)

26 
	~<°dboﬁ.h
>

27 
	~"../../utûs/vîsi⁄ed-lock/vîsi⁄ed-lock.h
"

29 
	#ALGONAME
 "Vîsi⁄ed Löked Li°"

	)

31 
	snode
 {

32 
vÆ_t
 
	mvÆ
;

33 
node
* 
	m√xt
;

34 
	mdñëed
;

35 
_Atomic
(
vîlock_t
Ë
	mlock
;

38 
	söt£t
 {

39 
node_t
* 
	mhód
;

	@rtm-charlie/hash_hle/hashtable.cpp

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<immöåö.h
>

5 
	~"hashèbÀ.h
"

7 
ªsize_hash_èbÀ_if_√eded
(
HashTabÀ
 *
ht
);

8 
hash_°r
(*
key
);

10 vﬁ©ûê
	gmuãx_vÆ
;

12 
	$hÀ_öô
(vﬁ©ûê*
vÆ
)

14 *
vÆ
 = 0;

15 
	}
}

17 
	$hÀ_lock
(vﬁ©ûê*
muãx_vÆ
)

19 
	`__©omic_exch™ge_n
(
muãx_vÆ
, 1, 
__ATOMIC_ACQUIRE
 | 
__ATOMIC_HLE_ACQUIRE
))

20 
	`_mm_∑u£
();

21  
åue
;

22 
	}
}

24 
	$hÀ_ªÀa£
(vﬁ©ûê*
muãx_vÆ
)

26 
	`__©omic_°‹e_n
(
muãx_vÆ
, 0, 
__ATOMIC_RELEASE
 | 
__ATOMIC_HLE_RELEASE
);

27  
åue
;

28 
	}
}

30 
	$hash_öô
(
HashTabÀ
 *
ht
)

32 
ht
->
size
 = 
HASH_TABLE_INIT_SIZE
;

33 
ht
->
ñem_num
 = 0;

34 
ht
->
hódîs
 = (
Hódî
 *)
	`ˇŒoc
(ht->
size
, (Header));

36 if(
ht
->
hódîs
 =
NULL
Ë 
FAILED
;

37 
i
;

38 
i
 = 0; i < 
ht
->
size
; i++) {

39 
	`hÀ_öô
(&
ht
->
hódîs
[
i
].
muãx_vÆ
);

41 
	`LOG_MSG
("[öô]\tsize: %i\n", 
ht
->
size
);

43  
SUCCESS
;

44 
	}
}

46 
	$hash_lookup
(
HashTabÀ
 *
ht
, *
key
, **
ªsu…
)

48 
°©us
;

49 
ödex
 = 
	`HASH_INDEX
(
ht
, 
key
);

50 
Hódî
 *
hódî
 = &(
ht
->
hódîs
[
ödex
]);

51 
	`hÀ_lock
(&
hódî
->
muãx_vÆ
);

52 
Buckë
 *
buckë
 = 
hódî
->
√xt
;

53 if(
buckë
 =
NULL
) {

54 
	`hÀ_ªÀa£
(&
hódî
->
muãx_vÆ
);

55 
Áûed
;

57 
buckë
)

59 if(
	`°rcmp
(
buckë
->
key
, key) == 0)

63 *
ªsu…
 = 
buckë
->
vÆue
;

64  
SUCCESS
;

67 
buckë
 = buckë->
√xt
;

69 
	`hÀ_ªÀa£
(&
hódî
->
muãx_vÆ
);

71 
Áûed
:

72 
	`LOG_MSG
("[lookup]\àkey:%s\tÁûed\t\n", 
key
);

73  
FAILED
;

74 
	}
}

76 
	$hash_ö£π
(
HashTabÀ
 *
ht
,*
key
, *
vÆue
)

79 
°©us
;

80 
Buckë
 *
buckë
 = (Buckë *)
	`mÆloc
((Bucket));

82 
	`ªsize_hash_èbÀ_if_√eded
(
ht
);

84 
ödex
 = 
	`HASH_INDEX
(
ht
, 
key
);

85 
Hódî
 *
hódî
 = &(
ht
->
hódîs
[
ödex
]);

86 
	`hÀ_lock
(&
hódî
->
muãx_vÆ
);

87 
Buckë
 *
‹g_buckë
 = 
hódî
->
√xt
;

88 
Buckë
 *
tmp_buckë
 = 
‹g_buckë
;

90 
tmp_buckë
)

92 if(
	`°rcmp
(
key
, 
tmp_buckë
->key) == 0)

94 
tmp_buckë
->
vÆue
 = value;

95 
	`‰ì
(
buckë
);

96 
	`hÀ_ªÀa£
(&
hódî
->
muãx_vÆ
);

97  
SUCCESS
;

100 
tmp_buckë
 =Åmp_buckë->
√xt
;

102 
buckë
->
key
 = key;

103 
buckë
->
vÆue
 = value;

104 
buckë
->
√xt
 = 
NULL
;

106 
ht
->
ñem_num
 += 1;

108 if(
‹g_buckë
 !
NULL
)

110 
buckë
->
√xt
 = 
‹g_buckë
;

113 
ht
->
hódîs
[
ödex
].
√xt

buckë
;

114 
	`hÀ_ªÀa£
(&
hódî
->
muãx_vÆ
);

115  
SUCCESS
;

116 
	}
}

118 
	$hash_ªmove
(
HashTabÀ
 *
ht
, *
key
)

120 
ödex
 = 
	`HASH_INDEX
(
ht
, 
key
);

121 
Hódî
 *
hódî
 = &(
ht
->
hódîs
[
ödex
]);

122 
Buckë
 *
buckë
 = 
hódî
->
√xt
;

123 
Buckë
 *
¥ev
 = 
NULL
;

125 if(
buckë
 =
NULL
Ë 
FAILED
;

128 
buckë
)

130 if(
	`°rcmp
(
buckë
->
key
, key) == 0)

132 
	`LOG_MSG
("[ªmove]\tkey:(%sËödex: %d\n", 
key
, 
ödex
);

134 if(
¥ev
 =
NULL
)

136 
ht
->
hódîs
[
ödex
].
√xt
 = 
buckë
->next;

140 
¥ev
->
√xt
 = 
buckë
->next;

142 
	`‰ì
(
buckë
);

144  
SUCCESS
;

147 
¥ev
 = 
buckë
;

148 
buckë
 = buckë->
√xt
;

151 
	`LOG_MSG
("[ªmove]\àkey:%†nŸ foundÑemovê\tÁûed\t\n", 
key
);

152  
FAILED
;

153 
	}
}

155 
	$hash_de°roy
(
HashTabÀ
 *
ht
)

157 
i
;

158 
Buckë
 *
cur
 = 
NULL
;

159 
Buckë
 *
tmp
 = 
NULL
;

161 
i
=0; i < 
ht
->
size
; ++i)

163 
cur
 = 
ht
->
hódîs
[
i
].
√xt
;

164 
cur
)

166 
tmp
 = 
cur
;

167 
cur
 = cur->
√xt
;

168 
	`‰ì
(
tmp
);

171 
	`‰ì
(
ht
->
hódîs
);

173  
SUCCESS
;

174 
	}
}

176 
	$hash_°r
(*
key
)

178 
hash
 = 0;

180 *
cur
 = 
key
;

182 *
cur
 != '\0')

184 
hash
 +*
cur
;

185 ++
cur
;

188  
hash
;

189 
	}
}

191 
	$hash_ªsize
(
HashTabÀ
 *
ht
)

194 
‹g_size
 = 
ht
->
size
;

195 
ht
->
size
 = ht->size * 2;

196 
ht
->
ñem_num
 = 0;

198 
	`LOG_MSG
("[ªsize]\t‹g size: %i\äew size: %i\n", 
‹g_size
, 
ht
->
size
);

201 
Hódî
 *
hódîs
 = (Hódî *)
	`ˇŒoc
(
ht
->
size
, (Header));

203 
Hódî
 *
‹g_hódîs
 = 
ht
->
hódîs
;

204 
ht
->
hódîs
 = headers;

206 
i
 = 0;

207 
i
=0; i < 
‹g_size
; ++i)

209 
Buckë
 *
cur
 = 
‹g_hódîs
[
i
].
√xt
;

210 
Buckë
 *
tmp
;

211 
cur
)

214 
	`hash_ö£π
(
ht
, 
cur
->
key
, cur->
vÆue
);

217 
tmp
 = 
cur
;

218 
cur
 = cur->
√xt
;

219 
	`‰ì
(
tmp
);

222 
	`‰ì
(
‹g_hódîs
);

224 
	`LOG_MSG
("[resize] done\n");

226  
SUCCESS
;

227 
	}
}

231 
	$ªsize_hash_èbÀ_if_√eded
(
HashTabÀ
 *
ht
)

233 if(
ht
->
size
 - ht->
ñem_num
 < 1)

235 
	`hash_ªsize
(
ht
);

237 
	}
}

	@rtm-charlie/hash_hle/hashtable.h

1 #i‚de‡
_HASH_TABLE_H_


2 
	#_HASH_TABLE_H_
 1

	)

4 
	#HASH_TABLE_INIT_SIZE
 65536

	)

5 
	#HASH_INDEX
(
ht
, 
key
Ë(
	`hash_°r
((key)Ë% (ht)->
size
)

	)

7 #i‡
deföed
(
DEBUG
)

8 
	#LOG_MSG
 
¥ötf


	)

10 
	#LOG_MSG
(...)

	)

13 
	~<±hªad.h
>

16 
	#SUCCESS
 0

	)

17 
	#FAILED
 -1

	)

22 
hÀ_öô
();

23 
hÀ_lock
();

24 
hÀ_ªÀa£
();

28 
	s_Buckë


30 *
	mkey
;

31 *
	mvÆue
;

32 
_Buckë
 *
	m√xt
;

33 } 
	tBuckë
;

35 
	s_Hódî


37 
_Buckë
 *
	m√xt
;

38 vﬁ©ûê
	mmuãx_vÆ
;

39 } 
	tHódî
;

41 
	s_HashTabÀ


43 
	msize
;

44 
	mñem_num
;

45 
Hódî
 *
	mhódîs
;

46 } 
	tHashTabÀ
;

48 
hash_öô
(
HashTabÀ
 *
ht
);

49 
hash_lookup
(
HashTabÀ
 *
ht
, *
key
, **
ªsu…
);

50 
hash_ö£π
(
HashTabÀ
 *
ht
, *
key
, *
vÆue
);

51 
hash_ªmove
(
HashTabÀ
 *
ht
, *
key
);

52 
hash_de°roy
(
HashTabÀ
 *
ht
);

	@rtm-charlie/hash_hle/main.cpp

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<as£π.h
>

4 
	~<°rög.h
>

5 
	~"hashèbÀ.h
"

6 
	~<°rög
>

7 
	~<io°ªam
>

8 
	~<time.h
>

10 
	#TEST
(
tˇ£
Ë
	`¥ötf
(">>> [START CASE] "Åˇ£ "<<<\n")

	)

11 
	#PASS
(
tˇ£
Ë
	`¥ötf
(">>> [PASSED] "Åˇ£ " <<<\n")

	)

13 
	gnum_thªads
 = 4;

14 *
	$w‹kî
(*
∑ø
)

16 
HashTabÀ
 *
ht
 = (HashTabÀ *)
∑ø
;

18 
öt1
 = 10;

19 
öt2
 = 20;

20 
°r1
[] = "Hello TIPI";

21 
°r2
[] = "Value";

23 *
j
 = 
NULL
;

24 *
föd_°r
 = 
NULL
;

25 
ªsu…
 = 0;

26 
i
;

27 
	`§™d
(()
	`time
(
NULL
));

30 
	`TEST
("Key insert");

31 
i
 = 0; i < 10000; i++){

32 
°d
::
°rög
 
°r
 = std::
	`to_°rög
(
	`ønd
());

33 *
c
 = 
	`°rdup
(
°r
.
	`c_°r
());

34 
	`hash_ö£π
(
ht
, 
c
, &
°r1
);

37 
	`PASS
("Key insert");

43 
	`TEST
("KeyÜookup");

44 
	`hash_lookup
(
ht
, "KeyI¡", (**)&
j
);

45 
	`hash_lookup
(
ht
, "KeySå", (**)&
föd_°r
);

47 
	`as£π
(
	`°rcmp
(
föd_°r
, 
°r1
) == 0);

48 
	`as£π
(*
j
 = 
öt1
);

49 
	`PASS
("KeyÜookup");

54 
	`TEST
("Test key update");

55 
	`hash_ö£π
(
ht
, "KeyI¡", &
öt2
);

56 
	`hash_lookup
(
ht
, "KeyI¡", (**)&
j
);

57 
	`as£π
(*
j
 = 
öt2
);

58 
	`PASS
("Test key update");

60 
	`TEST
(">>> Test keyÇot found <<< ");

61 
ªsu…
 = 
	`hash_lookup
(
ht
, "n⁄-exôs-key", (**)&
j
);

62 
	`as£π
(
ªsu…
 =
FAILED
);

63 
	`PASS
("non-exist-keyÜookup");

65 
	`TEST
("Test keyÇot foundáfterÑemove");

66 
°rMyKey
[] = "My-Key-Value";

67 
föd_°r
 = 
NULL
;

68 
	`hash_ö£π
(
ht
, "My-Key", &
°rMyKey
);

69 
ªsu…
 = 
	`hash_ªmove
(
ht
, "My-Key");

70 
	`as£π
(
ªsu…
 =
SUCCESS
);

72 
ªsu…
 = 
	`hash_lookup
(
ht
, "My-Key", (**)&
föd_°r
);

73 
	`as£π
(
föd_°r
 =
NULL
);

74 
	`as£π
(
ªsu…
 =
FAILED
);

75 
	`PASS
("Test keyÇot foundáfterÑemove");

77 
	`PASS
(">>> Test keyÇot found <<< ");

79 
	`TEST
("Add manyÉlementsánd make hashtableÑehash");

80 
	`hash_ö£π
(
ht
, "a1", &
öt2
);

81 
	`hash_ö£π
(
ht
, "a2", &
öt1
);

82 
	`hash_ö£π
(
ht
, "a3", &
öt1
);

83 
	`hash_ö£π
(
ht
, "a4", &
öt1
);

84 
	`hash_ö£π
(
ht
, "a5", &
öt1
);

85 
	`hash_ö£π
(
ht
, "a6", &
öt1
);

86 
	`hash_ö£π
(
ht
, "a7", &
öt1
);

87 
	`hash_ö£π
(
ht
, "a8", 
°r2
);

88 
	`hash_ö£π
(
ht
, "a9", &
öt1
);

89 
	`hash_ö£π
(
ht
, "a10", &
öt1
);

90 
	`hash_ö£π
(
ht
, "a11", &
öt1
);

91 
	`hash_ö£π
(
ht
, "a12", &
öt1
);

92 
	`hash_ö£π
(
ht
, "a13", &
öt1
);

93 
	`hash_ö£π
(
ht
, "a14", &
öt1
);

94 
	`hash_ö£π
(
ht
, "a15", &
öt1
);

95 
	`hash_ö£π
(
ht
, "a16", &
öt1
);

96 
	`hash_ö£π
(
ht
, "a17", &
öt1
);

97 
	`hash_ö£π
(
ht
, "a18", &
öt1
);

98 
	`hash_ö£π
(
ht
, "a19", &
öt1
);

99 
	`hash_ö£π
(
ht
, "a20", &
öt1
);

100 
	`hash_ö£π
(
ht
, "a21", &
öt1
);

101 
	`hash_ö£π
(
ht
, "a22", &
öt1
);

102 
	`hash_ö£π
(
ht
, "a23", &
öt1
);

103 
	`hash_ö£π
(
ht
, "a24", &
öt1
);

104 
	`hash_ö£π
(
ht
, "a24", &
öt1
);

105 
	`hash_ö£π
(
ht
, "a24", &
öt1
);

106 
	`hash_ö£π
(
ht
, "a25", &
öt1
);

107 
	`hash_ö£π
(
ht
, "a26", &
öt1
);

108 
	`hash_ö£π
(
ht
, "a27", &
öt1
);

109 
	`hash_ö£π
(
ht
, "a28", &
öt1
);

110 
	`hash_ö£π
(
ht
, "a29", &
öt1
);

111 
	`hash_ö£π
(
ht
, "a30", &
öt1
);

112 
	`hash_ö£π
(
ht
, "a31", &
öt1
);

113 
	`hash_ö£π
(
ht
, "a32", &
öt1
);

114 
	`hash_ö£π
(
ht
, "a33", &
öt1
);

116 
	`hash_lookup
(
ht
, "a23", (**)&
j
);

117 
	`as£π
(*
j
 = 
öt1
);

118 
	`hash_lookup
(
ht
, "a30", (**)&
j
);

119 
	`as£π
(*
j
 = 
öt1
);

121 
	}
}

123 
	$maö
(
¨gc
, **
¨gv
) {

124 
±hªad_t
 
thªad
[
num_thªads
];

125 
i
;

127 
HashTabÀ
 *
ht
 = (HashTabÀ *)
	`mÆloc
((HashTable));

128 
ªsu…
 = 
	`hash_öô
(
ht
);

130 
	`as£π
(
ªsu…
 =
SUCCESS
);

131 
i
 = 0; i < 
num_thªads
; i++) {

132 
ªt
 = 
	`±hªad_¸óã
(&
thªad
[
i
], 
NULL
, &
w‹kî
, (*)
ht
);

133 i‡(
ªt
) {

134 
	`¥ötf
("createÅhreadÉrror \n");

138 
i
 = 0; i < 
num_thªads
; i++) {

139 
ªt
 = 
	`±hªad_joö
(
thªad
[
i
], 
NULL
);

144 
	`PASS
("Add manyÉlementsánd make hashtableÑehash");

146 
	`hash_de°roy
(
ht
);

147 
	`‰ì
(
ht
);

149 
	`¥ötf
("Woohoo, ItÜooksÜike HashTable worksÖroperly\n");

152 
	}
}

	@rtm-charlie/hash_rtm/hashtable.cpp

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<immöåö.h
>

5 
	~"hashèbÀ.h
"

7 
ªsize_hash_èbÀ_if_√eded
(
HashTabÀ
 *
ht
);

8 
hash_°r
(*
key
);

10 
	$hash_öô
(
HashTabÀ
 *
ht
)

12 
ht
->
size
 = 
HASH_TABLE_INIT_SIZE
;

13 
ht
->
ñem_num
 = 0;

14 
ht
->
hódîs
 = (
Hódî
 *)
	`ˇŒoc
(ht->
size
, (Header));

16 if(
ht
->
hódîs
 =
NULL
Ë 
FAILED
;

17 
i
;

18 
i
 = 0; i < 
ht
->
size
; i++) {

19 
	`±hªad_muãx_öô
(&(
ht
->
hódîs
[
i
].
muãx
), 
NULL
);

22 
	`LOG_MSG
("[öô]\tsize: %i\n", 
ht
->
size
);

24  
SUCCESS
;

25 
	}
}

27 
	$hash_lookup
(
HashTabÀ
 *
ht
, *
key
, **
ªsu…
)

29 
°©us
;

30 
ödex
 = 
	`HASH_INDEX
(
ht
, 
key
);

31 if((
°©us
 = 
	`_xbegö
()Ë=
_XBEGIN_STARTED
) {

32 
Hódî
 *
hódî
 = &(
ht
->
hódîs
[
ödex
]);

33 
Buckë
 *
buckë
 = 
hódî
->
√xt
;

34 if(
buckë
 =
NULL
) {

35 
	`_xíd
();

36 
Áûed
;

38 
buckë
)

40 if(
	`°rcmp
(
buckë
->
key
, key) == 0)

44 *
ªsu…
 = 
buckë
->
vÆue
;

45 
	`_xíd
();

46  
SUCCESS
;

49 
buckë
 = buckë->
√xt
;

51 
	`_xíd
();

53 
Hódî
 *
hódî
 = &(
ht
->
hódîs
[
ödex
]);

54 
	`±hªad_muãx_lock
(&
hódî
->
muãx
);

55 
Buckë
 *
buckë
 = 
hódî
->
√xt
;

56 if(
buckë
 =
NULL
) {

57 
	`±hªad_muãx_u∆ock
(&
hódî
->
muãx
);

58 
Áûed
;

60 
buckë
)

62 if(
	`°rcmp
(
buckë
->
key
, key) == 0)

66 *
ªsu…
 = 
buckë
->
vÆue
;

67  
SUCCESS
;

70 
buckë
 = buckë->
√xt
;

72 
	`±hªad_muãx_u∆ock
(&
hódî
->
muãx
);

74 
Áûed
:

75 
	`LOG_MSG
("[lookup]\àkey:%s\tÁûed\t\n", 
key
);

76  
FAILED
;

77 
	}
}

79 
	$hash_ö£π
(
HashTabÀ
 *
ht
,*
key
, *
vÆue
)

82 
°©us
;

83 
Buckë
 *
buckë
 = (Buckë *)
	`mÆloc
((Bucket));

85 
	`ªsize_hash_èbÀ_if_√eded
(
ht
);

87 
ödex
 = 
	`HASH_INDEX
(
ht
, 
key
);

89 if((
°©us
 = 
	`_xbegö
()Ë=
_XBEGIN_STARTED
) {

90 
Hódî
 *
hódî
 = &(
ht
->
hódîs
[
ödex
]);

91 
Buckë
 *
‹g_buckë
 = 
hódî
->
√xt
;

92 
Buckë
 *
tmp_buckë
 = 
‹g_buckë
;

94 
tmp_buckë
)

96 if(
	`°rcmp
(
key
, 
tmp_buckë
->key) == 0)

98 
tmp_buckë
->
vÆue
 = value;

99 
	`_xíd
();

100 
	`‰ì
(
buckë
);

101  
SUCCESS
;

104 
tmp_buckë
 =Åmp_buckë->
√xt
;

106 
buckë
->
key
 = key;

107 
buckë
->
vÆue
 = value;

108 
buckë
->
√xt
 = 
NULL
;

110 
ht
->
ñem_num
 += 1;

112 if(
‹g_buckë
 !
NULL
)

114 
buckë
->
√xt
 = 
‹g_buckë
;

117 (
ht
->
hódîs
[
ödex
]).
√xt

buckë
;

118 
	`_xíd
();

119 
	`¥ötf
("committed\n");

122 
	`¥ötf
("ab‹à°©u†i†%u\n", 
°©us
);

123 
Hódî
 *
hódî
 = &(
ht
->
hódîs
[
ödex
]);

124 
	`±hªad_muãx_lock
(&
hódî
->
muãx
);

125 
Buckë
 *
‹g_buckë
 = 
hódî
->
√xt
;

126 
Buckë
 *
tmp_buckë
 = 
‹g_buckë
;

128 
tmp_buckë
)

130 if(
	`°rcmp
(
key
, 
tmp_buckë
->key) == 0)

132 
tmp_buckë
->
vÆue
 = value;

133 
	`‰ì
(
buckë
);

134 
	`±hªad_muãx_u∆ock
(&
hódî
->
muãx
);

135  
SUCCESS
;

138 
tmp_buckë
 =Åmp_buckë->
√xt
;

140 
buckë
->
key
 = key;

141 
buckë
->
vÆue
 = value;

142 
buckë
->
√xt
 = 
NULL
;

144 
ht
->
ñem_num
 += 1;

146 if(
‹g_buckë
 !
NULL
)

148 
buckë
->
√xt
 = 
‹g_buckë
;

151 
ht
->
hódîs
[
ödex
].
√xt

buckë
;

152 
	`±hªad_muãx_u∆ock
(&
hódî
->
muãx
);

156  
SUCCESS
;

157 
	}
}

159 
	$hash_ªmove
(
HashTabÀ
 *
ht
, *
key
)

161 
°©us
;

162 
ödex
 = 
	`HASH_INDEX
(
ht
, 
key
);

163 if((
°©us
 = 
	`_xbegö
()Ë=
_XBEGIN_STARTED
) {

164 
Hódî
 *
hódî
 = &(
ht
->
hódîs
[
ödex
]);

165 
Buckë
 *
buckë
 = 
hódî
->
√xt
;

166 
Buckë
 *
¥ev
 = 
NULL
;

167 if(
buckë
 =
NULL
) {

168 
	`_xíd
();

169  
FAILED
;

173 
buckë
)

175 if(
	`°rcmp
(
buckë
->
key
, key) == 0)

177 
	`LOG_MSG
("[ªmove]\tkey:(%sËödex: %d\n", 
key
, 
ödex
);

179 if(
¥ev
 =
NULL
)

181 
ht
->
hódîs
[
ödex
].
√xt
 = 
buckë
->next;

185 
¥ev
->
√xt
 = 
buckë
->next;

187 
	`_xíd
();

188 
	`‰ì
(
buckë
);

189  
SUCCESS
;

191 
¥ev
 = 
buckë
;

192 
buckë
 = buckë->
√xt
;

194 
	`_xíd
();

196 
Hódî
 *
hódî
 = &(
ht
->
hódîs
[
ödex
]);

197 
	`±hªad_muãx_lock
(&
hódî
->
muãx
);

198 
Buckë
 *
buckë
 = 
hódî
->
√xt
;

199 
Buckë
 *
¥ev
 = 
NULL
;

200 if(
buckë
 =
NULL
) {

201 
	`±hªad_muãx_u∆ock
(&
hódî
->
muãx
);

202  
FAILED
;

206 
buckë
)

208 if(
	`°rcmp
(
buckë
->
key
, key) == 0)

210 
	`LOG_MSG
("[ªmove]\tkey:(%sËödex: %d\n", 
key
, 
ödex
);

212 if(
¥ev
 =
NULL
)

214 
ht
->
hódîs
[
ödex
].
√xt
 = 
buckë
->next;

218 
¥ev
->
√xt
 = 
buckë
->next;

220 
	`±hªad_muãx_u∆ock
(&
hódî
->
muãx
);

221 
	`‰ì
(
buckë
);

222  
SUCCESS
;

224 
¥ev
 = 
buckë
;

225 
buckë
 = buckë->
√xt
;

227 
	`±hªad_muãx_u∆ock
(&
hódî
->
muãx
);

229 
	`LOG_MSG
("[ªmove]\àkey:%†nŸ foundÑemovê\tÁûed\t\n", 
key
);

230  
FAILED
;

231 
	}
}

233 
	$hash_de°roy
(
HashTabÀ
 *
ht
)

235 
i
;

236 
Buckë
 *
cur
 = 
NULL
;

237 
Buckë
 *
tmp
 = 
NULL
;

239 
i
=0; i < 
ht
->
size
; ++i)

241 
cur
 = 
ht
->
hódîs
[
i
].
√xt
;

242 
cur
)

244 
tmp
 = 
cur
;

245 
cur
 = cur->
√xt
;

246 
	`‰ì
(
tmp
);

249 
	`‰ì
(
ht
->
hódîs
);

251  
SUCCESS
;

252 
	}
}

254 
	$hash_°r
(*
key
)

256 
hash
 = 0;

258 *
cur
 = 
key
;

260 *
cur
 != '\0')

262 
hash
 +*
cur
;

263 ++
cur
;

266  
hash
;

267 
	}
}

269 
	$hash_ªsize
(
HashTabÀ
 *
ht
)

272 
‹g_size
 = 
ht
->
size
;

273 
ht
->
size
 = ht->size * 2;

274 
ht
->
ñem_num
 = 0;

276 
	`LOG_MSG
("[ªsize]\t‹g size: %i\äew size: %i\n", 
‹g_size
, 
ht
->
size
);

279 
Hódî
 *
hódîs
 = (Hódî *)
	`ˇŒoc
(
ht
->
size
, (Header));

281 
Hódî
 *
‹g_hódîs
 = 
ht
->
hódîs
;

282 
ht
->
hódîs
 = headers;

284 
i
 = 0;

285 
i
=0; i < 
‹g_size
; ++i)

287 
Buckë
 *
cur
 = 
‹g_hódîs
[
i
].
√xt
;

288 
Buckë
 *
tmp
;

289 
cur
)

292 
	`hash_ö£π
(
ht
, 
cur
->
key
, cur->
vÆue
);

295 
tmp
 = 
cur
;

296 
cur
 = cur->
√xt
;

297 
	`‰ì
(
tmp
);

300 
	`‰ì
(
‹g_hódîs
);

302 
	`LOG_MSG
("[resize] done\n");

304  
SUCCESS
;

305 
	}
}

309 
	$ªsize_hash_èbÀ_if_√eded
(
HashTabÀ
 *
ht
)

311 if(
ht
->
size
 - ht->
ñem_num
 < 1)

313 
	`hash_ªsize
(
ht
);

315 
	}
}

	@rtm-charlie/hash_rtm/hashtable.h

1 #i‚de‡
_HASH_TABLE_H_


2 
	#_HASH_TABLE_H_
 1

	)

4 
	#HASH_TABLE_INIT_SIZE
 65536

	)

5 
	#HASH_INDEX
(
ht
, 
key
Ë(
	`hash_°r
((key)Ë% (ht)->
size
)

	)

7 #i‡
deföed
(
DEBUG
)

8 
	#LOG_MSG
 
¥ötf


	)

10 
	#LOG_MSG
(...)

	)

13 
	~<±hªad.h
>

15 
	#SUCCESS
 0

	)

16 
	#FAILED
 -1

	)

20 
	s_Buckë


22 *
	mkey
;

23 *
	mvÆue
;

24 
_Buckë
 *
	m√xt
;

25 } 
	tBuckë
;

27 
	s_Hódî


29 
_Buckë
 *
	m√xt
;

30 
±hªad_muãx_t
 
	mmuãx
;

31 } 
	tHódî
;

33 
	s_HashTabÀ


35 
	msize
;

36 
	mñem_num
;

37 
Hódî
 *
	mhódîs
;

38 } 
	tHashTabÀ
;

40 
hash_öô
(
HashTabÀ
 *
ht
);

41 
hash_lookup
(
HashTabÀ
 *
ht
, *
key
, **
ªsu…
);

42 
hash_ö£π
(
HashTabÀ
 *
ht
, *
key
, *
vÆue
);

43 
hash_ªmove
(
HashTabÀ
 *
ht
, *
key
);

44 
hash_de°roy
(
HashTabÀ
 *
ht
);

	@rtm-charlie/hash_rtm/main.cpp

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<as£π.h
>

4 
	~<°rög.h
>

5 
	~"hashèbÀ.h
"

6 
	~<°rög
>

7 
	~<io°ªam
>

8 
	~<time.h
>

10 
	#TEST
(
tˇ£
Ë
	`¥ötf
(">>> [START CASE] "Åˇ£ "<<<\n")

	)

11 
	#PASS
(
tˇ£
Ë
	`¥ötf
(">>> [PASSED] "Åˇ£ " <<<\n")

	)

13 
	gnum_thªads
 = 4;

14 *
	$w‹kî
(*
∑ø
)

16 
HashTabÀ
 *
ht
 = (HashTabÀ *)
∑ø
;

18 
öt1
 = 10;

19 
öt2
 = 20;

20 
°r1
[] = "Hello TIPI";

21 
°r2
[] = "Value";

23 *
j
 = 
NULL
;

24 *
föd_°r
 = 
NULL
;

25 
ªsu…
 = 0;

26 
i
;

27 
	`§™d
(()
	`time
(
NULL
));

30 
	`TEST
("Key insert");

31 
i
 = 0; i < 10000; i++){

32 
°d
::
°rög
 
°r
 = std::
	`to_°rög
(
	`ønd
());

33 *
c
 = 
	`°rdup
(
°r
.
	`c_°r
());

34 
	`hash_ö£π
(
ht
, 
c
, &
°r1
);

37 
	`PASS
("Key insert");

43 
	`TEST
("KeyÜookup");

44 
	`hash_lookup
(
ht
, "KeyI¡", (**)&
j
);

45 
	`hash_lookup
(
ht
, "KeySå", (**)&
föd_°r
);

47 
	`as£π
(
	`°rcmp
(
föd_°r
, 
°r1
) == 0);

48 
	`as£π
(*
j
 = 
öt1
);

49 
	`PASS
("KeyÜookup");

54 
	`TEST
("Test key update");

55 
	`hash_ö£π
(
ht
, "KeyI¡", &
öt2
);

56 
	`hash_lookup
(
ht
, "KeyI¡", (**)&
j
);

57 
	`as£π
(*
j
 = 
öt2
);

58 
	`PASS
("Test key update");

60 
	`TEST
(">>> Test keyÇot found <<< ");

61 
ªsu…
 = 
	`hash_lookup
(
ht
, "n⁄-exôs-key", (**)&
j
);

62 
	`as£π
(
ªsu…
 =
FAILED
);

63 
	`PASS
("non-exist-keyÜookup");

65 
	`TEST
("Test keyÇot foundáfterÑemove");

66 
°rMyKey
[] = "My-Key-Value";

67 
föd_°r
 = 
NULL
;

68 
	`hash_ö£π
(
ht
, "My-Key", &
°rMyKey
);

69 
ªsu…
 = 
	`hash_ªmove
(
ht
, "My-Key");

70 
	`as£π
(
ªsu…
 =
SUCCESS
);

72 
ªsu…
 = 
	`hash_lookup
(
ht
, "My-Key", (**)&
föd_°r
);

73 
	`as£π
(
föd_°r
 =
NULL
);

74 
	`as£π
(
ªsu…
 =
FAILED
);

75 
	`PASS
("Test keyÇot foundáfterÑemove");

77 
	`PASS
(">>> Test keyÇot found <<< ");

79 
	`TEST
("Add manyÉlementsánd make hashtableÑehash");

80 
	`hash_ö£π
(
ht
, "a1", &
öt2
);

81 
	`hash_ö£π
(
ht
, "a2", &
öt1
);

82 
	`hash_ö£π
(
ht
, "a3", &
öt1
);

83 
	`hash_ö£π
(
ht
, "a4", &
öt1
);

84 
	`hash_ö£π
(
ht
, "a5", &
öt1
);

85 
	`hash_ö£π
(
ht
, "a6", &
öt1
);

86 
	`hash_ö£π
(
ht
, "a7", &
öt1
);

87 
	`hash_ö£π
(
ht
, "a8", 
°r2
);

88 
	`hash_ö£π
(
ht
, "a9", &
öt1
);

89 
	`hash_ö£π
(
ht
, "a10", &
öt1
);

90 
	`hash_ö£π
(
ht
, "a11", &
öt1
);

91 
	`hash_ö£π
(
ht
, "a12", &
öt1
);

92 
	`hash_ö£π
(
ht
, "a13", &
öt1
);

93 
	`hash_ö£π
(
ht
, "a14", &
öt1
);

94 
	`hash_ö£π
(
ht
, "a15", &
öt1
);

95 
	`hash_ö£π
(
ht
, "a16", &
öt1
);

96 
	`hash_ö£π
(
ht
, "a17", &
öt1
);

97 
	`hash_ö£π
(
ht
, "a18", &
öt1
);

98 
	`hash_ö£π
(
ht
, "a19", &
öt1
);

99 
	`hash_ö£π
(
ht
, "a20", &
öt1
);

100 
	`hash_ö£π
(
ht
, "a21", &
öt1
);

101 
	`hash_ö£π
(
ht
, "a22", &
öt1
);

102 
	`hash_ö£π
(
ht
, "a23", &
öt1
);

103 
	`hash_ö£π
(
ht
, "a24", &
öt1
);

104 
	`hash_ö£π
(
ht
, "a24", &
öt1
);

105 
	`hash_ö£π
(
ht
, "a24", &
öt1
);

106 
	`hash_ö£π
(
ht
, "a25", &
öt1
);

107 
	`hash_ö£π
(
ht
, "a26", &
öt1
);

108 
	`hash_ö£π
(
ht
, "a27", &
öt1
);

109 
	`hash_ö£π
(
ht
, "a28", &
öt1
);

110 
	`hash_ö£π
(
ht
, "a29", &
öt1
);

111 
	`hash_ö£π
(
ht
, "a30", &
öt1
);

112 
	`hash_ö£π
(
ht
, "a31", &
öt1
);

113 
	`hash_ö£π
(
ht
, "a32", &
öt1
);

114 
	`hash_ö£π
(
ht
, "a33", &
öt1
);

116 
	`hash_lookup
(
ht
, "a23", (**)&
j
);

117 
	`as£π
(*
j
 = 
öt1
);

118 
	`hash_lookup
(
ht
, "a30", (**)&
j
);

119 
	`as£π
(*
j
 = 
öt1
);

121 
	}
}

123 
	$maö
(
¨gc
, **
¨gv
) {

124 
±hªad_t
 
thªad
[
num_thªads
];

125 
i
;

127 
HashTabÀ
 *
ht
 = (HashTabÀ *)
	`mÆloc
((HashTable));

128 
ªsu…
 = 
	`hash_öô
(
ht
);

130 
	`as£π
(
ªsu…
 =
SUCCESS
);

131 
i
 = 0; i < 
num_thªads
; i++) {

132 
ªt
 = 
	`±hªad_¸óã
(&
thªad
[
i
], 
NULL
, &
w‹kî
, (*)
ht
);

133 i‡(
ªt
) {

134 
	`¥ötf
("createÅhreadÉrror \n");

138 
i
 = 0; i < 
num_thªads
; i++) {

139 
ªt
 = 
	`±hªad_joö
(
thªad
[
i
], 
NULL
);

144 
	`PASS
("Add manyÉlementsánd make hashtableÑehash");

146 
	`hash_de°roy
(
ht
);

147 
	`‰ì
(
ht
);

149 
	`¥ötf
("Woohoo, ItÜooksÜike HashTable worksÖroperly\n");

152 
	}
}

	@rtm-charlie/list_hle/listNode.cpp

1 
	~"li°Node.h
"

2 
	~<°dlib.h
>

4 
pNode
 
	$ÆlocNode
(
vÆ
)

6 
pNode
 
ªt
 = 
NULL
;

7 
ªt
 = (
pNode
)
	`mÆloc
((
Node
));

8 if(
ªt
)

10 
ªt
->
vÆ
 = val;

11 
ªt
->
√xt
 = 
NULL
;

14  
ªt
;

15 
	}
}

17 
	$‰ìNode
(
pNode
 
node
)

19 if(
node
)

21 
	`‰ì
(
node
);

23 
	}
}

	@rtm-charlie/list_hle/listNode.h

1 
	~<muãx
>

2 
	~<immöåö.h
>

4 
	s_Node


6 
	mvÆ
;

7 
_Node
* 
	m√xt
;

8 }
	tNode
,*
	tpNode
;

	@rtm-charlie/list_hle/list_cgl.cpp

1 
	~"li°Node.˝p
"

2 
	~<io°ªam
>

3 
	~<immöåö.h
>

4 
	~<°dlib.h
>

6 
FILE
* 
	gdbgLogs
;

8 
	#MIN
 -999999

	)

9 
	#MAX
 999999

	)

11 ˛as†
	cli°_cgl


13 
	mpublic
:

14 
li°_cgl
();

15 ~
li°_cgl
();

17 
boﬁ
 
add
(
vÆ
);

18 
boﬁ
 
ªmove
(
vÆ
);

19 
boﬁ
 
c⁄èös
(
vÆ
);

20 
hÀ_lock
();

21 
hÀ_ªÀa£
();

23 
¥ötAŒ
();

24 
	m¥iv©e
:

26 
boﬁ
 
vÆid©e
(
pNode
 
¥ed
,ÖNodê
cuº
);

27 
pNode
 
	mhód
;

29 vﬁ©ûê
	mmtx_vÆ
;

32 
	gli°_cgl
::
	$li°_cgl
()

34 
hód
 = 
	`ÆlocNode
(
MIN
);

35 
hód
->
√xt
 = 
	`ÆlocNode
(
MAX
);

36 
mtx_vÆ
 = 0;

38 
	}
}

40 
	gli°_cgl
::~
	$li°_cgl
()

42 
	`‰ìNode
(
hód
->
√xt
);

43 
	`‰ìNode
(
hód
);

45 
	}
}

47 
	gli°_cgl
::
	$hÀ_lock
()

49 
	`__©omic_exch™ge_n
(&
mtx_vÆ
, 1, 
__ATOMIC_ACQUIRE
 | 
__ATOMIC_HLE_ACQUIRE
))

50 
	`_mm_∑u£
();

51  
åue
;

52 
	}
}

54 
	gli°_cgl
::
	$hÀ_ªÀa£
()

56 
	`__©omic_°‹e_n
(&
mtx_vÆ
, 0, 
__ATOMIC_RELEASE
 | 
__ATOMIC_HLE_RELEASE
);

57  
åue
;

58 
	}
}

60 
boﬁ
 
	gli°_cgl
::
	$add
(
vÆ
)

62 
boﬁ
 
ªtVÆ
 = 
Ál£
;

64 
	`hÀ_lock
();

65 
pNode
 
¥ed
 = 
hód
;

66 
pNode
 
cuº
 = 
¥ed
->
√xt
;

67 
cuº
->
vÆ
 < val)

69 
¥ed
 = 
cuº
;

70 
cuº
 = cuº->
√xt
;

72 if(
cuº
->
vÆ
 == val)

74 
ªtVÆ
 = 
Ál£
;

78 
pNode
 
node
 = 
	`ÆlocNode
(
vÆ
);

79 
node
->
√xt
 = 
cuº
;

80 
¥ed
->
√xt
 = 
node
;

81 
ªtVÆ
 = 
åue
;

83 
	`hÀ_ªÀa£
();

84  
ªtVÆ
;

85 
	}
}

87 
boﬁ
 
	gli°_cgl
::
	$ªmove
(
vÆ
)

89 
boﬁ
 
ªtVÆ
 = 
Ál£
;

91 
	`hÀ_lock
();

92 
pNode
 
¥ed
 = 
hód
;

93 
pNode
 
cuº
 = 
¥ed
->
√xt
;

95 
cuº
->
vÆ
 < val)

97 
¥ed
 = 
cuº
;

98 
cuº
 = cuº->
√xt
;

101 if(
cuº
->
vÆ
 == val)

103 
¥ed
->
√xt
 = 
cuº
->next;

104 
	`‰ìNode
(
cuº
);

105 
cuº
 = 
NULL
;

106 
ªtVÆ
 = 
åue
;

110 
ªtVÆ
 = 
Ál£
;

113 
	`hÀ_ªÀa£
();

114  
ªtVÆ
;

115 
	}
}

117 
boﬁ
 
	gli°_cgl
::
	$c⁄èös
(
vÆ
)

119 
boﬁ
 
ªtVÆ
 = 
Ál£
;

122 
	`hÀ_lock
();

123 
pNode
 
¥ed
 = 
hód
;

124 
pNode
 
cuº
 = 
¥ed
->
√xt
;

126 
cuº
->
vÆ
 < val)

128 
¥ed
 = 
cuº
;

129 
cuº
 = cuº->
√xt
;

131 
ªtVÆ
 = (
cuº
->
vÆ
 == val);

134 
	`hÀ_ªÀa£
();

135  
ªtVÆ
;

136 
	}
}

139 
	gli°_cgl
::
	$¥ötAŒ
()

141 
FILE
* 
vFûe
 = 
	`f›í
("validate.txt","w");

146 
pNode
 
cuº
 = 
hód
;

147 
cuº
)

149 
	`Ârötf
(
vFûe
,"\n%d",
cuº
->
vÆ
);

150 
	`fÊush
(
vFûe
);

151 
cuº
 = cuº->
√xt
;

153 
	`f˛o£
(
vFûe
);

156 
	}
}

	@rtm-charlie/list_hle/test_list.cpp

1 
	~<io°ªam
>

2 
	~<thªad
>

3 
	~"li°_cgl.˝p
"

4 
	~<time.h
>

5 
	~<thªad
>

6 
	~<uni°d.h
>

8 
usög
 
«me•a˚
 
	g°d
;

10 
	#T_MAX
 8

	)

11 
	#SLEEP_DUR
 10000

	)

12 
	#NUM_INSERT
 1000

	)

14 
li°_cgl
 
	gcgl
;

16 
	g˛ockcy˛es_a
[
T_MAX
];

17 
	g˛ockcy˛es_r
[
T_MAX
];

18 
	g˛ockcy˛es_c
[
T_MAX
];

19 
	g˛ockcy˛es_¨c
[
T_MAX
];

21 
	$ã°Li°
(
i
)

23 
˛ock_t
 
s_a
,
e_a
;

24 
˛ock_t
 
s_r
,
e_r
;

25 
˛ock_t
 
s_c
,
e_c
;

26 
˛ock_t
 
s_¨c
,
e_¨c
;

28 
s_¨c
 = 
	`˛ock
();

30 
s_a
 = 
s_¨c
;

31 
j
 = 1; j <
NUM_INSERT
; j++)

33 
cgl
.
	`add
(
i
 * 
NUM_INSERT
 + 
j
);

37 
e_a
 = 
	`˛ock
();

39 
s_c
 = 
	`˛ock
();

40 
j
 = 1; j <
NUM_INSERT
; j++)

42 
cgl
.
	`c⁄èös
(
i
 * 
NUM_INSERT
 + 
j
);

44 
e_c
 = 
	`˛ock
();

46 
s_r
 = 
	`˛ock
();

47 
j
 = 
NUM_INSERT
; j >= 1; j--)

49 
cgl
.
	`ªmove
(
i
 * 
NUM_INSERT
 + 
j
);

53 
e_r
 = 
	`˛ock
();

55 
e_¨c
 = 
e_r
;

57 
˛ockcy˛es_a
[
i
] = (
e_a
 - 
s_a
);

58 
˛ockcy˛es_r
[
i
] = (
e_r
 - 
s_r
);

59 
˛ockcy˛es_c
[
i
] = (
e_c
 - 
s_c
);

60 
˛ockcy˛es_¨c
[
i
] = (
e_¨c
 - 
s_¨c
);

61 
	}
}

63 
	$maö
()

65 
tŸÆTime_a
 = 0;

66 
tŸÆTime_r
 = 0;

67 
tŸÆTime_c
 = 0;

68 
tŸÆTime_¨c
 = 0;

70 
thªad
* 
pThªads
[
T_MAX
];

72 
i
 = 0; i < 
T_MAX
; i++)

74 
pThªads
[
i
] = 
√w
 
	`thªad
(
ã°Li°
,i);

77 
i
 = 0; i < 
T_MAX
; i++)

79 
pThªads
[
i
]->
	`joö
();

80 
	`dñëe
(
pThªads
[
i
]);

83 
cgl
.
	`¥ötAŒ
();

88 
i
 = 0; i < 
T_MAX
; i++)

90 
tŸÆTime_a
 +
˛ockcy˛es_a
[
i
];

91 
tŸÆTime_r
 +
˛ockcy˛es_r
[
i
];

92 
tŸÆTime_c
 +
˛ockcy˛es_c
[
i
];

93 
tŸÆTime_¨c
 +
˛ockcy˛es_¨c
[
i
];

96 
	`¥ötf
("\nTŸÆÅimêf‹ádd = %f",(()
tŸÆTime_a
)/
CLOCKS_PER_SEC
);

97 
	`¥ötf
("\nTŸÆÅimêf‹Ñemovê%f",(()
tŸÆTime_r
)/
CLOCKS_PER_SEC
);

98 
	`¥ötf
("\nTŸÆÅimêf‹ c⁄èö†%f",(()
tŸÆTime_c
)/
CLOCKS_PER_SEC
);

99 
	`¥ötf
("\nTŸÆÅimêf‹ c⁄cuºíàadd/ªmove/c⁄èö†%f",(()
tŸÆTime_¨c
)/
CLOCKS_PER_SEC
);

103 
	}
}

	@rtm-charlie/list_rtm/listNode.cpp

1 
	~"li°Node.h
"

2 
	~<°dlib.h
>

4 
pNode
 
	$ÆlocNode
(
vÆ
)

6 
pNode
 
ªt
 = 
NULL
;

7 
ªt
 = (
pNode
)
	`mÆloc
((
Node
));

8 if(
ªt
)

10 
ªt
->
vÆ
 = val;

11 
ªt
->
√xt
 = 
NULL
;

14  
ªt
;

15 
	}
}

17 
	$‰ìNode
(
pNode
 
node
)

19 if(
node
)

21 
	`‰ì
(
node
);

23 
	}
}

	@rtm-charlie/list_rtm/listNode.h

1 
	~<muãx
>

2 
	~<immöåö.h
>

4 
	s_Node


6 
	mvÆ
;

7 
_Node
* 
	m√xt
;

8 }
	tNode
,*
	tpNode
;

	@rtm-charlie/list_rtm/list_cgl.cpp

1 
	~"li°Node.˝p
"

2 
	~<io°ªam
>

3 
	~<immöåö.h
>

5 
FILE
* 
	gdbgLogs
;

7 
	#MIN
 -999999

	)

8 
	#MAX
 999999

	)

10 ˛as†
	cli°_cgl


12 
	mpublic
:

13 
li°_cgl
();

14 ~
li°_cgl
();

16 
boﬁ
 
add
(
vÆ
);

17 
boﬁ
 
ªmove
(
vÆ
);

18 
boﬁ
 
c⁄èös
(
vÆ
);

20 
¥ötAŒ
();

21 
	m¥iv©e
:

23 
boﬁ
 
vÆid©e
(
pNode
 
¥ed
,ÖNodê
cuº
);

24 
pNode
 
	mhód
;

25 
	m°d
::
muãx
 
mtx
;

28 
	gli°_cgl
::
	$li°_cgl
()

30 
hód
 = 
	`ÆlocNode
(
MIN
);

31 
hód
->
√xt
 = 
	`ÆlocNode
(
MAX
);

33 
	}
}

35 
	gli°_cgl
::~
	$li°_cgl
()

37 
	`‰ìNode
(
hód
->
√xt
);

38 
	`‰ìNode
(
hód
);

40 
	}
}

42 
boﬁ
 
	gli°_cgl
::
	$add
(
vÆ
)

44 
°©us
;

45 
boﬁ
 
ªtVÆ
 = 
Ál£
;

46 
pNode
 
node
 = 
	`ÆlocNode
(
vÆ
);

47 if((
°©us
 = 
	`_xbegö
()Ë=
_XBEGIN_STARTED
) {

48 
pNode
 
¥ed
 = 
hód
;

49 
pNode
 
cuº
 = 
¥ed
->
√xt
;

50 
cuº
->
vÆ
 < val)

52 
¥ed
 = 
cuº
;

53 
cuº
 = cuº->
√xt
;

55 if(
cuº
->
vÆ
 == val)

57 
ªtVÆ
 = 
Ál£
;

62 
node
->
√xt
 = 
cuº
;

63 
¥ed
->
√xt
 = 
node
;

64 
ªtVÆ
 = 
åue
;

66 
	`_xíd
();

68 
mtx
.
	`lock
();

70 
pNode
 
¥ed
 = 
hód
;

71 
pNode
 
cuº
 = 
¥ed
->
√xt
;

72 
cuº
->
vÆ
 < val)

74 
¥ed
 = 
cuº
;

75 
cuº
 = cuº->
√xt
;

77 if(
cuº
->
vÆ
 == val)

79 
ªtVÆ
 = 
Ál£
;

83 
pNode
 
node
 = 
	`ÆlocNode
(
vÆ
);

84 
node
->
√xt
 = 
cuº
;

85 
¥ed
->
√xt
 = 
node
;

86 
ªtVÆ
 = 
åue
;

89 
mtx
.
	`u∆ock
();

91 if(
ªtVÆ
 =
Ál£
)

92 
	`‰ì
(
node
);

93  
ªtVÆ
;

94 
	}
}

96 
boﬁ
 
	gli°_cgl
::
	$ªmove
(
vÆ
)

98 
boﬁ
 
ªtVÆ
 = 
Ál£
;

99 
°©us
;

100 if((
°©us
 = 
	`_xbegö
()Ë=
_XBEGIN_STARTED
) {

101 
pNode
 
¥ed
 = 
hód
;

102 
pNode
 
cuº
 = 
¥ed
->
√xt
;

104 
cuº
->
vÆ
 < val)

106 
¥ed
 = 
cuº
;

107 
cuº
 = cuº->
√xt
;

110 if(
cuº
->
vÆ
 == val)

112 
¥ed
->
√xt
 = 
cuº
->next;

113 
	`‰ìNode
(
cuº
);

114 
cuº
 = 
NULL
;

115 
ªtVÆ
 = 
åue
;

119 
ªtVÆ
 = 
Ál£
;

121 
	`_xíd
();

125 
mtx
.
	`lock
();

127 
pNode
 
¥ed
 = 
hód
;

128 
pNode
 
cuº
 = 
¥ed
->
√xt
;

130 
cuº
->
vÆ
 < val)

132 
¥ed
 = 
cuº
;

133 
cuº
 = cuº->
√xt
;

136 if(
cuº
->
vÆ
 == val)

138 
¥ed
->
√xt
 = 
cuº
->next;

139 
	`‰ìNode
(
cuº
);

140 
cuº
 = 
NULL
;

141 
ªtVÆ
 = 
åue
;

145 
ªtVÆ
 = 
Ál£
;

147 
mtx
.
	`u∆ock
();

149  
ªtVÆ
;

150 
	}
}

152 
boﬁ
 
	gli°_cgl
::
	$c⁄èös
(
vÆ
)

154 
°©us
;

155 
boﬁ
 
ªtVÆ
 = 
Ál£
;

156 if((
°©us
 = 
	`_xbegö
()Ë=
_XBEGIN_STARTED
) {

157 
pNode
 
¥ed
 = 
hód
;

158 
pNode
 
cuº
 = 
¥ed
->
√xt
;

160 
cuº
->
vÆ
 < val)

162 
¥ed
 = 
cuº
;

163 
cuº
 = cuº->
√xt
;

165 
ªtVÆ
 = (
cuº
->
vÆ
 == val);

166 
	`_xíd
();

169 
mtx
.
	`lock
();

171 
pNode
 
¥ed
 = 
hód
;

172 
pNode
 
cuº
 = 
¥ed
->
√xt
;

174 
cuº
->
vÆ
 < val)

176 
¥ed
 = 
cuº
;

177 
cuº
 = cuº->
√xt
;

179 
ªtVÆ
 = (
cuº
->
vÆ
 == val);

181 
mtx
.
	`u∆ock
();

183  
ªtVÆ
;

184 
	}
}

187 
	gli°_cgl
::
	$¥ötAŒ
()

189 
FILE
* 
vFûe
 = 
	`f›í
("validate.txt","w");

194 
pNode
 
cuº
 = 
hód
;

195 
cuº
)

197 
	`Ârötf
(
vFûe
,"\n%d",
cuº
->
vÆ
);

198 
	`fÊush
(
vFûe
);

199 
cuº
 = cuº->
√xt
;

201 
	`f˛o£
(
vFûe
);

204 
	}
}

	@rtm-charlie/list_rtm/test_list.cpp

1 
	~<io°ªam
>

2 
	~<thªad
>

3 
	~"li°_cgl.˝p
"

4 
	~<time.h
>

5 
	~<thªad
>

6 
	~<uni°d.h
>

8 
usög
 
«me•a˚
 
	g°d
;

10 
	#T_MAX
 8

	)

11 
	#SLEEP_DUR
 10000

	)

12 
	#NUM_INSERT
 1000

	)

14 
li°_cgl
 
	gcgl
;

16 
	g˛ockcy˛es_a
[
T_MAX
];

17 
	g˛ockcy˛es_r
[
T_MAX
];

18 
	g˛ockcy˛es_c
[
T_MAX
];

19 
	g˛ockcy˛es_¨c
[
T_MAX
];

21 
	$ã°Li°
(
i
)

23 
˛ock_t
 
s_a
,
e_a
;

24 
˛ock_t
 
s_r
,
e_r
;

25 
˛ock_t
 
s_c
,
e_c
;

26 
˛ock_t
 
s_¨c
,
e_¨c
;

28 
s_¨c
 = 
	`˛ock
();

30 
s_a
 = 
s_¨c
;

31 
j
 = 1; j <
NUM_INSERT
; j++)

33 
cgl
.
	`add
(
i
 * 
NUM_INSERT
 + 
j
);

37 
e_a
 = 
	`˛ock
();

39 
s_c
 = 
	`˛ock
();

40 
j
 = 1; j <
NUM_INSERT
; j++)

42 
cgl
.
	`c⁄èös
(
i
 * 
NUM_INSERT
 + 
j
);

44 
e_c
 = 
	`˛ock
();

46 
s_r
 = 
	`˛ock
();

47 
j
 = 
NUM_INSERT
; j >= 1; j--)

49 
cgl
.
	`ªmove
(
i
 * 
NUM_INSERT
 + 
j
);

53 
e_r
 = 
	`˛ock
();

55 
e_¨c
 = 
e_r
;

57 
˛ockcy˛es_a
[
i
] = (
e_a
 - 
s_a
);

58 
˛ockcy˛es_r
[
i
] = (
e_r
 - 
s_r
);

59 
˛ockcy˛es_c
[
i
] = (
e_c
 - 
s_c
);

60 
˛ockcy˛es_¨c
[
i
] = (
e_¨c
 - 
s_¨c
);

61 
	}
}

63 
	$maö
()

65 
tŸÆTime_a
 = 0;

66 
tŸÆTime_r
 = 0;

67 
tŸÆTime_c
 = 0;

68 
tŸÆTime_¨c
 = 0;

70 
thªad
* 
pThªads
[
T_MAX
];

72 
i
 = 0; i < 
T_MAX
; i++)

74 
pThªads
[
i
] = 
√w
 
	`thªad
(
ã°Li°
,i);

77 
i
 = 0; i < 
T_MAX
; i++)

79 
pThªads
[
i
]->
	`joö
();

80 
	`dñëe
(
pThªads
[
i
]);

83 
cgl
.
	`¥ötAŒ
();

88 
i
 = 0; i < 
T_MAX
; i++)

90 
tŸÆTime_a
 +
˛ockcy˛es_a
[
i
];

91 
tŸÆTime_r
 +
˛ockcy˛es_r
[
i
];

92 
tŸÆTime_c
 +
˛ockcy˛es_c
[
i
];

93 
tŸÆTime_¨c
 +
˛ockcy˛es_¨c
[
i
];

96 
	`¥ötf
("\nTŸÆÅimêf‹ádd = %f",(()
tŸÆTime_a
)/
CLOCKS_PER_SEC
);

97 
	`¥ötf
("\nTŸÆÅimêf‹Ñemovê%f",(()
tŸÆTime_r
)/
CLOCKS_PER_SEC
);

98 
	`¥ötf
("\nTŸÆÅimêf‹ c⁄èö†%f",(()
tŸÆTime_c
)/
CLOCKS_PER_SEC
);

99 
	`¥ötf
("\nTŸÆÅimêf‹ c⁄cuºíàadd/ªmove/c⁄èö†%f",(()
tŸÆTime_¨c
)/
CLOCKS_PER_SEC
);

103 
	}
}

	@utils/estm-0.2.4.3/bench/lf-deque/herlihy.c

24 
	~"h¨ris.h
"

30 
	$is_m¨ked_ªf
(
i
) {

32  (Ë(
i
 & (
LONG_MIN
+1));

33 
	}
}

35 
	$un£t_m¨k
(
i
) {

36 
i
 &
LONG_MAX
-1;

37  
i
;

38 
	}
}

40 
	$£t_m¨k
(
i
) {

41 
i
 = 
	`un£t_m¨k
(i);

42 
i
 += 1;

43  
i
;

44 
	}
}

46 
	$gë_unm¨ked_ªf
(
w
) {

47  
	`un£t_m¨k
(
w
);

48 
	}
}

50 
	$gë_m¨ked_ªf
(
w
) {

51  
	`£t_m¨k
(
w
);

52 
	}
}

54 
node_t
 *
	$h¨ris_£¨ch
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
, 
node_t
 **
À·_node
) {

55 
node_t
 *
À·_node_√xt
, *
right_node
;

56 
À·_node_√xt
 = 
£t
->
hód
;

58 
£¨ch_agaö
:

60 
node_t
 *
t
 = 
£t
->
hód
;

61 
node_t
 *
t_√xt
 = 
£t
->
hód
->
√xt
;

65 i‡(!
	`is_m¨ked_ªf
((Ë
t_√xt
)) {

66 (*
À·_node
Ë
t
;

67 
À·_node_√xt
 = 
t_√xt
;

69 
t
 = (
node_t
 *Ë
	`gë_unm¨ked_ªf
((Ë
t_√xt
);

70 i‡(!
t
->
√xt
) ;

71 
t_√xt
 = 
t
->
√xt
;

72 } 
	`is_m¨ked_ªf
((Ë
t_√xt
Ë|| (
t
->
vÆ
 < val));

73 
right_node
 = 
t
;

76 i‡(
À·_node_√xt
 =
right_node
) {

77 i‡(
right_node
->
√xt
 && 
	`is_m¨ked_ªf
(()Ñight_node->next))

78 
£¨ch_agaö
;

79  
right_node
;

83 i‡(
	`ATOMIC_CAS_MB
(&(*
À·_node
)->
√xt
,

84 
À·_node_√xt
,

85 
right_node
)) {

86 i‡(
right_node
->
√xt
 && 
	`is_m¨ked_ªf
(()Ñight_node->next))

87 
£¨ch_agaö
;

88  
right_node
;

92 
	}
}

94 
	$h¨ris_föd
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
) {

95 
node_t
 *
right_node
, *
À·_node
;

96 
À·_node
 = 
£t
->
hód
;

98 
right_node
 = 
	`h¨ris_£¨ch
(
£t
, 
vÆ
, &
À·_node
);

99 i‡((!
right_node
->
√xt
Ë||Ñight_node->
vÆ
 != val)

103 
	}
}

105 
	$h¨ris_ö£π
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
) {

106 
node_t
 *
√wnode
, *
right_node
, *
À·_node
;

107 
À·_node
 = 
£t
->
hód
;

110 
right_node
 = 
	`h¨ris_£¨ch
(
£t
, 
vÆ
, &
À·_node
);

111 i‡(
right_node
->
vÆ
 == val)

113 
√wnode
 = 
	`√w_node
(
vÆ
, 
right_node
, 0);

115 
	`AO_n›_fuŒ
();

116 i‡(
	`ATOMIC_CAS_MB
(&
À·_node
->
√xt
, 
right_node
, 
√wnode
))

119 
	}
}

121 
	$h¨ris_dñëe
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
) {

122 
node_t
 *
right_node
, *
right_node_√xt
, *
À·_node
;

123 
À·_node
 = 
£t
->
hód
;

126 
right_node
 = 
	`h¨ris_£¨ch
(
£t
, 
vÆ
, &
À·_node
);

127 i‡(
right_node
->
vÆ
 != val)

129 
right_node_√xt
 = 
right_node
->
√xt
;

130 i‡(!
	`is_m¨ked_ªf
((Ë
right_node_√xt
))

131 i‡(
	`ATOMIC_CAS_MB
(&
right_node
->
√xt
,

132 
right_node_√xt
,

133 
	`gë_m¨ked_ªf
((Ë
right_node_√xt
)))

136 i‡(!
	`ATOMIC_CAS_MB
(&
À·_node
->
√xt
, 
right_node
, 
right_node_√xt
))

137 
right_node
 = 
	`h¨ris_£¨ch
(
£t
,Ñight_node->
vÆ
, &
À·_node
);

139 
	}
}

142 
	#RIGHT
 1

	)

143 
	#LEFT
 0

	)

145 
ty≥
 
	gñemít
 = 
ªc‹d
 
vÆ
: 
vÆty≥
; 
	g˘r
: 
íd


154 
	$‹a˛e
(
dúe˘i⁄
) {

157 
	}
}

159 
	$righçush
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
) {

161 
k
 :
	`‹a˛e
(
RIGHT
);

162 
¥ev
 :
A
[
k
-1];

163 
cur
 :
A
[
k
];

164 i‡(
¥ev
.
vÆ
 !
RN
 
™d
 
cur
.val = RN) {

165 i‡(
k
 = 
MAX
+1)  0;

166 
	`ATOMIC_CAS_MB
(&
A
[
k
-1], 
¥ev
, <¥ev.
vÆ
,¥ev.
˘r
+1>)

167 
	`ATOMIC_CAS_MB
(&
A
[
k
], 
cur
, <
v
,cur.
˘r
+1>)

171 
	}
}

173 
	$righç›
() {

175 
k
 :
	`‹a˛e
(
RIGHT
);

176 
cur
 :
A
[
k
-1];

177 
√xt
 :
A
[
k
];

178 i‡(
cur
.
vÆ
 !
RN
 
™d
 
√xt
.val = RN) {

179 i‡(
cur
.
vÆ
 = 
LN
 
™d
 
A
[
k
-1] = cur)

181 
	`ATOMIC_CAS_MB
(&
A
[
k
], 
√xt
, <
RN
,√xt.
˘r
+1>)

182 
	`ATOMIC_CAS_MB
(&
A
[
k
-1], 
cur
, <
RN
,cur.
˘r
+1>)

183  
cur
.
vÆ
;

186 
	}
}

	@utils/estm-0.2.4.3/bench/lf-deque/herlihy.h

10 
	~"öt£t.h
"

16 
is_m¨ked_ªf
(
i
);

18 
un£t_m¨k
(
i
);

20 
£t_m¨k
(
i
);

22 
gë_unm¨ked_ªf
(
w
);

24 
gë_m¨ked_ªf
(
w
);

26 
node_t
 *
h¨ris_£¨ch
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
,Çode_à**
À·_node
);

28 
h¨ris_föd
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
);

30 
h¨ris_ö£π
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
);

32 
h¨ris_dñëe
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
);

	@utils/estm-0.2.4.3/bench/lf-deque/intset.c

22 
	~<as£π.h
>

23 
	~<gë›t.h
>

24 
	~<limôs.h
>

25 
	~<±hªad.h
>

26 
	~<sig«l.h
>

27 
	~<°dlib.h
>

28 
	~<°dio.h
>

29 
	~<sys/time.h
>

30 
	~<time.h
>

31 
	~<°döt.h
>

33 
	~<©omic_›s.h
>

35 
	~"°m.h
"

36 
	~"mod_mem.h
"

38 #ifde‡
DEBUG


39 
	#IO_FLUSH
 
	`fÊush
(
NULL
)

	)

49 
	#MALLOC
(
size
Ë
	`°m_mÆloc
(size)

	)

55 
öçå_t
 
	tvÆ_t
;

56 
	#VAL_MIN
 
INT_MIN


	)

57 
	#VAL_MAX
 
INT_MAX


	)

59 *
	gA
[
MAXLENGTH
];

61 
	snode
 {

62 
vÆ_t
 
	mvÆ
;

63 
node
 *
	m√xt
;

64 
node
 *
	m¥ev
;

65 } 
	tnode_t
;

67 
	sdeque
 {

68 
node_t
 *
	mhód
;

69 
node_t
 *
	mèû
;

70 } 
	tdeque_t
;

72 
node_t
 *
	$√w_node
(
vÆ_t
 
vÆ
, 
node_t
 *
√xt
, 
å™ß˘i⁄Æ
)

74 
node_t
 *
node
;

76 i‡(!
å™ß˘i⁄Æ
) {

77 
node
 = (
node_t
 *)
	`mÆloc
((node_t));

79 
node
 = (
node_t
 *)
	`MALLOC
((node_t));

81 i‡(
node
 =
NULL
) {

82 
	`≥º‹
("malloc");

83 
	`exô
(1);

86 
node
->
vÆ
 = val;

87 
node
->
√xt
 =Çext;

89  
node
;

90 
	}
}

92 
öt£t_t
 *
	$£t_√w
()

94 
öt£t_t
 *
£t
;

95 
node_t
 *
mö
, *
max
;

97 i‡((
£t
 = (
öt£t_t
 *)
	`mÆloc
((öt£t_t))Ë=
NULL
) {

98 
	`≥º‹
("malloc");

99 
	`exô
(1);

101 
max
 = 
	`√w_node
(
VAL_MAX
, 
NULL
, 0);

102 
mö
 = 
	`√w_node
(
VAL_MIN
, 
max
, 0);

103 
£t
->
hód
 = 
mö
;

105  
£t
;

106 
	}
}

108 
	$£t_dñëe
(
öt£t_t
 *
£t
)

110 
node_t
 *
node
, *
√xt
;

112 
node
 = 
£t
->
hód
;

113 
node
 !
NULL
) {

114 
√xt
 = 
node
->next;

115 
	`‰ì
(
node
);

116 
node
 = 
√xt
;

118 
	`‰ì
(
£t
);

119 
	}
}

121 
	$£t_size
(
öt£t_t
 *
£t
)

123 
size
 = 0;

124 
node_t
 *
node
;

127 
node
 = 
£t
->
hód
->
√xt
;

128 
node
->
√xt
 !
NULL
) {

129 
size
++;

130 
node
 =Çode->
√xt
;

133  
size
;

134 
	}
}

	@utils/estm-0.2.4.3/bench/lf-deque/intset.h

23 
	~<as£π.h
>

24 
	~<gë›t.h
>

25 
	~<limôs.h
>

26 
	~<±hªad.h
>

27 
	~<sig«l.h
>

28 
	~<°dlib.h
>

29 
	~<°dio.h
>

30 
	~<sys/time.h
>

31 
	~<time.h
>

32 
	~<°döt.h
>

34 
	~<©omic_›s.h
>

36 
	~"°m.h
"

37 
	~"mod_mem.h
"

39 #ifde‡
DEBUG


40 
	#IO_FLUSH
 
	`fÊush
(
NULL
)

	)

49 
	#RO
 0

	)

50 
	#RW
 0

	)

52 
	#TX_START
(
id
, 
ro
, 
ty≥
Ë{ 
sigjmp_buf
 *
_e
 = 
	`°m_gë_ív
(); 
°m_tx_©å_t
 
_a
 = {id,Ño}; 
	`sig£tjmp
(*_e, 0); 
	`°m_°¨t
(_e, &_a,Åy≥)

	)

53 
	#TX_LOAD
(
addr
Ë
	`°m_lﬂd
((
°m_w‹d_t
 *Ôddr)

	)

54 
	#TX_STORE
(
addr
, 
vÆ
Ë
	`°m_°‹e
((
°m_w‹d_t
 *Ôddr, (°m_w‹d_t)vÆ)

	)

55 
	#TX_END
 
	`°m_commô
(); }

	)

57 
	#FREE
(
addr
, 
size
Ë
	`°m_‰ì
◊ddr, size)

	)

59 
	#DEFAULT_DURATION
 10000

	)

60 
	#DEFAULT_INITIAL
 256

	)

61 
	#DEFAULT_NB_THREADS
 1

	)

62 
	#DEFAULT_RANGE
 0xFFFF

	)

63 
	#DEFAULT_SEED
 0

	)

64 
	#DEFAULT_UPDATE
 20

	)

66 
	#XSTR
(
s
Ë
	`STR
(s)

	)

67 
	#STR
(
s
Ë#s

	)

69 
	#ATOMIC_CAS_MB
(
a
, 
e
, 
v
Ë(
	`AO_com∑ª_™d_sw≠_fuŒ
((vﬁ©ûê
AO_t
 *)◊), (AO_t)”), (AO_t)(v)))

	)

75 vﬁ©ûê
AO_t
 
	g°›
;

81 
	#TRANSACTIONAL
 
d
->
unô_tx


	)

83 
öçå_t
 
	tvÆ_t
;

84 
	#VAL_MIN
 
INT_MIN


	)

85 
	#VAL_MAX
 
INT_MAX


	)

87 
	snode
 {

88 
vÆ_t
 
	mvÆ
;

89 
node
 *
	m√xt
;

90 } 
	tnode_t
;

92 
	söt£t
 {

93 
node_t
 *
	mhód
;

94 } 
	töt£t_t
;

96 
node_t
 *
√w_node
(
vÆ_t
 
vÆ
,Çode_à*
√xt
, 
å™ß˘i⁄Æ
);

97 
öt£t_t
 *
£t_√w
();

98 
£t_dñëe
(
öt£t_t
 *
£t
);

99 
£t_size
(
öt£t_t
 *
£t
);

	@utils/estm-0.2.4.3/bench/lf-deque/lf-ll.c

10 
	~"lökedli°.h
"

17 
	sb¨rõr
 {

18 
±hªad_c⁄d_t
 
	mcom∂ëe
;

19 
±hªad_muãx_t
 
	mmuãx
;

20 
	mcou¡
;

21 
	m¸ossög
;

22 } 
	tb¨rõr_t
;

24 
	$b¨rõr_öô
(
b¨rõr_t
 *
b
, 
n
)

26 
	`±hªad_c⁄d_öô
(&
b
->
com∂ëe
, 
NULL
);

27 
	`±hªad_muãx_öô
(&
b
->
muãx
, 
NULL
);

28 
b
->
cou¡
 = 
n
;

29 
b
->
¸ossög
 = 0;

30 
	}
}

32 
	$b¨rõr_¸oss
(
b¨rõr_t
 *
b
)

34 
	`±hªad_muãx_lock
(&
b
->
muãx
);

36 
b
->
¸ossög
++;

38 i‡(
b
->
¸ossög
 < b->
cou¡
) {

39 
	`±hªad_c⁄d_waô
(&
b
->
com∂ëe
, &b->
muãx
);

41 
	`±hªad_c⁄d_brﬂdˇ°
(&
b
->
com∂ëe
);

43 
b
->
¸ossög
 = 0;

45 
	`±hªad_muãx_u∆ock
(&
b
->
muãx
);

46 
	}
}

53 
	sthªad_d©a
 {

54 
	mønge
;

55 
	mupd©e
;

56 #i‚de‡
USE_RBTREE


57 
	munô_tx
;

59 
	mnb_add
;

60 
	mnb_ªmove
;

61 
	mnb_c⁄èös
;

62 
	mnb_found
;

63 
	mnb_ab‹ts
;

64 
	mnb_ab‹ts_locked_ªad
;

65 
	mnb_ab‹ts_locked_wrôe
;

66 
	mnb_ab‹ts_vÆid©e_ªad
;

67 
	mnb_ab‹ts_vÆid©e_wrôe
;

68 
	mnb_ab‹ts_vÆid©e_commô
;

69 
	mnb_ab‹ts_övÆid_mem‹y
;

70 
	mmax_ªåõs
;

71 
	mdiff
;

72 
	m£ed
;

73 
öt£t_t
 *
	m£t
;

74 
b¨rõr_t
 *
	mb¨rõr
;

75 
	mÁûuªs_beˇu£_c⁄ã¡i⁄
;

76 } 
	tthªad_d©a_t
;

80 *
	$ã°
(*
d©a
)

82 
vÆ
, 
œ°
 = 0;

83 
thªad_d©a_t
 *
d
 = (thªad_d©a_à*)
d©a
;

86 
	`°m_öô_thªad
();

88 
	`b¨rõr_¸oss
(
d
->
b¨rõr
);

90 
œ°
 = -1;

91 
°›
 == 0) {

92 
vÆ
 = 
	`ønd_r
(&
d
->
£ed
) % 100;

93 i‡(
vÆ
 < 
d
->
upd©e
) {

94 i‡(
œ°
 < 0) {

96 
vÆ
 = (
	`ønd_r
(&
d
->
£ed
Ë% d->
ønge
) + 1;

97 i‡(
	`£t_add
(
d
->
£t
, 
vÆ
, 
TRANSACTIONAL
)) {

98 
d
->
diff
++;

99 
œ°
 = 
vÆ
;

101 
d
->
nb_add
++;

104 i‡(
	`£t_ªmove
(
d
->
£t
, 
œ°
, 
TRANSACTIONAL
))

105 
d
->
diff
--;

106 
d
->
nb_ªmove
++;

107 
œ°
 = -1;

111 
vÆ
 = (
	`ønd_r
(&
d
->
£ed
Ë% d->
ønge
) + 1;

112 i‡(
	`£t_c⁄èös
(
d
->
£t
, 
vÆ
, 
TRANSACTIONAL
))

113 
d
->
nb_found
++;

114 
d
->
nb_c⁄èös
++;

117 
	`°m_gë_∑ømëî
("nb_ab‹ts", &
d
->
nb_ab‹ts
);

118 
	`°m_gë_∑ømëî
("nb_ab‹ts_locked_ªad", &
d
->
nb_ab‹ts_locked_ªad
);

119 
	`°m_gë_∑ømëî
("nb_ab‹ts_locked_wrôe", &
d
->
nb_ab‹ts_locked_wrôe
);

120 
	`°m_gë_∑ømëî
("nb_ab‹ts_vÆid©e_ªad", &
d
->
nb_ab‹ts_vÆid©e_ªad
);

121 
	`°m_gë_∑ømëî
("nb_ab‹ts_vÆid©e_wrôe", &
d
->
nb_ab‹ts_vÆid©e_wrôe
);

122 
	`°m_gë_∑ømëî
("nb_ab‹ts_vÆid©e_commô", &
d
->
nb_ab‹ts_vÆid©e_commô
);

123 
	`°m_gë_∑ømëî
("nb_ab‹ts_övÆid_mem‹y", &
d
->
nb_ab‹ts_övÆid_mem‹y
);

124 
	`°m_gë_∑ømëî
("max_ªåõs", &
d
->
max_ªåõs
);

125 
	`°m_gë_∑ømëî
("Áûuªs_beˇu£_c⁄ã¡i⁄", &
d
->
Áûuªs_beˇu£_c⁄ã¡i⁄
);

127 
	`°m_exô_thªad
();

129  
NULL
;

130 
	}
}

132 
	$ˇtchî
(
sig
)

134 
	`¥ötf
("CAUGHT SIGNAL %d\n", 
sig
);

135 
	}
}

137 
	$maö
(
¨gc
, **
¨gv
)

139 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

141 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

142 {"duøti⁄", 
ªquúed_¨gumít
, 
NULL
, 'd'},

143 {"öôül-size", 
ªquúed_¨gumít
, 
NULL
, 'i'},

144 {"num-thªads", 
ªquúed_¨gumít
, 
NULL
, 'n'},

145 {"ønge", 
ªquúed_¨gumít
, 
NULL
, 'r'},

146 {"£ed", 
ªquúed_¨gumít
, 
NULL
, 's'},

147 {"upd©e-øã", 
ªquúed_¨gumít
, 
NULL
, 'u'},

148 {"ña°icôy", 
ªquúed_¨gumít
, 
NULL
, 'x'},

149 {
NULL
, 0, NULL, 0}

152 
öt£t_t
 *
£t
;

153 
i
, 
c
, 
vÆ
, 
size
;

154 *
s
;

155 
ªads
, 
upd©es
, 
ab‹ts
, 
ab‹ts_locked_ªad
, 
ab‹ts_locked_wrôe
,

156 
ab‹ts_vÆid©e_ªad
, 
ab‹ts_vÆid©e_wrôe
, 
ab‹ts_vÆid©e_commô
,

157 
ab‹ts_övÆid_mem‹y
, 
max_ªåõs
, 
Áûuªs_beˇu£_c⁄ã¡i⁄
;

158 
thªad_d©a_t
 *
d©a
;

159 
±hªad_t
 *
thªads
;

160 
±hªad_©å_t
 
©å
;

161 
b¨rõr_t
 
b¨rõr
;

162 
timevÆ
 
°¨t
, 
íd
;

163 
time•ec
 
timeout
;

164 
duøti⁄
 = 
DEFAULT_DURATION
;

165 
öôül
 = 
DEFAULT_INITIAL
;

166 
nb_thªads
 = 
DEFAULT_NB_THREADS
;

167 
ønge
 = 
DEFAULT_RANGE
;

168 
£ed
 = 
DEFAULT_SEED
;

169 
upd©e
 = 
DEFAULT_UPDATE
;

170 #i‚de‡
USE_RBTREE


171 
unô_tx
 = 4;

173 
sig£t_t
 
block_£t
;

176 
i
 = 0;

177 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "hd:i:n:r:s:u:"

178 #i‚de‡
USE_RBTREE


181 , 
l⁄g_›ti⁄s
, &
i
);

183 if(
c
 == -1)

186 if(
c
 =0 && 
l⁄g_›ti⁄s
[
i
].
Êag
 == 0)

187 
c
 = 
l⁄g_›ti⁄s
[
i
].
vÆ
;

189 
c
) {

194 
	`¥ötf
("intset -- STM stressÅest "

195 #ifde‡
USE_RBTREE


208 " Te° duøti⁄ i¿mûli£c⁄d†(0=öföôe, deÁu…=" 
	`XSTR
(
DEFAULT_DURATION
) ")\n"

210 " Numbî o‡ñemít†tÿö£π bef‹êã° (deÁu…=" 
	`XSTR
(
DEFAULT_INITIAL
) ")\n"

212 " Numbî o‡thªad†(deÁu…=" 
	`XSTR
(
DEFAULT_NB_THREADS
) ")\n"

214 " R™gêo‡öãgî vÆue†ö£πed i¿£à(deÁu…=" 
	`XSTR
(
DEFAULT_RANGE
) ")\n"

216 " RNG sìd (0Òime-ba£d, deÁu…=" 
	`XSTR
(
DEFAULT_SEED
) ")\n"

218 " Pî˚¡agêo‡upd©êå™ß˘i⁄†(deÁu…=" 
	`XSTR
(
DEFAULT_UPDATE
) ")\n"

219 #i‚de‡
USE_RBTREE


231 
	`exô
(0);

233 
duøti⁄
 = 
	`©oi
(
›èrg
);

236 
öôül
 = 
	`©oi
(
›èrg
);

239 
nb_thªads
 = 
	`©oi
(
›èrg
);

242 
ønge
 = 
	`©oi
(
›èrg
);

245 
£ed
 = 
	`©oi
(
›èrg
);

248 
upd©e
 = 
	`©oi
(
›èrg
);

250 #i‚de‡
USE_RBTREE


252 
unô_tx
 = 
	`©oi
(
›èrg
);

256 
	`¥ötf
("Use -h or --help for help\n");

257 
	`exô
(0);

259 
	`exô
(1);

263 
	`as£π
(
duøti⁄
 >= 0);

264 
	`as£π
(
öôül
 >= 0);

265 
	`as£π
(
nb_thªads
 > 0);

266 
	`as£π
(
ønge
 > 0 &&Ñ™gê>
öôül
);

267 
	`as£π
(
upd©e
 >= 0 && update <= 100);

269 #ifde‡
USE_RBTREE


270 
	`¥ötf
("SetÅype :Ñed-blackÅree\n");

272 
	`¥ötf
("SetÅype :ÜinkedÜist\n");

274 
	`¥ötf
("Duøti⁄ : %d\n", 
duøti⁄
);

275 
	`¥ötf
("Inôü»sizê: %d\n", 
öôül
);

276 
	`¥ötf
("NbÅhªad† : %d\n", 
nb_thªads
);

277 
	`¥ötf
("VÆuêøngê : %d\n", 
ønge
);

278 
	`¥ötf
("Sìd : %d\n", 
£ed
);

279 
	`¥ötf
("Upd©êøã : %d\n", 
upd©e
);

280 #i‚de‡
USE_RBTREE


281 
	`¥ötf
("Eœ°icôy : %d\n", 
unô_tx
);

283 
	`¥ötf
("Type sizes : int=%d/long=%d/ptr=%d/word=%d\n",

287 ()(
°m_w‹d_t
));

289 
timeout
.
tv_£c
 = 
duøti⁄
 / 1000;

290 
timeout
.
tv_n£c
 = (
duøti⁄
 % 1000) * 1000000;

292 i‡((
d©a
 = (
thªad_d©a_t
 *)
	`mÆloc
(
nb_thªads
 * —hªad_d©a_t))Ë=
NULL
) {

293 
	`≥º‹
("malloc");

294 
	`exô
(1);

296 i‡((
thªads
 = (
±hªad_t
 *)
	`mÆloc
(
nb_thªads
 * ’thªad_t))Ë=
NULL
) {

297 
	`≥º‹
("malloc");

298 
	`exô
(1);

301 i‡(
£ed
 == 0)

302 
	`§™d
(()
	`time
(0));

304 
	`§™d
(
£ed
);

306 
£t
 = 
	`£t_√w
();

308 
°›
 = 0;

311 
	`¥ötf
("Initializing STM\n");

312 
	`°m_öô
();

313 
	`mod_mem_öô
();

315 i‡(
	`°m_gë_∑ømëî
("compûe_Êags", &
s
))

316 
	`¥ötf
("STM fœg† : %s\n", 
s
);

319 
	`¥ötf
("Addög %dÉ¡rõ†tÿ£t\n", 
öôül
);

320 
i
 = 0;

321 
i
 < 
öôül
) {

322 
vÆ
 = (
	`ønd
(Ë% 
ønge
) + 1;

323 i‡(
	`£t_add
(
£t
, 
vÆ
, 0))

324 
i
++;

326 
size
 = 
	`£t_size
(
£t
);

327 
	`¥ötf
("Së sizê : %d\n", 
size
);

330 
	`b¨rõr_öô
(&
b¨rõr
, 
nb_thªads
 + 1);

331 
	`±hªad_©å_öô
(&
©å
);

332 
	`±hªad_©å_£tdëach°©e
(&
©å
, 
PTHREAD_CREATE_JOINABLE
);

333 
i
 = 0; i < 
nb_thªads
; i++) {

334 
	`¥ötf
("Cª©ögÅhªad %d\n", 
i
);

335 
d©a
[
i
].
ønge
 =Ñange;

336 
d©a
[
i
].
upd©e
 = update;

337 #i‚de‡
USE_RBTREE


338 
d©a
[
i
].
unô_tx
 = unit_tx;

340 
d©a
[
i
].
nb_add
 = 0;

341 
d©a
[
i
].
nb_ªmove
 = 0;

342 
d©a
[
i
].
nb_c⁄èös
 = 0;

343 
d©a
[
i
].
nb_found
 = 0;

344 
d©a
[
i
].
nb_ab‹ts
 = 0;

345 
d©a
[
i
].
nb_ab‹ts_locked_ªad
 = 0;

346 
d©a
[
i
].
nb_ab‹ts_locked_wrôe
 = 0;

347 
d©a
[
i
].
nb_ab‹ts_vÆid©e_ªad
 = 0;

348 
d©a
[
i
].
nb_ab‹ts_vÆid©e_wrôe
 = 0;

349 
d©a
[
i
].
nb_ab‹ts_vÆid©e_commô
 = 0;

350 
d©a
[
i
].
nb_ab‹ts_övÆid_mem‹y
 = 0;

351 
d©a
[
i
].
max_ªåõs
 = 0;

352 
d©a
[
i
].
diff
 = 0;

353 
d©a
[
i
].
£ed
 = 
	`ønd
();

354 
d©a
[
i
].
£t
 = set;

355 
d©a
[
i
].
b¨rõr
 = &barrier;

356 
d©a
[
i
].
Áûuªs_beˇu£_c⁄ã¡i⁄
 = 0;

357 i‡(
	`±hªad_¸óã
(&
thªads
[
i
], &
©å
, 
ã°
, (*)(&
d©a
[i])) != 0) {

358 
	`Ârötf
(
°dîr
, "Error creatingÅhread\n");

359 
	`exô
(1);

362 
	`±hªad_©å_de°roy
(&
©å
);

365 i‡(
	`sig«l
(
SIGHUP
, 
ˇtchî
Ë=
SIG_ERR
 ||

366 
	`sig«l
(
SIGINT
, 
ˇtchî
Ë=
SIG_ERR
 ||

367 
	`sig«l
(
SIGTERM
, 
ˇtchî
Ë=
SIG_ERR
) {

368 
	`≥º‹
("signal");

369 
	`exô
(1);

373 
	`b¨rõr_¸oss
(&
b¨rõr
);

375 
	`¥ötf
("STARTING...\n");

376 
	`gëtimeofday
(&
°¨t
, 
NULL
);

377 i‡(
duøti⁄
 > 0) {

378 
	`«no¶ìp
(&
timeout
, 
NULL
);

380 
	`sigem±y£t
(&
block_£t
);

381 
	`sigsu•íd
(&
block_£t
);

383 
	`AO_°‹e_fuŒ
(&
°›
, 1);

384 
	`gëtimeofday
(&
íd
, 
NULL
);

385 
	`¥ötf
("STOPPING...\n");

388 
i
 = 0; i < 
nb_thªads
; i++) {

389 i‡(
	`±hªad_joö
(
thªads
[
i
], 
NULL
) != 0) {

390 
	`Ârötf
(
°dîr
, "Error waiting forÅhread completion\n");

391 
	`exô
(1);

395 
duøti⁄
 = (
íd
.
tv_£c
 * 1000 +Énd.
tv_u£c
 / 1000Ë- (
°¨t
.tv_sec * 1000 + start.tv_usec / 1000);

396 
ab‹ts
 = 0;

397 
ab‹ts_locked_ªad
 = 0;

398 
ab‹ts_locked_wrôe
 = 0;

399 
ab‹ts_vÆid©e_ªad
 = 0;

400 
ab‹ts_vÆid©e_wrôe
 = 0;

401 
ab‹ts_vÆid©e_commô
 = 0;

402 
ab‹ts_övÆid_mem‹y
 = 0;

403 
Áûuªs_beˇu£_c⁄ã¡i⁄
 = 0;

404 
ªads
 = 0;

405 
upd©es
 = 0;

406 
max_ªåõs
 = 0;

407 
i
 = 0; i < 
nb_thªads
; i++) {

408 
	`¥ötf
("Thªad %d\n", 
i
);

409 
	`¥ötf
(" #add : %lu\n", 
d©a
[
i
].
nb_add
);

410 
	`¥ötf
(" #ªmovê : %lu\n", 
d©a
[
i
].
nb_ªmove
);

411 
	`¥ötf
(" #c⁄èö† : %lu\n", 
d©a
[
i
].
nb_c⁄èös
);

412 
	`¥ötf
(" #found : %lu\n", 
d©a
[
i
].
nb_found
);

413 
	`¥ötf
(" #ab‹t† : %lu\n", 
d©a
[
i
].
nb_ab‹ts
);

414 
	`¥ötf
(" #lock-∏ : %lu\n", 
d©a
[
i
].
nb_ab‹ts_locked_ªad
);

415 
	`¥ötf
(" #lock-w : %lu\n", 
d©a
[
i
].
nb_ab‹ts_locked_wrôe
);

416 
	`¥ötf
(" #vÆ-∏ : %lu\n", 
d©a
[
i
].
nb_ab‹ts_vÆid©e_ªad
);

417 
	`¥ötf
(" #vÆ-w : %lu\n", 
d©a
[
i
].
nb_ab‹ts_vÆid©e_wrôe
);

418 
	`¥ötf
(" #vÆ-¯ : %lu\n", 
d©a
[
i
].
nb_ab‹ts_vÆid©e_commô
);

419 
	`¥ötf
(" #öv-mem : %lu\n", 
d©a
[
i
].
nb_ab‹ts_övÆid_mem‹y
);

420 
	`¥ötf
(" #Áûuª†: %lu\n", 
d©a
[
i
].
Áûuªs_beˇu£_c⁄ã¡i⁄
);

421 
	`¥ötf
(" MaxÑërõ†: %lu\n", 
d©a
[
i
].
max_ªåõs
);

422 
ab‹ts
 +
d©a
[
i
].
nb_ab‹ts
;

423 
ab‹ts_locked_ªad
 +
d©a
[
i
].
nb_ab‹ts_locked_ªad
;

424 
ab‹ts_locked_wrôe
 +
d©a
[
i
].
nb_ab‹ts_locked_wrôe
;

425 
ab‹ts_vÆid©e_ªad
 +
d©a
[
i
].
nb_ab‹ts_vÆid©e_ªad
;

426 
ab‹ts_vÆid©e_wrôe
 +
d©a
[
i
].
nb_ab‹ts_vÆid©e_wrôe
;

427 
ab‹ts_vÆid©e_commô
 +
d©a
[
i
].
nb_ab‹ts_vÆid©e_commô
;

428 
ab‹ts_övÆid_mem‹y
 +
d©a
[
i
].
nb_ab‹ts_övÆid_mem‹y
;

429 
Áûuªs_beˇu£_c⁄ã¡i⁄
 +
d©a
[
i
].failures_because_contention;

430 
ªads
 +
d©a
[
i
].
nb_c⁄èös
;

431 
upd©es
 +(
d©a
[
i
].
nb_add
 + d©a[i].
nb_ªmove
);

432 
size
 +
d©a
[
i
].
diff
;

433 i‡(
max_ªåõs
 < 
d©a
[
i
].max_retries)

434 
max_ªåõs
 = 
d©a
[
i
].max_retries;

436 
	`¥ötf
("Së sizê : %d (ex≥˘ed: %d)\n", 
	`£t_size
(
£t
), 
size
);

437 
	`¥ötf
("Duøti⁄ : %d (ms)\n", 
duøti⁄
);

438 
	`¥ötf
("#tx† : %lu (%‡/ s)\n", 
ªads
 + 
upd©es
, (ªad†+ upd©esË* 1000.0 / 
duøti⁄
);

439 
	`¥ötf
("#ªadÅx† : %lu (%‡/ s)\n", 
ªads
,Ñód†* 1000.0 / 
duøti⁄
);

440 
	`¥ötf
("#upd©êtx† : %lu (%‡/ s)\n", 
upd©es
, upd©e†* 1000.0 / 
duøti⁄
);

441 
	`¥ötf
("#ab‹t† : %lu (%‡/ s)\n", 
ab‹ts
,áb‹t†* 1000.0 / 
duøti⁄
);

442 
	`¥ötf
(" #lock-∏ : %lu (%‡/ s)\n", 
ab‹ts_locked_ªad
,áb‹ts_locked_ªad * 1000.0 / 
duøti⁄
);

443 
	`¥ötf
(" #lock-w : %lu (%‡/ s)\n", 
ab‹ts_locked_wrôe
,áb‹ts_locked_wrôê* 1000.0 / 
duøti⁄
);

444 
	`¥ötf
(" #vÆ-∏ : %lu (%‡/ s)\n", 
ab‹ts_vÆid©e_ªad
,áb‹ts_vÆid©e_ªad * 1000.0 / 
duøti⁄
);

445 
	`¥ötf
(" #vÆ-w : %lu (%‡/ s)\n", 
ab‹ts_vÆid©e_wrôe
,áb‹ts_vÆid©e_wrôê* 1000.0 / 
duøti⁄
);

446 
	`¥ötf
(" #vÆ-¯ : %lu (%‡/ s)\n", 
ab‹ts_vÆid©e_commô
,áb‹ts_vÆid©e_commô * 1000.0 / 
duøti⁄
);

447 
	`¥ötf
(" #öv-mem : %lu (%‡/ s)\n", 
ab‹ts_övÆid_mem‹y
,áb‹ts_övÆid_mem‹y * 1000.0 / 
duøti⁄
);

448 
	`¥ötf
(" #Áûuª† : %lu\n", 
Áûuªs_beˇu£_c⁄ã¡i⁄
);

449 
	`¥ötf
("MaxÑërõ† : %lu\n", 
max_ªåõs
);

452 
	`£t_dñëe
(
£t
);

455 
	`°m_exô
();

457 
	`‰ì
(
thªads
);

458 
	`‰ì
(
d©a
);

461 
	}
}

	@utils/estm-0.2.4.3/bench/lf-deque/linkedlist.c

24 
	~"lökedli°.h
"

26 
	$£t_c⁄èös
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
, 
å™ß˘i⁄Æ
)

28 
ªsu…
;

29 
node_t
 *
¥ev
, *
√xt
;

30 
vÆ_t
 
v
;

32 #ifde‡
DEBUG


33 
	`¥ötf
("++> së_c⁄èös(%d)\n", 
vÆ
);

34 
IO_FLUSH
;

37 
å™ß˘i⁄Æ
) {

39 
¥ev
 = 
£t
->
hód
;

40 
√xt
 = 
¥ev
->next;

41 
√xt
->
vÆ
 < val) {

42 
¥ev
 = 
√xt
;

43 
√xt
 = 
¥ev
->next;

45 
ªsu…
 = (
√xt
->
vÆ
 == val);

49 
	`TX_START
(0, 
RO
, 
NL
);

50 
¥ev
 = 
£t
->
hód
;

51 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

53 
v
 = 
	`TX_LOAD
(&
√xt
->
vÆ
);

54 i‡(
v
 >
vÆ
)

56 
¥ev
 = 
√xt
;

57 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

59 
ªsu…
 = (
v
 =
vÆ
);

60 
TX_END
;

66 
	`TX_START
(0, 
RO
, 
EL
);

67 
¥ev
 = 
£t
->
hód
;

68 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

70 
v
 = 
	`TX_LOAD
((
°m_w‹d_t
 *Ë&
√xt
->
vÆ
);

71 i‡(
v
 >
vÆ
)

73 
¥ev
 = 
√xt
;

74 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

76 
TX_END
;

77 
ªsu…
 = (
v
 =
vÆ
);

81 
ªsu…
 = 
	`h¨ris_föd
(
£t
, 
vÆ
);

84 
ªsu…
=0;

85 
	`¥ötf
("numbî %d dÿnŸ c‹ª•⁄dÅÿña°icôy.\n", 
å™ß˘i⁄Æ
);

86 
	`exô
(1);

89  
ªsu…
;

90 
	}
}

92 
	$£t_add
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
, 
å™ß˘i⁄Æ
)

94 
ªsu…
;

95 
node_t
 *
¥ev
, *
√xt
;

96 
vÆ_t
 
v
;

98 #ifde‡
DEBUG


99 
	`¥ötf
("++> së_add(%d)\n", 
vÆ
);

100 
IO_FLUSH
;

103 
å™ß˘i⁄Æ
) {

105 
¥ev
 = 
£t
->
hód
;

106 
√xt
 = 
¥ev
->next;

107 
√xt
->
vÆ
 < val) {

108 
¥ev
 = 
√xt
;

109 
√xt
 = 
¥ev
->next;

111 
ªsu…
 = (
√xt
->
vÆ
 != val);

112 i‡(
ªsu…
) {

113 
¥ev
->
√xt
 = 
	`√w_node
(
vÆ
,Çext, 
å™ß˘i⁄Æ
);

119 
	`TX_START
(1, 
RW
, 
NL
);

120 
¥ev
 = 
£t
->
hód
;

121 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

123 
v
 = 
	`TX_LOAD
(&
√xt
->
vÆ
);

124 i‡(
v
 >
vÆ
)

126 
¥ev
 = 
√xt
;

127 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

129 
ªsu…
 = (
v
 !
vÆ
);

130 i‡(
ªsu…
) {

131 
	`TX_STORE
(&
¥ev
->
√xt
, 
	`√w_node
(
vÆ
,Çext, 
å™ß˘i⁄Æ
));

133 
TX_END
;

138 
	`TX_START
(1, 
RW
, 
EL
);

139 
¥ev
 = 
£t
->
hód
;

140 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

142 
v
 = 
	`TX_LOAD
((
°m_w‹d_t
 *Ë&
√xt
->
vÆ
);

143 i‡(
v
 >
vÆ
)

145 
¥ev
 = 
√xt
;

146 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

148 
ªsu…
 = (
v
 !
vÆ
);

149 i‡(
ªsu…
) {

150 
	`TX_STORE
(&
¥ev
->
√xt
, 
	`√w_node
(
vÆ
,Çext, 
å™ß˘i⁄Æ
));

152 
TX_END
;

156 
ªsu…
 = 
	`h¨ris_ö£π
(
£t
, 
vÆ
);

159 
ªsu…
=0;

160 
	`¥ötf
("numbî %d dÿnŸ c‹ª•⁄dÅÿña°icôy.\n", 
å™ß˘i⁄Æ
);

161 
	`exô
(1);

164  
ªsu…
;

165 
	}
}

167 
	$£t_ªmove
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
, 
å™ß˘i⁄Æ
)

169 
ªsu…
;

170 
node_t
 *
¥ev
, *
√xt
;

171 
vÆ_t
 
v
;

172 
node_t
 *
n
;

174 #ifde‡
DEBUG


175 
	`¥ötf
("++> së_ªmove(%d)\n", 
vÆ
);

176 
IO_FLUSH
;

179 
å™ß˘i⁄Æ
) {

181 
¥ev
 = 
£t
->
hód
;

182 
√xt
 = 
¥ev
->next;

183 
√xt
->
vÆ
 < val) {

184 
¥ev
 = 
√xt
;

185 
√xt
 = 
¥ev
->next;

187 
ªsu…
 = (
√xt
->
vÆ
 == val);

188 i‡(
ªsu…
) {

189 
¥ev
->
√xt
 =Çext->next;

190 
	`‰ì
(
√xt
);

197 
	`TX_START
(2, 
RW
, 
NL
);

198 
¥ev
 = 
£t
->
hód
;

199 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

201 
v
 = 
	`TX_LOAD
(&
√xt
->
vÆ
);

202 i‡(
v
 >
vÆ
)

204 
¥ev
 = 
√xt
;

205 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

207 
ªsu…
 = (
v
 =
vÆ
);

208 i‡(
ªsu…
) {

209 
n
 = (
node_t
 *)
	`TX_LOAD
(&
√xt
->next);

210 
	`TX_STORE
(&
¥ev
->
√xt
, 
n
);

212 
	`FREE
(
√xt
, (
node_t
));

214 
TX_END
;

218 
	`TX_START
(2, 
RW
, 
EL
);

219 
¥ev
 = 
£t
->
hód
;

220 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

222 
v
 = 
	`TX_LOAD
((
°m_w‹d_t
 *Ë&
√xt
->
vÆ
);

223 i‡(
v
 >
vÆ
)

225 
¥ev
 = 
√xt
;

226 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

228 
ªsu…
 = (
v
 =
vÆ
);

229 i‡(
ªsu…
) {

230 
n
 = (
node_t
 *)
	`TX_LOAD
(&
√xt
->next);

231 
	`TX_STORE
(&
¥ev
->
√xt
, 
n
);

233 
	`FREE
(
√xt
, (
node_t
));

235 
TX_END
;

239 
ªsu…
 = 
	`h¨ris_dñëe
(
£t
, 
vÆ
);

242 
ªsu…
=0;

243 
	`¥ötf
("numbî %d dÿnŸ c‹ª•⁄dÅÿña°icôy.\n", 
å™ß˘i⁄Æ
);

244 
	`exô
(1);

247  
ªsu…
;

248 
	}
}

	@utils/estm-0.2.4.3/bench/lf-deque/linkedlist.h

10 
	~"h¨ris.h
"

12 
£t_c⁄èös
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
, 
å™ß˘i⁄Æ
);

13 
£t_add
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
, 
å™ß˘i⁄Æ
);

14 
£t_ªmove
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
, 
å™ß˘i⁄Æ
);

	@utils/estm-0.2.4.3/bench/lf-hashtable/lf-ht.c

14 
	~"../lf-lökedli°/lökedli°.h
"

16 
	#DEFAULT_MOVE
 0

	)

17 
	#DEFAULT_SNAPSHOT
 0

	)

18 
	#DEFAULT_LOAD
 1

	)

19 
	#MAXHTLENGTH
 65535

	)

22 
	gmaxhéígth
;

25 #ifde‡
TLS


26 
__thªad
 *
	g∫g_£ed
;

28 
±hªad_key_t
 
	g∫g_£ed_key
;

31 
	sht_öt£t
 {

32 
öt£t_t
 *
	mbuckës
[
MAXHTLENGTH
];

33 } 
	tht_öt£t_t
;

35 
	$ht_dñëe
(
ht_öt£t_t
 *
£t
) {

36 
node_t
 *
node
, *
√xt
;

37 
i
;

39 
i
=0; i < 
maxhéígth
; i++) {

40 
node
 = 
£t
->
buckës
[
i
]->
hód
;

41 
node
 !
NULL
) {

42 
√xt
 = 
node
->next;

43 
	`‰ì
(
node
);

44 
node
 = 
√xt
;

47 
	`‰ì
(
£t
);

48 
	}
}

50 
	$ht_size
(
ht_öt£t_t
 *
£t
) {

51 
size
 = 0;

52 
node_t
 *
node
;

53 
i
;

55 
i
=0; i < 
maxhéígth
; i++) {

58 
node
 = 
£t
->
buckës
[
i
]->
hód
->
√xt
;

59 
node
->
√xt
) {

60 
size
++;

61 
node
 =Çode->
√xt
;

65  
size
;

66 
	}
}

68 
	$Êo‹_log_2
(
n
) {

69 
pos
 = 0;

70 
	`¥ötf
("¿ªsu… = %d\n", 
n
);

71 i‡(
n
 >1<<16Ë{Ç >>16; 
pos
 += 16; }

72 i‡(
n
 >1<< 8Ë{Ç >>8; 
pos
 += 8; }

73 i‡(
n
 >1<< 4Ë{Ç >>4; 
pos
 += 4; }

74 i‡(
n
 >1<< 2Ë{Ç >>2; 
pos
 += 2; }

75 i‡(
n
 >1<< 1Ë{ 
pos
 += 1; }

76 
	`¥ötf
("Êo‹Ñesu… = %d\n", 
pos
);

77  ((
n
 =0Ë? (-1Ë: 
pos
);

78 
	}
}

80 
ht_öt£t_t
 *
	$ht_√w
() {

81 
ht_öt£t_t
 *
£t
;

82 
i
;

84 i‡((
£t
 = (
ht_öt£t_t
 *)
	`mÆloc
((ht_öt£t_t))Ë=
NULL
) {

85 
	`≥º‹
("malloc");

86 
	`exô
(1);

88 
i
=0; i < 
maxhéígth
; i++) {

89 
£t
->
buckës
[
i
] = 
	`£t_√w
();

91  
£t
;

92 
	}
}

94 
	$ht_c⁄èös
(
ht_öt£t_t
 *
£t
, 
vÆ
, 
å™ß˘i⁄Æ
) {

95 
addr
;

97 #ifde‡
DEBUG


98 
	`¥ötf
("++> ht_c⁄èös(%d)\n", (Ë
vÆ
);

99 
IO_FLUSH
;

101 
addr
 = 
vÆ
 % 
maxhéígth
;

102 i‡(
å™ß˘i⁄Æ
 == 5)

103  
	`£t_c⁄èös
(
£t
->
buckës
[
addr
], 
vÆ
, 4);

105  
	`£t_c⁄èös
(
£t
->
buckës
[
addr
], 
vÆ
, 
å™ß˘i⁄Æ
);

106 
	}
}

108 
	$ht_add
(
ht_öt£t_t
 *
£t
, 
vÆ
, 
å™ß˘i⁄Æ
) {

109 
addr
;

111 #ifde‡
DEBUG


112 
	`¥ötf
("++> ht_add(%d)\n", (Ë
vÆ
);

113 
IO_FLUSH
;

115 
addr
 = 
vÆ
 % 
maxhéígth
;

116 i‡(
å™ß˘i⁄Æ
 == 5)

117  
	`£t_add
(
£t
->
buckës
[
addr
], 
vÆ
, 4);

119  
	`£t_add
(
£t
->
buckës
[
addr
], 
vÆ
, 
å™ß˘i⁄Æ
);

120 
	}
}

122 
	$ht_ªmove
(
ht_öt£t_t
 *
£t
, 
vÆ
, 
å™ß˘i⁄Æ
) {

123 
addr
;

125 #ifde‡
DEBUG


126 
	`¥ötf
("++> ht_c⁄èös(%d)\n", (Ë
vÆ
);

127 
IO_FLUSH
;

129 
addr
 = 
vÆ
 % 
maxhéígth
;

130 i‡(
å™ß˘i⁄Æ
 == 5)

131  
	`£t_ªmove
(
£t
->
buckës
[
addr
], 
vÆ
, 4);

133  
	`£t_ªmove
(
£t
->
buckës
[
addr
], 
vÆ
, 
å™ß˘i⁄Æ
);

134 
	}
}

140 
	$ht_move
(
ht_öt£t_t
 *
£t
, 
vÆ1
, 
vÆ2
, 
å™ß˘i⁄Æ
) {

141 
v
, 
addr1
, 
addr2
, 
ªsu…
 = 0;

142 
node_t
 *
n
, *
¥ev
, *
√xt
, *
¥ev2
, *
√xt2
;

144 
å™ß˘i⁄Æ
) {

146 
addr1
 = 
vÆ1
 % 
maxhéígth
;

147 
addr2
 = 
vÆ2
 % 
maxhéígth
;

148 
ªsu…
 = (
	`£t_ªmove
(
£t
->
buckës
[
addr1
], 
vÆ1
, 
å™ß˘i⁄Æ
) &&

149 
	`£t_add
(
£t
->
buckës
[
addr2
], 
vÆ2
, 
å™ß˘i⁄Æ
));

153 
	`TX_START
(
NL
);

154 
addr1
 = 
vÆ1
 % 
maxhéígth
;

155 
¥ev
 = (
node_t
 *)
	`TX_LOAD
(&
£t
->
buckës
[
addr1
]->
hód
);

156 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

158 
v
 = 
	`TX_LOAD
(&
√xt
->
vÆ
);

159 i‡(
v
 >
vÆ1
) ;

160 
¥ev
 = 
√xt
;

161 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

163 i‡(
v
 =
vÆ1
) {

165 
n
 = (
node_t
 *)
	`TX_LOAD
(&
√xt
->next);

166 
	`TX_STORE
(&
¥ev
->
√xt
, 
n
);

167 
	`FREE
(
√xt
, (
node_t
));

169 
addr2
 = 
vÆ2
 % 
maxhéígth
;

170 
¥ev
 = (
node_t
 *)
	`TX_LOAD
(&
£t
->
buckës
[
addr2
]->
hód
);

171 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

173 
v
 = 
	`TX_LOAD
(&
√xt
->
vÆ
);

174 i‡(
v
 >
vÆ2
) ;

175 
¥ev
 = 
√xt
;

176 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

178 i‡(
v
 !
vÆ2
) {

179 
	`TX_STORE
(&
¥ev
->
√xt
, 
	`√w_node
(
vÆ2
,Çext, 
å™ß˘i⁄Æ
));

182 
ªsu…
 = 1;

183 } 
ªsu…
 = 0;

184 
TX_END
;

190 
	`TX_START
(
EL
);

191 
addr1
 = 
vÆ1
 % 
maxhéígth
;

192 
¥ev
 = (
node_t
 *)
	`TX_LOAD
(&
£t
->
buckës
[
addr1
]->
hód
);

193 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

195 
v
 = 
	`TX_LOAD
(&
√xt
->
vÆ
);

196 i‡(
v
 >
vÆ1
) ;

197 
¥ev
 = 
√xt
;

198 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

200 i‡(
v
 =
vÆ1
) {

201 
addr2
 = 
vÆ2
 % 
maxhéígth
;

202 
¥ev2
 = (
node_t
 *)
	`TX_LOAD
(&
£t
->
buckës
[
addr2
]->
hód
);

203 
√xt2
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev2
->
√xt
);

205 
v
 = 
	`TX_LOAD
(&
√xt2
->
vÆ
);

206 i‡(
v
 >
vÆ2
) ;

207 
¥ev2
 = 
√xt2
;

208 
√xt2
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev2
->
√xt
);

211 
n
 = (
node_t
 *)
	`TX_LOAD
(&
√xt
->next);

212 
	`TX_STORE
(&
¥ev
->
√xt
, 
n
);

214 
	`FREE
(
√xt
, (
node_t
));

216 i‡(
v
 !
vÆ2
) {

217 
	`TX_STORE
(&
¥ev2
->
√xt
, 
	`√w_node
(
vÆ2
, 
√xt2
, 
å™ß˘i⁄Æ
));

220 
ªsu…
 = 1;

221 } 
ªsu…
 = 0;

222 
TX_END
;

226 
	`TX_START
(
EL
);

227 
addr1
 = 
vÆ1
 % 
maxhéígth
;

228 
¥ev
 = (
node_t
 *)
	`TX_LOAD
(&
£t
->
buckës
[
addr1
]->
hód
);

229 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

231 
v
 = 
	`TX_LOAD
(&
√xt
->
vÆ
);

232 i‡(
v
 >
vÆ1
) ;

233 
¥ev
 = 
√xt
;

234 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

236 i‡(
v
 =
vÆ1
) {

238 
n
 = (
node_t
 *)
	`TX_LOAD
(&
√xt
->next);

239 
	`TX_STORE
(&
¥ev
->
√xt
, 
n
);

240 
	`FREE
(
√xt
, (
node_t
));

242 
addr2
 = 
vÆ2
 % 
maxhéígth
;

243 
¥ev
 = (
node_t
 *)
	`TX_LOAD
(&
£t
->
buckës
[
addr2
]->
hód
);

244 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

246 
v
 = 
	`TX_LOAD
(&
√xt
->
vÆ
);

247 i‡(
v
 >
vÆ2
) ;

248 
¥ev
 = 
√xt
;

249 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

251 i‡(
v
 !
vÆ2
) {

252 
	`TX_STORE
(&
¥ev
->
√xt
, 
	`√w_node
(
vÆ2
,Çext, 
å™ß˘i⁄Æ
));

255 
ªsu…
 = 1;

256 } 
ªsu…
 = 0;

257 
TX_END
;

261 
	`¥ötf
("ht_snapshot: No other implementation ofátomic snapshot isávailable\n");

262 
	`exô
(1);

265 
ªsu…
=0;

266 
	`¥ötf
("numbî %d dÿnŸ c‹ª•⁄dÅÿña°icôy.\n", 
å™ß˘i⁄Æ
);

267 
	`exô
(1);

269  
ªsu…
;

270 
	}
}

280 
	$ht_¢≠shŸ
(
ht_öt£t_t
 *
£t
, 
å™ß˘i⁄Æ
) {

281 
i
, 
ªsu…
, 
sum
 = 0;

282 
node_t
 *
√xt
;

284 
å™ß˘i⁄Æ
) {

286 
i
=0; i < 
maxhéígth
; i++) {

287 
√xt
 = 
£t
->
buckës
[
i
]->
hód
->next;

288 
√xt
->next) {

289 
sum
 +
√xt
->
vÆ
;

290 
√xt
 =Çext->next;

293 
ªsu…
 = 1;

301 
	`TX_START
(
NL
);

302 
i
=0; i < 
maxhéígth
; i++) {

303 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
£t
->
buckës
[
i
]->
hód
->next);

304 
√xt
->next) {

305 
sum
 +
	`TX_LOAD
(&
√xt
->
vÆ
);

306 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&next->next);

309 
TX_END
;

310 
ªsu…
 = 1;

314 
ªsu…
 = 0;

315 
	`¥ötf
("ht_snapshot: No other implementation ofátomic snapshot isávailable\n");

316 
	`exô
(1);

319 
ªsu…
=0;

320 
	`¥ötf
("numbî %d dÿnŸ c‹ª•⁄dÅÿña°icôy.\n", 
å™ß˘i⁄Æ
);

321 
	`exô
(1);

323  
ªsu…
;

324 
	}
}

330 
	sb¨rõr
 {

331 
±hªad_c⁄d_t
 
	mcom∂ëe
;

332 
±hªad_muãx_t
 
	mmuãx
;

333 
	mcou¡
;

334 
	m¸ossög
;

335 } 
	tb¨rõr_t
;

338 
	$b¨rõr_öô
(
b¨rõr_t
 *
b
, 
n
)

340 
	`±hªad_c⁄d_öô
(&
b
->
com∂ëe
, 
NULL
);

341 
	`±hªad_muãx_öô
(&
b
->
muãx
, 
NULL
);

342 
b
->
cou¡
 = 
n
;

343 
b
->
¸ossög
 = 0;

344 
	}
}

346 
	$b¨rõr_¸oss
(
b¨rõr_t
 *
b
)

348 
	`±hªad_muãx_lock
(&
b
->
muãx
);

350 
b
->
¸ossög
++;

352 i‡(
b
->
¸ossög
 < b->
cou¡
) {

353 
	`±hªad_c⁄d_waô
(&
b
->
com∂ëe
, &b->
muãx
);

355 
	`±hªad_c⁄d_brﬂdˇ°
(&
b
->
com∂ëe
);

357 
b
->
¸ossög
 = 0;

359 
	`±hªad_muãx_u∆ock
(&
b
->
muãx
);

360 
	}
}

372 
ölöe
 
	$ønd_ønge
(
r
) {

373 
m
 = 
RAND_MAX
;

374 
v
 = 0;

375 
d
;

378 
d
 = (
m
 > 
r
 ?Ñ : m);

379 
v
 +1 + ()(
d
 * (()
	`ønd
()/(()(
m
)+1.0)));

380 
r
 -
m
;

381 } 
r
 > 0);

382  
v
;

383 
	}
}

385 
	sthªad_d©a
 {

386 
	mønge
;

387 
	mupd©e
;

388 
	mmove
;

389 
	m¢≠shŸ
;

390 #i‚de‡
USE_RBTREE


391 
	munô_tx
;

393 
	mnb_add
;

394 
	mnb_ªmove
;

395 
	mnb_c⁄èös
;

397 
	mlﬂd_Á˘‹
;

398 
	mnb_move
;

399 
	mnb_moved
;

400 
	mnb_¢≠shŸ
;

401 
	mnb_¢≠shŸed
;

403 
	mnb_found
;

404 
	mnb_ab‹ts
;

405 
	mnb_ab‹ts_locked_ªad
;

406 
	mnb_ab‹ts_locked_wrôe
;

407 
	mnb_ab‹ts_vÆid©e_ªad
;

408 
	mnb_ab‹ts_vÆid©e_wrôe
;

409 
	mnb_ab‹ts_vÆid©e_commô
;

410 
	mnb_ab‹ts_övÆid_mem‹y
;

411 
	mnb_ab‹ts_doubÀ_wrôe
;

412 
	mmax_ªåõs
;

413 
	mdiff
;

414 
	m£ed
;

415 
ht_öt£t_t
 *
	m£t
;

416 
b¨rõr_t
 *
	mb¨rõr
;

417 
	mÁûuªs_beˇu£_c⁄ã¡i⁄
;

418 } 
	tthªad_d©a_t
;

421 *
	$ã°
(*
d©a
)

423 
vÆ
, 
œ°
, 
Êag
 = 1;

424 
thªad_d©a_t
 *
d
 = (thªad_d©a_à*)
d©a
;

427 
	`°m_öô_thªad
();

429 
	`b¨rõr_¸oss
(
d
->
b¨rõr
);

431 
œ°
 = 0;

432 
°›
 == 0) {

433 
vÆ
 = 
	`ønd_r
(&
d
->
£ed
) % 100;

435 i‡(
vÆ
 < 
d
->
upd©e
) {

436 i‡(
vÆ
 >
d
->
move
) {

437 i‡(
Êag
) {

439 
vÆ
 = (
	`ønd_r
(&
d
->
£ed
Ë% d->
ønge
) + 1;

440 i‡(
	`ht_add
(
d
->
£t
, 
vÆ
, 
TRANSACTIONAL
)) {

441 
d
->
diff
++;

442 
œ°
 = 
vÆ
;

443 
Êag
 = 0;

445 
d
->
nb_add
++;

448 i‡(
	`ht_ªmove
(
d
->
£t
, 
œ°
, 
TRANSACTIONAL
))

449 
d
->
diff
--;

450 
d
->
nb_ªmove
++;

451 
Êag
 = 1;

454 
vÆ
 = (
	`ønd_r
(&
d
->
£ed
Ë% d->
ønge
) + 1;

455 i‡(
	`ht_move
(
d
->
£t
, 
œ°
, 
vÆ
, 
TRANSACTIONAL
)) {

456 
d
->
nb_moved
++;

457 
œ°
 = 
vÆ
;

459 
d
->
nb_move
++;

462 i‡(
vÆ
 >
d
->
upd©e
 + d->
¢≠shŸ
) {

464 
vÆ
 = (
	`ønd_r
(&
d
->
£ed
Ë% d->
ønge
) + 1;

465 i‡(
	`ht_c⁄èös
(
d
->
£t
, 
vÆ
, 
TRANSACTIONAL
))

466 
d
->
nb_found
++;

467 
d
->
nb_c⁄èös
++;

469 i‡(
	`ht_¢≠shŸ
(
d
->
£t
, 
TRANSACTIONAL
))

470 
d
->
nb_¢≠shŸed
++;

471 
d
->
nb_¢≠shŸ
++;

475 
	`°m_gë_°©s
("nb_ab‹ts", &
d
->
nb_ab‹ts
);

476 
	`°m_gë_°©s
("nb_ab‹ts_locked_ªad", &
d
->
nb_ab‹ts_locked_ªad
);

477 
	`°m_gë_°©s
("nb_ab‹ts_locked_wrôe", &
d
->
nb_ab‹ts_locked_wrôe
);

478 
	`°m_gë_°©s
("nb_ab‹ts_vÆid©e_ªad", &
d
->
nb_ab‹ts_vÆid©e_ªad
);

479 
	`°m_gë_°©s
("nb_ab‹ts_vÆid©e_wrôe", &
d
->
nb_ab‹ts_vÆid©e_wrôe
);

480 
	`°m_gë_°©s
("nb_ab‹ts_vÆid©e_commô", &
d
->
nb_ab‹ts_vÆid©e_commô
);

481 
	`°m_gë_°©s
("nb_ab‹ts_övÆid_mem‹y", &
d
->
nb_ab‹ts_övÆid_mem‹y
);

482 
	`°m_gë_°©s
("nb_ab‹ts_doubÀ_wrôe", &
d
->
nb_ab‹ts_doubÀ_wrôe
);

483 
	`°m_gë_°©s
("max_ªåõs", &
d
->
max_ªåõs
);

485 
	`°m_exô_thªad
();

487  
NULL
;

488 
	}
}

490 
	$ˇtchî
(
sig
)

492 
	`¥ötf
("CAUGHT SIGNAL %d\n", 
sig
);

493 
	}
}

495 
	$¥öt_£t
(
öt£t_t
 *
£t
) {

496 
node_t
 *
cuº
, *
tmp
;

498 
cuº
 = 
£t
->
hód
;

499 
tmp
 = 
cuº
;

501 
	`¥ötf
(" - v%d", (Ë
cuº
->
vÆ
);

502 
tmp
 = 
cuº
;

503 
cuº
 = 
tmp
->
√xt
;

504 } 
cuº
->
vÆ
 !
VAL_MAX
);

505 
	`¥ötf
(" - v%d", (Ë
cuº
->
vÆ
);

506 
	`¥ötf
("\n");

507 
	}
}

509 
	$¥öt_ht
(
ht_öt£t_t
 *
£t
) {

510 
i
;

511 
i
=0; i < 
maxhéígth
; i++) {

512 
	`¥öt_£t
(
£t
->
buckës
[
i
]);

514 
	}
}

516 
ölöe
 
	$ønd_65535
()

518 #ifde‡
TLS


519  
	`ønd_r
(
∫g_£ed
) % 65535;

521  
	`ønd_r
((*)
	`±hªad_gë•ecific
(
∫g_£ed_key
)) % 65535;

523 
	}
}

525 
	$maö
(
¨gc
, **
¨gv
)

527 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

529 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

530 {"duøti⁄", 
ªquúed_¨gumít
, 
NULL
, 'd'},

531 {"öôül-size", 
ªquúed_¨gumít
, 
NULL
, 'i'},

532 {"num-thªads", 
ªquúed_¨gumít
, 
NULL
, 'n'},

533 {"ønge", 
ªquúed_¨gumít
, 
NULL
, 'r'},

534 {"£ed", 
ªquúed_¨gumít
, 
NULL
, 's'},

535 {"upd©e-øã", 
ªquúed_¨gumít
, 
NULL
, 'u'},

536 {"move-øã", 
ªquúed_¨gumít
, 
NULL
, 'm'},

537 {"¢≠shŸ-øã", 
ªquúed_¨gumít
, 
NULL
, 'a'},

538 {"ña°icôy", 
ªquúed_¨gumít
, 
NULL
, 'x'},

539 {
NULL
, 0, NULL, 0}

542 
ht_öt£t_t
 *
£t
;

543 
i
, 
c
, 
vÆ
, 
size
;

544 *
s
;

545 
ªads
, 
upd©es
, 
moves
, 
¢≠shŸs
, 
ab‹ts
,

546 
ab‹ts_locked_ªad
, 
ab‹ts_locked_wrôe
, 
ab‹ts_vÆid©e_ªad
,

547 
ab‹ts_vÆid©e_wrôe
, 
ab‹ts_vÆid©e_commô
, 
ab‹ts_övÆid_mem‹y
,

548 
ab‹ts_doubÀ_wrôe
,

549 
max_ªåõs
, 
Áûuªs_beˇu£_c⁄ã¡i⁄
;

550 
thªad_d©a_t
 *
d©a
;

551 
±hªad_t
 *
thªads
;

552 
±hªad_©å_t
 
©å
;

553 
b¨rõr_t
 
b¨rõr
;

554 
timevÆ
 
°¨t
, 
íd
;

555 
time•ec
 
timeout
;

556 
duøti⁄
 = 
DEFAULT_DURATION
;

557 
öôül
 = 
DEFAULT_INITIAL
;

558 
nb_thªads
 = 
DEFAULT_NB_THREADS
;

559 
ønge
 = 
DEFAULT_RANGE
;

560 
£ed
 = 
DEFAULT_SEED
;

561 
upd©e
 = 
DEFAULT_UPDATE
;

562 
lﬂd_Á˘‹
 = 
DEFAULT_LOAD
;

563 
move
 = 
DEFAULT_MOVE
;

564 
¢≠shŸ
 = 
DEFAULT_SNAPSHOT
;

565 
unô_tx
 = 4;

566 
sig£t_t
 
block_£t
;

569 
i
 = 0;

570 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "hd:i:n:r:s:u:m:a:l:x:", 
l⁄g_›ti⁄s
, &
i
);

572 if(
c
 == -1)

575 if(
c
 =0 && 
l⁄g_›ti⁄s
[
i
].
Êag
 == 0)

576 
c
 = 
l⁄g_›ti⁄s
[
i
].
vÆ
;

578 
c
) {

583 
	`¥ötf
("intset -- STM stressÅest "

593 " Te° duøti⁄ i¿mûli£c⁄d†(0=öföôe, deÁu…=" 
	`XSTR
(
DEFAULT_DURATION
) ")\n"

595 " Numbî o‡ñemít†tÿö£π bef‹êã° (deÁu…=" 
	`XSTR
(
DEFAULT_INITIAL
) ")\n"

597 " Numbî o‡thªad†(deÁu…=" 
	`XSTR
(
DEFAULT_NB_THREADS
) ")\n"

599 " R™gêo‡öãgî vÆue†ö£πed i¿£à(deÁu…=" 
	`XSTR
(
DEFAULT_RANGE
) ")\n"

601 " RNG sìd (0Òime-ba£d, deÁu…=" 
	`XSTR
(
DEFAULT_SEED
) ")\n"

603 " Pî˚¡agêo‡upd©êå™ß˘i⁄†(deÁu…=" 
	`XSTR
(
DEFAULT_UPDATE
) ")\n"

605 " Pî˚¡agêo‡movêå™ß˘i⁄†(deÁu…=" 
	`XSTR
(
DEFAULT_MOVE
) ")\n"

607 " Pî˚¡agêo‡¢≠shŸÅønß˘i⁄†(deÁu…=" 
	`XSTR
(
DEFAULT_SNAPSHOT
) ")\n"

609 " R©iÿo‡key†ovî buckë†(deÁu…=" 
	`XSTR
(
DEFAULT_LOAD
) ")\n"

619 
	`exô
(0);

621 
duøti⁄
 = 
	`©oi
(
›èrg
);

624 
öôül
 = 
	`©oi
(
›èrg
);

627 
nb_thªads
 = 
	`©oi
(
›èrg
);

630 
ønge
 = 
	`©oi
(
›èrg
);

633 
£ed
 = 
	`©oi
(
›èrg
);

636 
upd©e
 = 
	`©oi
(
›èrg
);

639 
move
 = 
	`©oi
(
›èrg
);

642 
¢≠shŸ
 = 
	`©oi
(
›èrg
);

645 
lﬂd_Á˘‹
 = 
	`©oi
(
›èrg
);

648 
unô_tx
 = 
	`©oi
(
›èrg
);

651 
	`¥ötf
("Use -h or --help for help\n");

652 
	`exô
(0);

654 
	`exô
(1);

658 
	`as£π
(
duøti⁄
 >= 0);

659 
	`as£π
(
öôül
 >= 0);

660 
	`as£π
(
nb_thªads
 > 0);

661 
	`as£π
(
ønge
 > 0 &&Ñ™gê>
öôül
);

662 
	`as£π
(
upd©e
 >= 0 && update <= 100);

663 
	`as£π
(
move
 >0 && movê<
upd©e
);

664 
	`as£π
(
¢≠shŸ
 >0 && s«pshŸ <(100-
upd©e
));

665 
	`as£π
(
öôül
 < 
MAXHTLENGTH
);

666 
	`as£π
(
öôül
 >
lﬂd_Á˘‹
);

668 
	`¥ötf
("SetÅype : hashÅable\n");

669 
	`¥ötf
("Duøti⁄ : %d\n", 
duøti⁄
);

670 
	`¥ötf
("Inôü»sizê: %d\n", 
öôül
);

671 
	`¥ötf
("NbÅhªad† : %d\n", 
nb_thªads
);

672 
	`¥ötf
("VÆuêøngê : %d\n", 
ønge
);

673 
	`¥ötf
("Sìd : %d\n", 
£ed
);

674 
	`¥ötf
("Upd©êøã : %d\n", 
upd©e
);

675 
	`¥ötf
("Lﬂd fa˘‹ : %d\n", 
lﬂd_Á˘‹
);

676 
	`¥ötf
("Movêøã : %d\n", 
move
);

677 
	`¥ötf
("S«pshŸÑ©e: %d\n", 
¢≠shŸ
);

678 
	`¥ötf
("Eœ°icôy : %d\n", 
unô_tx
);

679 
	`¥ötf
("Type sizes : int=%d/long=%d/ptr=%d/word=%d\n",

683 ()(
°m_w‹d_t
));

685 
timeout
.
tv_£c
 = 
duøti⁄
 / 1000;

686 
timeout
.
tv_n£c
 = (
duøti⁄
 % 1000) * 1000000;

688 i‡((
d©a
 = (
thªad_d©a_t
 *)
	`mÆloc
(
nb_thªads
 * —hªad_d©a_t))Ë=
NULL
) {

689 
	`≥º‹
("malloc");

690 
	`exô
(1);

692 i‡((
thªads
 = (
±hªad_t
 *)
	`mÆloc
(
nb_thªads
 * ’thªad_t))Ë=
NULL
) {

693 
	`≥º‹
("malloc");

694 
	`exô
(1);

697 i‡(
£ed
 == 0)

698 
	`§™d
(()
	`time
(0));

700 
	`§™d
(
£ed
);

702 
maxhéígth
 = (Ë
öôül
 / 
lﬂd_Á˘‹
;

703 
£t
 = 
	`ht_√w
();

705 
°›
 = 0;

708 
	`¥ötf
("Initializing STM\n");

709 
	`°m_öô
();

710 
	`mod_mem_öô
();

712 i‡(
	`°m_gë_∑ømëî
("compûe_Êags", &
s
))

713 
	`¥ötf
("STM fœg† : %s\n", 
s
);

716 
	`¥ötf
("Addög %dÉ¡rõ†tÿ£t\n", 
öôül
);

717 
i
 = 0;

718 
maxhéígth
 = (Ë(
öôül
 / 
lﬂd_Á˘‹
);

719 
i
 < 
öôül
) {

720 
vÆ
 = 
	`ønd_ønge
(
ønge
);

721 i‡(
	`ht_add
(
£t
, 
vÆ
, 0))

722 
i
++;

724 
size
 = 
	`ht_size
(
£t
);

725 
	`¥ötf
("Së sizê : %d\n", 
size
);

726 
	`¥ötf
("Buckëámou¡: %d\n", 
maxhéígth
);

727 
	`¥ötf
("Lﬂd : %d\n", 
lﬂd_Á˘‹
);

730 
	`b¨rõr_öô
(&
b¨rõr
, 
nb_thªads
 + 1);

731 
	`±hªad_©å_öô
(&
©å
);

732 
	`±hªad_©å_£tdëach°©e
(&
©å
, 
PTHREAD_CREATE_JOINABLE
);

733 
i
 = 0; i < 
nb_thªads
; i++) {

734 
	`¥ötf
("Cª©ögÅhªad %d\n", 
i
);

735 
d©a
[
i
].
ønge
 =Ñange;

736 
d©a
[
i
].
upd©e
 = update;

737 
d©a
[
i
].
lﬂd_Á˘‹
 =Üoad_factor;

738 
d©a
[
i
].
move
 = move;

739 
d©a
[
i
].
¢≠shŸ
 = snapshot;

740 
d©a
[
i
].
unô_tx
 = unit_tx;

741 
d©a
[
i
].
nb_add
 = 0;

742 
d©a
[
i
].
nb_ªmove
 = 0;

743 
d©a
[
i
].
nb_c⁄èös
 = 0;

744 
d©a
[
i
].
nb_found
 = 0;

745 
d©a
[
i
].
nb_ab‹ts
 = 0;

746 
d©a
[
i
].
nb_ab‹ts_locked_ªad
 = 0;

747 
d©a
[
i
].
nb_ab‹ts_locked_wrôe
 = 0;

748 
d©a
[
i
].
nb_ab‹ts_vÆid©e_ªad
 = 0;

749 
d©a
[
i
].
nb_ab‹ts_vÆid©e_wrôe
 = 0;

750 
d©a
[
i
].
nb_ab‹ts_vÆid©e_commô
 = 0;

751 
d©a
[
i
].
nb_ab‹ts_övÆid_mem‹y
 = 0;

752 
d©a
[
i
].
nb_ab‹ts_doubÀ_wrôe
 = 0;

753 
d©a
[
i
].
max_ªåõs
 = 0;

754 
d©a
[
i
].
diff
 = 0;

755 
d©a
[
i
].
£ed
 = 
	`ønd
();

756 
d©a
[
i
].
£t
 = set;

757 
d©a
[
i
].
b¨rõr
 = &barrier;

758 
d©a
[
i
].
Áûuªs_beˇu£_c⁄ã¡i⁄
 = 0;

759 i‡(
	`±hªad_¸óã
(&
thªads
[
i
], &
©å
, 
ã°
, (*)(&
d©a
[i])) != 0) {

760 
	`Ârötf
(
°dîr
, "Error creatingÅhread\n");

761 
	`exô
(1);

764 
	`±hªad_©å_de°roy
(&
©å
);

767 i‡(
	`sig«l
(
SIGHUP
, 
ˇtchî
Ë=
SIG_ERR
 ||

768 
	`sig«l
(
SIGINT
, 
ˇtchî
Ë=
SIG_ERR
 ||

769 
	`sig«l
(
SIGTERM
, 
ˇtchî
Ë=
SIG_ERR
) {

770 
	`≥º‹
("signal");

771 
	`exô
(1);

775 
	`b¨rõr_¸oss
(&
b¨rõr
);

777 
	`¥ötf
("STARTING...\n");

778 
	`gëtimeofday
(&
°¨t
, 
NULL
);

779 i‡(
duøti⁄
 > 0) {

780 
	`«no¶ìp
(&
timeout
, 
NULL
);

782 
	`sigem±y£t
(&
block_£t
);

783 
	`sigsu•íd
(&
block_£t
);

785 
	`AO_°‹e_fuŒ
(&
°›
, 1);

786 
	`gëtimeofday
(&
íd
, 
NULL
);

787 
	`¥ötf
("STOPPING...\n");

790 
i
 = 0; i < 
nb_thªads
; i++) {

791 i‡(
	`±hªad_joö
(
thªads
[
i
], 
NULL
) != 0) {

792 
	`Ârötf
(
°dîr
, "Error waiting forÅhread completion\n");

793 
	`exô
(1);

797 
duøti⁄
 = (
íd
.
tv_£c
 * 1000 +Énd.
tv_u£c
 / 1000Ë- (
°¨t
.tv_sec * 1000 + start.tv_usec / 1000);

798 
ab‹ts
 = 0;

799 
ab‹ts_locked_ªad
 = 0;

800 
ab‹ts_locked_wrôe
 = 0;

801 
ab‹ts_vÆid©e_ªad
 = 0;

802 
ab‹ts_vÆid©e_wrôe
 = 0;

803 
ab‹ts_vÆid©e_commô
 = 0;

804 
ab‹ts_övÆid_mem‹y
 = 0;

805 
ab‹ts_doubÀ_wrôe
 = 0;

806 
Áûuªs_beˇu£_c⁄ã¡i⁄
 = 0;

807 
ªads
 = 0;

808 
upd©es
 = 0;

809 
moves
 = 0;

810 
¢≠shŸs
 = 0;

811 
max_ªåõs
 = 0;

812 
i
 = 0; i < 
nb_thªads
; i++) {

813 
	`¥ötf
("Thªad %d\n", 
i
);

814 
	`¥ötf
(" #add : %lu\n", 
d©a
[
i
].
nb_add
);

815 
	`¥ötf
(" #ªmovê : %lu\n", 
d©a
[
i
].
nb_ªmove
);

816 
	`¥ötf
(" #c⁄èö† : %lu\n", 
d©a
[
i
].
nb_c⁄èös
);

817 
	`¥ötf
(" #found : %lu\n", 
d©a
[
i
].
nb_found
);

818 
	`¥ötf
(" #movê : %lu\n", 
d©a
[
i
].
nb_move
);

819 
	`¥ötf
(" #moved : %lu\n", 
d©a
[
i
].
nb_moved
);

820 
	`¥ötf
(" #¢≠shŸ : %lu\n", 
d©a
[
i
].
nb_¢≠shŸ
);

821 
	`¥ötf
(" #¢≠shŸed : %lu\n", 
d©a
[
i
].
nb_¢≠shŸed
);

822 
	`¥ötf
(" #ab‹t† : %lu\n", 
d©a
[
i
].
nb_ab‹ts
);

823 
	`¥ötf
(" #lock-∏ : %lu\n", 
d©a
[
i
].
nb_ab‹ts_locked_ªad
);

824 
	`¥ötf
(" #lock-w : %lu\n", 
d©a
[
i
].
nb_ab‹ts_locked_wrôe
);

825 
	`¥ötf
(" #vÆ-∏ : %lu\n", 
d©a
[
i
].
nb_ab‹ts_vÆid©e_ªad
);

826 
	`¥ötf
(" #vÆ-w : %lu\n", 
d©a
[
i
].
nb_ab‹ts_vÆid©e_wrôe
);

827 
	`¥ötf
(" #vÆ-¯ : %lu\n", 
d©a
[
i
].
nb_ab‹ts_vÆid©e_commô
);

828 
	`¥ötf
(" #öv-mem : %lu\n", 
d©a
[
i
].
nb_ab‹ts_övÆid_mem‹y
);

829 
	`¥ötf
(" #dup-w : %lu\n", 
d©a
[
i
].
nb_ab‹ts_doubÀ_wrôe
);

830 
	`¥ötf
(" #Áûuª†: %lu\n", 
d©a
[
i
].
Áûuªs_beˇu£_c⁄ã¡i⁄
);

831 
	`¥ötf
(" MaxÑërõ†: %lu\n", 
d©a
[
i
].
max_ªåõs
);

832 
ab‹ts
 +
d©a
[
i
].
nb_ab‹ts
;

833 
ab‹ts_locked_ªad
 +
d©a
[
i
].
nb_ab‹ts_locked_ªad
;

834 
ab‹ts_locked_wrôe
 +
d©a
[
i
].
nb_ab‹ts_locked_wrôe
;

835 
ab‹ts_vÆid©e_ªad
 +
d©a
[
i
].
nb_ab‹ts_vÆid©e_ªad
;

836 
ab‹ts_vÆid©e_wrôe
 +
d©a
[
i
].
nb_ab‹ts_vÆid©e_wrôe
;

837 
ab‹ts_vÆid©e_commô
 +
d©a
[
i
].
nb_ab‹ts_vÆid©e_commô
;

838 
ab‹ts_övÆid_mem‹y
 +
d©a
[
i
].
nb_ab‹ts_övÆid_mem‹y
;

839 
ab‹ts_doubÀ_wrôe
 +
d©a
[
i
].
nb_ab‹ts_doubÀ_wrôe
;

840 
Áûuªs_beˇu£_c⁄ã¡i⁄
 +
d©a
[
i
].failures_because_contention;

841 
ªads
 +
d©a
[
i
].
nb_c⁄èös
;

842 
upd©es
 +(
d©a
[
i
].
nb_add
 + d©a[i].
nb_ªmove
);

843 
moves
 +
d©a
[
i
].
nb_move
;

844 
¢≠shŸs
 +
d©a
[
i
].
nb_¢≠shŸ
;

845 
size
 +
d©a
[
i
].
diff
;

846 i‡(
max_ªåõs
 < 
d©a
[
i
].max_retries)

847 
max_ªåõs
 = 
d©a
[
i
].max_retries;

849 
	`¥ötf
("Së sizê : %d (ex≥˘ed: %d)\n", 
	`ht_size
(
£t
), 
size
);

850 
	`¥ötf
("Duøti⁄ : %d (ms)\n", 
duøti⁄
);

851 
	`¥ötf
("#tx† : %lu (%‡/ s)\n", 
ªads
 + 
upd©es
 + 
moves
 + 
¢≠shŸs
, (ªad†+ upd©e†+ move†+ s«pshŸsË* 1000.0 / 
duøti⁄
);

852 
	`¥ötf
("#ªadÅx† : %lu (%‡/ s)\n", 
ªads
,Ñód†* 1000.0 / 
duøti⁄
);

853 
	`¥ötf
("#upd©êtx† : %lu (%‡/ s)\n", 
upd©es
, upd©e†* 1000.0 / 
duøti⁄
);

854 
	`¥ötf
("#movêtx† : %lu (%‡/ s)\n", 
moves
, move†* 1000.0 / 
duøti⁄
);

855 
	`¥ötf
("#¢≠shŸÅx†: %lu (%‡/ s)\n", 
¢≠shŸs
, s«pshŸ†* 1000.0 / 
duøti⁄
);

856 
	`¥ötf
("#ab‹t† : %lu (%‡/ s)\n", 
ab‹ts
,áb‹t†* 1000.0 / 
duøti⁄
);

857 
	`¥ötf
(" #lock-∏ : %lu (%‡/ s)\n", 
ab‹ts_locked_ªad
,áb‹ts_locked_ªad * 1000.0 / 
duøti⁄
);

858 
	`¥ötf
(" #lock-w : %lu (%‡/ s)\n", 
ab‹ts_locked_wrôe
,áb‹ts_locked_wrôê* 1000.0 / 
duøti⁄
);

859 
	`¥ötf
(" #vÆ-∏ : %lu (%‡/ s)\n", 
ab‹ts_vÆid©e_ªad
,áb‹ts_vÆid©e_ªad * 1000.0 / 
duøti⁄
);

860 
	`¥ötf
(" #vÆ-w : %lu (%‡/ s)\n", 
ab‹ts_vÆid©e_wrôe
,áb‹ts_vÆid©e_wrôê* 1000.0 / 
duøti⁄
);

861 
	`¥ötf
(" #vÆ-¯ : %lu (%‡/ s)\n", 
ab‹ts_vÆid©e_commô
,áb‹ts_vÆid©e_commô * 1000.0 / 
duøti⁄
);

862 
	`¥ötf
(" #öv-mem : %lu (%‡/ s)\n", 
ab‹ts_övÆid_mem‹y
,áb‹ts_övÆid_mem‹y * 1000.0 / 
duøti⁄
);

863 
	`¥ötf
(" #dup-w : %lu (%‡/ s)\n", 
ab‹ts_doubÀ_wrôe
,áb‹ts_doubÀ_wrôê* 1000.0 / 
duøti⁄
);

864 
	`¥ötf
(" #Áûuª† : %lu\n", 
Áûuªs_beˇu£_c⁄ã¡i⁄
);

865 
	`¥ötf
("MaxÑërõ† : %lu\n", 
max_ªåõs
);

868 
	`ht_dñëe
(
£t
);

871 
	`°m_exô
();

873 
	`‰ì
(
thªads
);

874 
	`‰ì
(
d©a
);

877 
	}
}

	@utils/estm-0.2.4.3/bench/lf-linkedlist/harris.c

24 
	~"h¨ris.h
"

33 
	$is_m¨ked_ªf
(
i
) {

34  (Ë(
i
 & (
LONG_MIN
+1));

35 
	}
}

37 
	$un£t_m¨k
(
i
) {

38 
i
 &
LONG_MAX
-1;

39  
i
;

40 
	}
}

42 
	$£t_m¨k
(
i
) {

43 
i
 = 
	`un£t_m¨k
(i);

44 
i
 += 1;

45  
i
;

46 
	}
}

48 
	$gë_unm¨ked_ªf
(
w
) {

49  
	`un£t_m¨k
(
w
);

50 
	}
}

52 
	$gë_m¨ked_ªf
(
w
) {

53  
	`£t_m¨k
(
w
);

54 
	}
}

64 
node_t
 *
	$h¨ris_£¨ch
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
, 
node_t
 **
À·_node
) {

65 
node_t
 *
À·_node_√xt
, *
right_node
;

66 
À·_node_√xt
 = 
£t
->
hód
;

68 
£¨ch_agaö
:

70 
node_t
 *
t
 = 
£t
->
hód
;

71 
node_t
 *
t_√xt
 = 
£t
->
hód
->
√xt
;

75 i‡(!
	`is_m¨ked_ªf
((Ë
t_√xt
)) {

76 (*
À·_node
Ë
t
;

77 
À·_node_√xt
 = 
t_√xt
;

79 
t
 = (
node_t
 *Ë
	`gë_unm¨ked_ªf
((Ë
t_√xt
);

80 i‡(!
t
->
√xt
) ;

81 
t_√xt
 = 
t
->
√xt
;

82 } 
	`is_m¨ked_ªf
((Ë
t_√xt
Ë|| (
t
->
vÆ
 < val));

83 
right_node
 = 
t
;

86 i‡(
À·_node_√xt
 =
right_node
) {

87 i‡(
right_node
->
√xt
 && 
	`is_m¨ked_ªf
(()Ñight_node->next))

88 
£¨ch_agaö
;

89  
right_node
;

93 i‡(
	`ATOMIC_CAS_MB
(&(*
À·_node
)->
√xt
,

94 
À·_node_√xt
,

95 
right_node
)) {

96 i‡(
right_node
->
√xt
 && 
	`is_m¨ked_ªf
(()Ñight_node->next))

97 
£¨ch_agaö
;

98  
right_node
;

102 
	}
}

107 
	$h¨ris_föd
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
) {

108 
node_t
 *
right_node
, *
À·_node
;

109 
À·_node
 = 
£t
->
hód
;

111 
right_node
 = 
	`h¨ris_£¨ch
(
£t
, 
vÆ
, &
À·_node
);

112 i‡((!
right_node
->
√xt
Ë||Ñight_node->
vÆ
 != val)

116 
	}
}

122 
	$h¨ris_ö£π
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
) {

123 
node_t
 *
√wnode
, *
right_node
, *
À·_node
;

124 
À·_node
 = 
£t
->
hód
;

127 
right_node
 = 
	`h¨ris_£¨ch
(
£t
, 
vÆ
, &
À·_node
);

128 i‡(
right_node
->
vÆ
 == val)

130 
√wnode
 = 
	`√w_node
(
vÆ
, 
right_node
, 0);

132 
	`AO_n›_fuŒ
();

133 i‡(
	`ATOMIC_CAS_MB
(&
À·_node
->
√xt
, 
right_node
, 
√wnode
))

136 
	}
}

143 
	$h¨ris_dñëe
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
) {

144 
node_t
 *
right_node
, *
right_node_√xt
, *
À·_node
;

145 
À·_node
 = 
£t
->
hód
;

148 
right_node
 = 
	`h¨ris_£¨ch
(
£t
, 
vÆ
, &
À·_node
);

149 i‡(
right_node
->
vÆ
 != val)

151 
right_node_√xt
 = 
right_node
->
√xt
;

152 i‡(!
	`is_m¨ked_ªf
((Ë
right_node_√xt
))

153 i‡(
	`ATOMIC_CAS_MB
(&
right_node
->
√xt
,

154 
right_node_√xt
,

155 
	`gë_m¨ked_ªf
((Ë
right_node_√xt
)))

158 i‡(!
	`ATOMIC_CAS_MB
(&
À·_node
->
√xt
, 
right_node
, 
right_node_√xt
))

159 
right_node
 = 
	`h¨ris_£¨ch
(
£t
,Ñight_node->
vÆ
, &
À·_node
);

161 
	}
}

	@utils/estm-0.2.4.3/bench/lf-linkedlist/harris.h

10 
	~"öt£t.h
"

16 
is_m¨ked_ªf
(
i
);

17 
un£t_m¨k
(
i
);

18 
£t_m¨k
(
i
);

19 
gë_unm¨ked_ªf
(
w
);

20 
gë_m¨ked_ªf
(
w
);

22 
node_t
 *
h¨ris_£¨ch
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
,Çode_à**
À·_node
);

23 
h¨ris_föd
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
);

24 
h¨ris_ö£π
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
);

25 
h¨ris_dñëe
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
);

	@utils/estm-0.2.4.3/bench/lf-linkedlist/intset.c

22 
	~<as£π.h
>

23 
	~<gë›t.h
>

24 
	~<limôs.h
>

25 
	~<±hªad.h
>

26 
	~<sig«l.h
>

27 
	~<°dlib.h
>

28 
	~<°dio.h
>

29 
	~<sys/time.h
>

30 
	~<time.h
>

31 
	~<°döt.h
>

33 
	~<©omic_›s.h
>

35 
	~"°m.h
"

36 
	~"mod_mem.h
"

38 #ifde‡
DEBUG


39 
	#IO_FLUSH
 
	`fÊush
(
NULL
)

	)

49 
	#MALLOC
(
size
Ë
	`°m_mÆloc
(size)

	)

55 
öçå_t
 
	tvÆ_t
;

56 
	#VAL_MIN
 
INT_MIN


	)

57 
	#VAL_MAX
 
INT_MAX


	)

59 
	snode
 {

60 
vÆ_t
 
	mvÆ
;

61 
node
 *
	m√xt
;

62 } 
	tnode_t
;

64 
	söt£t
 {

65 
node_t
 *
	mhód
;

66 } 
	töt£t_t
;

68 
node_t
 *
	$√w_node
(
vÆ_t
 
vÆ
, 
node_t
 *
√xt
, 
å™ß˘i⁄Æ
)

70 
node_t
 *
node
;

72 i‡(!
å™ß˘i⁄Æ
) {

73 
node
 = (
node_t
 *)
	`mÆloc
((node_t));

75 
node
 = (
node_t
 *)
	`MALLOC
((node_t));

77 i‡(
node
 =
NULL
) {

78 
	`≥º‹
("malloc");

79 
	`exô
(1);

82 
node
->
vÆ
 = val;

83 
node
->
√xt
 =Çext;

85  
node
;

86 
	}
}

88 
öt£t_t
 *
	$£t_√w
()

90 
öt£t_t
 *
£t
;

91 
node_t
 *
mö
, *
max
;

93 i‡((
£t
 = (
öt£t_t
 *)
	`mÆloc
((öt£t_t))Ë=
NULL
) {

94 
	`≥º‹
("malloc");

95 
	`exô
(1);

97 
max
 = 
	`√w_node
(
VAL_MAX
, 
NULL
, 0);

98 
mö
 = 
	`√w_node
(
VAL_MIN
, 
max
, 0);

99 
£t
->
hód
 = 
mö
;

101  
£t
;

102 
	}
}

104 
	$£t_dñëe
(
öt£t_t
 *
£t
)

106 
node_t
 *
node
, *
√xt
;

108 
node
 = 
£t
->
hód
;

109 
node
 !
NULL
) {

110 
√xt
 = 
node
->next;

111 
	`‰ì
(
node
);

112 
node
 = 
√xt
;

114 
	`‰ì
(
£t
);

115 
	}
}

117 
	$£t_size
(
öt£t_t
 *
£t
)

119 
size
 = 0;

120 
node_t
 *
node
;

123 
node
 = 
£t
->
hód
->
√xt
;

124 
node
->
√xt
 !
NULL
) {

125 
size
++;

126 
node
 =Çode->
√xt
;

129  
size
;

130 
	}
}

	@utils/estm-0.2.4.3/bench/lf-linkedlist/intset.h

23 
	~<as£π.h
>

24 
	~<gë›t.h
>

25 
	~<limôs.h
>

26 
	~<±hªad.h
>

27 
	~<sig«l.h
>

28 
	~<°dlib.h
>

29 
	~<°dio.h
>

30 
	~<sys/time.h
>

31 
	~<time.h
>

32 
	~<°döt.h
>

34 
	~<©omic_›s.h
>

36 
	~"°m.h
"

37 
	~"mod_mem.h
"

39 #ifde‡
DEBUG


40 
	#IO_FLUSH
 
	`fÊush
(
NULL
)

	)

49 
	#TX_START
(
ty≥
Ë{ 
sigjmp_buf
 *
_e
 = 
	`°m_gë_ív
(); 
	`sig£tjmp
(*_e, 0); 
	`°m_°¨t
(_e, 0,Åy≥)

	)

50 
	#TX_LOAD
(
addr
Ë
	`°m_lﬂd
((
°m_w‹d_t
 *Ôddr)

	)

51 
	#TX_STORE
(
addr
, 
vÆ
Ë
	`°m_°‹e
((
°m_w‹d_t
 *Ôddr, (°m_w‹d_t)vÆ)

	)

52 
	#TX_END
 
	`°m_commô
(); }

	)

54 
	#FREE
(
addr
, 
size
Ë
	`°m_‰ì
◊ddr, size)

	)

56 
	#DEFAULT_DURATION
 10000

	)

57 
	#DEFAULT_INITIAL
 256

	)

58 
	#DEFAULT_NB_THREADS
 1

	)

59 
	#DEFAULT_RANGE
 0xFFFF

	)

60 
	#DEFAULT_SEED
 0

	)

61 
	#DEFAULT_UPDATE
 20

	)

63 
	#XSTR
(
s
Ë
	`STR
(s)

	)

64 
	#STR
(
s
Ë#s

	)

66 
	#ATOMIC_CAS_MB
(
a
, 
e
, 
v
Ë(
	`AO_com∑ª_™d_sw≠_fuŒ
((vﬁ©ûê
AO_t
 *)◊), (AO_t)”), (AO_t)(v)))

	)

72 vﬁ©ûê
AO_t
 
	g°›
;

78 
	#TRANSACTIONAL
 
d
->
unô_tx


	)

80 
öçå_t
 
	tvÆ_t
;

81 
	#VAL_MIN
 
INT_MIN


	)

82 
	#VAL_MAX
 
INT_MAX


	)

84 
	snode
 {

85 
vÆ_t
 
	mvÆ
;

86 
node
 *
	m√xt
;

87 } 
	tnode_t
;

89 
	söt£t
 {

90 
node_t
 *
	mhód
;

91 } 
	töt£t_t
;

93 
node_t
 *
√w_node
(
vÆ_t
 
vÆ
,Çode_à*
√xt
, 
å™ß˘i⁄Æ
);

94 
öt£t_t
 *
£t_√w
();

95 
£t_dñëe
(
öt£t_t
 *
£t
);

96 
£t_size
(
öt£t_t
 *
£t
);

	@utils/estm-0.2.4.3/bench/lf-linkedlist/lf-ll.c

10 
	~"lökedli°.h
"

17 
	sb¨rõr
 {

18 
±hªad_c⁄d_t
 
	mcom∂ëe
;

19 
±hªad_muãx_t
 
	mmuãx
;

20 
	mcou¡
;

21 
	m¸ossög
;

22 } 
	tb¨rõr_t
;

24 
	$b¨rõr_öô
(
b¨rõr_t
 *
b
, 
n
)

26 
	`±hªad_c⁄d_öô
(&
b
->
com∂ëe
, 
NULL
);

27 
	`±hªad_muãx_öô
(&
b
->
muãx
, 
NULL
);

28 
b
->
cou¡
 = 
n
;

29 
b
->
¸ossög
 = 0;

30 
	}
}

32 
	$b¨rõr_¸oss
(
b¨rõr_t
 *
b
)

34 
	`±hªad_muãx_lock
(&
b
->
muãx
);

36 
b
->
¸ossög
++;

38 i‡(
b
->
¸ossög
 < b->
cou¡
) {

39 
	`±hªad_c⁄d_waô
(&
b
->
com∂ëe
, &b->
muãx
);

41 
	`±hªad_c⁄d_brﬂdˇ°
(&
b
->
com∂ëe
);

43 
b
->
¸ossög
 = 0;

45 
	`±hªad_muãx_u∆ock
(&
b
->
muãx
);

46 
	}
}

58 
ölöe
 
	$ønd_ønge
(
r
) {

59 
m
 = 
RAND_MAX
;

60 
v
 = 0;

61 
d
;

64 
d
 = (
m
 > 
r
 ?Ñ : m);

65 
v
 +1 + ()(
d
 * (()
	`ønd
()/(()(
m
)+1.0)));

66 
r
 -
m
;

67 } 
r
 > 0);

68  
v
;

69 
	}
}

71 
	sthªad_d©a
 {

72 
	mønge
;

73 
	mupd©e
;

74 #i‚de‡
USE_RBTREE


75 
	munô_tx
;

77 
	mnb_add
;

78 
	mnb_ªmove
;

79 
	mnb_c⁄èös
;

80 
	mnb_found
;

81 
	mnb_ab‹ts
;

82 
	mnb_ab‹ts_locked_ªad
;

83 
	mnb_ab‹ts_locked_wrôe
;

84 
	mnb_ab‹ts_vÆid©e_ªad
;

85 
	mnb_ab‹ts_vÆid©e_wrôe
;

86 
	mnb_ab‹ts_vÆid©e_commô
;

87 
	mnb_ab‹ts_övÆid_mem‹y
;

88 
	mnb_ab‹ts_doubÀ_wrôe
;

89 
	mmax_ªåõs
;

90 
	mdiff
;

91 
	m£ed
;

92 
öt£t_t
 *
	m£t
;

93 
b¨rõr_t
 *
	mb¨rõr
;

94 
	mÁûuªs_beˇu£_c⁄ã¡i⁄
;

95 } 
	tthªad_d©a_t
;

97 *
	$ã°
(*
d©a
)

99 
vÆ
, 
œ°
 = 0;

100 
thªad_d©a_t
 *
d
 = (thªad_d©a_à*)
d©a
;

103 
	`°m_öô_thªad
();

105 
	`b¨rõr_¸oss
(
d
->
b¨rõr
);

107 
œ°
 = -1;

108 
°›
 == 0) {

109 
vÆ
 = 
	`ønd_r
(&
d
->
£ed
) % 100;

110 i‡(
vÆ
 < 
d
->
upd©e
) {

111 i‡(
œ°
 < 0) {

113 
vÆ
 = (
	`ønd_r
(&
d
->
£ed
Ë% d->
ønge
) + 1;

114 i‡(
	`£t_add
(
d
->
£t
, 
vÆ
, 
TRANSACTIONAL
)) {

115 
d
->
diff
++;

116 
œ°
 = 
vÆ
;

118 
d
->
nb_add
++;

121 i‡(
	`£t_ªmove
(
d
->
£t
, 
œ°
, 
TRANSACTIONAL
))

122 
d
->
diff
--;

123 
d
->
nb_ªmove
++;

124 
œ°
 = -1;

128 
vÆ
 = (
	`ønd_r
(&
d
->
£ed
Ë% d->
ønge
) + 1;

129 i‡(
	`£t_c⁄èös
(
d
->
£t
, 
vÆ
, 
TRANSACTIONAL
))

130 
d
->
nb_found
++;

131 
d
->
nb_c⁄èös
++;

135 
	`°m_gë_°©s
("nb_ab‹ts", &
d
->
nb_ab‹ts
);

136 
	`°m_gë_°©s
("nb_ab‹ts_locked_ªad", &
d
->
nb_ab‹ts_locked_ªad
);

137 
	`°m_gë_°©s
("nb_ab‹ts_locked_wrôe", &
d
->
nb_ab‹ts_locked_wrôe
);

138 
	`°m_gë_°©s
("nb_ab‹ts_vÆid©e_ªad", &
d
->
nb_ab‹ts_vÆid©e_ªad
);

139 
	`°m_gë_°©s
("nb_ab‹ts_vÆid©e_wrôe", &
d
->
nb_ab‹ts_vÆid©e_wrôe
);

140 
	`°m_gë_°©s
("nb_ab‹ts_vÆid©e_commô", &
d
->
nb_ab‹ts_vÆid©e_commô
);

141 
	`°m_gë_°©s
("nb_ab‹ts_övÆid_mem‹y", &
d
->
nb_ab‹ts_övÆid_mem‹y
);

142 
	`°m_gë_°©s
("nb_ab‹ts_doubÀ_wrôe", &
d
->
nb_ab‹ts_övÆid_mem‹y
);

143 
	`°m_gë_°©s
("max_ªåõs", &
d
->
max_ªåõs
);

145 
	`°m_exô_thªad
();

147  
NULL
;

148 
	}
}

150 
	$ˇtchî
(
sig
)

152 
	`¥ötf
("CAUGHT SIGNAL %d\n", 
sig
);

153 
	}
}

155 
	$maö
(
¨gc
, **
¨gv
)

157 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

159 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

160 {"duøti⁄", 
ªquúed_¨gumít
, 
NULL
, 'd'},

161 {"öôül-size", 
ªquúed_¨gumít
, 
NULL
, 'i'},

162 {"num-thªads", 
ªquúed_¨gumít
, 
NULL
, 'n'},

163 {"ønge", 
ªquúed_¨gumít
, 
NULL
, 'r'},

164 {"£ed", 
ªquúed_¨gumít
, 
NULL
, 's'},

165 {"upd©e-øã", 
ªquúed_¨gumít
, 
NULL
, 'u'},

166 {"ña°icôy", 
ªquúed_¨gumít
, 
NULL
, 'x'},

167 {
NULL
, 0, NULL, 0}

170 
öt£t_t
 *
£t
;

171 
i
, 
c
, 
vÆ
, 
size
;

172 *
s
;

173 
ªads
, 
upd©es
, 
ab‹ts
, 
ab‹ts_locked_ªad
, 
ab‹ts_locked_wrôe
,

174 
ab‹ts_vÆid©e_ªad
, 
ab‹ts_vÆid©e_wrôe
, 
ab‹ts_vÆid©e_commô
,

175 
ab‹ts_övÆid_mem‹y
, 
ab‹ts_doubÀ_wrôe
, 
max_ªåõs
, 
Áûuªs_beˇu£_c⁄ã¡i⁄
;

176 
thªad_d©a_t
 *
d©a
;

177 
±hªad_t
 *
thªads
;

178 
±hªad_©å_t
 
©å
;

179 
b¨rõr_t
 
b¨rõr
;

180 
timevÆ
 
°¨t
, 
íd
;

181 
time•ec
 
timeout
;

182 
duøti⁄
 = 
DEFAULT_DURATION
;

183 
öôül
 = 
DEFAULT_INITIAL
;

184 
nb_thªads
 = 
DEFAULT_NB_THREADS
;

185 
ønge
 = 
DEFAULT_RANGE
;

186 
£ed
 = 
DEFAULT_SEED
;

187 
upd©e
 = 
DEFAULT_UPDATE
;

188 
unô_tx
 = 4;

189 
sig£t_t
 
block_£t
;

192 
i
 = 0;

193 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "hd:i:n:r:s:u:x:", 
l⁄g_›ti⁄s
, &
i
);

195 if(
c
 == -1)

198 if(
c
 =0 && 
l⁄g_›ti⁄s
[
i
].
Êag
 == 0)

199 
c
 = 
l⁄g_›ti⁄s
[
i
].
vÆ
;

201 
c
) {

206 
	`¥ötf
("intset -- STM stressÅest "

216 " Te° duøti⁄ i¿mûli£c⁄d†(0=öföôe, deÁu…=" 
	`XSTR
(
DEFAULT_DURATION
) ")\n"

218 " Numbî o‡ñemít†tÿö£π bef‹êã° (deÁu…=" 
	`XSTR
(
DEFAULT_INITIAL
) ")\n"

220 " Numbî o‡thªad†(deÁu…=" 
	`XSTR
(
DEFAULT_NB_THREADS
) ")\n"

222 " R™gêo‡öãgî vÆue†ö£πed i¿£à(deÁu…=" 
	`XSTR
(
DEFAULT_RANGE
) ")\n"

224 " RNG sìd (0Òime-ba£d, deÁu…=" 
	`XSTR
(
DEFAULT_SEED
) ")\n"

226 " Pî˚¡agêo‡upd©êå™ß˘i⁄†(deÁu…=" 
	`XSTR
(
DEFAULT_UPDATE
) ")\n"

237 
	`exô
(0);

239 
duøti⁄
 = 
	`©oi
(
›èrg
);

242 
öôül
 = 
	`©oi
(
›èrg
);

245 
nb_thªads
 = 
	`©oi
(
›èrg
);

248 
ønge
 = 
	`©oi
(
›èrg
);

251 
£ed
 = 
	`©oi
(
›èrg
);

254 
upd©e
 = 
	`©oi
(
›èrg
);

256 #i‚de‡
USE_RBTREE


258 
unô_tx
 = 
	`©oi
(
›èrg
);

262 
	`¥ötf
("Use -h or --help for help\n");

263 
	`exô
(0);

265 
	`exô
(1);

269 
	`as£π
(
duøti⁄
 >= 0);

270 
	`as£π
(
öôül
 >= 0);

271 
	`as£π
(
nb_thªads
 > 0);

272 
	`as£π
(
ønge
 > 0 &&Ñ™gê>
öôül
);

273 
	`as£π
(
upd©e
 >= 0 && update <= 100);

275 
	`¥ötf
("SetÅype :ÜinkedÜist\n");

276 
	`¥ötf
("Duøti⁄ : %d\n", 
duøti⁄
);

277 
	`¥ötf
("Inôü»sizê: %d\n", 
öôül
);

278 
	`¥ötf
("NbÅhªad† : %d\n", 
nb_thªads
);

279 
	`¥ötf
("VÆuêøngê : %d\n", 
ønge
);

280 
	`¥ötf
("Sìd : %d\n", 
£ed
);

281 
	`¥ötf
("Upd©êøã : %d\n", 
upd©e
);

282 
	`¥ötf
("Eœ°icôy : %d\n", 
unô_tx
);

283 
	`¥ötf
("Type sizes : int=%d/long=%d/ptr=%d/word=%d\n",

287 ()(
°m_w‹d_t
));

289 
timeout
.
tv_£c
 = 
duøti⁄
 / 1000;

290 
timeout
.
tv_n£c
 = (
duøti⁄
 % 1000) * 1000000;

292 i‡((
d©a
 = (
thªad_d©a_t
 *)
	`mÆloc
(
nb_thªads
 * —hªad_d©a_t))Ë=
NULL
) {

293 
	`≥º‹
("malloc");

294 
	`exô
(1);

296 i‡((
thªads
 = (
±hªad_t
 *)
	`mÆloc
(
nb_thªads
 * ’thªad_t))Ë=
NULL
) {

297 
	`≥º‹
("malloc");

298 
	`exô
(1);

301 i‡(
£ed
 == 0)

302 
	`§™d
(()
	`time
(0));

304 
	`§™d
(
£ed
);

306 
£t
 = 
	`£t_√w
();

307 
°›
 = 0;

310 
	`¥ötf
("Initializing STM\n");

311 
	`°m_öô
();

312 
	`mod_mem_öô
();

314 i‡(
	`°m_gë_∑ømëî
("compûe_Êags", &
s
))

315 
	`¥ötf
("STM fœg† : %s\n", 
s
);

318 
	`¥ötf
("Addög %dÉ¡rõ†tÿ£t\n", 
öôül
);

319 
i
 = 0;

320 
i
 < 
öôül
) {

321 
vÆ
 = 
	`ønd_ønge
(
ønge
);

322 i‡(
	`£t_add
(
£t
, 
vÆ
, 0)) {

323 
i
++;

326 
size
 = 
	`£t_size
(
£t
);

327 
	`¥ötf
("Së sizê : %d\n", 
size
);

330 
	`b¨rõr_öô
(&
b¨rõr
, 
nb_thªads
 + 1);

331 
	`±hªad_©å_öô
(&
©å
);

332 
	`±hªad_©å_£tdëach°©e
(&
©å
, 
PTHREAD_CREATE_JOINABLE
);

333 
i
 = 0; i < 
nb_thªads
; i++) {

334 
	`¥ötf
("Cª©ögÅhªad %d\n", 
i
);

335 
d©a
[
i
].
ønge
 =Ñange;

336 
d©a
[
i
].
upd©e
 = update;

337 #i‚de‡
USE_RBTREE


338 
d©a
[
i
].
unô_tx
 = unit_tx;

340 
d©a
[
i
].
nb_add
 = 0;

341 
d©a
[
i
].
nb_ªmove
 = 0;

342 
d©a
[
i
].
nb_c⁄èös
 = 0;

343 
d©a
[
i
].
nb_found
 = 0;

344 
d©a
[
i
].
nb_ab‹ts
 = 0;

345 
d©a
[
i
].
nb_ab‹ts_locked_ªad
 = 0;

346 
d©a
[
i
].
nb_ab‹ts_locked_wrôe
 = 0;

347 
d©a
[
i
].
nb_ab‹ts_vÆid©e_ªad
 = 0;

348 
d©a
[
i
].
nb_ab‹ts_vÆid©e_wrôe
 = 0;

349 
d©a
[
i
].
nb_ab‹ts_vÆid©e_commô
 = 0;

350 
d©a
[
i
].
nb_ab‹ts_övÆid_mem‹y
 = 0;

351 
d©a
[
i
].
nb_ab‹ts_doubÀ_wrôe
 = 0;

352 
d©a
[
i
].
max_ªåõs
 = 0;

353 
d©a
[
i
].
diff
 = 0;

354 
d©a
[
i
].
£ed
 = 
	`ønd
();

355 
d©a
[
i
].
£t
 = set;

356 
d©a
[
i
].
b¨rõr
 = &barrier;

357 
d©a
[
i
].
Áûuªs_beˇu£_c⁄ã¡i⁄
 = 0;

358 i‡(
	`±hªad_¸óã
(&
thªads
[
i
], &
©å
, 
ã°
, (*)(&
d©a
[i])) != 0) {

359 
	`Ârötf
(
°dîr
, "Error creatingÅhread\n");

360 
	`exô
(1);

363 
	`±hªad_©å_de°roy
(&
©å
);

366 i‡(
	`sig«l
(
SIGHUP
, 
ˇtchî
Ë=
SIG_ERR
 ||

367 
	`sig«l
(
SIGINT
, 
ˇtchî
Ë=
SIG_ERR
 ||

368 
	`sig«l
(
SIGTERM
, 
ˇtchî
Ë=
SIG_ERR
) {

369 
	`≥º‹
("signal");

370 
	`exô
(1);

374 
	`b¨rõr_¸oss
(&
b¨rõr
);

376 
	`¥ötf
("STARTING...\n");

377 
	`gëtimeofday
(&
°¨t
, 
NULL
);

378 i‡(
duøti⁄
 > 0) {

379 
	`«no¶ìp
(&
timeout
, 
NULL
);

381 
	`sigem±y£t
(&
block_£t
);

382 
	`sigsu•íd
(&
block_£t
);

384 
	`AO_°‹e_fuŒ
(&
°›
, 1);

385 
	`gëtimeofday
(&
íd
, 
NULL
);

386 
	`¥ötf
("STOPPING...\n");

389 
i
 = 0; i < 
nb_thªads
; i++) {

390 i‡(
	`±hªad_joö
(
thªads
[
i
], 
NULL
) != 0) {

391 
	`Ârötf
(
°dîr
, "Error waiting forÅhread completion\n");

392 
	`exô
(1);

396 
duøti⁄
 = (
íd
.
tv_£c
 * 1000 +Énd.
tv_u£c
 / 1000Ë- (
°¨t
.tv_sec * 1000 + start.tv_usec / 1000);

397 
ab‹ts
 = 0;

398 
ab‹ts_locked_ªad
 = 0;

399 
ab‹ts_locked_wrôe
 = 0;

400 
ab‹ts_vÆid©e_ªad
 = 0;

401 
ab‹ts_vÆid©e_wrôe
 = 0;

402 
ab‹ts_vÆid©e_commô
 = 0;

403 
ab‹ts_övÆid_mem‹y
 = 0;

404 
ab‹ts_doubÀ_wrôe
 = 0;

405 
Áûuªs_beˇu£_c⁄ã¡i⁄
 = 0;

406 
ªads
 = 0;

407 
upd©es
 = 0;

408 
max_ªåõs
 = 0;

409 
i
 = 0; i < 
nb_thªads
; i++) {

410 
	`¥ötf
("Thªad %d\n", 
i
);

411 
	`¥ötf
(" #add : %lu\n", 
d©a
[
i
].
nb_add
);

412 
	`¥ötf
(" #ªmovê : %lu\n", 
d©a
[
i
].
nb_ªmove
);

413 
	`¥ötf
(" #c⁄èö† : %lu\n", 
d©a
[
i
].
nb_c⁄èös
);

414 
	`¥ötf
(" #found : %lu\n", 
d©a
[
i
].
nb_found
);

415 
	`¥ötf
(" #ab‹t† : %lu\n", 
d©a
[
i
].
nb_ab‹ts
);

416 
	`¥ötf
(" #lock-∏ : %lu\n", 
d©a
[
i
].
nb_ab‹ts_locked_ªad
);

417 
	`¥ötf
(" #lock-w : %lu\n", 
d©a
[
i
].
nb_ab‹ts_locked_wrôe
);

418 
	`¥ötf
(" #vÆ-∏ : %lu\n", 
d©a
[
i
].
nb_ab‹ts_vÆid©e_ªad
);

419 
	`¥ötf
(" #vÆ-w : %lu\n", 
d©a
[
i
].
nb_ab‹ts_vÆid©e_wrôe
);

420 
	`¥ötf
(" #vÆ-¯ : %lu\n", 
d©a
[
i
].
nb_ab‹ts_vÆid©e_commô
);

421 
	`¥ötf
(" #öv-mem : %lu\n", 
d©a
[
i
].
nb_ab‹ts_övÆid_mem‹y
);

422 
	`¥ötf
(" #öv-mem : %lu\n", 
d©a
[
i
].
nb_ab‹ts_doubÀ_wrôe
);

423 
	`¥ötf
(" #Áûuª†: %lu\n", 
d©a
[
i
].
Áûuªs_beˇu£_c⁄ã¡i⁄
);

424 
	`¥ötf
(" MaxÑërõ†: %lu\n", 
d©a
[
i
].
max_ªåõs
);

425 
ab‹ts
 +
d©a
[
i
].
nb_ab‹ts
;

426 
ab‹ts_locked_ªad
 +
d©a
[
i
].
nb_ab‹ts_locked_ªad
;

427 
ab‹ts_locked_wrôe
 +
d©a
[
i
].
nb_ab‹ts_locked_wrôe
;

428 
ab‹ts_vÆid©e_ªad
 +
d©a
[
i
].
nb_ab‹ts_vÆid©e_ªad
;

429 
ab‹ts_vÆid©e_wrôe
 +
d©a
[
i
].
nb_ab‹ts_vÆid©e_wrôe
;

430 
ab‹ts_vÆid©e_commô
 +
d©a
[
i
].
nb_ab‹ts_vÆid©e_commô
;

431 
ab‹ts_övÆid_mem‹y
 +
d©a
[
i
].
nb_ab‹ts_övÆid_mem‹y
;

432 
ab‹ts_doubÀ_wrôe
 +
d©a
[
i
].
nb_ab‹ts_doubÀ_wrôe
;

433 
Áûuªs_beˇu£_c⁄ã¡i⁄
 +
d©a
[
i
].failures_because_contention;

434 
ªads
 +
d©a
[
i
].
nb_c⁄èös
;

435 
upd©es
 +(
d©a
[
i
].
nb_add
 + d©a[i].
nb_ªmove
);

436 
size
 +
d©a
[
i
].
diff
;

437 i‡(
max_ªåõs
 < 
d©a
[
i
].max_retries)

438 
max_ªåõs
 = 
d©a
[
i
].max_retries;

440 
	`¥ötf
("Së sizê : %d (ex≥˘ed: %d)\n", 
	`£t_size
(
£t
), 
size
);

441 
	`¥ötf
("Duøti⁄ : %d (ms)\n", 
duøti⁄
);

442 
	`¥ötf
("#tx† : %lu (%‡/ s)\n", 
ªads
 + 
upd©es
, (ªad†+ upd©esË* 1000.0 / 
duøti⁄
);

443 
	`¥ötf
("#ªadÅx† : %lu (%‡/ s)\n", 
ªads
,Ñód†* 1000.0 / 
duøti⁄
);

444 
	`¥ötf
("#upd©êtx† : %lu (%‡/ s)\n", 
upd©es
, upd©e†* 1000.0 / 
duøti⁄
);

445 
	`¥ötf
("#ab‹t† : %lu (%‡/ s)\n", 
ab‹ts
,áb‹t†* 1000.0 / 
duøti⁄
);

446 
	`¥ötf
(" #lock-∏ : %lu (%‡/ s)\n", 
ab‹ts_locked_ªad
,áb‹ts_locked_ªad * 1000.0 / 
duøti⁄
);

447 
	`¥ötf
(" #lock-w : %lu (%‡/ s)\n", 
ab‹ts_locked_wrôe
,áb‹ts_locked_wrôê* 1000.0 / 
duøti⁄
);

448 
	`¥ötf
(" #vÆ-∏ : %lu (%‡/ s)\n", 
ab‹ts_vÆid©e_ªad
,áb‹ts_vÆid©e_ªad * 1000.0 / 
duøti⁄
);

449 
	`¥ötf
(" #vÆ-w : %lu (%‡/ s)\n", 
ab‹ts_vÆid©e_wrôe
,áb‹ts_vÆid©e_wrôê* 1000.0 / 
duøti⁄
);

450 
	`¥ötf
(" #vÆ-¯ : %lu (%‡/ s)\n", 
ab‹ts_vÆid©e_commô
,áb‹ts_vÆid©e_commô * 1000.0 / 
duøti⁄
);

451 
	`¥ötf
(" #öv-mem : %lu (%‡/ s)\n", 
ab‹ts_övÆid_mem‹y
,áb‹ts_övÆid_mem‹y * 1000.0 / 
duøti⁄
);

452 
	`¥ötf
(" #dup-w : %lu (%‡/ s)\n", 
ab‹ts_doubÀ_wrôe
,áb‹ts_doubÀ_wrôê* 1000.0 / 
duøti⁄
);

453 
	`¥ötf
(" #Áûuª† : %lu\n", 
Áûuªs_beˇu£_c⁄ã¡i⁄
);

454 
	`¥ötf
("MaxÑërõ† : %lu\n", 
max_ªåõs
);

457 
	`£t_dñëe
(
£t
);

460 
	`°m_exô
();

462 
	`‰ì
(
thªads
);

463 
	`‰ì
(
d©a
);

466 
	}
}

	@utils/estm-0.2.4.3/bench/lf-linkedlist/linkedlist.c

24 
	~"lökedli°.h
"

26 
	$£t_c⁄èös
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
, 
å™ß˘i⁄Æ
)

28 
ªsu…
;

29 
node_t
 *
¥ev
, *
√xt
;

30 
vÆ_t
 
v
;

32 #ifde‡
DEBUG


33 
	`¥ötf
("++> së_c⁄èös(%d)\n", ()
vÆ
);

34 
IO_FLUSH
;

37 
å™ß˘i⁄Æ
) {

39 
¥ev
 = 
£t
->
hód
;

40 
√xt
 = 
¥ev
->next;

41 
√xt
->
vÆ
 < val) {

42 
¥ev
 = 
√xt
;

43 
√xt
 = 
¥ev
->next;

45 
ªsu…
 = (
√xt
->
vÆ
 == val);

49 
	`TX_START
(
NL
);

50 
¥ev
 = 
£t
->
hód
;

51 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

53 
v
 = 
	`TX_LOAD
(&
√xt
->
vÆ
);

54 i‡(
v
 >
vÆ
)

56 
¥ev
 = 
√xt
;

57 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

59 
ªsu…
 = (
v
 =
vÆ
);

60 
TX_END
;

66 
	`TX_START
(
EL
);

67 
¥ev
 = 
£t
->
hód
;

68 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

70 
v
 = 
	`TX_LOAD
((
°m_w‹d_t
 *Ë&
√xt
->
vÆ
);

71 i‡(
v
 >
vÆ
)

73 
¥ev
 = 
√xt
;

74 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

76 
TX_END
;

77 
ªsu…
 = (
v
 =
vÆ
);

81 
ªsu…
 = 
	`h¨ris_föd
(
£t
, 
vÆ
);

85 
ªsu…
=0;

86 
	`¥ötf
("numbî %d dÿnŸ c‹ª•⁄dÅÿña°icôy.\n", 
å™ß˘i⁄Æ
);

87 
	`exô
(1);

90  
ªsu…
;

91 
	}
}

93 
	$£t_add
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
, 
å™ß˘i⁄Æ
)

95 
ªsu…
;

96 
node_t
 *
¥ev
, *
√xt
;

97 
vÆ_t
 
v
;

99 #ifde‡
DEBUG


100 
	`¥ötf
("++> së_add(%d)\n", ()
vÆ
);

101 
IO_FLUSH
;

104 
å™ß˘i⁄Æ
) {

106 
¥ev
 = 
£t
->
hód
;

107 
√xt
 = 
¥ev
->next;

108 
√xt
->
vÆ
 < val) {

109 
¥ev
 = 
√xt
;

110 
√xt
 = 
¥ev
->next;

112 
ªsu…
 = (
√xt
->
vÆ
 != val);

113 i‡(
ªsu…
) {

114 
¥ev
->
√xt
 = 
	`√w_node
(
vÆ
,Çext, 
å™ß˘i⁄Æ
);

120 
	`TX_START
(
NL
);

121 
¥ev
 = 
£t
->
hód
;

122 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

124 
v
 = 
	`TX_LOAD
(&
√xt
->
vÆ
);

125 i‡(
v
 >
vÆ
)

127 
¥ev
 = 
√xt
;

128 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

130 
ªsu…
 = (
v
 !
vÆ
);

131 i‡(
ªsu…
) {

132 
	`TX_STORE
(&
¥ev
->
√xt
, 
	`√w_node
(
vÆ
,Çext, 
å™ß˘i⁄Æ
));

134 
TX_END
;

139 
	`TX_START
(
EL
);

140 
¥ev
 = 
£t
->
hód
;

141 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

143 
v
 = 
	`TX_LOAD
((
°m_w‹d_t
 *Ë&
√xt
->
vÆ
);

144 i‡(
v
 >
vÆ
)

146 
¥ev
 = 
√xt
;

147 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

149 
ªsu…
 = (
v
 !
vÆ
);

150 i‡(
ªsu…
) {

151 
	`TX_STORE
(&
¥ev
->
√xt
, 
	`√w_node
(
vÆ
,Çext, 
å™ß˘i⁄Æ
));

153 
TX_END
;

157 
ªsu…
 = 
	`h¨ris_ö£π
(
£t
, 
vÆ
);

161 
ªsu…
=0;

162 
	`¥ötf
("numbî %d dÿnŸ c‹ª•⁄dÅÿña°icôy.\n", 
å™ß˘i⁄Æ
);

163 
	`exô
(1);

166  
ªsu…
;

167 
	}
}

169 
	$£t_ªmove
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
, 
å™ß˘i⁄Æ
)

171 
ªsu…
;

172 
node_t
 *
¥ev
, *
√xt
;

173 
vÆ_t
 
v
;

174 
node_t
 *
n
;

176 #ifde‡
DEBUG


177 
	`¥ötf
("++> së_ªmove(%d)\n", ()
vÆ
);

178 
IO_FLUSH
;

181 
å™ß˘i⁄Æ
) {

183 
¥ev
 = 
£t
->
hód
;

184 
√xt
 = 
¥ev
->next;

185 
√xt
->
vÆ
 < val) {

186 
¥ev
 = 
√xt
;

187 
√xt
 = 
¥ev
->next;

189 
ªsu…
 = (
√xt
->
vÆ
 == val);

190 i‡(
ªsu…
) {

191 
¥ev
->
√xt
 =Çext->next;

192 
	`‰ì
(
√xt
);

199 
	`TX_START
(
NL
);

200 
¥ev
 = 
£t
->
hód
;

201 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

203 
v
 = 
	`TX_LOAD
(&
√xt
->
vÆ
);

204 i‡(
v
 >
vÆ
)

206 
¥ev
 = 
√xt
;

207 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

209 
ªsu…
 = (
v
 =
vÆ
);

210 i‡(
ªsu…
) {

211 
n
 = (
node_t
 *)
	`TX_LOAD
(&
√xt
->next);

212 
	`TX_STORE
(&
¥ev
->
√xt
, 
n
);

213 
	`FREE
(
√xt
, (
node_t
));

215 
TX_END
;

219 
	`TX_START
(
EL
);

220 
¥ev
 = 
£t
->
hód
;

221 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

223 
v
 = 
	`TX_LOAD
((
°m_w‹d_t
 *Ë&
√xt
->
vÆ
);

224 i‡(
v
 >
vÆ
)

226 
¥ev
 = 
√xt
;

227 
√xt
 = (
node_t
 *)
	`TX_LOAD
(&
¥ev
->next);

229 
ªsu…
 = (
v
 =
vÆ
);

230 i‡(
ªsu…
) {

231 
n
 = (
node_t
 *)
	`TX_LOAD
(&
√xt
->next);

232 
	`TX_STORE
(&
¥ev
->
√xt
, 
n
);

233 
	`FREE
(
√xt
, (
node_t
));

235 
TX_END
;

239 
ªsu…
 = 
	`h¨ris_dñëe
(
£t
, 
vÆ
);

243 
ªsu…
=0;

244 
	`¥ötf
("numbî %d dÿnŸ c‹ª•⁄dÅÿña°icôy.\n", 
å™ß˘i⁄Æ
);

245 
	`exô
(1);

248  
ªsu…
;

249 
	}
}

	@utils/estm-0.2.4.3/bench/lf-linkedlist/linkedlist.h

10 
	~"h¨ris.h
"

12 
£t_c⁄èös
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
, 
å™ß˘i⁄Æ
);

13 
£t_add
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
, 
å™ß˘i⁄Æ
);

14 
£t_ªmove
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
, 
å™ß˘i⁄Æ
);

	@utils/estm-0.2.4.3/bench/lf-linkedlist/recursive.c

11 
	~"ªcursive.h
"

13 
	$ªc_£¨ch
(
°m_w‹d_t
 *
°¨t_ts
, 
node_t
 *
¥ev
,Çode_à*
√xt
,

14 
vÆ_t
 
vÆ
, vÆ_à*
v
) {

15 
°m_w‹d_t
 
ts
, 
cuº_ts
;

16 
node_t
 *
cuº
;

17 
ªsu…
=0;

19 *
v
 = 
	`UNIT_LOAD
(&
√xt
->
vÆ
, &
ts
);

21 i‡(
ts
 > *
°¨t_ts
 || !
√xt
->next) {

22  (Ë
ts
;

26 i‡(*
v
 >
vÆ
)

30 
cuº
 = 
√xt
;

31 
√xt
 = (
node_t
 *)
	`UNIT_LOAD
(&√xt->√xt, &
ts
);

32 i‡(
ts
 > *
°¨t_ts
) {

34 
	`UNIT_LOAD
(&
cuº
->
vÆ
, &
cuº_ts
);

35 i‡(
cuº_ts
 > *
°¨t_ts
) {

36  (Ë
cuº_ts
;

38 *
°¨t_ts
 = 
ts
;

42 
ª°¨t5
:

43 i‡(!(
ªsu…
 = 
	`ªc_£¨ch
(
°¨t_ts
, 
cuº
, 
√xt
, 
vÆ
, 
v
)))  0;

45 
	`UNIT_LOAD
(&
√xt
, &
ts
);

47 i‡(
ts
 > *
°¨t_ts
)  1;

49 *
°¨t_ts
 = 
ªsu…
;

50 
ª°¨t5
;

53 
	}
}

56 
	$ªc_£¨ch2
(
°m_w‹d_t
 *
°¨t_ts
, 
node_t
 **
¥ev
,Çode_à**
√xt
,

57 
vÆ_t
 
vÆ
, vÆ_à*
v
) {

58 
°m_w‹d_t
 
ts
, 
cuº_ts
;

59 
ªsu…
=0;

61 *
v
 = 
	`UNIT_LOAD
(&(*
√xt
)->
vÆ
, &
ts
);

63 i‡(
ts
 > *
°¨t_ts
 || !(*
√xt
)->next)

64  (Ë
ts
;

67 i‡(*
v
 >
vÆ
)

71 *
¥ev
 = *
√xt
;

72 *
√xt
 = (
node_t
 *)
	`UNIT_LOAD
(&(*√xt)->√xt, &
ts
);

73 i‡(
ts
 > *
°¨t_ts
) {

75 
	`UNIT_LOAD
(&(*
¥ev
)->
vÆ
, &
cuº_ts
);

76 i‡(
cuº_ts
 > *
°¨t_ts
) {

77  (Ë
cuº_ts
;

79 *
°¨t_ts
 = 
ts
;

83 
ª°¨t4
:

84 i‡(!(
ªsu…
 = 
	`ªc_£¨ch2
(
°¨t_ts
, 
¥ev
, 
√xt
, 
vÆ
, 
v
)))  0;

88 i‡(
ªsu…
 > *
°¨t_ts
)  1;

90 *
°¨t_ts
 = 
ªsu…
;

91 
ª°¨t4
;

94 
	}
}

	@utils/estm-0.2.4.3/bench/lf-linkedlist/recursive.h

10 
	~"h¨ris.h
"

14 
ªc_£¨ch
(
°m_w‹d_t
 *
°¨t_ts
, 
node_t
 *
¥ev
,Çode_à*
√xt
,

15 
vÆ_t
 
vÆ
, vÆ_à*
v
);

16 
ªc_£¨ch2
(
°m_w‹d_t
 *
°¨t_ts
, 
node_t
 **
¥ev
,Çode_à**
√xt
,

17 
vÆ_t
 
vÆ
, vÆ_à*
v
);

	@utils/estm-0.2.4.3/bench/lf-rbtree/intset.c

23 
	~<as£π.h
>

24 
	~<gë›t.h
>

25 
	~<limôs.h
>

26 
	~<±hªad.h
>

27 
	~<sig«l.h
>

28 
	~<°dlib.h
>

29 
	~<°dio.h
>

30 
	~<sys/time.h
>

31 
	~<time.h
>

33 
	~<©omic_›s.h
>

35 
	~"°m.h
"

36 
	~"mod_mem.h
"

38 #ifde‡
DEBUG


39 
	#IO_FLUSH
 
	`fÊush
(
NULL
)

	)

49 
	#TX_START
(
ty≥
Ë{ 
sigjmp_buf
 *
_e
 = 
	`°m_gë_ív
(); 
	`sig£tjmp
(*_e, 0); 
	`°m_°¨t
(_e, 0,Åy≥)

	)

50 
	#TX_LOAD
(
addr
Ë
	`°m_lﬂd
((
°m_w‹d_t
 *Ôddr)

	)

51 
	#TX_STORE
(
addr
, 
vÆ
Ë
	`°m_°‹e
((
°m_w‹d_t
 *Ôddr, (°m_w‹d_t)vÆ)

	)

52 
	#TX_END
 
	`°m_commô
(); }

	)

54 
	#MALLOC
(
size
Ë
	`°m_mÆloc
(size)

	)

55 
	#FREE
(
addr
, 
size
Ë
	`°m_‰ì
◊ddr, size)

	)

57 
	#DEFAULT_DURATION
 10000

	)

58 
	#DEFAULT_INITIAL
 256

	)

59 
	#DEFAULT_NB_THREADS
 1

	)

60 
	#DEFAULT_RANGE
 0xFFFF

	)

61 
	#DEFAULT_SEED
 0

	)

62 
	#DEFAULT_UPDATE
 20

	)

64 
	#XSTR
(
s
Ë
	`STR
(s)

	)

65 
	#STR
(
s
Ë#s

	)

71 vﬁ©ûê
AO_t
 
	g°›
;

77 #ifde‡
TLS


78 
__thªad
 *
	g∫g_£ed
;

80 
±hªad_key_t
 
	g∫g_£ed_key
;

87 
	#TRANSACTIONAL
 
d
->
unô_tx


	)

89 
	#INIT_SET_PARAMETERS


	)

91 
	#TM_ARGDECL_ALONE


	)

92 
	#TM_ARGDECL


	)

93 
	#TM_ARG


	)

94 
	#TM_ARG_ALONE


	)

95 
	#TM_CALLABLE


	)

97 
	#TM_SHARED_READ
(
v¨
Ë
	`TX_LOAD
(&(v¨))

	)

98 
	#TM_SHARED_READ_P
(
v¨
Ë
	`TX_LOAD
(&(v¨))

	)

100 
	#TM_SHARED_WRITE
(
v¨
, 
vÆ
Ë
	`TX_STORE
(&(v¨), vÆ)

	)

101 
	#TM_SHARED_WRITE_P
(
v¨
, 
vÆ
Ë
	`TX_STORE
(&(v¨), vÆ)

	)

103 
	#TM_MALLOC
(
size
Ë
	`MALLOC
(size)

	)

104 
	#TM_FREE
(
±r
Ë
	`FREE
’å, (*±r))

	)

106 
	~"rbåì.h
"

108 
	~"rbåì.c
"

110 
rbåì_t
 
	töt£t_t
;

111 
öçå_t
 
	tvÆ_t
;

113 
	$com∑ª
(c⁄° *
a
, c⁄° *
b
)

115  ((
vÆ_t
)
a
 - (vÆ_t)
b
);

116 
	}
}

118 
öt£t_t
 *
	$£t_√w
()

120  
	`rbåì_Æloc
(&
com∑ª
);

121 
	}
}

123 
	$£t_dñëe
(
öt£t_t
 *
£t
)

125 
	`rbåì_‰ì
(
£t
);

126 
	}
}

128 
	$£t_size
(
öt£t_t
 *
£t
)

130 
size
;

131 
node_t
 *
n
;

133 i‡(!
	`rbåì_vîify
(
£t
, 0)) {

134 
	`¥ötf
("Validation failed!\n");

135 
	`exô
(1);

138 
size
 = 0;

139 
n
 = 
	`fú°E¡ry
(
£t
);Ç !
NULL
;Ç = 
	`suc˚ss‹
(n))

140 
size
++;

142  
size
;

143 
	}
}

145 
	$£t_c⁄èös
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
, 
å™ß˘i⁄Æ
)

147 
ªsu…
 = 0;

148 *
v
;

150 
v
 = (*)
vÆ
;

152 
å™ß˘i⁄Æ
) {

154 
ªsu…
 = 
	`rbåì_c⁄èös
(
£t
, 
v
);

158 
	`TX_START
(
NL
);

159 
ªsu…
 = 
	`TMrbåì_c⁄èös
(
£t
, (*)
vÆ
);

160 
TX_END
;

166 
	`TX_START
(
EL
);

167 
ªsu…
 = 
	`TMrbåì_c⁄èös
(
£t
, (*)
vÆ
);

168 
TX_END
;

172 
ªsu…
=0;

173 
	`¥ötf
("numbî %d dÿnŸ c‹ª•⁄dÅÿña°icôy.\n", 
å™ß˘i⁄Æ
);

174 
	`exô
(1);

176  
ªsu…
;

177 
	}
}

184 
	$£t_add
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
, 
å™ß˘i⁄Æ
)

186 
ªsu…
 = 0;

188 
å™ß˘i⁄Æ
) {

190 
ªsu…
 = 
	`rbåì_ö£π
(
£t
, (*)
vÆ
, (*)val);

197 
	`TX_START
(
NL
);

198 
ªsu…
 = 
	`TMrbåì_ö£π
(
£t
, (*)
vÆ
, (*)val);

199 
TX_END
;

203 
ªsu…
=0;

204 
	`¥ötf
("numbî %d dÿnŸ c‹ª•⁄dÅÿña°icôy.\n", 
å™ß˘i⁄Æ
);

205 
	`exô
(1);

208  
ªsu…
;

209 
	}
}

211 
	$£t_ªmove
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
, 
å™ß˘i⁄Æ
)

213 
ªsu…
 = 0;

214 
node_t
 *
√xt
;

215 *
v
;

217 
√xt
 = 
NULL
;

218 
v
 = (*Ë
vÆ
;

220 
å™ß˘i⁄Æ
) {

222 
ªsu…
 = 
	`rbåì_dñëe
(
£t
, (*)
vÆ
);

228 
	`TX_START
(
NL
);

229 
ªsu…
 = 
	`TMrbåì_dñëe
(
£t
, (*)
vÆ
);

230 
TX_END
;

234 
	`TX_START
(
EL
);

235 
ªsu…
 = 
	`TMrbåì_dñëe
(
£t
, (*)
vÆ
);

236 
TX_END
;

240 
ªsu…
=0;

241 
	`¥ötf
("numbî %d dÿnŸ c‹ª•⁄dÅÿña°icôy.\n", 
å™ß˘i⁄Æ
);

242 
	`exô
(1);

244  
ªsu…
;

245 
	}
}

251 
	sb¨rõr
 {

252 
±hªad_c⁄d_t
 
	mcom∂ëe
;

253 
±hªad_muãx_t
 
	mmuãx
;

254 
	mcou¡
;

255 
	m¸ossög
;

256 } 
	tb¨rõr_t
;

258 
	$b¨rõr_öô
(
b¨rõr_t
 *
b
, 
n
)

260 
	`±hªad_c⁄d_öô
(&
b
->
com∂ëe
, 
NULL
);

261 
	`±hªad_muãx_öô
(&
b
->
muãx
, 
NULL
);

262 
b
->
cou¡
 = 
n
;

263 
b
->
¸ossög
 = 0;

264 
	}
}

266 
	$b¨rõr_¸oss
(
b¨rõr_t
 *
b
)

268 
	`±hªad_muãx_lock
(&
b
->
muãx
);

270 
b
->
¸ossög
++;

272 i‡(
b
->
¸ossög
 < b->
cou¡
) {

273 
	`±hªad_c⁄d_waô
(&
b
->
com∂ëe
, &b->
muãx
);

275 
	`±hªad_c⁄d_brﬂdˇ°
(&
b
->
com∂ëe
);

277 
b
->
¸ossög
 = 0;

279 
	`±hªad_muãx_u∆ock
(&
b
->
muãx
);

280 
	}
}

292 
ölöe
 
	$ønd_ønge
(
r
) {

293 
m
 = 
RAND_MAX
;

294 
v
 = 0;

295 
d
;

298 
d
 = (
m
 > 
r
 ?Ñ : m);

299 
v
 +1 + ()(
d
 * (()
	`ønd
()/(()(
m
)+1.0)));

300 
r
 -
m
;

301 } 
r
 > 0);

302  
v
;

303 
	}
}

305 
	sthªad_d©a
 {

306 
	mønge
;

307 
	mupd©e
;

308 
	munô_tx
;

309 
	mnb_add
;

310 
	mnb_ªmove
;

311 
	mnb_c⁄èös
;

312 
	mnb_found
;

313 
	mnb_ab‹ts
;

314 
	mnb_ab‹ts_locked_ªad
;

315 
	mnb_ab‹ts_locked_wrôe
;

316 
	mnb_ab‹ts_vÆid©e_ªad
;

317 
	mnb_ab‹ts_vÆid©e_wrôe
;

318 
	mnb_ab‹ts_vÆid©e_commô
;

319 
	mnb_ab‹ts_övÆid_mem‹y
;

320 
	mnb_ab‹ts_ªÆloˇã
;

321 
	mnb_ab‹ts_rﬁlovî
;

322 
	mlocked_ªads_ok
;

323 
	mlocked_ªads_Áûed
;

324 
	mmax_ªåõs
;

325 
	mdiff
;

326 
	m£ed
;

327 
öt£t_t
 *
	m£t
;

328 
b¨rõr_t
 *
	mb¨rõr
;

329 } 
	tthªad_d©a_t
;

331 *
	$ã°
(*
d©a
)

333 
vÆ
, 
œ°
 = 0;

334 
thªad_d©a_t
 *
d
 = (thªad_d©a_à*)
d©a
;

336 #ifde‡
TLS


337 
∫g_£ed
 = &
d
->
£ed
;

339 
	`±hªad_£t•ecific
(
∫g_£ed_key
, &
d
->
£ed
);

343 
	`°m_öô_thªad
();

345 
	`b¨rõr_¸oss
(
d
->
b¨rõr
);

347 
œ°
 = -1;

348 
°›
 == 0) {

349 
vÆ
 = 
	`ønd_r
(&
d
->
£ed
) % 100;

350 i‡(
vÆ
 < 
d
->
upd©e
) {

351 i‡(
œ°
 < 0) {

353 
vÆ
 = (
	`ønd_r
(&
d
->
£ed
Ë% d->
ønge
) + 1;

354 i‡(
	`£t_add
(
d
->
£t
, 
vÆ
, 
TRANSACTIONAL
)) {

355 
d
->
diff
++;

356 
œ°
 = 
vÆ
;

358 
d
->
nb_add
++;

361 i‡(
	`£t_ªmove
(
d
->
£t
, 
œ°
, 
TRANSACTIONAL
))

362 
d
->
diff
--;

363 
d
->
nb_ªmove
++;

364 
œ°
 = -1;

368 
vÆ
 = (
	`ønd_r
(&
d
->
£ed
Ë% d->
ønge
) + 1;

369 i‡(
	`£t_c⁄èös
(
d
->
£t
, 
vÆ
, 
TRANSACTIONAL
))

370 
d
->
nb_found
++;

371 
d
->
nb_c⁄èös
++;

374 
	`°m_gë_°©s
("nb_ab‹ts", &
d
->
nb_ab‹ts
);

375 
	`°m_gë_°©s
("nb_ab‹ts_locked_ªad", &
d
->
nb_ab‹ts_locked_ªad
);

376 
	`°m_gë_°©s
("nb_ab‹ts_locked_wrôe", &
d
->
nb_ab‹ts_locked_wrôe
);

377 
	`°m_gë_°©s
("nb_ab‹ts_vÆid©e_ªad", &
d
->
nb_ab‹ts_vÆid©e_ªad
);

378 
	`°m_gë_°©s
("nb_ab‹ts_vÆid©e_wrôe", &
d
->
nb_ab‹ts_vÆid©e_wrôe
);

379 
	`°m_gë_°©s
("nb_ab‹ts_vÆid©e_commô", &
d
->
nb_ab‹ts_vÆid©e_commô
);

380 
	`°m_gë_°©s
("nb_ab‹ts_övÆid_mem‹y", &
d
->
nb_ab‹ts_övÆid_mem‹y
);

381 
	`°m_gë_°©s
("nb_ab‹ts_ªÆloˇã", &
d
->
nb_ab‹ts_ªÆloˇã
);

382 
	`°m_gë_°©s
("nb_ab‹ts_rﬁlovî", &
d
->
nb_ab‹ts_rﬁlovî
);

383 
	`°m_gë_°©s
("locked_ªads_ok", &
d
->
locked_ªads_ok
);

384 
	`°m_gë_°©s
("locked_ªads_Áûed", &
d
->
locked_ªads_Áûed
);

385 
	`°m_gë_°©s
("max_ªåõs", &
d
->
max_ªåõs
);

387 
	`°m_exô_thªad
();

389  
NULL
;

390 
	}
}

392 
	$ˇtchî
(
sig
)

394 
	`¥ötf
("CAUGHT SIGNAL %d\n", 
sig
);

395 
	}
}

397 
	$maö
(
¨gc
, **
¨gv
)

399 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

401 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

402 {"duøti⁄", 
ªquúed_¨gumít
, 
NULL
, 'd'},

403 {"öôül-size", 
ªquúed_¨gumít
, 
NULL
, 'i'},

404 {"num-thªads", 
ªquúed_¨gumít
, 
NULL
, 'n'},

405 {"ønge", 
ªquúed_¨gumít
, 
NULL
, 'r'},

406 {"£ed", 
ªquúed_¨gumít
, 
NULL
, 's'},

407 {"upd©e-øã", 
ªquúed_¨gumít
, 
NULL
, 'u'},

408 {"unô-tx", 
no_¨gumít
, 
NULL
, 'x'},

409 {
NULL
, 0, NULL, 0}

412 
öt£t_t
 *
£t
;

413 
i
, 
c
, 
vÆ
, 
size
;

414 *
s
;

415 
ªads
, 
upd©es
, 
ab‹ts
, 
ab‹ts_locked_ªad
, 
ab‹ts_locked_wrôe
,

416 
ab‹ts_vÆid©e_ªad
, 
ab‹ts_vÆid©e_wrôe
, 
ab‹ts_vÆid©e_commô
,

417 
ab‹ts_övÆid_mem‹y
, 
ab‹ts_ªÆloˇã
, 
ab‹ts_rﬁlovî
,

418 
locked_ªads_ok
, 
locked_ªads_Áûed
, 
max_ªåõs
;

419 
thªad_d©a_t
 *
d©a
;

420 
±hªad_t
 *
thªads
;

421 
±hªad_©å_t
 
©å
;

422 
b¨rõr_t
 
b¨rõr
;

423 
timevÆ
 
°¨t
, 
íd
;

424 
time•ec
 
timeout
;

425 
duøti⁄
 = 
DEFAULT_DURATION
;

426 
öôül
 = 
DEFAULT_INITIAL
;

427 
nb_thªads
 = 
DEFAULT_NB_THREADS
;

428 
ønge
 = 
DEFAULT_RANGE
;

429 
£ed
 = 
DEFAULT_SEED
;

430 
upd©e
 = 
DEFAULT_UPDATE
;

431 
unô_tx
 = 4;

432 
sig£t_t
 
block_£t
;

435 
i
 = 0;

436 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "hd:i:n:r:s:u:x:", 
l⁄g_›ti⁄s
, &
i
);

438 if(
c
 == -1)

441 if(
c
 =0 && 
l⁄g_›ti⁄s
[
i
].
Êag
 == 0)

442 
c
 = 
l⁄g_›ti⁄s
[
i
].
vÆ
;

444 
c
) {

449 
	`¥ötf
("intset -- STM stressÅest "

459 " Te° duøti⁄ i¿mûli£c⁄d†(0=öföôe, deÁu…=" 
	`XSTR
(
DEFAULT_DURATION
) ")\n"

461 " Numbî o‡ñemít†tÿö£π bef‹êã° (deÁu…=" 
	`XSTR
(
DEFAULT_INITIAL
) ")\n"

463 " Numbî o‡thªad†(deÁu…=" 
	`XSTR
(
DEFAULT_NB_THREADS
) ")\n"

465 " R™gêo‡öãgî vÆue†ö£πed i¿£à(deÁu…=" 
	`XSTR
(
DEFAULT_RANGE
) ")\n"

467 " RNG sìd (0Òime-ba£d, deÁu…=" 
	`XSTR
(
DEFAULT_SEED
) ")\n"

469 " Pî˚¡agêo‡upd©êå™ß˘i⁄†(deÁu…=" 
	`XSTR
(
DEFAULT_UPDATE
) ")\n"

478 
	`exô
(0);

480 
duøti⁄
 = 
	`©oi
(
›èrg
);

483 
öôül
 = 
	`©oi
(
›èrg
);

486 
nb_thªads
 = 
	`©oi
(
›èrg
);

489 
ønge
 = 
	`©oi
(
›èrg
);

492 
£ed
 = 
	`©oi
(
›èrg
);

495 
upd©e
 = 
	`©oi
(
›èrg
);

498 
unô_tx
 = 
	`©oi
(
›èrg
);

501 
	`¥ötf
("Use -h or --help for help\n");

502 
	`exô
(0);

504 
	`exô
(1);

508 
	`as£π
(
duøti⁄
 >= 0);

509 
	`as£π
(
öôül
 >= 0);

510 
	`as£π
(
nb_thªads
 > 0);

511 
	`as£π
(
ønge
 > 0 &&Ñ™gê>
öôül
);

512 
	`as£π
(
upd©e
 >= 0 && update <= 100);

514 
	`¥ötf
("SetÅype :Ñed-blackÅree\n");

515 
	`¥ötf
("Duøti⁄ : %d\n", 
duøti⁄
);

516 
	`¥ötf
("Inôü»sizê: %d\n", 
öôül
);

517 
	`¥ötf
("NbÅhªad† : %d\n", 
nb_thªads
);

518 
	`¥ötf
("VÆuêøngê : %d\n", 
ønge
);

519 
	`¥ötf
("Sìd : %d\n", 
£ed
);

520 
	`¥ötf
("Upd©êøã : %d\n", 
upd©e
);

521 
	`¥ötf
("Eœ°icôy : %d\n", 
unô_tx
);

522 
	`¥ötf
("Type sizes : int=%d/long=%d/ptr=%d/word=%d\n",

526 ()(
°m_w‹d_t
));

528 
timeout
.
tv_£c
 = 
duøti⁄
 / 1000;

529 
timeout
.
tv_n£c
 = (
duøti⁄
 % 1000) * 1000000;

531 i‡((
d©a
 = (
thªad_d©a_t
 *)
	`mÆloc
(
nb_thªads
 * —hªad_d©a_t))Ë=
NULL
) {

532 
	`≥º‹
("malloc");

533 
	`exô
(1);

535 i‡((
thªads
 = (
±hªad_t
 *)
	`mÆloc
(
nb_thªads
 * ’thªad_t))Ë=
NULL
) {

536 
	`≥º‹
("malloc");

537 
	`exô
(1);

540 i‡(
£ed
 == 0)

541 
	`§™d
(()
	`time
(0));

543 
	`§™d
(
£ed
);

545 
£t
 = 
	`£t_√w
(
INIT_SET_PARAMETERS
);

547 
°›
 = 0;

550 
	`¥ötf
("Initializing STM\n");

551 
	`°m_öô
();

552 
	`mod_mem_öô
();

554 i‡(
	`°m_gë_∑ømëî
("compûe_Êags", &
s
))

555 
	`¥ötf
("STM fœg† : %s\n", 
s
);

558 
	`¥ötf
("Addög %dÉ¡rõ†tÿ£t\n", 
öôül
);

559 
i
 = 0;

560 
i
 < 
öôül
) {

561 
vÆ
 = 
	`ønd_ønge
(
ønge
);

563 i‡(
	`£t_add
(
£t
, 
vÆ
, 0))

564 
i
++;

566 
size
 = 
	`£t_size
(
£t
);

567 
	`¥ötf
("Së sizê : %d\n", 
size
);

570 
	`b¨rõr_öô
(&
b¨rõr
, 
nb_thªads
 + 1);

571 
	`±hªad_©å_öô
(&
©å
);

572 
	`±hªad_©å_£tdëach°©e
(&
©å
, 
PTHREAD_CREATE_JOINABLE
);

573 
i
 = 0; i < 
nb_thªads
; i++) {

574 
	`¥ötf
("Cª©ögÅhªad %d\n", 
i
);

575 
d©a
[
i
].
ønge
 =Ñange;

576 
d©a
[
i
].
upd©e
 = update;

577 
d©a
[
i
].
unô_tx
 = unit_tx;

578 
d©a
[
i
].
nb_add
 = 0;

579 
d©a
[
i
].
nb_ªmove
 = 0;

580 
d©a
[
i
].
nb_c⁄èös
 = 0;

581 
d©a
[
i
].
nb_found
 = 0;

582 
d©a
[
i
].
nb_ab‹ts
 = 0;

583 
d©a
[
i
].
nb_ab‹ts_locked_ªad
 = 0;

584 
d©a
[
i
].
nb_ab‹ts_locked_wrôe
 = 0;

585 
d©a
[
i
].
nb_ab‹ts_vÆid©e_ªad
 = 0;

586 
d©a
[
i
].
nb_ab‹ts_vÆid©e_wrôe
 = 0;

587 
d©a
[
i
].
nb_ab‹ts_vÆid©e_commô
 = 0;

588 
d©a
[
i
].
nb_ab‹ts_övÆid_mem‹y
 = 0;

589 
d©a
[
i
].
nb_ab‹ts_ªÆloˇã
 = 0;

590 
d©a
[
i
].
nb_ab‹ts_rﬁlovî
 = 0;

591 
d©a
[
i
].
locked_ªads_ok
 = 0;

592 
d©a
[
i
].
locked_ªads_Áûed
 = 0;

593 
d©a
[
i
].
max_ªåõs
 = 0;

594 
d©a
[
i
].
diff
 = 0;

595 
d©a
[
i
].
£ed
 = 
	`ønd
();

596 
d©a
[
i
].
£t
 = set;

597 
d©a
[
i
].
b¨rõr
 = &barrier;

598 i‡(
	`±hªad_¸óã
(&
thªads
[
i
], &
©å
, 
ã°
, (*)(&
d©a
[i])) != 0) {

599 
	`Ârötf
(
°dîr
, "Error creatingÅhread\n");

600 
	`exô
(1);

603 
	`±hªad_©å_de°roy
(&
©å
);

606 i‡(
	`sig«l
(
SIGHUP
, 
ˇtchî
Ë=
SIG_ERR
 ||

607 
	`sig«l
(
SIGINT
, 
ˇtchî
Ë=
SIG_ERR
 ||

608 
	`sig«l
(
SIGTERM
, 
ˇtchî
Ë=
SIG_ERR
) {

609 
	`≥º‹
("signal");

610 
	`exô
(1);

614 
	`b¨rõr_¸oss
(&
b¨rõr
);

616 
	`¥ötf
("STARTING...\n");

617 
	`gëtimeofday
(&
°¨t
, 
NULL
);

618 i‡(
duøti⁄
 > 0) {

619 
	`«no¶ìp
(&
timeout
, 
NULL
);

621 
	`sigem±y£t
(&
block_£t
);

622 
	`sigsu•íd
(&
block_£t
);

624 
	`AO_°‹e_fuŒ
(&
°›
, 1);

625 
	`gëtimeofday
(&
íd
, 
NULL
);

626 
	`¥ötf
("STOPPING...\n");

629 
i
 = 0; i < 
nb_thªads
; i++) {

630 i‡(
	`±hªad_joö
(
thªads
[
i
], 
NULL
) != 0) {

631 
	`Ârötf
(
°dîr
, "Error waiting forÅhread completion\n");

632 
	`exô
(1);

636 
duøti⁄
 = (
íd
.
tv_£c
 * 1000 +Énd.
tv_u£c
 / 1000Ë- (
°¨t
.tv_sec * 1000 + start.tv_usec / 1000);

637 
ab‹ts
 = 0;

638 
ab‹ts_locked_ªad
 = 0;

639 
ab‹ts_locked_wrôe
 = 0;

640 
ab‹ts_vÆid©e_ªad
 = 0;

641 
ab‹ts_vÆid©e_wrôe
 = 0;

642 
ab‹ts_vÆid©e_commô
 = 0;

643 
ab‹ts_övÆid_mem‹y
 = 0;

644 
ab‹ts_ªÆloˇã
 = 0;

645 
ab‹ts_rﬁlovî
 = 0;

646 
locked_ªads_ok
 = 0;

647 
locked_ªads_Áûed
 = 0;

648 
ªads
 = 0;

649 
upd©es
 = 0;

650 
max_ªåõs
 = 0;

651 
i
 = 0; i < 
nb_thªads
; i++) {

652 
	`¥ötf
("Thªad %d\n", 
i
);

653 
	`¥ötf
(" #add : %lu\n", 
d©a
[
i
].
nb_add
);

654 
	`¥ötf
(" #ªmovê : %lu\n", 
d©a
[
i
].
nb_ªmove
);

655 
	`¥ötf
(" #c⁄èö† : %lu\n", 
d©a
[
i
].
nb_c⁄èös
);

656 
	`¥ötf
(" #found : %lu\n", 
d©a
[
i
].
nb_found
);

657 
	`¥ötf
(" #ab‹t† : %lu\n", 
d©a
[
i
].
nb_ab‹ts
);

658 
	`¥ötf
(" #lock-∏ : %lu\n", 
d©a
[
i
].
nb_ab‹ts_locked_ªad
);

659 
	`¥ötf
(" #lock-w : %lu\n", 
d©a
[
i
].
nb_ab‹ts_locked_wrôe
);

660 
	`¥ötf
(" #vÆ-∏ : %lu\n", 
d©a
[
i
].
nb_ab‹ts_vÆid©e_ªad
);

661 
	`¥ötf
(" #vÆ-w : %lu\n", 
d©a
[
i
].
nb_ab‹ts_vÆid©e_wrôe
);

662 
	`¥ötf
(" #vÆ-¯ : %lu\n", 
d©a
[
i
].
nb_ab‹ts_vÆid©e_commô
);

663 
	`¥ötf
(" #öv-mem : %lu\n", 
d©a
[
i
].
nb_ab‹ts_övÆid_mem‹y
);

664 
	`¥ötf
(" #ªÆlo¯ : %lu\n", 
d©a
[
i
].
nb_ab‹ts_ªÆloˇã
);

665 
	`¥ötf
(" #r-ovî : %lu\n", 
d©a
[
i
].
nb_ab‹ts_rﬁlovî
);

666 
	`¥ötf
(" #Ã-ok : %lu\n", 
d©a
[
i
].
locked_ªads_ok
);

667 
	`¥ötf
(" #Ã-Áûed : %lu\n", 
d©a
[
i
].
locked_ªads_Áûed
);

668 
	`¥ötf
(" MaxÑërõ†: %lu\n", 
d©a
[
i
].
max_ªåõs
);

669 
ab‹ts
 +
d©a
[
i
].
nb_ab‹ts
;

670 
ab‹ts_locked_ªad
 +
d©a
[
i
].
nb_ab‹ts_locked_ªad
;

671 
ab‹ts_locked_wrôe
 +
d©a
[
i
].
nb_ab‹ts_locked_wrôe
;

672 
ab‹ts_vÆid©e_ªad
 +
d©a
[
i
].
nb_ab‹ts_vÆid©e_ªad
;

673 
ab‹ts_vÆid©e_wrôe
 +
d©a
[
i
].
nb_ab‹ts_vÆid©e_wrôe
;

674 
ab‹ts_vÆid©e_commô
 +
d©a
[
i
].
nb_ab‹ts_vÆid©e_commô
;

675 
ab‹ts_övÆid_mem‹y
 +
d©a
[
i
].
nb_ab‹ts_övÆid_mem‹y
;

676 
ab‹ts_ªÆloˇã
 +
d©a
[
i
].
nb_ab‹ts_ªÆloˇã
;

677 
ab‹ts_rﬁlovî
 +
d©a
[
i
].
nb_ab‹ts_rﬁlovî
;

678 
locked_ªads_ok
 +
d©a
[
i
].locked_reads_ok;

679 
locked_ªads_Áûed
 +
d©a
[
i
].locked_reads_failed;

680 
ªads
 +
d©a
[
i
].
nb_c⁄èös
;

681 
upd©es
 +(
d©a
[
i
].
nb_add
 + d©a[i].
nb_ªmove
);

682 
size
 +
d©a
[
i
].
diff
;

683 i‡(
max_ªåõs
 < 
d©a
[
i
].max_retries)

684 
max_ªåõs
 = 
d©a
[
i
].max_retries;

686 
	`¥ötf
("Së sizê : %d (ex≥˘ed: %d)\n", 
	`£t_size
(
£t
), 
size
);

687 
	`¥ötf
("Duøti⁄ : %d (ms)\n", 
duøti⁄
);

688 
	`¥ötf
("#tx† : %lu (%‡/ s)\n", 
ªads
 + 
upd©es
, (ªad†+ upd©esË* 1000.0 / 
duøti⁄
);

689 
	`¥ötf
("#ªadÅx† : %lu (%‡/ s)\n", 
ªads
,Ñód†* 1000.0 / 
duøti⁄
);

690 
	`¥ötf
("#upd©êtx† : %lu (%‡/ s)\n", 
upd©es
, upd©e†* 1000.0 / 
duøti⁄
);

691 
	`¥ötf
("#ab‹t† : %lu (%‡/ s)\n", 
ab‹ts
,áb‹t†* 1000.0 / 
duøti⁄
);

692 
	`¥ötf
(" #lock-∏ : %lu (%‡/ s)\n", 
ab‹ts_locked_ªad
,áb‹ts_locked_ªad * 1000.0 / 
duøti⁄
);

693 
	`¥ötf
(" #lock-w : %lu (%‡/ s)\n", 
ab‹ts_locked_wrôe
,áb‹ts_locked_wrôê* 1000.0 / 
duøti⁄
);

694 
	`¥ötf
(" #vÆ-∏ : %lu (%‡/ s)\n", 
ab‹ts_vÆid©e_ªad
,áb‹ts_vÆid©e_ªad * 1000.0 / 
duøti⁄
);

695 
	`¥ötf
(" #vÆ-w : %lu (%‡/ s)\n", 
ab‹ts_vÆid©e_wrôe
,áb‹ts_vÆid©e_wrôê* 1000.0 / 
duøti⁄
);

696 
	`¥ötf
(" #vÆ-¯ : %lu (%‡/ s)\n", 
ab‹ts_vÆid©e_commô
,áb‹ts_vÆid©e_commô * 1000.0 / 
duøti⁄
);

697 
	`¥ötf
(" #öv-mem : %lu (%‡/ s)\n", 
ab‹ts_övÆid_mem‹y
,áb‹ts_övÆid_mem‹y * 1000.0 / 
duøti⁄
);

698 
	`¥ötf
(" #ªÆlo¯ : %lu (%‡/ s)\n", 
ab‹ts_ªÆloˇã
,áb‹ts_ªÆloˇã * 1000.0 / 
duøti⁄
);

699 
	`¥ötf
(" #r-ovî : %lu (%‡/ s)\n", 
ab‹ts_rﬁlovî
,áb‹ts_rﬁlovî * 1000.0 / 
duøti⁄
);

700 
	`¥ötf
("#Ã-ok : %lu (%‡/ s)\n", 
locked_ªads_ok
,Üocked_ªads_ok * 1000.0 / 
duøti⁄
);

701 
	`¥ötf
("#Ã-Áûed : %lu (%‡/ s)\n", 
locked_ªads_Áûed
,Üocked_ªads_Áûed * 1000.0 / 
duøti⁄
);

702 
	`¥ötf
("MaxÑërõ† : %lu\n", 
max_ªåõs
);

705 
	`£t_dñëe
(
£t
);

708 
	`°m_exô
();

710 #i‚de‡
TLS


711 
	`±hªad_key_dñëe
(
∫g_£ed_key
);

714 
	`‰ì
(
thªads
);

715 
	`‰ì
(
d©a
);

718 
	}
}

	@utils/estm-0.2.4.3/bench/lf-rbtree/rbtree.c

83 
	~<°rög.h
>

84 
	~<°dio.h
>

85 
	~<°dlib.h
>

86 
	~<öây≥s.h
>

87 
	~"mem‹y.h
"

88 
	~"rbåì.h
"

92 
	snode
 {

93 * 
	mk
;

94 * 
	mv
;

95 
node
* 
	mp
;

96 
node
* 
	ml
;

97 
node
* 
	mr
;

98 
	mc
;

99 } 
	tnode_t
;

102 
	srbåì
 {

103 
node_t
* 
	mroŸ
;

104 (*
	mcom∑ª
)(const *, const *);

107 
	#LDA
(
a
Ë*◊)

	)

108 
	#STA
(
a
,
v
Ë*◊Ë(v)

	)

109 
	#LDV
(
a
Ë◊)

	)

110 
	#STV
(
a
,
v
Ë◊Ë(v)

	)

111 
	#LDF
(
o
,
f
Ë((o)->f)

	)

112 
	#STF
(
o
,
f
,
v
Ë((o)->fË(v)

	)

113 
	#LDNODE
(
o
,
f
Ë((
node_t
*)(
	`LDF
((o),f)))

	)

115 
	#TX_LDA
(
a
Ë
	`TM_SHARED_READ
(*◊))

	)

116 
	#TX_STA
(
a
,
v
Ë
	`TM_SHARED_WRITE
(*◊), v)

	)

117 
	#TX_LDV
(
a
Ë
	`TM_SHARED_READ
◊)

	)

118 
	#TX_STV
(
a
,
v
Ë
	`TM_SHARED_WRITE_P
◊, v)

	)

119 
	#TX_LDF
(
o
,
f
Ë(()
	`TM_SHARED_READ
((o)->f))

	)

120 
	#TX_LDF_P
(
o
,
f
Ë((*)
	`TM_SHARED_READ_P
((o)->f))

	)

121 
	#TX_STF
(
o
,
f
,
v
Ë
	`TM_SHARED_WRITE
((o)->f, v)

	)

122 
	#TX_STF_P
(
o
,
f
,
v
Ë
	`TM_SHARED_WRITE_P
((o)->f, v)

	)

123 
	#TX_LDNODE
(
o
,
f
Ë((
node_t
*)(
	`TX_LDF_P
((o),f)))

	)

133 
TM_CALLABLE


134 
node_t
*

135 
TMlookup
 (
TM_ARGDECL
 
rbåì_t
* 
s
, * 
k
);

137 
TM_CALLABLE


139 
TMrŸ©eLe·
 (
TM_ARGDECL
 
rbåì_t
* 
s
, 
node_t
* 
x
);

141 
TM_CALLABLE


143 
TMrŸ©eRight
 (
TM_ARGDECL
 
rbåì_t
* 
s
, 
node_t
* 
x
);

145 
TM_CALLABLE


146 
ölöe
 
node_t
*

147 
TM∑ª¡Of
 (
TM_ARGDECL
 
node_t
* 
n
);

149 
TM_CALLABLE


150 
ölöe
 
node_t
*

151 
TMÀ·Of
 (
TM_ARGDECL
 
node_t
* 
n
);

153 
TM_CALLABLE


154 
ölöe
 
node_t
*

155 
TMrightOf
 (
TM_ARGDECL
 
node_t
* 
n
);

157 
TM_CALLABLE


158 
ölöe
 

159 
TMcﬁ‹Of
 (
TM_ARGDECL
 
node_t
* 
n
);

161 
TM_CALLABLE


162 
ölöe
 

163 
TM£tCﬁ‹
 (
TM_ARGDECL
 
node_t
* 
n
, 
c
);

165 
TM_CALLABLE


167 
TMfixA·îIn£πi⁄
 (
TM_ARGDECL
 
rbåì_t
* 
s
, 
node_t
* 
x
);

169 
TM_CALLABLE


170 
node_t
*

171 
TMsuc˚ss‹
 (
TM_ARGDECL
 
node_t
* 
t
);

173 
TM_CALLABLE


175 
TMfixA·îDñëi⁄
 (
TM_ARGDECL
 
rbåì_t
* 
s
, 
node_t
* 
x
);

177 
TM_CALLABLE


178 
node_t
*

179 
TMö£π
 (
TM_ARGDECL
 
rbåì_t
* 
s
, * 
k
, * 
v
, 
node_t
* 
n
);

181 
TM_CALLABLE


182 
node_t
*

183 
TMgëNode
 (
TM_ARGDECL_ALONE
);

185 
TM_CALLABLE


186 
node_t
*

187 
TMdñëe
 (
TM_ARGDECL
 
rbåì_t
* 
s
, 
node_t
* 
p
);

190 
	mRED
 = 0,

191 
	mBLACK
 = 1

213 
node_t
*

214 
	$lookup
 (
rbåì_t
* 
s
, * 
k
)

216 
node_t
* 
p
 = 
	`LDNODE
(
s
, 
roŸ
);

218 
p
 !
NULL
) {

219 
cmp
 = 
s
->
	`com∑ª
(
k
, 
	`LDF
(
p
, k));

220 i‡(
cmp
 == 0) {

221  
p
;

223 
p
 = ((
cmp
 < 0Ë? 
	`LDNODE
’, 
l
Ë: LDNODE’, 
r
));

226  
NULL
;

227 
	}
}

228 
	#LOOKUP
(
£t
, 
key
Ë
	`lookup
(£t, key)

	)

235 
node_t
*

236 
	$TMlookup
 (
TM_ARGDECL
 
rbåì_t
* 
s
, * 
k
)

238 
node_t
* 
p
 = 
	`TX_LDNODE
(
s
, 
roŸ
);

240 
p
 !
NULL
) {

241 
cmp
 = 
s
->
	`com∑ª
(
k
, 
	`TX_LDF_P
(
p
, k));

242 i‡(
cmp
 == 0) {

243  
p
;

245 
p
 = ((
cmp
 < 0Ë? 
	`TX_LDNODE
’, 
l
Ë: TX_LDNODE’, 
r
));

248  
NULL
;

249 
	}
}

250 
	#TX_LOOKUP
(
£t
, 
key
Ë
	`TMlookup
(
TM_ARG
 së, key)

	)

288 
	$rŸ©eLe·
 (
rbåì_t
* 
s
, 
node_t
* 
x
)

290 
node_t
* 
r
 = 
	`LDNODE
(
x
,Ñ);

291 
node_t
* 
æ
 = 
	`LDNODE
(
r
, 
l
);

292 
	`STF
(
x
, 
r
, 
æ
);

293 i‡(
æ
 !
NULL
) {

294 
	`STF
(
æ
, 
p
, 
x
);

297 
node_t
* 
xp
 = 
	`LDNODE
(
x
, 
p
);

298 
	`STF
(
r
, 
p
, 
xp
);

299 i‡(
xp
 =
NULL
) {

300 
	`STF
(
s
, 
roŸ
, 
r
);

301 } i‡(
	`LDNODE
(
xp
, 
l
Ë=
x
) {

302 
	`STF
(
xp
, 
l
, 
r
);

304 
	`STF
(
xp
, 
r
,Ñ);

306 
	`STF
(
r
, 
l
, 
x
);

307 
	`STF
(
x
, 
p
, 
r
);

308 
	}
}

309 
	#ROTATE_LEFT
(
£t
, 
node
Ë
	`rŸ©eLe·
(£t,Çode)

	)

317 
	$TMrŸ©eLe·
 (
TM_ARGDECL
 
rbåì_t
* 
s
, 
node_t
* 
x
)

319 
node_t
* 
r
 = 
	`TX_LDNODE
(
x
,Ñ);

320 
node_t
* 
æ
 = 
	`TX_LDNODE
(
r
, 
l
);

321 
	`TX_STF_P
(
x
, 
r
, 
æ
);

322 i‡(
æ
 !
NULL
) {

323 
	`TX_STF_P
(
æ
, 
p
, 
x
);

326 
node_t
* 
xp
 = 
	`TX_LDNODE
(
x
, 
p
);

327 
	`TX_STF_P
(
r
, 
p
, 
xp
);

328 i‡(
xp
 =
NULL
) {

329 
	`TX_STF_P
(
s
, 
roŸ
, 
r
);

330 } i‡(
	`TX_LDNODE
(
xp
, 
l
Ë=
x
) {

331 
	`TX_STF_P
(
xp
, 
l
, 
r
);

333 
	`TX_STF_P
(
xp
, 
r
,Ñ);

335 
	`TX_STF_P
(
r
, 
l
, 
x
);

336 
	`TX_STF_P
(
x
, 
p
, 
r
);

337 
	}
}

338 
	#TX_ROTATE_LEFT
(
£t
, 
node
Ë
	`TMrŸ©eLe·
(
TM_ARG
 së,Çode)

	)

346 
	$rŸ©eRight
 (
rbåì_t
* 
s
, 
node_t
* 
x
)

348 
node_t
* 
l
 = 
	`LDNODE
(
x
,Ü);

349 
node_t
* 
Ã
 = 
	`LDNODE
(
l
, 
r
);

350 
	`STF
(
x
, 
l
, 
Ã
);

351 i‡(
Ã
 !
NULL
) {

352 
	`STF
(
Ã
, 
p
, 
x
);

354 
node_t
* 
xp
 = 
	`LDNODE
(
x
, 
p
);

355 
	`STF
(
l
, 
p
, 
xp
);

356 i‡(
xp
 =
NULL
) {

357 
	`STF
(
s
, 
roŸ
, 
l
);

358 } i‡(
	`LDNODE
(
xp
, 
r
Ë=
x
) {

359 
	`STF
(
xp
, 
r
, 
l
);

361 
	`STF
(
xp
, 
l
,Ü);

363 
	`STF
(
l
, 
r
, 
x
);

364 
	`STF
(
x
, 
p
, 
l
);

365 
	}
}

366 
	#ROTATE_RIGHT
(
£t
, 
node
Ë
	`rŸ©eRight
(£t,Çode)

	)

374 
	$TMrŸ©eRight
 (
TM_ARGDECL
 
rbåì_t
* 
s
, 
node_t
* 
x
)

376 
node_t
* 
l
 = 
	`TX_LDNODE
(
x
,Ü);

377 
node_t
* 
Ã
 = 
	`TX_LDNODE
(
l
, 
r
);

378 
	`TX_STF_P
(
x
, 
l
, 
Ã
);

379 i‡(
Ã
 !
NULL
) {

380 
	`TX_STF_P
(
Ã
, 
p
, 
x
);

382 
node_t
* 
xp
 = 
	`TX_LDNODE
(
x
, 
p
);

383 
	`TX_STF_P
(
l
, 
p
, 
xp
);

384 i‡(
xp
 =
NULL
) {

385 
	`TX_STF_P
(
s
, 
roŸ
, 
l
);

386 } i‡(
	`TX_LDNODE
(
xp
, 
r
Ë=
x
) {

387 
	`TX_STF_P
(
xp
, 
r
, 
l
);

389 
	`TX_STF_P
(
xp
, 
l
,Ü);

391 
	`TX_STF_P
(
l
, 
r
, 
x
);

392 
	`TX_STF_P
(
x
, 
p
, 
l
);

393 
	}
}

394 
	#TX_ROTATE_RIGHT
(
£t
, 
node
Ë
	`TMrŸ©eRight
(
TM_ARG
 së,Çode)

	)

401 
ölöe
 
node_t
*

402 
	$∑ª¡Of
 (
node_t
* 
n
)

404  (
n
 ? 
	`LDNODE
“,
p
Ë: 
NULL
);

405 
	}
}

406 
	#PARENT_OF
(
n
Ë
	`∑ª¡Of
“)

	)

413 
ölöe
 
node_t
*

414 
	$TM∑ª¡Of
 (
TM_ARGDECL
 
node_t
* 
n
)

416  (
n
 ? 
	`TX_LDNODE
“,
p
Ë: 
NULL
);

417 
	}
}

418 
	#TX_PARENT_OF
(
n
Ë
	`TM∑ª¡Of
(
TM_ARG
Ç)

	)

425 
ölöe
 
node_t
*

426 
	$À·Of
 (
node_t
* 
n
)

428  (
n
 ? 
	`LDNODE
“, 
l
Ë: 
NULL
);

429 
	}
}

430 
	#LEFT_OF
(
n
Ë
	`À·Of
“)

	)

437 
ölöe
 
node_t
*

438 
	$TMÀ·Of
 (
TM_ARGDECL
 
node_t
* 
n
)

440  (
n
 ? 
	`TX_LDNODE
“, 
l
Ë: 
NULL
);

441 
	}
}

442 
	#TX_LEFT_OF
(
n
Ë
	`TMÀ·Of
(
TM_ARG
Ç)

	)

449 
ölöe
 
node_t
*

450 
	$rightOf
 (
node_t
* 
n
)

452  (
n
 ? 
	`LDNODE
“, 
r
Ë: 
NULL
);

453 
	}
}

454 
	#RIGHT_OF
(
n
Ë
	`rightOf
“)

	)

461 
ölöe
 
node_t
*

462 
	$TMrightOf
 (
TM_ARGDECL
 
node_t
* 
n
)

464  (
n
 ? 
	`TX_LDNODE
“, 
r
Ë: 
NULL
);

465 
	}
}

466 
	#TX_RIGHT_OF
(
n
Ë
	`TMrightOf
(
TM_ARG
Ç)

	)

473 
ölöe
 

474 
	$cﬁ‹Of
 (
node_t
* 
n
)

476  (
n
 ? ()
	`LDNODE
“, 
c
Ë: 
BLACK
);

477 
	}
}

478 
	#COLOR_OF
(
n
Ë
	`cﬁ‹Of
“)

	)

485 
ölöe
 

486 
	$TMcﬁ‹Of
 (
TM_ARGDECL
 
node_t
* 
n
)

488  (
n
 ? ()
	`TX_LDF
“, 
c
Ë: 
BLACK
);

489 
	}
}

490 
	#TX_COLOR_OF
(
n
Ë
	`TMcﬁ‹Of
(
TM_ARG
Ç)

	)

497 
ölöe
 

498 
	$£tCﬁ‹
 (
node_t
* 
n
, 
c
)

500 i‡(
n
 !
NULL
) {

501 
	`STF
(
n
, 
c
, c);

503 
	}
}

504 
	#SET_COLOR
(
n
, 
c
Ë
	`£tCﬁ‹
“, c)

	)

511 
ölöe
 

512 
	$TM£tCﬁ‹
 (
TM_ARGDECL
 
node_t
* 
n
, 
c
)

514 i‡(
n
 !
NULL
) {

515 
	`TX_STF
(
n
, 
c
, c);

517 
	}
}

518 
	#TX_SET_COLOR
(
n
, 
c
Ë
	`TM£tCﬁ‹
(
TM_ARG
Ç, c)

	)

526 
	$fixA·îIn£πi⁄
 (
rbåì_t
* 
s
, 
node_t
* 
x
)

528 
	`STF
(
x
, 
c
, 
RED
);

529 
x
 !
NULL
 && x !
	`LDNODE
(
s
, 
roŸ
)) {

530 
node_t
* 
xp
 = 
	`LDNODE
(
x
, 
p
);

531 i‡(
	`LDF
(
xp
, 
c
Ë!
RED
) {

535 i‡(
	`PARENT_OF
(
x
Ë=
	`LEFT_OF
(PARENT_OF(PARENT_OF(x)))) {

536 
node_t
* 
y
 = 
	`RIGHT_OF
(
	`PARENT_OF
(PARENT_OF(
x
)));

537 i‡(
	`COLOR_OF
(
y
Ë=
RED
) {

538 
	`SET_COLOR
(
	`PARENT_OF
(
x
), 
BLACK
);

539 
	`SET_COLOR
(
y
, 
BLACK
);

540 
	`SET_COLOR
(
	`PARENT_OF
(PARENT_OF(
x
)), 
RED
);

541 
x
 = 
	`PARENT_OF
(PARENT_OF(x));

543 i‡(
x
 =
	`RIGHT_OF
(
	`PARENT_OF
(x))) {

544 
x
 = 
	`PARENT_OF
(x);

545 
	`ROTATE_LEFT
(
s
, 
x
);

547 
	`SET_COLOR
(
	`PARENT_OF
(
x
), 
BLACK
);

548 
	`SET_COLOR
(
	`PARENT_OF
(PARENT_OF(
x
)), 
RED
);

549 i‡(
	`PARENT_OF
(PARENT_OF(
x
)Ë!
NULL
) {

550 
	`ROTATE_RIGHT
(
s
, 
	`PARENT_OF
(PARENT_OF(
x
)));

554 
node_t
* 
y
 = 
	`LEFT_OF
(
	`PARENT_OF
(PARENT_OF(
x
)));

555 i‡(
	`COLOR_OF
(
y
Ë=
RED
) {

556 
	`SET_COLOR
(
	`PARENT_OF
(
x
), 
BLACK
);

557 
	`SET_COLOR
(
y
, 
BLACK
);

558 
	`SET_COLOR
(
	`PARENT_OF
(PARENT_OF(
x
)), 
RED
);

559 
x
 = 
	`PARENT_OF
(PARENT_OF(x));

561 i‡(
x
 =
	`LEFT_OF
(
	`PARENT_OF
(x))) {

562 
x
 = 
	`PARENT_OF
(x);

563 
	`ROTATE_RIGHT
(
s
, 
x
);

565 
	`SET_COLOR
(
	`PARENT_OF
(
x
), 
BLACK
);

566 
	`SET_COLOR
(
	`PARENT_OF
(PARENT_OF(
x
)), 
RED
);

567 i‡(
	`PARENT_OF
(PARENT_OF(
x
)Ë!
NULL
) {

568 
	`ROTATE_LEFT
(
s
, 
	`PARENT_OF
(PARENT_OF(
x
)));

573 
node_t
* 
ro
 = 
	`LDNODE
(
s
, 
roŸ
);

574 i‡(
	`LDF
(
ro
, 
c
Ë!
BLACK
) {

575 
	`STF
(
ro
, 
c
, 
BLACK
);

577 
	}
}

578 
	#FIX_AFTER_INSERTION
(
s
, 
x
Ë
	`fixA·îIn£πi⁄
(s, x)

	)

586 
	$TMfixA·îIn£πi⁄
 (
TM_ARGDECL
 
rbåì_t
* 
s
, 
node_t
* 
x
)

588 
	`TX_STF
(
x
, 
c
, 
RED
);

589 
x
 !
NULL
 && x !
	`TX_LDNODE
(
s
, 
roŸ
)) {

590 
node_t
* 
xp
 = 
	`TX_LDNODE
(
x
, 
p
);

591 i‡(
	`TX_LDF
(
xp
, 
c
Ë!
RED
) {

595 i‡(
	`TX_PARENT_OF
(
x
Ë=
	`TX_LEFT_OF
(TX_PARENT_OF(TX_PARENT_OF(x)))) {

596 
node_t
* 
y
 = 
	`TX_RIGHT_OF
(
	`TX_PARENT_OF
(TX_PARENT_OF(
x
)));

597 i‡(
	`TX_COLOR_OF
(
y
Ë=
RED
) {

598 
	`TX_SET_COLOR
(
	`TX_PARENT_OF
(
x
), 
BLACK
);

599 
	`TX_SET_COLOR
(
y
, 
BLACK
);

600 
	`TX_SET_COLOR
(
	`TX_PARENT_OF
(TX_PARENT_OF(
x
)), 
RED
);

601 
x
 = 
	`TX_PARENT_OF
(TX_PARENT_OF(x));

603 i‡(
x
 =
	`TX_RIGHT_OF
(
	`TX_PARENT_OF
(x))) {

604 
x
 = 
	`TX_PARENT_OF
(x);

605 
	`TX_ROTATE_LEFT
(
s
, 
x
);

607 
	`TX_SET_COLOR
(
	`TX_PARENT_OF
(
x
), 
BLACK
);

608 
	`TX_SET_COLOR
(
	`TX_PARENT_OF
(TX_PARENT_OF(
x
)), 
RED
);

609 i‡(
	`TX_PARENT_OF
(TX_PARENT_OF(
x
)Ë!
NULL
) {

610 
	`TX_ROTATE_RIGHT
(
s
, 
	`TX_PARENT_OF
(TX_PARENT_OF(
x
)));

614 
node_t
* 
y
 = 
	`TX_LEFT_OF
(
	`TX_PARENT_OF
(TX_PARENT_OF(
x
)));

615 i‡(
	`TX_COLOR_OF
(
y
Ë=
RED
) {

616 
	`TX_SET_COLOR
(
	`TX_PARENT_OF
(
x
), 
BLACK
);

617 
	`TX_SET_COLOR
(
y
, 
BLACK
);

618 
	`TX_SET_COLOR
(
	`TX_PARENT_OF
(TX_PARENT_OF(
x
)), 
RED
);

619 
x
 = 
	`TX_PARENT_OF
(TX_PARENT_OF(x));

621 i‡(
x
 =
	`TX_LEFT_OF
(
	`TX_PARENT_OF
(x))) {

622 
x
 = 
	`TX_PARENT_OF
(x);

623 
	`TX_ROTATE_RIGHT
(
s
, 
x
);

625 
	`TX_SET_COLOR
(
	`TX_PARENT_OF
(
x
), 
BLACK
);

626 
	`TX_SET_COLOR
(
	`TX_PARENT_OF
(TX_PARENT_OF(
x
)), 
RED
);

627 i‡(
	`TX_PARENT_OF
(TX_PARENT_OF(
x
)Ë!
NULL
) {

628 
	`TX_ROTATE_LEFT
(
s
, 
	`TX_PARENT_OF
(TX_PARENT_OF(
x
)));

633 
node_t
* 
ro
 = 
	`TX_LDNODE
(
s
, 
roŸ
);

634 i‡(
	`TX_LDF
(
ro
, 
c
Ë!
BLACK
) {

635 
	`TX_STF
(
ro
, 
c
, 
BLACK
);

637 
	}
}

638 
	#TX_FIX_AFTER_INSERTION
(
s
, 
x
Ë
	`TMfixA·îIn£πi⁄
(
TM_ARG
 s, x)

	)

645 
node_t
*

646 
	$ö£π
 (
rbåì_t
* 
s
, * 
k
, * 
v
, 
node_t
* 
n
)

648 
node_t
* 
t
 = 
	`LDNODE
(
s
, 
roŸ
);

649 i‡(
t
 =
NULL
) {

650 i‡(
n
 =
NULL
) {

651  
NULL
;

654 
	`STF
(
n
, 
l
, 
NULL
);

655 
	`STF
(
n
, 
r
, 
NULL
);

656 
	`STF
(
n
, 
p
, 
NULL
);

657 
	`STF
(
n
, 
k
, k);

658 
	`STF
(
n
, 
v
, v);

659 
	`STF
(
n
, 
c
, 
BLACK
);

660 
	`STF
(
s
, 
roŸ
, 
n
);

661  
NULL
;

665 
cmp
 = 
s
->
	`com∑ª
(
k
, 
	`LDF
(
t
, k));

666 i‡(
cmp
 == 0) {

667  
t
;

668 } i‡(
cmp
 < 0) {

669 
node_t
* 
é
 = 
	`LDNODE
(
t
, 
l
);

670 i‡(
é
 !
NULL
) {

671 
t
 = 
é
;

673 
	`STF
(
n
, 
l
, 
NULL
);

674 
	`STF
(
n
, 
r
, 
NULL
);

675 
	`STF
(
n
, 
k
, k);

676 
	`STF
(
n
, 
v
, v);

677 
	`STF
(
n
, 
p
, 
t
);

678 
	`STF
(
t
, 
l
, 
n
);

679 
	`FIX_AFTER_INSERTION
(
s
, 
n
);

680  
NULL
;

683 
node_t
* 
å
 = 
	`LDNODE
(
t
, 
r
);

684 i‡(
å
 !
NULL
) {

685 
t
 = 
å
;

687 
	`STF
(
n
, 
l
, 
NULL
);

688 
	`STF
(
n
, 
r
, 
NULL
);

689 
	`STF
(
n
, 
k
, k);

690 
	`STF
(
n
, 
v
, v);

691 
	`STF
(
n
, 
p
, 
t
);

692 
	`STF
(
t
, 
r
, 
n
);

693 
	`FIX_AFTER_INSERTION
(
s
, 
n
);

694  
NULL
;

698 
	}
}

699 
	#INSERT
(
s
, 
k
, 
v
, 
n
Ë
	`ö£π
(s, k, v,Ç)

	)

706 
node_t
*

707 
	$TMö£π
 (
TM_ARGDECL
 
rbåì_t
* 
s
, * 
k
, * 
v
, 
node_t
* 
n
)

709 
node_t
* 
t
 = 
	`TX_LDNODE
(
s
, 
roŸ
);

710 i‡(
t
 =
NULL
) {

711 i‡(
n
 =
NULL
) {

712  
NULL
;

715 
	`TX_STF_P
(
n
, 
l
, (
node_t
*)
NULL
);

716 
	`TX_STF_P
(
n
, 
r
, (
node_t
*)
NULL
);

717 
	`TX_STF_P
(
n
, 
p
, (
node_t
*)
NULL
);

718 
	`TX_STF
(
n
, 
k
, k);

719 
	`TX_STF
(
n
, 
v
, v);

720 
	`TX_STF
(
n
, 
c
, 
BLACK
);

721 
	`TX_STF_P
(
s
, 
roŸ
, 
n
);

722  
NULL
;

726 
cmp
 = 
s
->
	`com∑ª
(
k
, 
	`TX_LDF_P
(
t
, k));

727 i‡(
cmp
 == 0) {

728  
t
;

729 } i‡(
cmp
 < 0) {

730 
node_t
* 
é
 = 
	`TX_LDNODE
(
t
, 
l
);

731 i‡(
é
 !
NULL
) {

732 
t
 = 
é
;

734 
	`TX_STF_P
(
n
, 
l
, (
node_t
*)
NULL
);

735 
	`TX_STF_P
(
n
, 
r
, (
node_t
*)
NULL
);

736 
	`TX_STF
(
n
, 
k
, k);

737 
	`TX_STF
(
n
, 
v
, v);

738 
	`TX_STF_P
(
n
, 
p
, 
t
);

739 
	`TX_STF_P
(
t
, 
l
, 
n
);

740 
	`TX_FIX_AFTER_INSERTION
(
s
, 
n
);

741  
NULL
;

744 
node_t
* 
å
 = 
	`TX_LDNODE
(
t
, 
r
);

745 i‡(
å
 !
NULL
) {

746 
t
 = 
å
;

748 
	`TX_STF_P
(
n
, 
l
, (
node_t
*)
NULL
);

749 
	`TX_STF_P
(
n
, 
r
, (
node_t
*)
NULL
);

750 
	`TX_STF
(
n
, 
k
, k);

751 
	`TX_STF
(
n
, 
v
, v);

752 
	`TX_STF_P
(
n
, 
p
, 
t
);

753 
	`TX_STF_P
(
t
, 
r
, 
n
);

754 
	`TX_FIX_AFTER_INSERTION
(
s
, 
n
);

755  
NULL
;

759 
	}
}

760 
	#TX_INSERT
(
s
, 
k
, 
v
, 
n
Ë
	`TMö£π
(
TM_ARG
 s, k, v,Ç)

	)

775 
node_t
*

776 
	$suc˚ss‹
 (
node_t
* 
t
)

778 i‡(
t
 =
NULL
) {

779  
NULL
;

780 } i‡(
	`LDNODE
(
t
, 
r
Ë!
NULL
) {

781 
node_t
* 
p
 = 
	`LDNODE
(
t
, 
r
);

782 
	`LDNODE
(
p
, 
l
Ë!
NULL
) {

783 
p
 = 
	`LDNODE
’, 
l
);

785  
p
;

787 
node_t
* 
p
 = 
	`LDNODE
(
t
,Ö);

788 
node_t
* 
ch
 = 
t
;

789 
p
 !
NULL
 && 
ch
 =
	`LDNODE
’, 
r
)) {

790 
ch
 = 
p
;

791 
p
 = 
	`LDNODE
(p,Ö);

793  
p
;

795 
	}
}

796 
	#SUCCESSOR
(
n
Ë
	`suc˚ss‹
“)

	)

803 
node_t
*

804 
	$TMsuc˚ss‹
 (
TM_ARGDECL
 
node_t
* 
t
)

806 i‡(
t
 =
NULL
) {

807  
NULL
;

808 } i‡(
	`TX_LDNODE
(
t
, 
r
Ë!
NULL
) {

809 
node_t
* 
p
 = 
	`TX_LDNODE
(
t
,
r
);

810 
	`TX_LDNODE
(
p
, 
l
Ë!
NULL
) {

811 
p
 = 
	`TX_LDNODE
’, 
l
);

813  
p
;

815 
node_t
* 
p
 = 
	`TX_LDNODE
(
t
,Ö);

816 
node_t
* 
ch
 = 
t
;

817 
p
 !
NULL
 && 
ch
 =
	`TX_LDNODE
’, 
r
)) {

818 
ch
 = 
p
;

819 
p
 = 
	`TX_LDNODE
(p,Ö);

821  
p
;

823 
	}
}

824 
	#TX_SUCCESSOR
(
n
Ë
	`TMsuc˚ss‹
(
TM_ARG
Ç)

	)

832 
	$fixA·îDñëi⁄
 (
rbåì_t
* 
s
, 
node_t
* 
x
)

834 
x
 !
	`LDNODE
(
s
,
roŸ
Ë&& 
	`COLOR_OF
(xË=
BLACK
) {

835 i‡(
x
 =
	`LEFT_OF
(
	`PARENT_OF
(x))) {

836 
node_t
* 
sib
 = 
	`RIGHT_OF
(
	`PARENT_OF
(
x
));

837 i‡(
	`COLOR_OF
(
sib
Ë=
RED
) {

838 
	`SET_COLOR
(
sib
, 
BLACK
);

839 
	`SET_COLOR
(
	`PARENT_OF
(
x
), 
RED
);

840 
	`ROTATE_LEFT
(
s
, 
	`PARENT_OF
(
x
));

841 
sib
 = 
	`RIGHT_OF
(
	`PARENT_OF
(
x
));

843 i‡(
	`COLOR_OF
(
	`LEFT_OF
(
sib
)Ë=
BLACK
 &&

844 
	`COLOR_OF
(
	`RIGHT_OF
(
sib
)Ë=
BLACK
) {

845 
	`SET_COLOR
(
sib
, 
RED
);

846 
x
 = 
	`PARENT_OF
(x);

848 i‡(
	`COLOR_OF
(
	`RIGHT_OF
(
sib
)Ë=
BLACK
) {

849 
	`SET_COLOR
(
	`LEFT_OF
(
sib
), 
BLACK
);

850 
	`SET_COLOR
(
sib
, 
RED
);

851 
	`ROTATE_RIGHT
(
s
, 
sib
);

852 
sib
 = 
	`RIGHT_OF
(
	`PARENT_OF
(
x
));

854 
	`SET_COLOR
(
sib
, 
	`COLOR_OF
(
	`PARENT_OF
(
x
)));

855 
	`SET_COLOR
(
	`PARENT_OF
(
x
), 
BLACK
);

856 
	`SET_COLOR
(
	`RIGHT_OF
(
sib
), 
BLACK
);

857 
	`ROTATE_LEFT
(
s
, 
	`PARENT_OF
(
x
));

859 
x
 = 
	`LDNODE
(
s
,
roŸ
);

862 
node_t
* 
sib
 = 
	`LEFT_OF
(
	`PARENT_OF
(
x
));

863 i‡(
	`COLOR_OF
(
sib
Ë=
RED
) {

864 
	`SET_COLOR
(
sib
, 
BLACK
);

865 
	`SET_COLOR
(
	`PARENT_OF
(
x
), 
RED
);

866 
	`ROTATE_RIGHT
(
s
, 
	`PARENT_OF
(
x
));

867 
sib
 = 
	`LEFT_OF
(
	`PARENT_OF
(
x
));

869 i‡(
	`COLOR_OF
(
	`RIGHT_OF
(
sib
)Ë=
BLACK
 &&

870 
	`COLOR_OF
(
	`LEFT_OF
(
sib
)Ë=
BLACK
) {

871 
	`SET_COLOR
(
sib
, 
RED
);

872 
x
 = 
	`PARENT_OF
(x);

874 i‡(
	`COLOR_OF
(
	`LEFT_OF
(
sib
)Ë=
BLACK
) {

875 
	`SET_COLOR
(
	`RIGHT_OF
(
sib
), 
BLACK
);

876 
	`SET_COLOR
(
sib
, 
RED
);

877 
	`ROTATE_LEFT
(
s
, 
sib
);

878 
sib
 = 
	`LEFT_OF
(
	`PARENT_OF
(
x
));

880 
	`SET_COLOR
(
sib
, 
	`COLOR_OF
(
	`PARENT_OF
(
x
)));

881 
	`SET_COLOR
(
	`PARENT_OF
(
x
), 
BLACK
);

882 
	`SET_COLOR
(
	`LEFT_OF
(
sib
), 
BLACK
);

883 
	`ROTATE_RIGHT
(
s
, 
	`PARENT_OF
(
x
));

885 
x
 = 
	`LDNODE
(
s
, 
roŸ
);

890 i‡(
x
 !
NULL
 && 
	`LDF
(x,
c
Ë!
BLACK
) {

891 
	`STF
(
x
, 
c
, 
BLACK
);

893 
	}
}

894 
	#FIX_AFTER_DELETION
(
s
, 
n
Ë
	`fixA·îDñëi⁄
(s,Ç)

	)

902 
	$TMfixA·îDñëi⁄
 (
TM_ARGDECL
 
rbåì_t
* 
s
, 
node_t
* 
x
)

904 
x
 !
	`TX_LDNODE
(
s
,
roŸ
Ë&& 
	`TX_COLOR_OF
(xË=
BLACK
) {

905 i‡(
x
 =
	`TX_LEFT_OF
(
	`TX_PARENT_OF
(x))) {

906 
node_t
* 
sib
 = 
	`TX_RIGHT_OF
(
	`TX_PARENT_OF
(
x
));

907 i‡(
	`TX_COLOR_OF
(
sib
Ë=
RED
) {

908 
	`TX_SET_COLOR
(
sib
, 
BLACK
);

909 
	`TX_SET_COLOR
(
	`TX_PARENT_OF
(
x
), 
RED
);

910 
	`TX_ROTATE_LEFT
(
s
, 
	`TX_PARENT_OF
(
x
));

911 
sib
 = 
	`TX_RIGHT_OF
(
	`TX_PARENT_OF
(
x
));

913 i‡(
	`TX_COLOR_OF
(
	`TX_LEFT_OF
(
sib
)Ë=
BLACK
 &&

914 
	`TX_COLOR_OF
(
	`TX_RIGHT_OF
(
sib
)Ë=
BLACK
) {

915 
	`TX_SET_COLOR
(
sib
, 
RED
);

916 
x
 = 
	`TX_PARENT_OF
(x);

918 i‡(
	`TX_COLOR_OF
(
	`TX_RIGHT_OF
(
sib
)Ë=
BLACK
) {

919 
	`TX_SET_COLOR
(
	`TX_LEFT_OF
(
sib
), 
BLACK
);

920 
	`TX_SET_COLOR
(
sib
, 
RED
);

921 
	`TX_ROTATE_RIGHT
(
s
, 
sib
);

922 
sib
 = 
	`TX_RIGHT_OF
(
	`TX_PARENT_OF
(
x
));

924 
	`TX_SET_COLOR
(
sib
, 
	`TX_COLOR_OF
(
	`TX_PARENT_OF
(
x
)));

925 
	`TX_SET_COLOR
(
	`TX_PARENT_OF
(
x
), 
BLACK
);

926 
	`TX_SET_COLOR
(
	`TX_RIGHT_OF
(
sib
), 
BLACK
);

927 
	`TX_ROTATE_LEFT
(
s
, 
	`TX_PARENT_OF
(
x
));

929 
x
 = 
	`TX_LDNODE
(
s
,
roŸ
);

932 
node_t
* 
sib
 = 
	`TX_LEFT_OF
(
	`TX_PARENT_OF
(
x
));

934 i‡(
	`TX_COLOR_OF
(
sib
Ë=
RED
) {

935 
	`TX_SET_COLOR
(
sib
, 
BLACK
);

936 
	`TX_SET_COLOR
(
	`TX_PARENT_OF
(
x
), 
RED
);

937 
	`TX_ROTATE_RIGHT
(
s
, 
	`TX_PARENT_OF
(
x
));

938 
sib
 = 
	`TX_LEFT_OF
(
	`TX_PARENT_OF
(
x
));

940 i‡(
	`TX_COLOR_OF
(
	`TX_RIGHT_OF
(
sib
)Ë=
BLACK
 &&

941 
	`TX_COLOR_OF
(
	`TX_LEFT_OF
(
sib
)Ë=
BLACK
) {

942 
	`TX_SET_COLOR
(
sib
, 
RED
);

943 
x
 = 
	`TX_PARENT_OF
(x);

945 i‡(
	`TX_COLOR_OF
(
	`TX_LEFT_OF
(
sib
)Ë=
BLACK
) {

946 
	`TX_SET_COLOR
(
	`TX_RIGHT_OF
(
sib
), 
BLACK
);

947 
	`TX_SET_COLOR
(
sib
, 
RED
);

948 
	`TX_ROTATE_LEFT
(
s
, 
sib
);

949 
sib
 = 
	`TX_LEFT_OF
(
	`TX_PARENT_OF
(
x
));

951 
	`TX_SET_COLOR
(
sib
, 
	`TX_COLOR_OF
(
	`TX_PARENT_OF
(
x
)));

952 
	`TX_SET_COLOR
(
	`TX_PARENT_OF
(
x
), 
BLACK
);

953 
	`TX_SET_COLOR
(
	`TX_LEFT_OF
(
sib
), 
BLACK
);

954 
	`TX_ROTATE_RIGHT
(
s
, 
	`TX_PARENT_OF
(
x
));

956 
x
 = 
	`TX_LDNODE
(
s
, 
roŸ
);

961 i‡(
x
 !
NULL
 && 
	`TX_LDF
(x,
c
Ë!
BLACK
) {

962 
	`TX_STF
(
x
, 
c
, 
BLACK
);

964 
	}
}

965 
	#TX_FIX_AFTER_DELETION
(
s
, 
n
Ë
	`TMfixA·îDñëi⁄
(
TM_ARG
 s,Ç )

	)

972 
node_t
*

973 
	$dñëe_node
 (
rbåì_t
* 
s
, 
node_t
* 
p
)

979 i‡(
	`LDNODE
(
p
, 
l
Ë!
NULL
 && LDNODE’, 
r
) != NULL) {

980 
node_t
* 
s
 = 
	`SUCCESSOR
(
p
);

981 
	`STF
(
p
, 
k
, 
	`LDNODE
(
s
, k));

982 
	`STF
(
p
, 
v
, 
	`LDNODE
(
s
, v));

983 
p
 = 
s
;

987 
node_t
* 
ª∂a˚mít
 =

988 ((
	`LDNODE
(
p
, 
l
Ë!
NULL
Ë? LDNODE’,ÜË: LDNODE’, 
r
));

990 i‡(
ª∂a˚mít
 !
NULL
) {

993 
	`STF
 (
ª∂a˚mít
, 
p
, 
	`LDNODE
(p,Ö));

994 
node_t
* 
µ
 = 
	`LDNODE
(
p
,Ö);

995 i‡(
µ
 =
NULL
) {

996 
	`STF
(
s
, 
roŸ
, 
ª∂a˚mít
);

997 } i‡(
p
 =
	`LDNODE
(
µ
, 
l
)) {

998 
	`STF
(
µ
, 
l
, 
ª∂a˚mít
);

1000 
	`STF
(
µ
, 
r
, 
ª∂a˚mít
);

1004 
	`STF
(
p
, 
l
, 
NULL
);

1005 
	`STF
(
p
, 
r
, 
NULL
);

1006 
	`STF
(
p
,Ö, 
NULL
);

1009 i‡(
	`LDF
(
p
,
c
Ë=
BLACK
) {

1010 
	`FIX_AFTER_DELETION
(
s
, 
ª∂a˚mít
);

1012 } i‡(
	`LDNODE
(
p
,ÖË=
NULL
) {

1013 
	`STF
(
s
, 
roŸ
, 
NULL
);

1015 i‡(
	`LDF
(
p
, 
c
Ë=
BLACK
) {

1016 
	`FIX_AFTER_DELETION
(
s
, 
p
);

1018 
node_t
* 
µ
 = 
	`LDNODE
(
p
,Ö);

1019 i‡(
µ
 !
NULL
) {

1020 i‡(
p
 =
	`LDNODE
(
µ
, 
l
)) {

1021 
	`STF
(
µ
,
l
, 
NULL
);

1022 } i‡(
p
 =
	`LDNODE
(
µ
, 
r
)) {

1023 
	`STF
(
µ
, 
r
, 
NULL
);

1025 
	`STF
(
p
,Ö, 
NULL
);

1028  
p
;

1029 
	}
}

1030 
	#DELETE
(
s
, 
n
Ë
	`dñëe_node
(s,Ç)

	)

1037 
node_t
*

1038 
	$TMdñëe
 (
TM_ARGDECL
 
rbåì_t
* 
s
, 
node_t
* 
p
)

1044 i‡(
	`TX_LDNODE
(
p
, 
l
Ë!
NULL
 && TX_LDNODE’, 
r
) != NULL) {

1045 
node_t
* 
s
 = 
	`TX_SUCCESSOR
(
p
);

1046 
	`TX_STF
(
p
,
k
, 
	`TX_LDF_P
(
s
, k));

1047 
	`TX_STF
(
p
,
v
, 
	`TX_LDF_P
(
s
, v));

1048 
p
 = 
s
;

1052 
node_t
* 
ª∂a˚mít
 =

1053 ((
	`TX_LDNODE
(
p
, 
l
Ë!
NULL
Ë? TX_LDNODE’,ÜË: TX_LDNODE’, 
r
));

1055 i‡(
ª∂a˚mít
 !
NULL
) {

1058 
	`TX_STF_P
(
ª∂a˚mít
, 
p
, 
	`TX_LDNODE
(p,Ö));

1059 
node_t
* 
µ
 = 
	`TX_LDNODE
(
p
,Ö);

1060 i‡(
µ
 =
NULL
) {

1061 
	`TX_STF_P
(
s
, 
roŸ
, 
ª∂a˚mít
);

1062 } i‡(
p
 =
	`TX_LDNODE
(
µ
, 
l
)) {

1063 
	`TX_STF_P
(
µ
, 
l
, 
ª∂a˚mít
);

1065 
	`TX_STF_P
(
µ
, 
r
, 
ª∂a˚mít
);

1069 
	`TX_STF_P
(
p
, 
l
, (
node_t
*)
NULL
);

1070 
	`TX_STF_P
(
p
, 
r
, (
node_t
*)
NULL
);

1071 
	`TX_STF_P
(
p
,Ö, (
node_t
*)
NULL
);

1074 i‡(
	`TX_LDF
(
p
,
c
Ë=
BLACK
) {

1075 
	`TX_FIX_AFTER_DELETION
(
s
, 
ª∂a˚mít
);

1077 } i‡(
	`TX_LDNODE
(
p
,pË=
NULL
) {

1078 
	`TX_STF_P
(
s
, 
roŸ
, (
node_t
*)
NULL
);

1080 i‡(
	`TX_LDF
(
p
,
c
Ë=
BLACK
) {

1081 
	`TX_FIX_AFTER_DELETION
(
s
, 
p
);

1083 
node_t
* 
µ
 = 
	`TX_LDNODE
(
p
,Ö);

1084 i‡(
µ
 !
NULL
) {

1085 i‡(
p
 =
	`TX_LDNODE
(
µ
, 
l
)) {

1086 
	`TX_STF_P
(
µ
,
l
, (
node_t
*)
NULL
);

1087 } i‡(
p
 =
	`TX_LDNODE
(
µ
, 
r
)) {

1088 
	`TX_STF_P
(
µ
, 
r
, (
node_t
*)
NULL
);

1090 
	`TX_STF_P
(
p
,Ö, (
node_t
*)
NULL
);

1093  
p
;

1094 
	}
}

1095 
	#TX_DELETE
(
s
, 
n
Ë
	`TMdñëe
(
TM_ARG
 s,Ç)

	)

1107 
node_t
*

1108 
	$fú°E¡ry
 (
rbåì_t
* 
s
)

1110 
node_t
* 
p
 = 
s
->
roŸ
;

1111 i‡(
p
 !
NULL
) {

1112 
p
->
l
 !
NULL
) {

1113 
p
 =Ö->
l
;

1116  
p
;

1117 
	}
}

1125 
node_t
*

1126 
	$¥ede˚ss‹
 (
node_t
* 
t
)

1128 i‡(
t
 =
NULL
)

1129  
NULL
;

1130 i‡(
t
->
l
 !
NULL
) {

1131 
node_t
* 
p
 = 
t
->
l
;

1132 
p
->
r
 !
NULL
) {

1133 
p
 =Ö->
r
;

1135  
p
;

1137 
node_t
* 
p
 = 
t
->p;

1138 
node_t
* 
ch
 = 
t
;

1139 
p
 !
NULL
 && 
ch
 =p->
l
) {

1140 
ch
 = 
p
;

1141 
p
 =Ö->p;

1143  
p
;

1145 
	}
}

1171 
	$vîifyRedBœck
 (
node_t
* 
roŸ
, 
dïth
)

1173 
height_À·
;

1174 
height_right
;

1176 i‡(
roŸ
 =
NULL
) {

1180 
height_À·
 = 
	`vîifyRedBœck
(
roŸ
->
l
, 
dïth
+1);

1181 
height_right
 = 
	`vîifyRedBœck
(
roŸ
->
r
, 
dïth
+1);

1182 i‡(
height_À·
 =0 || 
height_right
 == 0) {

1185 i‡(
height_À·
 !
height_right
) {

1186 
	`¥ötf
(" ImbÆ™˚ @dïth=%ld : %ld %ld\n", 
dïth
, 
height_À·
, 
height_right
);

1189 i‡(
roŸ
->
l
 !
NULL
 &&ÑoŸ->l->
p
 !=Ñoot) {

1190 
	`¥ötf
("Üineage\n");

1192 i‡(
roŸ
->
r
 !
NULL
 &&ÑoŸ->r->
p
 !=Ñoot) {

1193 
	`¥ötf
("Üineage\n");

1197 i‡(
roŸ
->
c
 =
RED
) {

1198 i‡(
roŸ
->
l
 !
NULL
 &&ÑoŸ->l->
c
 !
BLACK
) {

1199 
	`¥ötf
("VERIFY %d\n", 
__LINE__
);

1202 i‡(
roŸ
->
r
 !
NULL
 &&ÑoŸ->r->
c
 !
BLACK
) {

1203 
	`¥ötf
("VERIFY %d\n", 
__LINE__
);

1206  
height_À·
;

1208 i‡(
roŸ
->
c
 !
BLACK
) {

1209 
	`¥ötf
("VERIFY %d\n", 
__LINE__
);

1213  (
height_À·
 + 1);

1214 
	}
}

1222 
	$rbåì_vîify
 (
rbåì_t
* 
s
, 
vîbo£
)

1224 
node_t
* 
roŸ
 = 
s
->root;

1225 i‡(
roŸ
 =
NULL
) {

1228 i‡(
vîbo£
) {

1229 
	`¥ötf
("Integrity check: ");

1232 i‡(
roŸ
->
p
 !
NULL
) {

1233 
	`¥ötf
(" (WARNING)Ñoot %lXÖarent=%lX\n",

1234 ()
roŸ
, (ÏoŸ->
p
);

1237 i‡(
roŸ
->
c
 !
BLACK
) {

1238 
	`¥ötf
(" (WARNING)Ñoot %lX color=%lX\n",

1239 ()
roŸ
, (ÏoŸ->
c
);

1243 
˘r
 = 0;

1244 
node_t
* 
ôs
 = 
	`fú°E¡ry
(
s
);

1245 
ôs
 !
NULL
) {

1246 
˘r
++;

1247 
node_t
* 
chûd
 = 
ôs
->
l
;

1248 i‡(
chûd
 !
NULL
 && chûd->
p
 !
ôs
) {

1249 
	`¥ötf
("BadÖarent\n");

1251 
chûd
 = 
ôs
->
r
;

1252 i‡(
chûd
 !
NULL
 && chûd->
p
 !
ôs
) {

1253 
	`¥ötf
("BadÖarent\n");

1255 
node_t
* 
nxt
 = 
	`suc˚ss‹
(
ôs
);

1256 i‡(
nxt
 =
NULL
) {

1259 i‡(
s
->
	`com∑ª
(
ôs
->
k
, 
nxt
->k) >= 0) {

1260 
	`¥ötf
("Key order %lX (%ld %ld) %lX (%ld %ld)\n",

1261 ()
ôs
, ()ôs->
k
, ()ôs->
v
,

1262 ()
nxt
, (Íxt->
k
, (Íxt->
v
);

1265 
ôs
 = 
nxt
;

1268 
vfy
 = 
	`vîifyRedBœck
(
roŸ
, 0);

1269 i‡(
vîbo£
) {

1270 
	`¥ötf
(" Nodes=%ld Dïth=%ld\n", 
˘r
, 
vfy
);

1273  
vfy
;

1274 
	}
}

1282 
	$com∑ªKeysDeÁu…
 (c⁄° * 
a
, c⁄° * 
b
)

1284  (()
a
 - ()
b
);

1285 
	}
}

1292 
rbåì_t
*

1293 
rbåì_Æloc
 ((*
com∑ª
)(const *, const *))

1295 
rbåì_t
* 
n
 = (rbåì_t* )
	`mÆloc
((*n));

1296 i‡(
n
) {

1297 
n
->
com∑ª
 = (com∑ª ? com∑ª : &
com∑ªKeysDeÁu…
);

1298 
n
->
roŸ
 = 
NULL
;

1300  
n
;

1301 
	}
}

1308 
rbåì_t
*

1309 
TMrbåì_Æloc
 (
TM_ARGDECL
 (*
com∑ª
)(const *, const *))

1311 
rbåì_t
* 
n
 = (rbåì_t* )
	`TM_MALLOC
((*n));

1312 i‡(
n
){

1313 
n
->
com∑ª
 = (com∑ª ? com∑ª : &
com∑ªKeysDeÁu…
);

1314 
n
->
roŸ
 = 
NULL
;

1316  
n
;

1317 
	}
}

1325 
	$ªÀa£Node
 (
node_t
* 
n
)

1327 #i‚de‡
SIMULATOR


1328 
	`‰ì
(
n
);

1330 
	}
}

1338 
	$TMªÀa£Node
 (
TM_ARGDECL
 
node_t
* 
n
)

1340 
	`TM_FREE
(
n
);

1341 
	}
}

1349 
	$‰ìNode
 (
node_t
* 
n
)

1351 i‡(
n
) {

1352 
	`‰ìNode
(
n
->
l
);

1353 
	`‰ìNode
(
n
->
r
);

1354 
	`ªÀa£Node
(
n
);

1356 
	}
}

1364 
	$TM‰ìNode
 (
TM_ARGDECL
 
node_t
* 
n
)

1366 i‡(
n
) {

1367 
	`TM‰ìNode
(
TM_ARG
 
n
->
l
);

1368 
	`TM‰ìNode
(
TM_ARG
 
n
->
r
);

1369 
	`TMªÀa£Node
(
TM_ARG
 
n
);

1371 
	}
}

1379 
	$rbåì_‰ì
 (
rbåì_t
* 
r
)

1381 
	`‰ìNode
(
r
->
roŸ
);

1382 
	`‰ì
(
r
);

1383 
	}
}

1391 
	$TMrbåì_‰ì
 (
TM_ARGDECL
 
rbåì_t
* 
r
)

1393 
	`TM‰ìNode
(
TM_ARG
 
r
->
roŸ
);

1394 
	`TM_FREE
(
r
);

1395 
	}
}

1402 
node_t
*

1403 
	$gëNode
 ()

1405 
node_t
* 
n
 = (node_t*)
	`mÆloc
((*n));

1406  
n
;

1407 
	}
}

1414 
node_t
*

1415 
	$TMgëNode
 (
TM_ARGDECL_ALONE
)

1417 
node_t
* 
n
 = (node_t*)
	`TM_MALLOC
((*n));

1418  
n
;

1419 
	}
}

1427 
boﬁ_t


1428 
	$rbåì_ö£π
 (
rbåì_t
* 
r
, * 
key
, * 
vÆ
)

1430 
node_t
* 
node
 = 
	`gëNode
();

1431 
node_t
* 
ex
 = 
	`INSERT
(
r
, 
key
, 
vÆ
, 
node
);

1432 i‡(
ex
 !
NULL
) {

1433 
	`ªÀa£Node
(
node
);

1435  ((
ex
 =
NULL
Ë? 
TRUE
 : 
FALSE
);

1436 
	}
}

1444 
boﬁ_t


1445 
	$TMrbåì_ö£π
 (
TM_ARGDECL
 
rbåì_t
* 
r
, * 
key
, * 
vÆ
)

1447 
node_t
* 
node
 = 
	`TMgëNode
(
TM_ARG_ALONE
);

1448 
node_t
* 
ex
 = 
	`TX_INSERT
(
r
, 
key
, 
vÆ
, 
node
);

1449 i‡(
ex
 !
NULL
) {

1450 
	`TMªÀa£Node
(
TM_ARG
 
node
);

1452  ((
ex
 =
NULL
Ë? 
TRUE
 : 
FALSE
);

1453 
	}
}

1461 
boﬁ_t


1462 
	$rbåì_dñëe
 (
rbåì_t
* 
r
, * 
key
)

1464 
node_t
* 
node
 = 
NULL
;

1465 
node
 = 
	`LOOKUP
(
r
, 
key
);

1466 i‡(
node
 !
NULL
) {

1467 
node
 = 
	`DELETE
(
r
,Çode);

1469 i‡(
node
 !
NULL
) {

1470 
	`ªÀa£Node
(
node
);

1472  ((
node
 !
NULL
Ë? 
TRUE
 : 
FALSE
);

1473 
	}
}

1481 
boﬁ_t


1482 
	$TMrbåì_dñëe
 (
TM_ARGDECL
 
rbåì_t
* 
r
, * 
key
)

1484 
node_t
* 
node
 = 
NULL
;

1485 
node
 = 
	`TX_LOOKUP
(
r
, 
key
);

1486 i‡(
node
 !
NULL
) {

1487 
node
 = 
	`TX_DELETE
(
r
,Çode);

1489 i‡(
node
 !
NULL
) {

1490 
	`TMªÀa£Node
(
TM_ARG
 
node
);

1492  ((
node
 !
NULL
Ë? 
TRUE
 : 
FALSE
);

1493 
	}
}

1501 
boﬁ_t


1502 
	$rbåì_upd©e
 (
rbåì_t
* 
r
, * 
key
, * 
vÆ
)

1504 
node_t
* 
¬
 = 
	`gëNode
();

1505 
node_t
* 
ex
 = 
	`INSERT
(
r
, 
key
, 
vÆ
, 
¬
);

1506 i‡(
ex
 !
NULL
) {

1507 
	`STF
(
ex
, 
v
, 
vÆ
);

1508 
	`ªÀa£Node
(
¬
);

1509  
TRUE
;

1511  
FALSE
;

1512 
	}
}

1520 
boﬁ_t


1521 
	$TMrbåì_upd©e
 (
TM_ARGDECL
 
rbåì_t
* 
r
, * 
key
, * 
vÆ
)

1523 
node_t
* 
¬
 = 
	`TMgëNode
(
TM_ARG_ALONE
);

1524 
node_t
* 
ex
 = 
	`TX_INSERT
(
r
, 
key
, 
vÆ
, 
¬
);

1525 i‡(
ex
 !
NULL
) {

1526 
	`TX_STF
(
ex
, 
v
, 
vÆ
);

1527 
	`TMªÀa£Node
(
TM_ARG
 
¬
);

1528  
TRUE
;

1530  
FALSE
;

1531 
	}
}

1539 
	$rbåì_gë
 (
rbåì_t
* 
r
, * 
key
) {

1540 
node_t
* 
n
 = 
	`LOOKUP
(
r
, 
key
);

1541 i‡(
n
 !
NULL
) {

1542 * 
vÆ
 = 
	`LDF
(
n
, 
v
);

1543  
vÆ
;

1545  
NULL
;

1546 
	}
}

1554 
	$TMrbåì_gë
 (
TM_ARGDECL
 
rbåì_t
* 
r
, * 
key
) {

1555 
node_t
* 
n
 = 
	`TX_LOOKUP
(
r
, 
key
);

1556 i‡(
n
 !
NULL
) {

1557 * 
vÆ
 = 
	`TX_LDF_P
(
n
, 
v
);

1558  
vÆ
;

1560  
NULL
;

1561 
	}
}

1569 
	$rbåì_c⁄èös
 (
rbåì_t
* 
r
, * 
key
)

1571 
node_t
* 
n
 = 
	`LOOKUP
(
r
, 
key
);

1572  (
n
 !
NULL
);

1573 
	}
}

1581 
	$TMrbåì_c⁄èös
 (
TM_ARGDECL
 
rbåì_t
* 
r
, * 
key
)

1583 
node_t
* 
n
 = 
	`TX_LOOKUP
(
r
, 
key
);

1584  (
n
 !
NULL
);

1585 
	}
}

1592 #ifde‡
TEST_RBTREE


1595 
	~<as£π.h
>

1596 
	~<°dio.h
>

1600 
	$com∑ª
 (c⁄° * 
a
, c⁄° * 
b
)

1602  (*((c⁄° *)
a
Ë- *((c⁄° *)
b
));

1603 
	}
}

1607 
	$ö£πI¡
 (
rbåì_t
* 
rbåìPå
, * 
d©a
)

1609 
	`¥ötf
("In£πög: %li\n", *
d©a
);

1610 
	`rbåì_ö£π
(
rbåìPå
, (*)
d©a
, (*)data);

1611 
	`as£π
(*(*)
	`rbåì_gë
(
rbåìPå
, (*)
d©a
) == *data);

1612 
	`as£π
(
	`rbåì_vîify
(
rbåìPå
, 0) > 0);

1613 
	}
}

1617 
	$ªmoveI¡
 (
rbåì_t
* 
rbåìPå
, * 
d©a
)

1619 
	`¥ötf
("Removög: %li\n", *
d©a
);

1620 
	`rbåì_dñëe
(
rbåìPå
, (*)
d©a
);

1621 
	`as£π
(
	`rbåì_gë
(
rbåìPå
, (*)
d©a
Ë=
NULL
);

1622 
	`as£π
(
	`rbåì_vîify
(
rbåìPå
, 0) > 0);

1623 
	}
}

1627 
	$maö
 ()

1629 
d©a
[] = {3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8, 9, 7};

1630 
numD©a
 = (
d©a
) / (data[0]);

1631 
i
;

1633 
	`puts
("Starting...");

1635 
rbåì_t
* 
rbåìPå
 = 
	`rbåì_Æloc
(&
com∑ª
);

1636 
	`as£π
(
rbåìPå
);

1638 
i
 = 0; i < 
numD©a
; i++) {

1639 
	`ö£πI¡
(
rbåìPå
, &
d©a
[
i
]);

1642 
i
 = 0; i < 
numD©a
; i++) {

1643 
	`ªmoveI¡
(
rbåìPå
, &
d©a
[
i
]);

1646 
	`rbåì_‰ì
(
rbåìPå
);

1648 
	`puts
("Done.");

1651 
	}
}

	@utils/estm-0.2.4.3/bench/lf-rbtree/rbtree.h

83 #i‚de‡
RBTREE_H


84 
	#RBTREE_H
 1

	)

88 
	~"ty≥s.h
"

91 #ifde‡
__˝lu•lus


96 
rbåì
 
	trbåì_t
;

104 
rbåì_vîify
 (
rbåì_t
* 
s
, 
vîbo£
);

111 
rbåì_t
*

112 
rbåì_Æloc
 ((*
com∑ª
)(const *, const *));

119 
rbåì_t
*

120 
TMrbåì_Æloc
 (
TM_ARGDECL
 (*
com∑ª
)(const *, const *));

128 
rbåì_‰ì
 (
rbåì_t
* 
r
);

136 
TMrbåì_‰ì
 (
TM_ARGDECL
 
rbåì_t
* 
r
);

144 
boﬁ_t


145 
rbåì_ö£π
 (
rbåì_t
* 
r
, * 
key
, * 
vÆ
);

153 
TM_CALLABLE


154 
boﬁ_t


155 
TMrbåì_ö£π
 (
TM_ARGDECL
 
rbåì_t
* 
r
, * 
key
, * 
vÆ
);

162 
boﬁ_t


163 
rbåì_dñëe
 (
rbåì_t
* 
r
, * 
key
);

170 
TM_CALLABLE


171 
boﬁ_t


172 
TMrbåì_dñëe
 (
TM_ARGDECL
 
rbåì_t
* 
r
, * 
key
);

180 
boﬁ_t


181 
rbåì_upd©e
 (
rbåì_t
* 
r
, * 
key
, * 
vÆ
);

189 
TM_CALLABLE


190 
boﬁ_t


191 
TMrbåì_upd©e
 (
TM_ARGDECL
 
rbåì_t
* 
r
, * 
key
, * 
vÆ
);

199 
rbåì_gë
 (
rbåì_t
* 
r
, * 
key
);

206 
TM_CALLABLE


208 
TMrbåì_gë
 (
TM_ARGDECL
 
rbåì_t
* 
r
, * 
key
);

215 
boﬁ_t


216 
rbåì_c⁄èös
 (
rbåì_t
* 
r
, * 
key
);

223 
TM_CALLABLE


224 
boﬁ_t


225 
TMrbåì_c⁄èös
 (
TM_ARGDECL
 
rbåì_t
* 
r
, * 
key
);

228 
	#TMRBTREE_ALLOC
(Ë
	`TMrbåì_Æloc
(
TM_ARG_ALONE
)

	)

229 
	#TMRBTREE_FREE
(
r
Ë
	`TMrbåì_‰ì
(
TM_ARG
Ñ)

	)

230 
	#TMRBTREE_INSERT
(
r
, 
k
, 
v
Ë
	`TMrbåì_ö£π
(
TM_ARG
Ñ, (*)(k), (*)(v))

	)

231 
	#TMRBTREE_DELETE
(
r
, 
k
Ë
	`TMrbåì_dñëe
(
TM_ARG
Ñ, (*)(k))

	)

232 
	#TMRBTREE_UPDATE
(
r
, 
k
, 
v
Ë
	`TMrbåì_upd©e
(
TM_ARG
Ñ, (*)(k), (*)(v))

	)

233 
	#TMRBTREE_GET
(
r
, 
k
Ë
	`TMrbåì_gë
(
TM_ARG
Ñ, (*)(k))

	)

234 
	#TMRBTREE_CONTAINS
(
r
, 
k
Ë
	`TMrbåì_c⁄èös
(
TM_ARG
Ñ, (*)(k))

	)

237 #ifde‡
__˝lu•lus


	@utils/estm-0.2.4.3/bench/lf-rbtree/types.h

73 #i‚de‡
TYPES_H


74 
	#TYPES_H
 1

	)

77 #ifde‡
__˝lu•lus


82 #ifde‡
SIMULATOR


83 #unde‡
TRUE


84 #unde‡
FALSE


85 #unde‡
boﬁ


89 
	tul⁄g_t
;

92 
FALSE
 = 0,

93 
TRUE
 = 1

96 
	tboﬁ_t
;

99 #ifde‡
__˝lu•lus


	@utils/estm-0.2.4.3/bench/lf-skiplist/intset.c

23 
	~<as£π.h
>

24 
	~<gë›t.h
>

25 
	~<limôs.h
>

26 
	~<±hªad.h
>

27 
	~<sig«l.h
>

28 
	~<°dlib.h
>

29 
	~<°dio.h
>

30 
	~<sys/time.h
>

31 
	~<time.h
>

32 
	~<°döt.h
>

34 
	~<©omic_›s.h
>

36 
	~"°m.h
"

37 
	~"mod_mem.h
"

39 #ifde‡
DEBUG


40 
	#IO_FLUSH
 
	`fÊush
(
NULL
)

	)

50 
	#TX_START
(
ty≥
Ë{ 
sigjmp_buf
 *
_e
 = 
	`°m_gë_ív
(); 
	`sig£tjmp
(*_e, 0); 
	`°m_°¨t
(_e, 0,Åy≥)

	)

51 
	#TX_LOAD
(
addr
Ë
	`°m_lﬂd
((
°m_w‹d_t
 *Ôddr)

	)

52 
	#TX_STORE
(
addr
, 
vÆ
Ë
	`°m_°‹e
((
°m_w‹d_t
 *Ôddr, (°m_w‹d_t)vÆ)

	)

53 
	#TX_END
 
	`°m_commô
(); }

	)

55 
	#MALLOC
(
size
Ë
	`°m_mÆloc
(size)

	)

56 
	#FREE
(
addr
, 
size
Ë
	`°m_‰ì
◊ddr, size)

	)

58 
	#DEFAULT_DURATION
 10000

	)

59 
	#DEFAULT_INITIAL
 256

	)

60 
	#DEFAULT_NB_THREADS
 1

	)

61 
	#DEFAULT_RANGE
 0xFFFF

	)

62 
	#DEFAULT_SEED
 0

	)

63 
	#DEFAULT_UPDATE
 20

	)

65 
	#XSTR
(
s
Ë
	`STR
(s)

	)

66 
	#STR
(
s
Ë#s

	)

68 
	#ATOMIC_CAS_MB
(
a
, 
e
, 
v
Ë(
	`AO_com∑ª_™d_sw≠_fuŒ
((vﬁ©ûê
AO_t
 *)◊), (AO_t)”), (AO_t)(v)))

	)

69 
	#ATOMIC_FETCH_AND_INC_FULL
(
a
Ë(
	`AO_„tch_™d_add1_fuŒ
((vﬁ©ûê
AO_t
 *)◊)))

	)

75 vﬁ©ûê
AO_t
 
	g°›
;

76 
	gglobÆ_£ed
;

83 #ifde‡
TLS


84 
__thªad
 *
	g∫g_£ed
;

86 
±hªad_key_t
 
	g∫g_£ed_key
;

88 
	gÀvñmax
;

90 
	#TRANSACTIONAL
 
d
->
unô_tx


	)

92 
öçå_t
 
	tvÆ_t
;

93 
öçå_t
 
	tÀvñ_t
;

94 
	#VAL_MIN
 
INT_MIN


	)

95 
	#VAL_MAX
 
INT_MAX


	)

98 
	s¶_node
 {

99 
vÆ_t
 
	mvÆ
;

100 
öçå_t
 
	mdñëed
;

101 
	mt›Àvñ
;

102 
¶_node
 **
	m√xt
;

103 } 
	t¶_node_t
;

105 
	s¶_öt£t
 {

106 
¶_node_t
 *
	mhód
;

107 } 
	t¶_öt£t_t
;

109 
ölöe
 
	$ønd_100
()

111 #ifde‡
TLS


112  
	`ønd_r
(
∫g_£ed
) % 100;

114  
	`ønd_r
((*)
	`±hªad_gë•ecific
(
∫g_£ed_key
)) % 100;

116 
	}
}

118 
	$gë_ønd_Àvñ
() {

119 
i
, 
Àvñ
 = 1;

120 
i
 = 0; i < 
Àvñmax
 - 1; i++) {

121 i‡(
	`ønd_100
() < 50)

122 
Àvñ
++;

127  
Àvñ
;

128 
	}
}

130 
	$Êo‹_log_2
(
n
) {

131 
pos
 = 0;

132 i‡(
n
 >1<<16Ë{Ç >>16; 
pos
 += 16; }

133 i‡(
n
 >1<< 8Ë{Ç >>8; 
pos
 += 8; }

134 i‡(
n
 >1<< 4Ë{Ç >>4; 
pos
 += 4; }

135 i‡(
n
 >1<< 2Ë{Ç >>2; 
pos
 += 2; }

136 i‡(
n
 >1<< 1Ë{ 
pos
 += 1; }

137  ((
n
 =0Ë? (-1Ë: 
pos
);

138 
	}
}

143 
¶_node_t
 *
	$¶_√w_sim∂e_node
(
vÆ_t
 
vÆ
, 
t›Àvñ
, 
å™ß˘i⁄Æ
)

145 
¶_node_t
 *
node
;

147 i‡(
å™ß˘i⁄Æ
 > 0 &&Åransactional < 6)

148 
node
 = (
¶_node_t
 *)
	`MALLOC
((sl_node_t));

150 
node
 = (
¶_node_t
 *)
	`mÆloc
((sl_node_t));

151 i‡(
node
 =
NULL
) {

152 
	`≥º‹
("malloc");

153 
	`exô
(1);

156 i‡(
å™ß˘i⁄Æ
 > 0 &&Åransactional < 6)

157 
node
->
√xt
 = (
¶_node_t
 **)
	`MALLOC
(
t›Àvñ
 * (sl_node_t *));

159 
node
->
√xt
 = (
¶_node_t
 **)
	`mÆloc
(
t›Àvñ
 * (sl_node_t *));

160 i‡(
node
->
√xt
 =
NULL
) {

161 
	`≥º‹
("malloc");

162 
	`exô
(1);

165 
node
->
vÆ
 = val;

166 
node
->
t›Àvñ
 =Åoplevel;

167 
node
->
dñëed
 = 0;

169  
node
;

170 
	}
}

176 
¶_node_t
 *
	$¶_√w_node
(
vÆ_t
 
vÆ
, 
¶_node_t
 *
√xt
, 
t›Àvñ
, 
å™ß˘i⁄Æ
)

178 
¶_node_t
 *
node
;

179 
i
;

181 
node
 = 
	`¶_√w_sim∂e_node
(
vÆ
, 
t›Àvñ
, 
å™ß˘i⁄Æ
);

183 
i
 = 0; i < 
Àvñmax
; i++)

184 
node
->
√xt
[
i
] =Çext;

186  
node
;

187 
	}
}

189 
	$¶_dñëe_node
(
¶_node_t
 *
n
)

191 
	`‰ì
(
n
->
√xt
);

192 
	`‰ì
(
n
);

193 
	}
}

195 
¶_öt£t_t
 *
	$¶_£t_√w
()

197 
¶_öt£t_t
 *
£t
;

198 
¶_node_t
 *
mö
, *
max
;

200 i‡((
£t
 = (
¶_öt£t_t
 *)
	`mÆloc
((¶_öt£t_t))Ë=
NULL
) {

201 
	`≥º‹
("malloc");

202 
	`exô
(1);

204 
max
 = 
	`¶_√w_node
(
VAL_MAX
, 
NULL
, 
Àvñmax
, 0);

205 
mö
 = 
	`¶_√w_node
(
VAL_MIN
, 
max
, 
Àvñmax
, 0);

206 
£t
->
hód
 = 
mö
;

207  
£t
;

208 
	}
}

210 
	$¶_£t_dñëe
(
¶_öt£t_t
 *
£t
)

212 
¶_node_t
 *
node
, *
√xt
;

214 
node
 = 
£t
->
hód
;

215 
node
 !
NULL
) {

216 
√xt
 = 
node
->next[0];

217 
	`¶_dñëe_node
(
node
);

218 
node
 = 
√xt
;

220 
	`‰ì
(
£t
);

221 
	}
}

223 
	$¶_£t_size
(
¶_öt£t_t
 *
£t
)

225 
size
 = 0;

226 
¶_node_t
 *
node
;

228 
node
 = 
£t
->
hód
->
√xt
[0];

229 
node
->
√xt
[0] !
NULL
) {

230 i‡(!
node
->
dñëed
)

231 
size
++;

232 
node
 =Çode->
√xt
[0];

235  
size
;

236 
	}
}

	@utils/estm-0.2.4.3/bench/lf-skiplist/lf-sl.c

23 
	~"öt£t.c
"

24 
	#ATOMIC_LOAD_MB
(
a
Ë(
	`AO_lﬂd
((vﬁ©ûê
AO_t
 *)◊)))

	)

25 
	#MAXLEVEL
 32

	)

31 
ölöe
 
	$is_m¨ked
(
uöçå_t
 
i
) {

32  ()(
i
 & (
uöçå_t
)0x01);

33 
	}
}

35 
ölöe
 
uöçå_t
 
	$un£t_m¨k
(
uöçå_t
 
i
) {

36  (
i
 & ~(
uöçå_t
)0x01);

37 
	}
}

39 
ölöe
 
uöçå_t
 
	$£t_m¨k
(
uöçå_t
 
i
) {

40  (
i
 | (
uöçå_t
)0x01);

41 
	}
}

43 
ölöe
 
vÆ_t
 
	$gë_vÆ
(
¶_node_t
 *
n
) {

44  ((
¶_node_t
 *)
	`un£t_m¨k
((
uöçå_t
)
n
))->
vÆ
;

45 
	}
}

47 
	$‰a£r_£¨ch
(
¶_öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
, 
¶_node_t
 **
À·_li°
, sl_node_à**
right_li°
) {

48 
i
;

49 
¶_node_t
 *
À·
, *
À·_√xt
, *
right
, *
right_√xt
;

51 #ifde‡
DEBUG


52 
	`¥ötf
("++> fraser_search\n");

53 
IO_FLUSH
;

56 
ªåy
:

57 
À·
 = 
£t
->
hód
;

58 
i
 = 
Àvñmax
 - 1; i >= 0; i--) {

59 
À·_√xt
 = 
À·
->
√xt
[
i
];

60 i‡(
	`is_m¨ked
((
uöçå_t
)
À·_√xt
))

61 
ªåy
;

63 
right
 = 
À·_√xt
; ;Ñighà
right_√xt
) {

66 
right_√xt
 = 
right
->
√xt
[
i
];

67 i‡(!
	`is_m¨ked
((
uöçå_t
)
right_√xt
))

69 
right
 = (
¶_node_t
*)
	`un£t_m¨k
((
uöçå_t
)
right_√xt
);

71 i‡(
right
->
vÆ
 >= val)

73 
À·
 = 
right
;

74 
À·_√xt
 = 
right_√xt
;

77 i‡((
À·_√xt
 !
right
) &&

78 (!
	`ATOMIC_CAS_MB
(&
À·
->
√xt
[
i
], 
À·_√xt
, 
right
)))

79 
ªåy
;

80 i‡(
À·_li°
 !
NULL
)

81 
À·_li°
[
i
] = 
À·
;

82 i‡(
right_li°
 !
NULL
)

83 
right_li°
[
i
] = 
right
;

86 #ifde‡
DEBUG


87 
	`¥ötf
("++> fraser_searchÉnds\n");

88 
IO_FLUSH
;

90 
	}
}

92 
	$‰a£r_föd
(
¶_öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
) {

93 
¶_node_t
 **
succs
;

94 
ªsu…
;

96 #ifde‡
DEBUG


97 
	`¥ötf
("++> fraser_find\n");

98 
IO_FLUSH
;

101 
succs
 = (
¶_node_t
 **)
	`mÆloc
(
Àvñmax
 * (sl_node_t *));

102 
	`‰a£r_£¨ch
(
£t
, 
vÆ
, 
NULL
, 
succs
);

103 
ªsu…
 = (
succs
[0]->
vÆ
 =vÆ && !succs[0]->
dñëed
);

104 
	`‰ì
(
succs
);

105  
ªsu…
;

106 
	}
}

108 
	$m¨k_node_±rs
(
¶_node_t
 *
n
) {

109 
i
;

110 
¶_node_t
 *
n_√xt
;

112 
i
=
n
->
t›Àvñ
-1; i>=0; i--) {

114 
n_√xt
 = 
n
->
√xt
[
i
];

115 i‡(
	`is_m¨ked
((
uöçå_t
)
n_√xt
))

117 } !
	`ATOMIC_CAS_MB
(&
n
->
√xt
[
i
], 
n_√xt
, 
	`£t_m¨k
((
uöçå_t
)n_next)));

119 
	}
}

121 
	$‰a£r_ªmove
(
¶_öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
) {

122 
¶_node_t
 **
succs
;

123 
ªsu…
;

125 #ifde‡
DEBUG


126 
	`¥ötf
("++> fraser_remove\n");

127 
IO_FLUSH
;

130 
succs
 = (
¶_node_t
 **)
	`mÆloc
(
Àvñmax
 * (sl_node_t *));

131 
	`‰a£r_£¨ch
(
£t
, 
vÆ
, 
NULL
, 
succs
);

132 
ªsu…
 = (
succs
[0]->
vÆ
 == val);

133 i‡(
ªsu…
 == 0)

134 
íd
;

136 i‡(
succs
[0]->
dñëed
) {

137 #ifde‡
DEBUG


138 
	`¥ötf
("++> fraser_removeÉnds\n");

139 
IO_FLUSH
;

141 
ªsu…
 = 0;

142 
íd
;

144 
	`ATOMIC_FETCH_AND_INC_FULL
(&
succs
[0]->
dñëed
);

146 
	`m¨k_node_±rs
(
succs
[0]);

147 
	`‰a£r_£¨ch
(
£t
, 
vÆ
, 
NULL
, NULL);

148 
íd
:

149 
	`‰ì
(
succs
);

150 #ifde‡
DEBUG


151 
	`¥ötf
("++> fraser_removeÉnds\n");

152 
IO_FLUSH
;

155  
ªsu…
;

156 
	}
}

158 
	$‰a£r_ö£π
(
¶_öt£t_t
 *
£t
, 
vÆ_t
 
v
) {

159 
¶_node_t
 *
√w
, *
√w_√xt
, *
¥ed
, *
succ
, **
succs
, **
¥eds
;

160 
i
;

161 
ªsu…
;

163 #ifde‡
DEBUG


164 
	`¥ötf
("++> fraser_insert\n");

165 
IO_FLUSH
;

168 
√w
 = 
	`¶_√w_sim∂e_node
(
v
, 
	`gë_ønd_Àvñ
(), 6);

169 
¥eds
 = (
¶_node_t
 **)
	`mÆloc
(
Àvñmax
 * (sl_node_t *));

170 
succs
 = (
¶_node_t
 **)
	`mÆloc
(
Àvñmax
 * (sl_node_t *));

171 
ªåy
:

172 
	`‰a£r_£¨ch
(
£t
, 
v
, 
¥eds
, 
succs
);

174 i‡(
succs
[0]->
vÆ
 =
v
) {

176 i‡(
succs
[0]->
dñëed
) {

178 
	`m¨k_node_±rs
(
succs
[0]);

179 
ªåy
;

181 
ªsu…
 = 0;

182 
	`¶_dñëe_node
(
√w
);

183 
íd
;

185 
i
 = 0; i < 
√w
->
t›Àvñ
; i++)

186 
√w
->
√xt
[
i
] = 
succs
[i];

188 i‡(!
	`ATOMIC_CAS_MB
(&
¥eds
[0]->
√xt
[0], 
succs
[0], 
√w
))

189 
ªåy
;

190 
i
 = 1; i < 
√w
->
t›Àvñ
; i++) {

192 
¥ed
 = 
¥eds
[
i
];

193 
succ
 = 
succs
[
i
];

195 
√w_√xt
 = 
√w
->
√xt
[
i
];

196 i‡((
√w_√xt
 !
succ
) &&

197 (!
	`ATOMIC_CAS_MB
(&
√w
->
√xt
[
i
], 
	`un£t_m¨k
((
uöçå_t
)
√w_√xt
), 
succ
)))

200 i‡(
succ
->
vÆ
 =
v
)

201 
succ
 = (
¶_node_t
 *)
	`un£t_m¨k
((
uöçå_t
)succ->
√xt
);

203 i‡(
	`ATOMIC_CAS_MB
(&
¥ed
->
√xt
[
i
], 
succ
, 
√w
))

205 
	`‰a£r_£¨ch
(
£t
, 
v
, 
¥eds
, 
succs
);

208 
ªsu…
 = 1;

209 
íd
:

210 
	`‰ì
(
¥eds
);

211 
	`‰ì
(
succs
);

213  
ªsu…
;

214 
	}
}

220 
	$¶_c⁄èös
(
¶_öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
, 
å™ß˘i⁄Æ
)

222 
ªsu…
 = 0;

223 
i
;

224 
¶_node_t
 *
node
, *
√xt
;

225 
vÆ_t
 
v
 = 
VAL_MIN
;

227 #ifde‡
DEBUG


228 
	`¥ötf
("++> sl_c⁄èös(%d)\n", (Ë
vÆ
);

229 
IO_FLUSH
;

232 
å™ß˘i⁄Æ
) {

235 
node
 = 
£t
->
hód
;

236 
i
 = 
node
->
t›Àvñ
-1; i >= 0; i--) {

237 
√xt
 = 
node
->√xt[
i
];

238 
√xt
->
vÆ
 < val) {

239 
node
 = 
√xt
;

240 
√xt
 = 
node
->√xt[
i
];

243 
node
 =Çode->
√xt
[0];

244 
ªsu…
 = (
node
->
vÆ
 == val);

248 
	`TX_START
(
NL
);

249 
node
 = 
£t
->
hód
;

250 
i
 = 
node
->
t›Àvñ
-1; i >= 0; i--) {

251 
√xt
 = (
¶_node_t
 *)
	`TX_LOAD
(&
node
->√xt[
i
]);

252 (
v
 = 
	`TX_LOAD
(&
√xt
->
vÆ
)) < val) {

253 
node
 = 
√xt
;

254 
√xt
 = (
¶_node_t
 *)
	`TX_LOAD
(&
node
->√xt[
i
]);

257 
node
 = (
¶_node_t
 *)
	`TX_LOAD
(&node->
√xt
[0]);

258 
ªsu…
 = (
v
 =
vÆ
);

259 
TX_END
;

265 
	`TX_START
(
EL
);

266 
node
 = 
£t
->
hód
;

267 
i
 = 
node
->
t›Àvñ
-1; i >= 0; i--) {

268 
√xt
 = (
¶_node_t
 *)
	`TX_LOAD
(&
node
->√xt[
i
]);

269 (
v
 = 
	`TX_LOAD
(&
√xt
->
vÆ
)) < val) {

270 
node
 = 
√xt
;

271 
√xt
 = (
¶_node_t
 *)
	`TX_LOAD
(&
node
->√xt[
i
]);

274 
node
 = (
¶_node_t
 *)
	`TX_LOAD
(&node->
√xt
[0]);

275 
ªsu…
 = (
v
 =
vÆ
);

276 
TX_END
;

280 
ªsu…
 = 
	`‰a£r_föd
(
£t
, 
vÆ
);

284 
	`¥ötf
("numbî %d dÿnŸ c‹ª•⁄dÅÿña°icôy.\n", 
å™ß˘i⁄Æ
);

285 
	`exô
(1);

288  
ªsu…
;

289 
	}
}

291 
	$¶_add
(
¶_öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
, 
å™ß˘i⁄Æ
)

293 
ªsu…
 = 0;

294 
i
, 
l
;

295 
¶_node_t
 *
node
, *
√xt
;

296 
¶_node_t
 *
¥eds
[
MAXLEVEL
], *
succs
[MAXLEVEL];

297 
vÆ_t
 
v
;

299 #ifde‡
DEBUG


300 
	`¥ötf
("++> sl_add(%d)\n", (Ë
vÆ
);

301 
IO_FLUSH
;

304 
å™ß˘i⁄Æ
) {

307 
node
 = 
£t
->
hód
;

308 
i
 = 
node
->
t›Àvñ
-1; i >= 0; i--) {

309 
√xt
 = 
node
->√xt[
i
];

310 
√xt
->
vÆ
 < val) {

311 
node
 = 
√xt
;

312 
√xt
 = 
node
->√xt[
i
];

314 
¥eds
[
i
] = 
node
;

315 
succs
[
i
] = 
node
->
√xt
[i];

317 
node
 =Çode->
√xt
[0];

318 i‡((
ªsu…
 = (
node
->
vÆ
 != val)) == 1) {

319 
l
 = 
	`gë_ønd_Àvñ
();

320 
node
 = 
	`¶_√w_sim∂e_node
(
vÆ
, 
l
, 
å™ß˘i⁄Æ
);

321 
i
 = 0; i < 
l
; i++) {

322 
node
->
√xt
[
i
] = 
succs
[i];

323 
¥eds
[
i
]->
√xt
[i] = 
node
;

330 
	`TX_START
(
NL
);

331 
v
 = 
VAL_MIN
;

332 
node
 = 
£t
->
hód
;

333 
i
 = 
node
->
t›Àvñ
-1; i >= 0; i--) {

334 
√xt
 = (
¶_node_t
 *)
	`TX_LOAD
(&
node
->√xt[
i
]);

335 (
v
 = 
	`TX_LOAD
(&
√xt
->
vÆ
)) < val) {

336 
node
 = 
√xt
;

337 
√xt
 = (
¶_node_t
 *)
	`TX_LOAD
(&
node
->√xt[
i
]);

339 
¥eds
[
i
] = 
node
;

340 
succs
[
i
] = 
√xt
;

342 i‡((
ªsu…
 = (
v
 !
vÆ
)) == 1) {

343 
l
 = 
	`gë_ønd_Àvñ
();

344 
node
 = 
	`¶_√w_sim∂e_node
(
vÆ
, 
l
, 
å™ß˘i⁄Æ
);

345 
i
 = 0; i < 
l
; i++) {

346 
node
->
√xt
[
i
] = (
¶_node_t
 *)
	`TX_LOAD
(&
succs
[i]);

347 
	`TX_STORE
(&
¥eds
[
i
]->
√xt
[i], 
node
);

350 
TX_END
;

355 
	`TX_START
(
EL
);

356 
v
 = 
VAL_MIN
;

357 
node
 = 
£t
->
hód
;

358 
i
 = 
node
->
t›Àvñ
-1; i >= 0; i--) {

359 
√xt
 = (
¶_node_t
 *)
	`TX_LOAD
(&
node
->√xt[
i
]);

360 (
v
 = 
	`TX_LOAD
(&
√xt
->
vÆ
)) < val) {

361 
node
 = 
√xt
;

362 
√xt
 = (
¶_node_t
 *)
	`TX_LOAD
(&
node
->√xt[
i
]);

364 
¥eds
[
i
] = 
node
;

365 
succs
[
i
] = 
√xt
;

367 i‡((
ªsu…
 = (
v
 !
vÆ
)) == 1) {

368 
l
 = 
	`gë_ønd_Àvñ
();

369 
node
 = 
	`¶_√w_sim∂e_node
(
vÆ
, 
l
, 
å™ß˘i⁄Æ
);

370 
i
 = 0; i < 
l
; i++) {

371 
node
->
√xt
[
i
] = (
¶_node_t
 *)
	`TX_LOAD
(&
succs
[i]);

372 
	`TX_STORE
(&
¥eds
[
i
]->
√xt
[i], 
node
);

375 
TX_END
;

379 
ªsu…
 = 
	`‰a£r_ö£π
(
£t
, 
vÆ
);

383 
	`¥ötf
("numbî %d dÿnŸ c‹ª•⁄dÅÿña°icôy.\n", 
å™ß˘i⁄Æ
);

384 
	`exô
(1);

388  
ªsu…
;

389 
	}
}

391 
	$¶_ªmove
(
¶_öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
, 
å™ß˘i⁄Æ
)

393 
ªsu…
 = 0;

394 
i
;

395 
¶_node_t
 *
node
, *
√xt
 = 
NULL
;

396 
¶_node_t
 *
¥eds
[
MAXLEVEL
], *
succs
[MAXLEVEL];

397 
vÆ_t
 
v
;

399 #ifde‡
DEBUG


400 
	`¥ötf
("++> sl_ªmove(%d)\n", (Ë
vÆ
);

401 
IO_FLUSH
;

404 
å™ß˘i⁄Æ
) {

407 
node
 = 
£t
->
hód
;

408 
i
 = 
node
->
t›Àvñ
-1; i >= 0; i--) {

409 
√xt
 = 
node
->√xt[
i
];

410 
√xt
->
vÆ
 < val) {

411 
node
 = 
√xt
;

412 
√xt
 = 
node
->√xt[
i
];

414 
¥eds
[
i
] = 
node
;

415 
succs
[
i
] = 
node
->
√xt
[i];

417 i‡((
ªsu…
 = (
√xt
->
vÆ
 == val)) == 1) {

418 
i
 = 0; i < 
£t
->
hód
->
t›Àvñ
; i++)

419 i‡(
succs
[
i
]->
vÆ
 == val)

420 
¥eds
[
i
]->
√xt
[i] = 
succs
[i]->next[i];

427 
	`TX_START
(
NL
);

428 
v
 = 
VAL_MIN
;

429 
node
 = 
£t
->
hód
;

430 
i
 = 
node
->
t›Àvñ
-1; i >= 0; i--) {

431 
√xt
 = (
¶_node_t
 *)
	`TX_LOAD
(&
node
->√xt[
i
]);

432 (
v
 = 
	`TX_LOAD
(&
√xt
->
vÆ
)) < val) {

433 
node
 = 
√xt
;

434 
√xt
 = (
¶_node_t
 *)
	`TX_LOAD
(&
node
->√xt[
i
]);

437 
¥eds
[
i
] = 
node
;

438 
succs
[
i
] = 
√xt
;

440 i‡((
ªsu…
 = (
√xt
->
vÆ
 == val))) {

441 
i
 = 0; i < 
£t
->
hód
->
t›Àvñ
; i++)

442 i‡(
succs
[
i
]->
vÆ
 == val)

443 
	`TX_STORE
(&
¥eds
[
i
]->
√xt
[i], (
¶_node_t
 *)
	`TX_LOAD
(&
succs
[i]->next[i]));

445 
	`FREE
(
√xt
, (
¶_node_t
));

447 
TX_END
;

451 
	`TX_START
(
EL
);

452 
v
 = 
VAL_MIN
;

453 
node
 = 
£t
->
hód
;

454 
i
 = 
node
->
t›Àvñ
-1; i >= 0; i--) {

455 
√xt
 = (
¶_node_t
 *)
	`TX_LOAD
(&
node
->√xt[
i
]);

456 (
v
 = 
	`TX_LOAD
(&
√xt
->
vÆ
)) < val) {

457 
node
 = 
√xt
;

458 
√xt
 = (
¶_node_t
 *)
	`TX_LOAD
(&
node
->√xt[
i
]);

461 
¥eds
[
i
] = 
node
;

462 
succs
[
i
] = 
√xt
;

464 i‡((
ªsu…
 = (
√xt
->
vÆ
 == val))) {

465 
i
 = 0; i < 
£t
->
hód
->
t›Àvñ
; i++)

466 i‡(
succs
[
i
]->
vÆ
 == val)

467 
	`TX_STORE
(&
¥eds
[
i
]->
√xt
[i], (
¶_node_t
 *)
	`TX_LOAD
(&
succs
[i]->next[i]));

470 
	`FREE
(
√xt
, (
¶_node_t
));

473 
TX_END
;

477 
ªsu…
 = 
	`‰a£r_ªmove
(
£t
, 
vÆ
);

481 
	`¥ötf
("numbî %d dÿnŸ c‹ª•⁄dÅÿña°icôy.\n", 
å™ß˘i⁄Æ
);

482 
	`exô
(1);

485  
ªsu…
;

486 
	}
}

493 
	sb¨rõr
 {

494 
±hªad_c⁄d_t
 
	mcom∂ëe
;

495 
±hªad_muãx_t
 
	mmuãx
;

496 
	mcou¡
;

497 
	m¸ossög
;

498 } 
	tb¨rõr_t
;

500 
	$b¨rõr_öô
(
b¨rõr_t
 *
b
, 
n
)

502 
	`±hªad_c⁄d_öô
(&
b
->
com∂ëe
, 
NULL
);

503 
	`±hªad_muãx_öô
(&
b
->
muãx
, 
NULL
);

504 
b
->
cou¡
 = 
n
;

505 
b
->
¸ossög
 = 0;

506 
	}
}

508 
	$b¨rõr_¸oss
(
b¨rõr_t
 *
b
)

510 
	`±hªad_muãx_lock
(&
b
->
muãx
);

512 
b
->
¸ossög
++;

514 i‡(
b
->
¸ossög
 < b->
cou¡
) {

515 
	`±hªad_c⁄d_waô
(&
b
->
com∂ëe
, &b->
muãx
);

517 
	`±hªad_c⁄d_brﬂdˇ°
(&
b
->
com∂ëe
);

519 
b
->
¸ossög
 = 0;

521 
	`±hªad_muãx_u∆ock
(&
b
->
muãx
);

522 
	}
}

534 
ölöe
 
	$ønd_ønge
(
r
) {

535 
m
 = 
RAND_MAX
;

536 
d
;

537 
v
 = 0;

540 
d
 = (
m
 > 
r
 ?Ñ : m);

541 
v
 +1 + ()(
d
 * (()
	`ønd
()/(()(
m
)+1.0)));

542 
r
 -
m
;

543 } 
r
 > 0);

544  
v
;

545 
	}
}

547 
	sthªad_d©a
 {

548 
	mønge
;

549 
	mupd©e
;

550 #i‚de‡
USE_RBTREE


551 
	munô_tx
;

553 
	mnb_add
;

554 
	mnb_ªmove
;

555 
	mnb_c⁄èös
;

556 
	mnb_found
;

557 
	mnb_ab‹ts
;

558 
	mnb_ab‹ts_locked_ªad
;

559 
	mnb_ab‹ts_locked_wrôe
;

560 
	mnb_ab‹ts_vÆid©e_ªad
;

561 
	mnb_ab‹ts_vÆid©e_wrôe
;

562 
	mnb_ab‹ts_vÆid©e_commô
;

563 
	mnb_ab‹ts_övÆid_mem‹y
;

564 
	mnb_ab‹ts_doubÀ_wrôe
;

565 
	mmax_ªåõs
;

566 
	mdiff
;

567 
	m£ed
;

568 
¶_öt£t_t
 *
	m£t
;

569 
b¨rõr_t
 *
	mb¨rõr
;

570 
	mÁûuªs_beˇu£_c⁄ã¡i⁄
;

571 } 
	tthªad_d©a_t
;

574 
	$¥öt_skùli°
(
¶_öt£t_t
 *
£t
) {

575 
¶_node_t
 *
cuº
;

576 
i
, 
j
;

577 
¨r
[
Àvñmax
];

579 
i
=0; i<  
¨r
/árr[0]; i++)árr[i] = 0;

581 
cuº
 = 
£t
->
hód
;

583 
	`¥ötf
("%d", (Ë
cuº
->
vÆ
);

584 
i
=0; i<
cuº
->
t›Àvñ
; i++) {

585 
	`¥ötf
("-*");

587 
¨r
[
cuº
->
t›Àvñ
-1]++;

588 
	`¥ötf
("\n");

589 
cuº
 = cuº->
√xt
[0];

590 } 
cuº
);

591 
j
=0; j<
Àvñmax
; j++)

592 
	`¥ötf
("%dÇode†o‡Àvñ %d\n", 
¨r
[
j
], j);

593 
	}
}

595 *
	$ã°
(*
d©a
)

597 
vÆ
, 
œ°
 = 0;

598 
thªad_d©a_t
 *
d
 = (thªad_d©a_à*)
d©a
;

600 #ifde‡
TLS


601 
∫g_£ed
 = &
d
->
£ed
;

603 
	`±hªad_£t•ecific
(
∫g_£ed_key
, &
d
->
£ed
);

607 
	`°m_öô_thªad
();

609 
	`b¨rõr_¸oss
(
d
->
b¨rõr
);

611 
œ°
 = -1;

612 
°›
 == 0) {

613 
vÆ
 = 
	`ønd_r
(&
d
->
£ed
) % 100;

614 i‡(
vÆ
 < 
d
->
upd©e
) {

615 i‡(
œ°
 < 0) {

617 
vÆ
 = (
	`ønd_r
(&
d
->
£ed
Ë% d->
ønge
) + 1;

618 i‡(
	`¶_add
(
d
->
£t
, 
vÆ
, 
TRANSACTIONAL
)) {

619 
d
->
diff
++;

620 
œ°
 = 
vÆ
;

623 
d
->
nb_add
++;

626 i‡(
	`¶_ªmove
(
d
->
£t
, 
œ°
, 
TRANSACTIONAL
)) {

627 
d
->
diff
--;

629 
œ°
 = -1;

631 
d
->
nb_ªmove
++;

635 
vÆ
 = (
	`ønd_r
(&
d
->
£ed
Ë% d->
ønge
) + 1;

636 i‡(
	`¶_c⁄èös
(
d
->
£t
, 
vÆ
, 
TRANSACTIONAL
))

637 
d
->
nb_found
++;

638 
d
->
nb_c⁄èös
++;

641 
	`°m_gë_°©s
("nb_ab‹ts", &
d
->
nb_ab‹ts
);

642 
	`°m_gë_°©s
("nb_ab‹ts_locked_ªad", &
d
->
nb_ab‹ts_locked_ªad
);

643 
	`°m_gë_°©s
("nb_ab‹ts_locked_wrôe", &
d
->
nb_ab‹ts_locked_wrôe
);

644 
	`°m_gë_°©s
("nb_ab‹ts_vÆid©e_ªad", &
d
->
nb_ab‹ts_vÆid©e_ªad
);

645 
	`°m_gë_°©s
("nb_ab‹ts_vÆid©e_wrôe", &
d
->
nb_ab‹ts_vÆid©e_wrôe
);

646 
	`°m_gë_°©s
("nb_ab‹ts_vÆid©e_commô", &
d
->
nb_ab‹ts_vÆid©e_commô
);

647 
	`°m_gë_°©s
("nb_ab‹ts_övÆid_mem‹y", &
d
->
nb_ab‹ts_övÆid_mem‹y
);

648 
	`°m_gë_°©s
("nb_ab‹ts_doubÀ_wrôe", &
d
->
nb_ab‹ts_doubÀ_wrôe
);

649 
	`°m_gë_°©s
("max_ªåõs", &
d
->
max_ªåõs
);

651 
	`°m_exô_thªad
();

653  
NULL
;

654 
	}
}

656 
	$ˇtchî
(
sig
)

658 
	`¥ötf
("CAUGHT SIGNAL %d\n", 
sig
);

659 
	}
}

661 
	$maö
(
¨gc
, **
¨gv
)

663 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

665 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

666 {"duøti⁄", 
ªquúed_¨gumít
, 
NULL
, 'd'},

667 {"öôül-size", 
ªquúed_¨gumít
, 
NULL
, 'i'},

668 {"num-thªads", 
ªquúed_¨gumít
, 
NULL
, 'n'},

669 {"ønge", 
ªquúed_¨gumít
, 
NULL
, 'r'},

670 {"£ed", 
ªquúed_¨gumít
, 
NULL
, 's'},

671 {"upd©e-øã", 
ªquúed_¨gumít
, 
NULL
, 'u'},

672 {"ña°icôy", 
ªquúed_¨gumít
, 
NULL
, 'x'},

673 {
NULL
, 0, NULL, 0}

676 
¶_öt£t_t
 *
£t
;

677 
i
, 
c
, 
vÆ
, 
size
;

678 *
s
;

679 
ªads
, 
upd©es
, 
ab‹ts
, 
ab‹ts_locked_ªad
, 
ab‹ts_locked_wrôe
,

680 
ab‹ts_vÆid©e_ªad
, 
ab‹ts_vÆid©e_wrôe
, 
ab‹ts_vÆid©e_commô
,

681 
ab‹ts_övÆid_mem‹y
, 
ab‹ts_doubÀ_wrôe
, 
max_ªåõs
, 
Áûuªs_beˇu£_c⁄ã¡i⁄
;

682 
thªad_d©a_t
 *
d©a
;

683 
±hªad_t
 *
thªads
;

684 
±hªad_©å_t
 
©å
;

685 
b¨rõr_t
 
b¨rõr
;

686 
timevÆ
 
°¨t
, 
íd
;

687 
time•ec
 
timeout
;

688 
duøti⁄
 = 
DEFAULT_DURATION
;

689 
öôül
 = 
DEFAULT_INITIAL
;

690 
nb_thªads
 = 
DEFAULT_NB_THREADS
;

691 
ønge
 = 
DEFAULT_RANGE
;

692 
£ed
 = 
DEFAULT_SEED
;

693 
upd©e
 = 
DEFAULT_UPDATE
;

694 #i‚de‡
USE_RBTREE


695 
unô_tx
 = 4;

697 
sig£t_t
 
block_£t
;

700 
i
 = 0;

701 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "hd:i:n:r:s:u:"

702 #i‚de‡
USE_RBTREE


705 , 
l⁄g_›ti⁄s
, &
i
);

707 if(
c
 == -1)

710 if(
c
 =0 && 
l⁄g_›ti⁄s
[
i
].
Êag
 == 0)

711 
c
 = 
l⁄g_›ti⁄s
[
i
].
vÆ
;

713 
c
) {

717 
	`¥ötf
("intset -- STM stressÅest "

718 #ifde‡
USE_RBTREE


731 " Te° duøti⁄ i¿mûli£c⁄d†(0=öföôe, deÁu…=" 
	`XSTR
(
DEFAULT_DURATION
) ")\n"

733 " Numbî o‡ñemít†tÿö£π bef‹êã° (deÁu…=" 
	`XSTR
(
DEFAULT_INITIAL
) ")\n"

735 " Numbî o‡thªad†(deÁu…=" 
	`XSTR
(
DEFAULT_NB_THREADS
) ")\n"

737 " R™gêo‡öãgî vÆue†ö£πed i¿£à(deÁu…=" 
	`XSTR
(
DEFAULT_RANGE
) ")\n"

739 " RNG sìd (0Òime-ba£d, deÁu…=" 
	`XSTR
(
DEFAULT_SEED
) ")\n"

741 " Pî˚¡agêo‡upd©êå™ß˘i⁄†(deÁu…=" 
	`XSTR
(
DEFAULT_UPDATE
) ")\n"

742 #i‚de‡
USE_RBTREE


753 
	`exô
(0);

755 
duøti⁄
 = 
	`©oi
(
›èrg
);

758 
öôül
 = 
	`©oi
(
›èrg
);

761 
nb_thªads
 = 
	`©oi
(
›èrg
);

764 
ønge
 = 
	`©oi
(
›èrg
);

767 
£ed
 = 
	`©oi
(
›èrg
);

770 
upd©e
 = 
	`©oi
(
›èrg
);

772 #i‚de‡
USE_RBTREE


774 
unô_tx
 = 
	`©oi
(
›èrg
);

778 
	`¥ötf
("Use -h or --help for help\n");

779 
	`exô
(0);

781 
	`exô
(1);

785 
	`as£π
(
duøti⁄
 >= 0);

786 
	`as£π
(
öôül
 >= 0);

787 
	`as£π
(
nb_thªads
 > 0);

788 
	`as£π
(
ønge
 > 0 &&Ñ™gê>
öôül
);

789 
	`as£π
(
upd©e
 >= 0 && update <= 100);

791 #ifde‡
USE_RBTREE


792 
	`¥ötf
("SetÅype :Ñed-blackÅree\n");

794 
	`¥ötf
("SetÅype : skipÜist\n");

796 
	`¥ötf
("Duøti⁄ : %d\n", 
duøti⁄
);

797 
	`¥ötf
("Inôü»sizê: %u\n", 
öôül
);

798 
	`¥ötf
("NbÅhªad† : %d\n", 
nb_thªads
);

799 
	`¥ötf
("VÆuêøngê : %d\n", 
ønge
);

800 
	`¥ötf
("Sìd : %d\n", 
£ed
);

801 
	`¥ötf
("Upd©êøã : %d\n", 
upd©e
);

802 #i‚de‡
USE_RBTREE


803 
	`¥ötf
("Eœ°icôy : %d\n", 
unô_tx
);

805 
	`¥ötf
("Type sizes : int=%d/long=%d/ptr=%d/word=%d\n",

809 ()(
°m_w‹d_t
));

811 
timeout
.
tv_£c
 = 
duøti⁄
 / 1000;

812 
timeout
.
tv_n£c
 = (
duøti⁄
 % 1000) * 1000000;

814 i‡((
d©a
 = (
thªad_d©a_t
 *)
	`mÆloc
(
nb_thªads
 * —hªad_d©a_t))Ë=
NULL
) {

815 
	`≥º‹
("malloc");

816 
	`exô
(1);

818 i‡((
thªads
 = (
±hªad_t
 *)
	`mÆloc
(
nb_thªads
 * ’thªad_t))Ë=
NULL
) {

819 
	`≥º‹
("malloc");

820 
	`exô
(1);

823 i‡(
£ed
 == 0)

824 
	`§™d
(()
	`time
(0));

826 
	`§™d
(
£ed
);

828 
Àvñmax
 = 
	`Êo‹_log_2
((Ë
öôül
);

829 
£t
 = 
	`¶_£t_√w
();

830 
°›
 = 0;

832 
globÆ_£ed
 = 
	`ønd
();

833 #ifde‡
TLS


834 
∫g_£ed
 = &
globÆ_£ed
;

836 i‡(
	`±hªad_key_¸óã
(&
∫g_£ed_key
, 
NULL
) != 0) {

837 
	`Ârötf
(
°dîr
, "Error creatingÅhreadÜocal\n");

838 
	`exô
(1);

840 
	`±hªad_£t•ecific
(
∫g_£ed_key
, &
globÆ_£ed
);

844 
	`¥ötf
("Initializing STM\n");

845 
	`°m_öô
();

846 
	`mod_mem_öô
();

848 i‡(
	`°m_gë_∑ømëî
("compûe_Êags", &
s
))

849 
	`¥ötf
("STM fœg† : %s\n", 
s
);

852 
	`¥ötf
("Addög %dÉ¡rõ†tÿ£t\n", 
öôül
);

853 
i
 = 0;

854 
i
 < 
öôül
) {

856 
vÆ
 = 
	`ønd_ønge
(
ønge
);

857 i‡(
	`¶_add
(
£t
, 
vÆ
, 0))

858 
i
++;

860 
size
 = 
	`¶_£t_size
(
£t
);

861 
	`¥ötf
("Së sizê : %d\n", 
size
);

862 
	`¥ötf
("Levñ max : %d\n", 
Àvñmax
);

865 
	`b¨rõr_öô
(&
b¨rõr
, 
nb_thªads
 + 1);

866 
	`±hªad_©å_öô
(&
©å
);

867 
	`±hªad_©å_£tdëach°©e
(&
©å
, 
PTHREAD_CREATE_JOINABLE
);

868 
i
 = 0; i < 
nb_thªads
; i++) {

869 
	`¥ötf
("Cª©ögÅhªad %d\n", 
i
);

870 
d©a
[
i
].
ønge
 =Ñange;

871 
d©a
[
i
].
upd©e
 = update;

872 #i‚de‡
USE_RBTREE


873 
d©a
[
i
].
unô_tx
 = unit_tx;

875 
d©a
[
i
].
nb_add
 = 0;

876 
d©a
[
i
].
nb_ªmove
 = 0;

877 
d©a
[
i
].
nb_c⁄èös
 = 0;

878 
d©a
[
i
].
nb_found
 = 0;

879 
d©a
[
i
].
nb_ab‹ts
 = 0;

880 
d©a
[
i
].
nb_ab‹ts_locked_ªad
 = 0;

881 
d©a
[
i
].
nb_ab‹ts_locked_wrôe
 = 0;

882 
d©a
[
i
].
nb_ab‹ts_vÆid©e_ªad
 = 0;

883 
d©a
[
i
].
nb_ab‹ts_vÆid©e_wrôe
 = 0;

884 
d©a
[
i
].
nb_ab‹ts_vÆid©e_commô
 = 0;

885 
d©a
[
i
].
nb_ab‹ts_övÆid_mem‹y
 = 0;

886 
d©a
[
i
].
nb_ab‹ts_doubÀ_wrôe
 = 0;

887 
d©a
[
i
].
max_ªåõs
 = 0;

888 
d©a
[
i
].
diff
 = 0;

889 
d©a
[
i
].
£ed
 = 
	`ønd
();

890 
d©a
[
i
].
£t
 = set;

891 
d©a
[
i
].
b¨rõr
 = &barrier;

892 
d©a
[
i
].
Áûuªs_beˇu£_c⁄ã¡i⁄
 = 0;

893 i‡(
	`±hªad_¸óã
(&
thªads
[
i
], &
©å
, 
ã°
, (*)(&
d©a
[i])) != 0) {

894 
	`Ârötf
(
°dîr
, "Error creatingÅhread\n");

895 
	`exô
(1);

898 
	`±hªad_©å_de°roy
(&
©å
);

901 i‡(
	`sig«l
(
SIGHUP
, 
ˇtchî
Ë=
SIG_ERR
 ||

903 
	`sig«l
(
SIGTERM
, 
ˇtchî
Ë=
SIG_ERR
) {

904 
	`≥º‹
("signal");

905 
	`exô
(1);

909 
	`b¨rõr_¸oss
(&
b¨rõr
);

911 
	`¥ötf
("STARTING...\n");

912 
	`gëtimeofday
(&
°¨t
, 
NULL
);

913 i‡(
duøti⁄
 > 0) {

914 
	`«no¶ìp
(&
timeout
, 
NULL
);

916 
	`sigem±y£t
(&
block_£t
);

917 
	`sigsu•íd
(&
block_£t
);

919 
	`AO_°‹e_fuŒ
(&
°›
, 1);

920 
	`gëtimeofday
(&
íd
, 
NULL
);

921 
	`¥ötf
("STOPPING...\n");

924 
i
 = 0; i < 
nb_thªads
; i++) {

925 i‡(
	`±hªad_joö
(
thªads
[
i
], 
NULL
) != 0) {

926 
	`Ârötf
(
°dîr
, "Error waiting forÅhread completion\n");

927 
	`exô
(1);

931 
duøti⁄
 = (
íd
.
tv_£c
 * 1000 +Énd.
tv_u£c
 / 1000Ë- (
°¨t
.tv_sec * 1000 + start.tv_usec / 1000);

932 
ab‹ts
 = 0;

933 
ab‹ts_locked_ªad
 = 0;

934 
ab‹ts_locked_wrôe
 = 0;

935 
ab‹ts_vÆid©e_ªad
 = 0;

936 
ab‹ts_vÆid©e_wrôe
 = 0;

937 
ab‹ts_vÆid©e_commô
 = 0;

938 
ab‹ts_övÆid_mem‹y
 = 0;

939 
ab‹ts_doubÀ_wrôe
 = 0;

940 
Áûuªs_beˇu£_c⁄ã¡i⁄
 = 0;

941 
ªads
 = 0;

942 
upd©es
 = 0;

943 
max_ªåõs
 = 0;

944 
i
 = 0; i < 
nb_thªads
; i++) {

945 
	`¥ötf
("Thªad %d\n", 
i
);

946 
	`¥ötf
(" #add : %lu\n", 
d©a
[
i
].
nb_add
);

947 
	`¥ötf
(" #ªmovê : %lu\n", 
d©a
[
i
].
nb_ªmove
);

948 
	`¥ötf
(" #c⁄èö† : %lu\n", 
d©a
[
i
].
nb_c⁄èös
);

949 
	`¥ötf
(" #found : %lu\n", 
d©a
[
i
].
nb_found
);

950 
	`¥ötf
(" #dif‡ : %d\n", 
d©a
[
i
].
diff
);

951 
	`¥ötf
(" #ab‹t† : %lu\n", 
d©a
[
i
].
nb_ab‹ts
);

952 
	`¥ötf
(" #lock-∏ : %lu\n", 
d©a
[
i
].
nb_ab‹ts_locked_ªad
);

953 
	`¥ötf
(" #lock-w : %lu\n", 
d©a
[
i
].
nb_ab‹ts_locked_wrôe
);

954 
	`¥ötf
(" #vÆ-∏ : %lu\n", 
d©a
[
i
].
nb_ab‹ts_vÆid©e_ªad
);

955 
	`¥ötf
(" #vÆ-w : %lu\n", 
d©a
[
i
].
nb_ab‹ts_vÆid©e_wrôe
);

956 
	`¥ötf
(" #vÆ-¯ : %lu\n", 
d©a
[
i
].
nb_ab‹ts_vÆid©e_commô
);

957 
	`¥ötf
(" #öv-mem : %lu\n", 
d©a
[
i
].
nb_ab‹ts_övÆid_mem‹y
);

958 
	`¥ötf
(" #dup-w : %lu\n", 
d©a
[
i
].
nb_ab‹ts_doubÀ_wrôe
);

959 
	`¥ötf
(" #Áûuª†: %lu\n", 
d©a
[
i
].
Áûuªs_beˇu£_c⁄ã¡i⁄
);

960 
	`¥ötf
(" MaxÑërõ†: %lu\n", 
d©a
[
i
].
max_ªåõs
);

961 
ab‹ts
 +
d©a
[
i
].
nb_ab‹ts
;

962 
ab‹ts_locked_ªad
 +
d©a
[
i
].
nb_ab‹ts_locked_ªad
;

963 
ab‹ts_locked_wrôe
 +
d©a
[
i
].
nb_ab‹ts_locked_wrôe
;

964 
ab‹ts_vÆid©e_ªad
 +
d©a
[
i
].
nb_ab‹ts_vÆid©e_ªad
;

965 
ab‹ts_vÆid©e_wrôe
 +
d©a
[
i
].
nb_ab‹ts_vÆid©e_wrôe
;

966 
ab‹ts_vÆid©e_commô
 +
d©a
[
i
].
nb_ab‹ts_vÆid©e_commô
;

967 
ab‹ts_övÆid_mem‹y
 +
d©a
[
i
].
nb_ab‹ts_övÆid_mem‹y
;

968 
ab‹ts_doubÀ_wrôe
 +
d©a
[
i
].
nb_ab‹ts_doubÀ_wrôe
;

969 
Áûuªs_beˇu£_c⁄ã¡i⁄
 +
d©a
[
i
].failures_because_contention;

970 
ªads
 +
d©a
[
i
].
nb_c⁄èös
;

971 
upd©es
 +(
d©a
[
i
].
nb_add
 + d©a[i].
nb_ªmove
);

972 
size
 +
d©a
[
i
].
diff
;

973 i‡(
max_ªåõs
 < 
d©a
[
i
].max_retries)

974 
max_ªåõs
 = 
d©a
[
i
].max_retries;

976 
	`¥ötf
("Së sizê : %d (ex≥˘ed: %d)\n", 
	`¶_£t_size
(
£t
), 
size
);

977 
	`¥ötf
("Duøti⁄ : %d (ms)\n", 
duøti⁄
);

978 
	`¥ötf
("#tx† : %lu (%‡/ s)\n", 
ªads
 + 
upd©es
, (ªad†+ upd©esË* 1000.0 / 
duøti⁄
);

979 
	`¥ötf
("#ªadÅx† : %lu (%‡/ s)\n", 
ªads
,Ñód†* 1000.0 / 
duøti⁄
);

980 
	`¥ötf
("#upd©êtx† : %lu (%‡/ s)\n", 
upd©es
, upd©e†* 1000.0 / 
duøti⁄
);

981 
	`¥ötf
("#ab‹t† : %lu (%‡/ s)\n", 
ab‹ts
,áb‹t†* 1000.0 / 
duøti⁄
);

982 
	`¥ötf
(" #lock-∏ : %lu (%‡/ s)\n", 
ab‹ts_locked_ªad
,áb‹ts_locked_ªad * 1000.0 / 
duøti⁄
);

983 
	`¥ötf
(" #lock-w : %lu (%‡/ s)\n", 
ab‹ts_locked_wrôe
,áb‹ts_locked_wrôê* 1000.0 / 
duøti⁄
);

984 
	`¥ötf
(" #vÆ-∏ : %lu (%‡/ s)\n", 
ab‹ts_vÆid©e_ªad
,áb‹ts_vÆid©e_ªad * 1000.0 / 
duøti⁄
);

985 
	`¥ötf
(" #vÆ-w : %lu (%‡/ s)\n", 
ab‹ts_vÆid©e_wrôe
,áb‹ts_vÆid©e_wrôê* 1000.0 / 
duøti⁄
);

986 
	`¥ötf
(" #vÆ-¯ : %lu (%‡/ s)\n", 
ab‹ts_vÆid©e_commô
,áb‹ts_vÆid©e_commô * 1000.0 / 
duøti⁄
);

987 
	`¥ötf
(" #öv-mem : %lu (%‡/ s)\n", 
ab‹ts_övÆid_mem‹y
,áb‹ts_övÆid_mem‹y * 1000.0 / 
duøti⁄
);

988 
	`¥ötf
(" #dup-w : %lu (%‡/ s)\n", 
ab‹ts_doubÀ_wrôe
,áb‹ts_doubÀ_wrôê* 1000.0 / 
duøti⁄
);

989 
	`¥ötf
(" #Áûuª† : %lu\n", 
Áûuªs_beˇu£_c⁄ã¡i⁄
);

990 
	`¥ötf
("MaxÑërõ† : %lu\n", 
max_ªåõs
);

996 
	`¶_£t_dñëe
(
£t
);

999 
	`°m_exô
();

1001 #i‚de‡
TLS


1002 
	`±hªad_key_dñëe
(
∫g_£ed_key
);

1005 
	`‰ì
(
thªads
);

1006 
	`‰ì
(
d©a
);

1009 
	}
}

	@utils/estm-0.2.4.3/bench/lf-skiplist/lf-sl.h

15 
	$is_m¨ked_ªf
(
i
) {

17  (Ë(
i
 &
LONG_MIN
+1);

18 
	}
}

20 
	$un£t_m¨k
(
i
) {

21 
i
 &
LONG_MAX
-1;

22  
i
;

23 
	}
}

25 
	$£t_m¨k
(
i
) {

26 
i
 = 
	`un£t_m¨k
(i);

27 
i
 += 1;

28  
i
;

29 
	}
}

31 
	$gë_unm¨ked_ªf
(
w
) {

32  
	`un£t_m¨k
(
w
);

33 
	}
}

35 
	$gë_m¨ked_ªf
(
w
) {

36  
	`£t_m¨k
(
w
);

37 
	}
}

39 
node_t
 *
	$h¨ris_£¨ch
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
, 
node_t
 **
À·_node
) {

40 
node_t
 *
À·_node_√xt
, *
right_node
;

41 
À·_node_√xt
 = 
£t
->
hód
;

43 
£¨ch_agaö
:

45 
node_t
 *
t
 = 
£t
->
hód
;

46 
node_t
 *
t_√xt
 = 
£t
->
hód
->
√xt
;

50 i‡(!
	`is_m¨ked_ªf
((Ë
t_√xt
)) {

51 (*
À·_node
Ë
t
;

52 
À·_node_√xt
 = 
t_√xt
;

54 
t
 = (
node_t
 *Ë
	`gë_unm¨ked_ªf
((Ë
t_√xt
);

55 i‡(!
t
->
√xt
) ;

56 
t_√xt
 = 
t
->
√xt
;

57 } 
	`is_m¨ked_ªf
((Ë
t_√xt
Ë|| (
t
->
vÆ
 < val));

58 
right_node
 = 
t
;

61 i‡(
À·_node_√xt
 =
right_node
) {

62 i‡(
right_node
->
√xt
 && 
	`is_m¨ked_ªf
(()Ñight_node->next))

63 
£¨ch_agaö
;

64  
right_node
;

68 i‡(
	`ATOMIC_CAS_MB
(&(*
À·_node
)->
√xt
,

69 
À·_node_√xt
,

70 
right_node
)) {

71 i‡(
right_node
->
√xt
 && 
	`is_m¨ked_ªf
(()Ñight_node->next))

72 
£¨ch_agaö
;

73  
right_node
;

77 
	}
}

79 
	$h¨ris_föd
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
) {

80 
node_t
 *
right_node
, *
À·_node
;

81 
À·_node
 = 
£t
->
hód
;

83 
right_node
 = 
	`h¨ris_£¨ch
(
£t
, 
vÆ
, &
À·_node
);

84 i‡((!
right_node
->
√xt
Ë||Ñight_node->
vÆ
 != val)

88 
	}
}

90 
	$h¨ris_ö£π
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
) {

91 
node_t
 *
√wnode
, *
right_node
, *
À·_node
;

92 
À·_node
 = 
£t
->
hód
;

95 
right_node
 = 
	`h¨ris_£¨ch
(
£t
, 
vÆ
, &
À·_node
);

96 i‡(
right_node
->
vÆ
 == val)

98 
√wnode
 = 
	`√w_node
(
vÆ
, 
right_node
, 0);

100 
	`AO_n›_fuŒ
();

101 i‡(
	`ATOMIC_CAS_MB
(&
À·_node
->
√xt
, 
right_node
, 
√wnode
))

104 
	}
}

106 
	$h¨ris_dñëe
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
) {

107 
node_t
 *
right_node
, *
right_node_√xt
, *
À·_node
;

108 
À·_node
 = 
£t
->
hód
;

111 
right_node
 = 
	`h¨ris_£¨ch
(
£t
, 
vÆ
, &
À·_node
);

112 i‡(
right_node
->
vÆ
 != val)

114 
right_node_√xt
 = 
right_node
->
√xt
;

115 i‡(!
	`is_m¨ked_ªf
((Ë
right_node_√xt
))

116 i‡(
	`ATOMIC_CAS_MB
(&
right_node
->
√xt
,

117 
right_node_√xt
,

118 
	`gë_m¨ked_ªf
((Ë
right_node_√xt
)))

121 i‡(!
	`ATOMIC_CAS_MB
(&
À·_node
->
√xt
, 
right_node
, 
right_node_√xt
))

122 
right_node
 = 
	`h¨ris_£¨ch
(
£t
,Ñight_node->
vÆ
, &
À·_node
);

124 
	}
}

130 
¶_node_t
 **
	$‰a£r_£¨ch
(
¶_öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
, 
¶_node_t
 ***
À·_li°
) {

131 
i
;

132 
¶_node_t
 *
À·
, *
À·_√xt
, *
right
, *
right_√xt
, **
right_li°
;

134 *
À·_li°
 = (
¶_node_t
 **)
	`mÆloc
((
Àvñmax
+1) * (sl_node_t));

135 
right_li°
 = (
¶_node_t
 **)
	`mÆloc
((
Àvñmax
+1) * (sl_node_t));

137 #ifde‡
DEBUG


138 
	`¥ötf
("++> fraser_search\n");

139 
IO_FLUSH
;

143 
ªåy
:

144 
À·
 = 
£t
->
hód
;

145 
i
=
À·
->
t›Àvñ
-1; i>=0; i--){

146 
À·_√xt
 = 
À·
->
√xt
[
i
];

147 i‡(
	`is_m¨ked_ªf
((Ë
À·_√xt
)Ë
ªåy
;

149 
right
 = 
À·_√xt
; ;Ñighà
right_√xt
) {

152 
right_√xt
 = 
right
->
√xt
[
i
];

153 i‡(!
	`is_m¨ked_ªf
((Ë
right_√xt
)) ;

154 
right
 = (
¶_node_t
*Ë
	`un£t_m¨k
((Ë
right_√xt
);

156 i‡(
right
->
vÆ
 >= val) ;

157 
À·
 = 
right
;

158 
À·_√xt
 = 
right_√xt
;

162 i‡((
À·_√xt
 !
right
) &&

163 (!
	`ATOMIC_CAS_MB
(&
À·
->
√xt
[
i
], 
À·_√xt
, 
right
)))

164 
ªåy
;

165 (*
À·_li°
)[
i
] = 
À·
;

166 
right_li°
[
i
] = 
right
;

169  
right_li°
;

170 
	}
}

172 
	$‰a£r_föd
(
¶_öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
) {

173 
¶_node_t
 **
À·_li°
, **
succs
;

175 #ifde‡
DEBUG


176 
	`¥ötf
("++> fraser_find\n");

177 
IO_FLUSH
;

180 
succs
 = 
	`‰a£r_£¨ch
(
£t
, 
vÆ
, &
À·_li°
);

181  (
succs
[0]->
vÆ
 == val);

182 
	}
}

187 
	$m¨k_node_±rs
(
¶_node_t
 *
n
) {

188 
i
;

189 
¶_node_t
 *
n_√xt
;

191 
i
=
n
->
t›Àvñ
-1; i>=0; i--) {

193 
n_√xt
 = 
n
->
√xt
[
i
];

194 i‡(
	`is_m¨ked_ªf
((Ë
n_√xt
)) ;

195 } !
	`ATOMIC_CAS_MB
(&
n
->
√xt
[
i
], 
n_√xt
, 
	`£t_m¨k
(()Ç_next)));

197 
	`AO_n›_fuŒ
();

199 
	}
}

201 
	$‰a£r_ªmove
(
¶_öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
) {

202 
¶_node_t
 **
À·_li°
, **
succs
;

204 #ifde‡
DEBUG


205 
	`¥ötf
("++> fraser_remove\n");

206 
IO_FLUSH
;

210 
succs
 = 
	`‰a£r_£¨ch
(
£t
, 
vÆ
, &
À·_li°
);

211 i‡(
succs
[0]->
vÆ
 != val)  0;

215 i‡(
	`is_m¨ked_ªf
(()
succs
[0]))  0;

216 
	`AO_n›_fuŒ
();

217 } !
	`ATOMIC_CAS_MB
(&
succs
[0]->
vÆ
, vÆ, 
NULL
));

219 
	`AO_n›_fuŒ
();

221 
	`m¨k_node_±rs
(
succs
[0]);

222 
	`‰a£r_£¨ch
(
£t
, 
vÆ
, &
À·_li°
);

223 
	`AO_n›_fuŒ
();

226 
	}
}

228 
	$‰a£r_upd©e
(
¶_öt£t_t
 *
£t
, 
vÆ_t
 
v1
, vÆ_à
v2
) {

229 
¶_node_t
 *
√w
, *
√w_√xt
, *
¥ed
, *
succ
, **
succs
, **
¥eds
;

230 
vÆ_t
 
ﬁd_v
;

231 
i
;

233 #ifde‡
DEBUG


234 
	`¥ötf
("++> fraser_update\n");

235 
IO_FLUSH
;

238 
succs
 = 
	`‰a£r_£¨ch
(
£t
, 
v1
, &
¥eds
);

239 
ªåy
:

241 i‡(
succs
[0]->
vÆ
 =
v1
) {

243 i‡(!(
ﬁd_v
 = 
succs
[0]->
vÆ
)) {

244 
	`m¨k_node_±rs
(
succs
[0]);

245 
	`AO_n›_fuŒ
();

246 
ªåy
;

248 } !
	`ATOMIC_CAS_MB
(&
succs
[0]->
vÆ
, 
ﬁd_v
, 
v2
));

251 
√w
 = 
	`¶_√w_node
(
v2
, 
NULL
, 
	`gë_ønd_Àvñ
(), 0);

252 
i
=0; i<
√w
->
t›Àvñ
; i++Ë√w->
√xt
[i] = 
succs
[i];

254 
	`AO_n›_fuŒ
();

257 i‡(!
	`ATOMIC_CAS_MB
(&
¥eds
[0]->
√xt
[0], 
succs
[0], 
√w
))

258 
ªåy
;

259 
i
=1; i < 
√w
->
t›Àvñ
; i++)

261 
¥ed
 = 
¥eds
[
i
];

262 
succ
 = 
succs
[
i
];

264 
√w_√xt
 = 
√w
->
√xt
[
i
];

265 
	`AO_n›_fuŒ
();

266 i‡((
√w_√xt
 !
succ
) &&

267 (!
	`ATOMIC_CAS_MB
(&
√w
->
√xt
[
i
], 
	`gë_unm¨ked_ªf
((Ë
√w_√xt
), 
succ
)))

270 i‡(
succ
->
vÆ
 =
v1
) {

272 
	`AO_n›_fuŒ
();

273 
succ
 = (
¶_node_t
 *Ë
	`gë_unm¨ked_ªf
((Ësucc->
√xt
);

275 
	`AO_n›_fuŒ
();

277 i‡(
	`ATOMIC_CAS_MB
(&
¥ed
->
√xt
[
i
], 
succ
, 
√w
)) ;

279 
	`AO_n›_fuŒ
();

280 
succs
 = 
	`‰a£r_£¨ch
(
£t
, 
v1
, &
¥eds
);

281 
	`AO_n›_fuŒ
();

284 
	}
}

286 
	$‰a£r_ö£π
(
¶_öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
) {

287 
¶_node_t
 *
√w
, *
√w_√xt
, *
¥ed
, *
succ
, **
succs
, **
¥eds
;

288 
i
, 
Àvñ
;

290 #ifde‡
DEBUG


291 
	`¥ötf
("++> fraser_insert\n");

292 
IO_FLUSH
;

295 i‡((
¥eds
 = (
¶_node_t
 **)
	`mÆloc
(
Àvñmax
 * (¶_node_t))Ë=
NULL
 ||

296 (
succs
 = (
¶_node_t
 **)
	`mÆloc
(
Àvñmax
 * (¶_node_t))Ë=
NULL
) {

297 
	`≥º‹
("malloc");

298 
	`exô
(1);

302 
succs
 = 
	`‰a£r_£¨ch
(
£t
, 
vÆ
, &
¥eds
);

303 
ªåy
:

305 i‡(
succs
[0]->
vÆ
 == val)  0;

306 
Àvñ
 = 
	`gë_ønd_Àvñ
();

307 
√w
 = 
	`¶_√w_node
(
vÆ
, 
NULL
, 
Àvñ
, 0);

309 
	`AO_n›_fuŒ
();

310 
i
=0; i<
√w
->
t›Àvñ
; i++Ë√w->
√xt
[i] = 
succs
[i];

311 
	`AO_n›_fuŒ
();

314 i‡(!
	`ATOMIC_CAS_MB
(&
¥eds
[0]->
√xt
[0], 
succs
[0], 
√w
))

315 
ªåy
;

316 
i
=1; i < 
√w
->
t›Àvñ
; i++)

318 
¥ed
 = 
¥eds
[
i
];

319 
succ
 = 
succs
[
i
];

321 
√w_√xt
 = 
√w
->
√xt
[
i
];

322 
	`AO_n›_fuŒ
();

323 i‡((
√w_√xt
 !
succ
) &&

324 (!
	`ATOMIC_CAS_MB
(&
√w
->
√xt
[
i
], 
	`gë_unm¨ked_ªf
((Ë
√w_√xt
), 
succ
)))

327 i‡(
succ
->
vÆ
 == val) {

329 
	`AO_n›_fuŒ
();

330 
succ
 = (
¶_node_t
 *Ë
	`gë_unm¨ked_ªf
((Ësucc->
√xt
);

331 
	`AO_n›_fuŒ
();

334 i‡(
	`ATOMIC_CAS_MB
(&
¥ed
->
√xt
[
i
], 
succ
, 
√w
)) ;

336 
	`AO_n›_fuŒ
();

337 
succs
 = 
	`‰a£r_£¨ch
(
£t
, 
vÆ
, &
¥eds
);

338 
	`AO_n›_fuŒ
();

342 
	}
}

350 
	$ªc_£¨ch
(
°m_w‹d_t
 *
°¨t_ts
, 
node_t
 *
¥ev
,Çode_à*
√xt
,

351 
vÆ_t
 
vÆ
, vÆ_à*
v
) {

352 
°m_w‹d_t
 
ts
, 
cuº_ts
;

353 
node_t
 *
cuº
;

354 
ªsu…
=0;

356 *
v
 = 
	`UNIT_LOAD
(&
√xt
->
vÆ
, &
ts
);

358 i‡(
ts
 > *
°¨t_ts
 || !
√xt
->next) {

359  (Ë
ts
;

363 i‡(*
v
 >
vÆ
)

367 
cuº
 = 
√xt
;

368 
√xt
 = (
node_t
 *)
	`UNIT_LOAD
(&√xt->√xt, &
ts
);

369 i‡(
ts
 > *
°¨t_ts
) {

371 
	`UNIT_LOAD
(&
cuº
->
vÆ
, &
cuº_ts
);

372 i‡(
cuº_ts
 > *
°¨t_ts
) {

373  (Ë
cuº_ts
;

375 *
°¨t_ts
 = 
ts
;

379 
ª°¨t5
:

380 i‡(!(
ªsu…
 = 
	`ªc_£¨ch
(
°¨t_ts
, 
cuº
, 
√xt
, 
vÆ
, 
v
)))  0;

382 
	`UNIT_LOAD
(&
√xt
, &
ts
);

384 i‡(
ts
 > *
°¨t_ts
)  1;

386 *
°¨t_ts
 = 
ªsu…
;

387 
ª°¨t5
;

390 
	}
}

392 
	$ªc_£¨ch2
(
°m_w‹d_t
 *
°¨t_ts
, 
node_t
 **
¥ev
,Çode_à**
√xt
,

393 
vÆ_t
 
vÆ
, vÆ_à*
v
) {

394 
°m_w‹d_t
 
ts
, 
cuº_ts
;

395 
ªsu…
=0;

397 *
v
 = 
	`UNIT_LOAD
(&(*
√xt
)->
vÆ
, &
ts
);

399 i‡(
ts
 > *
°¨t_ts
 || !(*
√xt
)->next)

400  (Ë
ts
;

403 i‡(*
v
 >
vÆ
)

407 *
¥ev
 = *
√xt
;

408 *
√xt
 = (
node_t
 *)
	`UNIT_LOAD
(&(*√xt)->√xt, &
ts
);

409 i‡(
ts
 > *
°¨t_ts
) {

411 
	`UNIT_LOAD
(&(*
¥ev
)->
vÆ
, &
cuº_ts
);

412 i‡(
cuº_ts
 > *
°¨t_ts
) {

413  (Ë
cuº_ts
;

415 *
°¨t_ts
 = 
ts
;

419 
ª°¨t4
:

420 i‡(!(
ªsu…
 = 
	`ªc_£¨ch2
(
°¨t_ts
, 
¥ev
, 
√xt
, 
vÆ
, 
v
)))  0;

424 i‡(
ªsu…
 > *
°¨t_ts
)  1;

426 *
°¨t_ts
 = 
ªsu…
;

427 
ª°¨t4
;

430 
	}
}

436 
	$£t_c⁄èös
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
, 
å™ß˘i⁄Æ
)

438 
ªsu…
;

439 
node_t
 *
¥ev
, *
√xt
;

440 
vÆ_t
 
v
;

441 
°m_w‹d_t
 
ts
, 
°¨t_ts
, 
¥ev_ts
;

443 #ifde‡
DEBUG


444 
	`¥ötf
("++> së_c⁄èös(%d)\n", (Ë
vÆ
);

445 
IO_FLUSH
;

448 
å™ß˘i⁄Æ
) {

450 
¥ev
 = 
£t
->
hód
;

451 
√xt
 = 
¥ev
->next;

452 
√xt
->
vÆ
 < val) {

453 
¥ev
 = 
√xt
;

454 
√xt
 = 
¥ev
->next;

456 
ªsu…
 = (
√xt
->
vÆ
 == val);

460 
START_RO
;

461 
¥ev
 = (
node_t
 *)
	`LOAD
(&
£t
->
hód
);

462 
√xt
 = (
node_t
 *)
	`LOAD
(&
¥ev
->next);

464 
v
 = 
	`LOAD
(&
√xt
->
vÆ
);

465 i‡(
v
 >
vÆ
)

467 
¥ev
 = 
√xt
;

468 
√xt
 = (
node_t
 *)
	`LOAD
(&
¥ev
->next);

470 
ªsu…
 = (
v
 =
vÆ
);

471 
COMMIT
;

477 
ª°¨t
:

478 
°¨t_ts
 = 
	`°m_gë_˛ock
();

480 
¥ev
 = (
node_t
 *)
	`UNIT_LOAD
(&
£t
->
hód
, &
ts
);

481 
√xt
 = (
node_t
 *)
	`UNIT_LOAD
(&
¥ev
->√xt, &
ts
);

482 i‡(
ts
 > 
°¨t_ts
)

483 
°¨t_ts
 = 
ts
;

485 
v
 = 
	`UNIT_LOAD
(&
√xt
->
vÆ
, &
ts
);

486 i‡(
ts
 > 
°¨t_ts
) {

488 
ª°¨t
;

490 i‡(
v
 >
vÆ
)

492 
¥ev
 = 
√xt
;

493 
√xt
 = (
node_t
 *)
	`UNIT_LOAD
(&
¥ev
->√xt, &
ts
);

494 i‡(
ts
 > 
°¨t_ts
) {

497 
	`UNIT_LOAD
(&
¥ev
->
vÆ
, &
¥ev_ts
);

498 i‡(
¥ev_ts
 > 
°¨t_ts
) {

500 
ª°¨t
;

502 
°¨t_ts
 = 
ts
;

505 
ªsu…
 = (
v
 =
vÆ
);

510 
°¨t_ts
 = 
	`°m_gë_˛ock
();

511 
¥ev
 = (
node_t
 *)
	`UNIT_LOAD
(&
£t
->
hód
, &
ts
);

512 
√xt
 = (
node_t
 *)
	`UNIT_LOAD
(&
¥ev
->√xt, &
ts
);

513 i‡(
ts
 > 
°¨t_ts
) start_ts =Ås;

514 } 
	`ªc_£¨ch2
(&
°¨t_ts
, &
¥ev
, &
√xt
, 
vÆ
, &
v
));

515 
ªsu…
 = (
v
==
vÆ
);

519 
ªsu…
 = 
	`h¨ris_föd
(
£t
, 
vÆ
);

522  
ªsu…
;

523 
	}
}

525 
	$£t_add
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
, 
å™ß˘i⁄Æ
)

527 
ªsu…
;

528 
node_t
 *
¥ev
, *
√xt
;

529 
vÆ_t
 
v
;

530 
°m_w‹d_t
 
ts
, 
°¨t_ts
, 
¥ev_ts
;

532 #ifde‡
DEBUG


533 
	`¥ötf
("++> së_add(%d)\n", (Ë
vÆ
);

534 
IO_FLUSH
;

537 
å™ß˘i⁄Æ
) {

539 
¥ev
 = 
£t
->
hód
;

540 
√xt
 = 
¥ev
->next;

541 
√xt
->
vÆ
 < val) {

542 
¥ev
 = 
√xt
;

543 
√xt
 = 
¥ev
->next;

545 
ªsu…
 = (
√xt
->
vÆ
 != val);

546 i‡(
ªsu…
) {

547 
¥ev
->
√xt
 = 
	`√w_node
(
vÆ
,Çext, 
å™ß˘i⁄Æ
);

553 
START
;

554 
¥ev
 = (
node_t
 *)
	`LOAD
(&
£t
->
hód
);

555 
√xt
 = (
node_t
 *)
	`LOAD
(&
¥ev
->next);

557 
v
 = 
	`LOAD
(&
√xt
->
vÆ
);

558 i‡(
v
 >
vÆ
)

560 
¥ev
 = 
√xt
;

561 
√xt
 = (
node_t
 *)
	`LOAD
(&
¥ev
->next);

563 
ªsu…
 = (
v
 !
vÆ
);

564 i‡(
ªsu…
) {

565 
	`STORE
(&
¥ev
->
√xt
, 
	`√w_node
(
vÆ
,Çext, 
å™ß˘i⁄Æ
));

567 
COMMIT
;

572 
ª°¨t
:

573 
°¨t_ts
 = 
	`°m_gë_˛ock
();

575 
¥ev
 = (
node_t
 *)
	`UNIT_LOAD
(&
£t
->
hód
, &
ts
);

576 
√xt
 = (
node_t
 *)
	`UNIT_LOAD
(&
¥ev
->√xt, &
ts
);

577 i‡(
ts
 > 
°¨t_ts
)

578 
°¨t_ts
 = 
ts
;

580 
v
 = 
	`UNIT_LOAD
(&
√xt
->
vÆ
, &
ts
);

581 i‡(
ts
 > 
°¨t_ts
) {

583 
ª°¨t
;

585 i‡(
v
 >
vÆ
)

587 
¥ev
 = 
√xt
;

588 
√xt
 = (
node_t
 *)
	`UNIT_LOAD
(&
¥ev
->√xt, &
ts
);

589 i‡(
ts
 > 
°¨t_ts
) {

592 
	`UNIT_LOAD
(&
¥ev
->
vÆ
, &
¥ev_ts
);

593 i‡(
¥ev_ts
 > 
°¨t_ts
) {

595 
ª°¨t
;

597 
°¨t_ts
 = 
ts
;

600 
ªsu…
 = (
v
 !
vÆ
);

601 i‡(
ªsu…
) {

604 
	`START_TS
(
°¨t_ts
, 
ª°¨t
);

605 
	`STORE
(&
¥ev
->
√xt
, 
	`√w_node
(
vÆ
,Çext, 
å™ß˘i⁄Æ
));

606 
COMMIT
;

611 
ª°¨t2
:

613 
°¨t_ts
 = 
	`°m_gë_˛ock
();

614 
¥ev
 = (
node_t
 *)
	`UNIT_LOAD
(&
£t
->
hód
, &
ts
);

615 
√xt
 = (
node_t
 *)
	`UNIT_LOAD
(&
¥ev
->√xt, &
ts
);

616 i‡(
ts
 > 
°¨t_ts
) start_ts =Ås;

617 } 
	`ªc_£¨ch2
(&
°¨t_ts
, &
¥ev
, &
√xt
, 
vÆ
, &
v
));

618 
ªsu…
 = (
v
 !
vÆ
);

624 i‡(
ªsu…
) {

625 
	`START_TS
(
°¨t_ts
, 
ª°¨t2
);

626 
	`STORE
(&
¥ev
->
√xt
, 
	`√w_node
(
vÆ
,Çext, 
å™ß˘i⁄Æ
));

627 
COMMIT
;

632 
ªsu…
 = 
	`h¨ris_ö£π
(
£t
, 
vÆ
);

635  
ªsu…
;

636 
	}
}

638 
	$£t_ªmove
(
öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
, 
å™ß˘i⁄Æ
)

640 
ªsu…
;

641 
node_t
 *
¥ev
, *
√xt
;

642 
vÆ_t
 
v
;

643 
node_t
 *
n
;

644 
°m_w‹d_t
 
ts
, 
°¨t_ts
, 
¥ev_ts
;

646 #ifde‡
DEBUG


647 
	`¥ötf
("++> së_ªmove(%d)\n", (Ë
vÆ
);

648 
IO_FLUSH
;

651 
å™ß˘i⁄Æ
) {

653 
¥ev
 = 
£t
->
hód
;

654 
√xt
 = 
¥ev
->next;

655 
√xt
->
vÆ
 < val) {

656 
¥ev
 = 
√xt
;

657 
√xt
 = 
¥ev
->next;

659 
ªsu…
 = (
√xt
->
vÆ
 == val);

660 i‡(
ªsu…
) {

661 
¥ev
->
√xt
 =Çext->next;

662 
	`‰ì
(
√xt
);

669 
START
;

670 
¥ev
 = (
node_t
 *)
	`LOAD
(&
£t
->
hód
);

671 
√xt
 = (
node_t
 *)
	`LOAD
(&
¥ev
->next);

673 
v
 = 
	`LOAD
(&
√xt
->
vÆ
);

674 i‡(
v
 >
vÆ
)

676 
¥ev
 = 
√xt
;

677 
√xt
 = (
node_t
 *)
	`LOAD
(&
¥ev
->next);

679 
ªsu…
 = (
v
 =
vÆ
);

680 i‡(
ªsu…
) {

681 
n
 = (
node_t
 *)
	`LOAD
(&
√xt
->next);

682 
	`STORE
(&
¥ev
->
√xt
, 
n
);

684 
	`FREE
(
√xt
, (
node_t
));

686 
COMMIT
;

690 
ª°¨t
:

691 
°¨t_ts
 = 
	`°m_gë_˛ock
();

693 
¥ev
 = (
node_t
 *)
	`UNIT_LOAD
(&
£t
->
hód
, &
ts
);

694 
√xt
 = (
node_t
 *)
	`UNIT_LOAD
(&
¥ev
->√xt, &
ts
);

695 i‡(
ts
 > 
°¨t_ts
)

696 
°¨t_ts
 = 
ts
;

698 
v
 = 
	`UNIT_LOAD
(&
√xt
->
vÆ
, &
ts
);

699 i‡(
ts
 > 
°¨t_ts
) {

701 
ª°¨t
;

703 i‡(
v
 >
vÆ
)

705 
¥ev
 = 
√xt
;

706 
√xt
 = (
node_t
 *)
	`UNIT_LOAD
(&
¥ev
->√xt, &
ts
);

707 i‡(
ts
 > 
°¨t_ts
) {

710 
	`UNIT_LOAD
(&
¥ev
->
vÆ
, &
¥ev_ts
);

711 i‡(
¥ev_ts
 > 
°¨t_ts
) {

713 
ª°¨t
;

715 
°¨t_ts
 = 
ts
;

718 
ªsu…
 = (
v
 =
vÆ
);

719 i‡(
ªsu…
) {

722 
	`START_TS
(
°¨t_ts
, 
ª°¨t
);

723 
n
 = (
node_t
 *)
	`LOAD
(&
√xt
->next);

724 
	`STORE
(&
¥ev
->
√xt
, 
n
);

726 
	`FREE
(
√xt
, (
node_t
));

727 
COMMIT
;

732 
ª°¨t3
:

734 
°¨t_ts
 = 
	`°m_gë_˛ock
();

735 
¥ev
 = (
node_t
 *)
	`UNIT_LOAD
(&
£t
->
hód
, &
ts
);

736 
√xt
 = (
node_t
 *)
	`UNIT_LOAD
(&
¥ev
->√xt, &
ts
);

737 i‡(
ts
 > 
°¨t_ts
) start_ts =Ås;

738 } 
	`ªc_£¨ch2
(&
°¨t_ts
, &
¥ev
, &
√xt
, 
vÆ
, &
v
));

739 
ªsu…
 = (
v
 =
vÆ
);

740 i‡(
ªsu…
) {

741 
	`START_TS
(
°¨t_ts
, 
ª°¨t3
);

742 
n
 = (
node_t
 *)
	`LOAD
(&
√xt
->next);

743 
	`STORE
(&
¥ev
->
√xt
, 
n
);

745 
	`FREE
(
√xt
, (
node_t
));

746 
COMMIT
;

751 
ªsu…
 = 
	`h¨ris_dñëe
(
£t
, 
vÆ
);

754  
ªsu…
;

755 
	}
}

761 
	$¶_c⁄èös
(
¶_öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
, 
å™ß˘i⁄Æ
)

763 
ªsu…
 = 0;

764 
i
;

765 
¶_node_t
 *
node
, *
√xt
;

766 
vÆ_t
 
v
;

767 
°m_w‹d_t
 
ts
, 
°¨t_ts
, 
¥ev_ts
;

769 #ifde‡
DEBUG


770 
	`¥ötf
("++> sl_c⁄èös(%d)\n", (Ë
vÆ
);

771 
IO_FLUSH
;

774 
å™ß˘i⁄Æ
) {

777 
node
 = 
£t
->
hód
;

778 
i
 = 
node
->
t›Àvñ
-1; i >= 0; i--) {

779 
√xt
 = 
node
->√xt[
i
];

780 
√xt
->
vÆ
 < val) {

781 
node
 = 
√xt
;

782 
√xt
 = 
node
->√xt[
i
];

785 
node
 =Çode->
√xt
[0];

786 
ªsu…
 = (
node
->
vÆ
 == val);

790 
START_RO
;

791 
node
 = 
£t
->
hód
;

792 
i
 = 
node
->
t›Àvñ
-1; i >= 0; i--) {

793 
√xt
 = (
¶_node_t
 *)
	`LOAD
(&
node
->√xt[
i
]);

794 (
v
 = 
	`LOAD
(&
√xt
->
vÆ
)) < val) {

795 
node
 = 
√xt
;

796 
√xt
 = (
¶_node_t
 *)
	`LOAD
(&
node
->√xt[
i
]);

799 
node
 = (
¶_node_t
 *)
	`LOAD
(&node->
√xt
[0]);

800 
ªsu…
 = (
v
 =
vÆ
);

801 
COMMIT
;

807 
v
 = 
VAL_MIN
;

808 
ª°¨t
:

809 
°¨t_ts
 = 
	`°m_gë_˛ock
();

810 
node
 = 
£t
->
hód
;

811 
i
 = 
node
->
t›Àvñ
-1; i >= 0; i--) {

812 
√xt
 = (
¶_node_t
 *)
	`UNIT_LOAD
(&
node
->√xt[
i
], &
ts
);

814 
v
 = 
	`UNIT_LOAD
(&
√xt
->
vÆ
, &
ts
);

815 i‡(
ts
 > 
°¨t_ts
) {

817 
ª°¨t
;

819 i‡(
v
 >
vÆ
) ;

820 
node
 = 
√xt
;

821 
√xt
 = (
¶_node_t
 *)
	`UNIT_LOAD
(&
node
->√xt[
i
], &
ts
);

822 i‡(
ts
 > 
°¨t_ts
) {

825 
	`UNIT_LOAD
(&
node
->
vÆ
, &
¥ev_ts
);

826 i‡(
¥ev_ts
 > 
°¨t_ts
) {

828 
ª°¨t
;

830 
°¨t_ts
 = 
ts
;

834 
ªsu…
 = (
v
 =
vÆ
);

841 
ªsu…
 = 
	`‰a£r_föd
(
£t
, 
vÆ
);

845 
	`¥ötf
("numbî %d dÿnŸ c‹ª•⁄dÅÿ™y unô-tx mode.\n", 
å™ß˘i⁄Æ
);

847  
ªsu…
;

848 
	}
}

850 
	$¶_add
(
¶_öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
, 
å™ß˘i⁄Æ
)

852 
ªsu…
 = 0;

853 
i
, 
l
;

854 
¶_node_t
 *
node
, *
√xt
;

855 
¶_node_t
 *
¥eds
[16], *
succs
[16];

856 
vÆ_t
 
v
;

857 
°m_w‹d_t
 
ts
, 
°¨t_ts
, 
¥ev_ts
;

859 #ifde‡
DEBUG


860 
	`¥ötf
("++> sl_add(%d)\n", (Ë
vÆ
);

861 
IO_FLUSH
;

864 
å™ß˘i⁄Æ
) {

873 
node
 = 
£t
->
hód
;

874 
i
 = 
node
->
t›Àvñ
-1; i >= 0; i--) {

875 
√xt
 = 
node
->√xt[
i
];

876 
√xt
->
vÆ
 < val) {

877 
node
 = 
√xt
;

878 
√xt
 = 
node
->√xt[
i
];

880 
¥eds
[
i
] = 
node
;

881 
succs
[
i
] = 
node
->
√xt
[i];

883 
node
 =Çode->
√xt
[0];

884 i‡(
node
->
vÆ
 == val) {

885 
ªsu…
 = 0;

887 
l
 = 
	`gë_ønd_Àvñ
();

888 
node
 = 
	`¶_√w_sim∂e_node
(
vÆ
, 
l
, 
å™ß˘i⁄Æ
);

889 
i
 = 0; i < 
l
; i++) {

890 
node
->
√xt
[
i
] = 
succs
[i];

891 
¥eds
[
i
]->
√xt
[i] = 
node
;

893 
ªsu…
 = 1;

899 
START
;

900 
v
 = 
VAL_MIN
;

906 
node
 = 
£t
->
hód
;

907 
i
 = 
node
->
t›Àvñ
-1; i >= 0; i--) {

908 
√xt
 = (
¶_node_t
 *)
	`LOAD
(&
node
->√xt[
i
]);

909 (
v
 = 
	`LOAD
(&
√xt
->
vÆ
)) < val) {

910 
node
 = 
√xt
;

911 
√xt
 = (
¶_node_t
 *)
	`LOAD
(&
node
->√xt[
i
]);

913 
¥eds
[
i
] = 
node
;

914 
succs
[
i
] = 
√xt
;

916 i‡(
v
 =
vÆ
) {

917 
ªsu…
 = 0;

919 
l
 = 
	`gë_ønd_Àvñ
();

920 
node
 = 
	`¶_√w_sim∂e_node
(
vÆ
, 
l
, 
å™ß˘i⁄Æ
);

921 
i
 = 0; i < 
l
; i++) {

922 
node
->
√xt
[
i
] = (
¶_node_t
 *)
	`LOAD
(&
succs
[i]);

923 
	`STORE
(&
¥eds
[
i
]->
√xt
[i], 
node
);

925 
ªsu…
 = 1;

927 
COMMIT
;

932 
v
 = 
VAL_MIN
;

933 
ª°¨t
:

934 
°¨t_ts
 = 
	`°m_gë_˛ock
();

935 
node
 = 
£t
->
hód
;

938 
i
 = 
node
->
t›Àvñ
-1; i >= 0; i--) {

940 
√xt
 = (
¶_node_t
 *)
	`UNIT_LOAD
(&
node
->√xt[
i
], &
ts
);

943 
v
 = 
	`UNIT_LOAD
(&
√xt
->
vÆ
, &
ts
);

945 i‡(
ts
 > 
°¨t_ts
Ë
ª°¨t
;

946 i‡(
v
 >
vÆ
) ;

947 
node
 = 
√xt
;

949 
√xt
 = (
¶_node_t
 *)
	`UNIT_LOAD
(&
node
->√xt[
i
], &
ts
);

951 i‡(
ts
 > 
°¨t_ts
) {

953 
	`UNIT_LOAD
(&
node
->
vÆ
, &
¥ev_ts
);

954 i‡(
¥ev_ts
 > 
°¨t_ts
Ë
ª°¨t
;

955 
°¨t_ts
 = 
ts
;

958 
¥eds
[
i
] = 
node
;

959 
succs
[
i
] = 
√xt
;

962 i‡(
v
 =
vÆ
) {

963 
ªsu…
 = 0;

965 
l
 = 
	`gë_ønd_Àvñ
();

966 
node
 = 
	`¶_√w_sim∂e_node
(
vÆ
, 
l
, 
å™ß˘i⁄Æ
);

967 
	`START_TS
(
°¨t_ts
, 
ª°¨t
);

969 
i
 = 0; i < 
l
; i++) {

970 
node
->
√xt
[
i
] = (
¶_node_t
 *)
	`LOAD
(&
succs
[i]);

972 
i
 = 0; i < 
l
; i++) {

973 
	`STORE
(&
¥eds
[
i
]->
√xt
[i], 
node
);

975 
COMMIT
;

976 
ªsu…
 = 1;

984 
ªsu…
 = 
	`‰a£r_ö£π
(
£t
, 
vÆ
);

988 
	`¥ötf
("numbî %d dÿnŸ c‹ª•⁄dÅÿ™y unô-tx mode.\n", 
å™ß˘i⁄Æ
);

991  
ªsu…
;

992 
	}
}

994 
	$¶_ªmove
(
¶_öt£t_t
 *
£t
, 
vÆ_t
 
vÆ
, 
å™ß˘i⁄Æ
)

996 
ªsu…
 = 0;

997 
i
;

998 
¶_node_t
 *
node
, *
√xt
;

999 
¶_node_t
 *
¥eds
[16], *
succs
[16];

1000 
vÆ_t
 
v
;

1001 
°m_w‹d_t
 
ts
, 
°¨t_ts
, 
¥ev_ts
;

1003 #ifde‡
DEBUG


1004 
	`¥ötf
("++> sl_ªmove(%d)\n", (Ë
vÆ
);

1005 
IO_FLUSH
;

1008 
å™ß˘i⁄Æ
) {

1011 
node
 = 
£t
->
hód
;

1012 
i
 = 
node
->
t›Àvñ
-1; i >= 0; i--) {

1013 
√xt
 = 
node
->√xt[
i
];

1014 
√xt
->
vÆ
 < val) {

1015 
node
 = 
√xt
;

1016 
√xt
 = 
node
->√xt[
i
];

1018 
¥eds
[
i
] = 
node
;

1019 
succs
[
i
] = 
node
->
√xt
[i];

1021 
node
 =Çode->
√xt
[0];

1023 i‡(
node
->
vÆ
 != val) {

1024 
ªsu…
 = 0;

1026 
i
 = 0; i < 
£t
->
hód
->
t›Àvñ
; i++)

1027 
¥eds
[
i
]->
√xt
[i] = 
succs
[i];

1028 
ªsu…
 = 1;

1035 
START
;

1036 
v
 = 
VAL_MIN
;

1037 
node
 = 
£t
->
hód
;

1038 
i
 = 
node
->
t›Àvñ
-1; i >= 0; i--) {

1039 
√xt
 = (
¶_node_t
 *)
	`LOAD
(&
node
->√xt[
i
]);

1040 (
v
 = 
	`LOAD
(&
√xt
->
vÆ
)) < val) {

1041 
node
 = 
√xt
;

1042 
√xt
 = (
¶_node_t
 *)
	`LOAD
(&
node
->√xt[
i
]);

1045 
¥eds
[
i
] = 
node
;

1046 
succs
[
i
] = 
√xt
;

1048 
node
 = (
¶_node_t
 *)
	`LOAD
(&node->
√xt
[0]);

1050 i‡(
v
 !
vÆ
) {

1051 
ªsu…
 = 0;

1053 
i
 = 0; i < 
£t
->
hód
->
t›Àvñ
; i++)

1055 
	`STORE
(&
¥eds
[
i
]->
√xt
[i], (
¶_node_t
 *)
	`LOAD
(&
succs
[i]));

1056 
ªsu…
 = 1;

1058 
COMMIT
;

1062 
v
 = 
VAL_MIN
;

1063 
ª°¨t
:

1064 
°¨t_ts
 = 
	`°m_gë_˛ock
();

1065 
node
 = 
£t
->
hód
;

1066 
i
 = 
node
->
t›Àvñ
-1; i >= 0; i--) {

1067 
√xt
 = (
¶_node_t
 *)
	`UNIT_LOAD
(&
node
->√xt[
i
], &
ts
);

1068 i‡(
ts
 > 
°¨t_ts
) start_ts =Ås;

1070 
v
 = 
	`UNIT_LOAD
(&
√xt
->
vÆ
, &
ts
);

1071 i‡(
ts
 > 
°¨t_ts
Ë
ª°¨t
;

1072 i‡(
v
 >
vÆ
) ;

1073 
node
 = 
√xt
;

1074 
√xt
 = (
¶_node_t
 *)
	`UNIT_LOAD
(&
node
->√xt[
i
], &
ts
);

1075 i‡(
ts
 > 
°¨t_ts
) {

1076 
	`UNIT_LOAD
(&
node
->
vÆ
, &
¥ev_ts
);

1077 i‡(
¥ev_ts
 > 
°¨t_ts
Ë
ª°¨t
;

1078 
°¨t_ts
 = 
ts
;

1081 
¥eds
[
i
] = 
node
;

1082 
succs
[
i
] = 
√xt
;

1085 i‡(
node
->
vÆ
 != val) {

1086 
ªsu…
 = 0;

1088 
	`START_TS
(
°¨t_ts
, 
ª°¨t
);

1089 
i
 = 0; i < 
£t
->
hód
->
t›Àvñ
; i++)

1090 
	`STORE
(&
¥eds
[
i
]->
√xt
[i], (
¶_node_t
 *)
	`LOAD
(&
succs
[i]));

1091 
COMMIT
;

1092 
ªsu…
 = 1;

1100 
ªsu…
 = 
	`‰a£r_ªmove
(
£t
, 
vÆ
);

1104 
	`¥ötf
("numbî %d dÿnŸ c‹ª•⁄dÅÿ™y unô-tx mode.\n", 
å™ß˘i⁄Æ
);

1107  
ªsu…
;

1108 
	}
}

1117 
	sb¨rõr
 {

1118 
±hªad_c⁄d_t
 
	mcom∂ëe
;

1119 
±hªad_muãx_t
 
	mmuãx
;

1120 
	mcou¡
;

1121 
	m¸ossög
;

1122 } 
	tb¨rõr_t
;

1124 
	$b¨rõr_öô
(
b¨rõr_t
 *
b
, 
n
)

1126 
	`±hªad_c⁄d_öô
(&
b
->
com∂ëe
, 
NULL
);

1127 
	`±hªad_muãx_öô
(&
b
->
muãx
, 
NULL
);

1128 
b
->
cou¡
 = 
n
;

1129 
b
->
¸ossög
 = 0;

1130 
	}
}

1132 
	$b¨rõr_¸oss
(
b¨rõr_t
 *
b
)

1134 
	`±hªad_muãx_lock
(&
b
->
muãx
);

1136 
b
->
¸ossög
++;

1138 i‡(
b
->
¸ossög
 < b->
cou¡
) {

1139 
	`±hªad_c⁄d_waô
(&
b
->
com∂ëe
, &b->
muãx
);

1141 
	`±hªad_c⁄d_brﬂdˇ°
(&
b
->
com∂ëe
);

1143 
b
->
¸ossög
 = 0;

1145 
	`±hªad_muãx_u∆ock
(&
b
->
muãx
);

1146 
	}
}

1152 
	sthªad_d©a
 {

1153 
	mønge
;

1154 
	mupd©e
;

1155 #i‚de‡
USE_RBTREE


1156 
	munô_tx
;

1158 
	mnb_add
;

1159 
	mnb_ªmove
;

1160 
	mnb_c⁄èös
;

1161 
	mnb_found
;

1162 
	mnb_ab‹ts
;

1163 
	mnb_ab‹ts_locked_ªad
;

1164 
	mnb_ab‹ts_locked_wrôe
;

1165 
	mnb_ab‹ts_vÆid©e_ªad
;

1166 
	mnb_ab‹ts_vÆid©e_wrôe
;

1167 
	mnb_ab‹ts_vÆid©e_commô
;

1168 
	mnb_ab‹ts_övÆid_mem‹y
;

1169 
	mmax_ªåõs
;

1170 
	mdiff
;

1171 
	m£ed
;

1172 
¶_öt£t_t
 *
	m£t
;

1173 
b¨rõr_t
 *
	mb¨rõr
;

1174 
	mÁûuªs_beˇu£_c⁄ã¡i⁄
;

1175 } 
	tthªad_d©a_t
;

1177 *
	$ã°
(*
d©a
)

1179 
vÆ
, 
œ°
 = 0;

1180 
thªad_d©a_t
 *
d
 = (thªad_d©a_à*)
d©a
;

1182 #ifde‡
TLS


1183 
∫g_£ed
 = &
d
->
£ed
;

1185 
	`±hªad_£t•ecific
(
∫g_£ed_key
, &
d
->
£ed
);

1189 
	`°m_öô_thªad
();

1191 
	`b¨rõr_¸oss
(
d
->
b¨rõr
);

1193 
œ°
 = -1;

1194 
°›
 == 0) {

1195 
vÆ
 = 
	`ønd_r
(&
d
->
£ed
) % 100;

1196 i‡(
vÆ
 < 
d
->
upd©e
) {

1197 i‡(
œ°
 < 0) {

1199 
vÆ
 = (
	`ønd_r
(&
d
->
£ed
Ë% d->
ønge
) + 1;

1200 i‡(
	`¶_add
(
d
->
£t
, 
vÆ
, 
TRANSACTIONAL
)) {

1201 
d
->
diff
++;

1202 
œ°
 = 
vÆ
;

1204 
d
->
nb_add
++;

1207 i‡(
	`¶_ªmove
(
d
->
£t
, 
œ°
, 
TRANSACTIONAL
))

1208 
d
->
diff
--;

1209 
d
->
nb_ªmove
++;

1210 
œ°
 = -1;

1214 
vÆ
 = (
	`ønd_r
(&
d
->
£ed
Ë% d->
ønge
) + 1;

1215 i‡(
	`¶_c⁄èös
(
d
->
£t
, 
vÆ
, 
TRANSACTIONAL
))

1216 
d
->
nb_found
++;

1217 
d
->
nb_c⁄èös
++;

1220 
	`°m_gë_∑ømëî
("nb_ab‹ts", &
d
->
nb_ab‹ts
);

1221 
	`°m_gë_∑ømëî
("nb_ab‹ts_locked_ªad", &
d
->
nb_ab‹ts_locked_ªad
);

1222 
	`°m_gë_∑ømëî
("nb_ab‹ts_locked_wrôe", &
d
->
nb_ab‹ts_locked_wrôe
);

1223 
	`°m_gë_∑ømëî
("nb_ab‹ts_vÆid©e_ªad", &
d
->
nb_ab‹ts_vÆid©e_ªad
);

1224 
	`°m_gë_∑ømëî
("nb_ab‹ts_vÆid©e_wrôe", &
d
->
nb_ab‹ts_vÆid©e_wrôe
);

1225 
	`°m_gë_∑ømëî
("nb_ab‹ts_vÆid©e_commô", &
d
->
nb_ab‹ts_vÆid©e_commô
);

1226 
	`°m_gë_∑ømëî
("nb_ab‹ts_övÆid_mem‹y", &
d
->
nb_ab‹ts_övÆid_mem‹y
);

1227 
	`°m_gë_∑ømëî
("max_ªåõs", &
d
->
max_ªåõs
);

1228 
	`°m_gë_∑ømëî
("Áûuªs_beˇu£_c⁄ã¡i⁄", &
d
->
Áûuªs_beˇu£_c⁄ã¡i⁄
);

1230 
	`°m_exô_thªad
();

1232  
NULL
;

1233 
	}
}

1235 
	$ˇtchî
(
sig
)

1237 
	`¥ötf
("CAUGHT SIGNAL %d\n", 
sig
);

1238 
	}
}

1240 
	$¥öt_skùli°
(
¶_öt£t_t
 *
£t
) {

1241 
¶_node_t
 *
cuº
;

1242 
i
, 
j
;

1243 
¨r
[
Àvñmax
];

1245 
i
=0; i<  
¨r
/árr[0]; i++)árr[i] = 0;

1247 
cuº
 = 
£t
->
hód
;

1249 
	`¥ötf
("%d", (Ë
cuº
->
vÆ
);

1250 
i
=0; i<
cuº
->
t›Àvñ
; i++) {

1251 
	`¥ötf
("-*");

1253 
¨r
[
cuº
->
t›Àvñ
-1]++;

1254 
	`¥ötf
("\n");

1255 
cuº
 = cuº->
√xt
[0];

1256 } 
cuº
);

1257 
j
=0; j<
Àvñmax
; j++)

1258 
	`¥ötf
("%dÇode†o‡Àvñ %d\n", 
¨r
[
j
], j);

1259 
	}
}

1261 
	$maö
(
¨gc
, **
¨gv
)

1263 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

1265 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

1266 {"duøti⁄", 
ªquúed_¨gumít
, 
NULL
, 'd'},

1267 {"öôül-size", 
ªquúed_¨gumít
, 
NULL
, 'i'},

1268 {"num-thªads", 
ªquúed_¨gumít
, 
NULL
, 'n'},

1269 {"ønge", 
ªquúed_¨gumít
, 
NULL
, 'r'},

1270 {"£ed", 
ªquúed_¨gumít
, 
NULL
, 's'},

1271 {"upd©e-øã", 
ªquúed_¨gumít
, 
NULL
, 'u'},

1272 {"unô-tx", 
ªquúed_¨gumít
, 
NULL
, 'x'},

1273 {
NULL
, 0, NULL, 0}

1276 
¶_öt£t_t
 *
£t
;

1277 
i
, 
c
, 
vÆ
, 
size
;

1278 *
s
;

1279 
ªads
, 
upd©es
, 
ab‹ts
, 
ab‹ts_locked_ªad
, 
ab‹ts_locked_wrôe
,

1280 
ab‹ts_vÆid©e_ªad
, 
ab‹ts_vÆid©e_wrôe
, 
ab‹ts_vÆid©e_commô
,

1281 
ab‹ts_övÆid_mem‹y
, 
max_ªåõs
, 
Áûuªs_beˇu£_c⁄ã¡i⁄
;

1282 
thªad_d©a_t
 *
d©a
;

1283 
±hªad_t
 *
thªads
;

1284 
±hªad_©å_t
 
©å
;

1285 
b¨rõr_t
 
b¨rõr
;

1286 
timevÆ
 
°¨t
, 
íd
;

1287 
time•ec
 
timeout
;

1288 
duøti⁄
 = 
DEFAULT_DURATION
;

1289 
öôül
 = 
DEFAULT_INITIAL
;

1290 
nb_thªads
 = 
DEFAULT_NB_THREADS
;

1291 
ønge
 = 
DEFAULT_RANGE
;

1292 
£ed
 = 
DEFAULT_SEED
;

1293 
upd©e
 = 
DEFAULT_UPDATE
;

1294 #i‚de‡
USE_RBTREE


1295 
unô_tx
 = 1;

1297 
sig£t_t
 
block_£t
;

1300 
i
 = 0;

1301 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "hd:i:n:r:s:u:"

1302 #i‚de‡
USE_RBTREE


1305 , 
l⁄g_›ti⁄s
, &
i
);

1307 if(
c
 == -1)

1310 if(
c
 =0 && 
l⁄g_›ti⁄s
[
i
].
Êag
 == 0)

1311 
c
 = 
l⁄g_›ti⁄s
[
i
].
vÆ
;

1313 
c
) {

1317 
	`¥ötf
("intset -- STM stressÅest "

1318 #ifde‡
USE_RBTREE


1331 " Te° duøti⁄ i¿mûli£c⁄d†(0=öföôe, deÁu…=" 
	`XSTR
(
DEFAULT_DURATION
) ")\n"

1333 " Numbî o‡ñemít†tÿö£π bef‹êã° (deÁu…=" 
	`XSTR
(
DEFAULT_INITIAL
) ")\n"

1335 " Numbî o‡thªad†(deÁu…=" 
	`XSTR
(
DEFAULT_NB_THREADS
) ")\n"

1337 " R™gêo‡öãgî vÆue†ö£πed i¿£à(deÁu…=" 
	`XSTR
(
DEFAULT_RANGE
) ")\n"

1339 " RNG sìd (0Òime-ba£d, deÁu…=" 
	`XSTR
(
DEFAULT_SEED
) ")\n"

1341 " Pî˚¡agêo‡upd©êå™ß˘i⁄†(deÁu…=" 
	`XSTR
(
DEFAULT_UPDATE
) ")\n"

1342 #i‚de‡
USE_RBTREE


1354 
	`exô
(0);

1356 
duøti⁄
 = 
	`©oi
(
›èrg
);

1359 
öôül
 = 
	`©oi
(
›èrg
);

1362 
nb_thªads
 = 
	`©oi
(
›èrg
);

1365 
ønge
 = 
	`©oi
(
›èrg
);

1368 
£ed
 = 
	`©oi
(
›èrg
);

1371 
upd©e
 = 
	`©oi
(
›èrg
);

1373 #i‚de‡
USE_RBTREE


1375 
unô_tx
 = 
	`©oi
(
›èrg
);

1379 
	`¥ötf
("Use -h or --help for help\n");

1380 
	`exô
(0);

1382 
	`exô
(1);

1386 
	`as£π
(
duøti⁄
 >= 0);

1387 
	`as£π
(
öôül
 >= 0);

1388 
	`as£π
(
nb_thªads
 > 0);

1389 
	`as£π
(
ønge
 > 0 &&Ñ™gê>
öôül
);

1390 
	`as£π
(
upd©e
 >= 0 && update <= 100);

1392 #ifde‡
USE_RBTREE


1393 
	`¥ötf
("SetÅype :Ñed-blackÅree\n");

1395 
	`¥ötf
("SetÅype : skipÜist\n");

1397 
	`¥ötf
("Duøti⁄ : %d\n", 
duøti⁄
);

1398 
	`¥ötf
("Inôü»sizê: %u\n", 
öôül
);

1399 
	`¥ötf
("NbÅhªad† : %d\n", 
nb_thªads
);

1400 
	`¥ötf
("VÆuêøngê : %d\n", 
ønge
);

1401 
	`¥ötf
("Sìd : %d\n", 
£ed
);

1402 
	`¥ötf
("Upd©êøã : %d\n", 
upd©e
);

1403 #i‚de‡
USE_RBTREE


1404 
	`¥ötf
("UnôÅx : %d\n", 
unô_tx
);

1406 
	`¥ötf
("Type sizes : int=%d/long=%d/ptr=%d/word=%d\n",

1410 ()(
°m_w‹d_t
));

1412 
timeout
.
tv_£c
 = 
duøti⁄
 / 1000;

1413 
timeout
.
tv_n£c
 = (
duøti⁄
 % 1000) * 1000000;

1415 i‡((
d©a
 = (
thªad_d©a_t
 *)
	`mÆloc
(
nb_thªads
 * —hªad_d©a_t))Ë=
NULL
) {

1416 
	`≥º‹
("malloc");

1417 
	`exô
(1);

1419 i‡((
thªads
 = (
±hªad_t
 *)
	`mÆloc
(
nb_thªads
 * ’thªad_t))Ë=
NULL
) {

1420 
	`≥º‹
("malloc");

1421 
	`exô
(1);

1424 i‡(
£ed
 == 0)

1425 
	`§™d
(()
	`time
(0));

1427 
	`§™d
(
£ed
);

1429 
Àvñmax
 = 
	`Êo‹_log_2
((Ë
öôül
);

1430 
£t
 = 
	`¶_£t_√w
();

1431 
°›
 = 0;

1433 
globÆ_£ed
 = 
	`ønd
();

1434 #ifde‡
TLS


1435 
∫g_£ed
 = &
globÆ_£ed
;

1437 i‡(
	`±hªad_key_¸óã
(&
∫g_£ed_key
, 
NULL
) != 0) {

1438 
	`Ârötf
(
°dîr
, "Error creatingÅhreadÜocal\n");

1439 
	`exô
(1);

1441 
	`±hªad_£t•ecific
(
∫g_£ed_key
, &
globÆ_£ed
);

1445 
	`¥ötf
("Initializing STM\n");

1446 
	`°m_öô
();

1447 
	`mod_mem_öô
();

1449 i‡(
	`°m_gë_∑ømëî
("compûe_Êags", &
s
))

1450 
	`¥ötf
("STM fœg† : %s\n", 
s
);

1453 
	`¥ötf
("Addög %dÉ¡rõ†tÿ£t\n", 
öôül
);

1454 
i
 = 0;

1455 
i
 < 
öôül
) {

1456 
vÆ
 = (
	`ønd
(Ë% 
ønge
) + 1;

1457 i‡(
	`¶_add
(
£t
, 
vÆ
, 0))

1458 
i
++;

1460 
size
 = 
	`¶_£t_size
(
£t
);

1461 
	`¥ötf
("Së sizê : %d\n", 
size
);

1462 
	`¥ötf
("Levñ max : %d\n", 
Àvñmax
);

1465 
	`b¨rõr_öô
(&
b¨rõr
, 
nb_thªads
 + 1);

1466 
	`±hªad_©å_öô
(&
©å
);

1467 
	`±hªad_©å_£tdëach°©e
(&
©å
, 
PTHREAD_CREATE_JOINABLE
);

1468 
i
 = 0; i < 
nb_thªads
; i++) {

1469 
	`¥ötf
("Cª©ögÅhªad %d\n", 
i
);

1470 
d©a
[
i
].
ønge
 =Ñange;

1471 
d©a
[
i
].
upd©e
 = update;

1472 #i‚de‡
USE_RBTREE


1473 
d©a
[
i
].
unô_tx
 = unit_tx;

1475 
d©a
[
i
].
nb_add
 = 0;

1476 
d©a
[
i
].
nb_ªmove
 = 0;

1477 
d©a
[
i
].
nb_c⁄èös
 = 0;

1478 
d©a
[
i
].
nb_found
 = 0;

1479 
d©a
[
i
].
nb_ab‹ts
 = 0;

1480 
d©a
[
i
].
nb_ab‹ts_locked_ªad
 = 0;

1481 
d©a
[
i
].
nb_ab‹ts_locked_wrôe
 = 0;

1482 
d©a
[
i
].
nb_ab‹ts_vÆid©e_ªad
 = 0;

1483 
d©a
[
i
].
nb_ab‹ts_vÆid©e_wrôe
 = 0;

1484 
d©a
[
i
].
nb_ab‹ts_vÆid©e_commô
 = 0;

1485 
d©a
[
i
].
nb_ab‹ts_övÆid_mem‹y
 = 0;

1486 
d©a
[
i
].
max_ªåõs
 = 0;

1487 
d©a
[
i
].
diff
 = 0;

1488 
d©a
[
i
].
£ed
 = 
	`ønd
();

1489 
d©a
[
i
].
£t
 = set;

1490 
d©a
[
i
].
b¨rõr
 = &barrier;

1491 
d©a
[
i
].
Áûuªs_beˇu£_c⁄ã¡i⁄
 = 0;

1492 i‡(
	`±hªad_¸óã
(&
thªads
[
i
], &
©å
, 
ã°
, (*)(&
d©a
[i])) != 0) {

1493 
	`Ârötf
(
°dîr
, "Error creatingÅhread\n");

1494 
	`exô
(1);

1497 
	`±hªad_©å_de°roy
(&
©å
);

1500 i‡(
	`sig«l
(
SIGHUP
, 
ˇtchî
Ë=
SIG_ERR
 ||

1501 
	`sig«l
(
SIGINT
, 
ˇtchî
Ë=
SIG_ERR
 ||

1502 
	`sig«l
(
SIGTERM
, 
ˇtchî
Ë=
SIG_ERR
) {

1503 
	`≥º‹
("signal");

1504 
	`exô
(1);

1508 
	`b¨rõr_¸oss
(&
b¨rõr
);

1510 
	`¥ötf
("STARTING...\n");

1511 
	`gëtimeofday
(&
°¨t
, 
NULL
);

1512 i‡(
duøti⁄
 > 0) {

1513 
	`«no¶ìp
(&
timeout
, 
NULL
);

1515 
	`sigem±y£t
(&
block_£t
);

1516 
	`sigsu•íd
(&
block_£t
);

1518 
	`AO_°‹e_fuŒ
(&
°›
, 1);

1519 
	`gëtimeofday
(&
íd
, 
NULL
);

1520 
	`¥ötf
("STOPPING...\n");

1523 
i
 = 0; i < 
nb_thªads
; i++) {

1524 i‡(
	`±hªad_joö
(
thªads
[
i
], 
NULL
) != 0) {

1525 
	`Ârötf
(
°dîr
, "Error waiting forÅhread completion\n");

1526 
	`exô
(1);

1530 
duøti⁄
 = (
íd
.
tv_£c
 * 1000 +Énd.
tv_u£c
 / 1000Ë- (
°¨t
.tv_sec * 1000 + start.tv_usec / 1000);

1531 
ab‹ts
 = 0;

1532 
ab‹ts_locked_ªad
 = 0;

1533 
ab‹ts_locked_wrôe
 = 0;

1534 
ab‹ts_vÆid©e_ªad
 = 0;

1535 
ab‹ts_vÆid©e_wrôe
 = 0;

1536 
ab‹ts_vÆid©e_commô
 = 0;

1537 
ab‹ts_övÆid_mem‹y
 = 0;

1538 
Áûuªs_beˇu£_c⁄ã¡i⁄
 = 0;

1539 
ªads
 = 0;

1540 
upd©es
 = 0;

1541 
max_ªåõs
 = 0;

1542 
i
 = 0; i < 
nb_thªads
; i++) {

1543 
	`¥ötf
("Thªad %d\n", 
i
);

1544 
	`¥ötf
(" #add : %lu\n", 
d©a
[
i
].
nb_add
);

1545 
	`¥ötf
(" #ªmovê : %lu\n", 
d©a
[
i
].
nb_ªmove
);

1546 
	`¥ötf
(" #c⁄èö† : %lu\n", 
d©a
[
i
].
nb_c⁄èös
);

1547 
	`¥ötf
(" #found : %lu\n", 
d©a
[
i
].
nb_found
);

1548 
	`¥ötf
(" #ab‹t† : %lu\n", 
d©a
[
i
].
nb_ab‹ts
);

1549 
	`¥ötf
(" #lock-∏ : %lu\n", 
d©a
[
i
].
nb_ab‹ts_locked_ªad
);

1550 
	`¥ötf
(" #lock-w : %lu\n", 
d©a
[
i
].
nb_ab‹ts_locked_wrôe
);

1551 
	`¥ötf
(" #vÆ-∏ : %lu\n", 
d©a
[
i
].
nb_ab‹ts_vÆid©e_ªad
);

1552 
	`¥ötf
(" #vÆ-w : %lu\n", 
d©a
[
i
].
nb_ab‹ts_vÆid©e_wrôe
);

1553 
	`¥ötf
(" #vÆ-¯ : %lu\n", 
d©a
[
i
].
nb_ab‹ts_vÆid©e_commô
);

1554 
	`¥ötf
(" #öv-mem : %lu\n", 
d©a
[
i
].
nb_ab‹ts_övÆid_mem‹y
);

1555 
	`¥ötf
(" #Áûuª†: %lu\n", 
d©a
[
i
].
Áûuªs_beˇu£_c⁄ã¡i⁄
);

1556 
	`¥ötf
(" MaxÑërõ†: %lu\n", 
d©a
[
i
].
max_ªåõs
);

1557 
ab‹ts
 +
d©a
[
i
].
nb_ab‹ts
;

1558 
ab‹ts_locked_ªad
 +
d©a
[
i
].
nb_ab‹ts_locked_ªad
;

1559 
ab‹ts_locked_wrôe
 +
d©a
[
i
].
nb_ab‹ts_locked_wrôe
;

1560 
ab‹ts_vÆid©e_ªad
 +
d©a
[
i
].
nb_ab‹ts_vÆid©e_ªad
;

1561 
ab‹ts_vÆid©e_wrôe
 +
d©a
[
i
].
nb_ab‹ts_vÆid©e_wrôe
;

1562 
ab‹ts_vÆid©e_commô
 +
d©a
[
i
].
nb_ab‹ts_vÆid©e_commô
;

1563 
ab‹ts_övÆid_mem‹y
 +
d©a
[
i
].
nb_ab‹ts_övÆid_mem‹y
;

1564 
Áûuªs_beˇu£_c⁄ã¡i⁄
 +
d©a
[
i
].failures_because_contention;

1565 
ªads
 +
d©a
[
i
].
nb_c⁄èös
;

1566 
upd©es
 +(
d©a
[
i
].
nb_add
 + d©a[i].
nb_ªmove
);

1567 
size
 +
d©a
[
i
].
diff
;

1568 i‡(
max_ªåõs
 < 
d©a
[
i
].max_retries)

1569 
max_ªåõs
 = 
d©a
[
i
].max_retries;

1571 
	`¥ötf
("Së sizê : %d (ex≥˘ed: %d)\n", 
	`¶_£t_size
(
£t
), 
size
);

1572 
	`¥ötf
("Duøti⁄ : %d (ms)\n", 
duøti⁄
);

1573 
	`¥ötf
("#tx† : %lu (%‡/ s)\n", 
ªads
 + 
upd©es
, (ªad†+ upd©esË* 1000.0 / 
duøti⁄
);

1574 
	`¥ötf
("#ªadÅx† : %lu (%‡/ s)\n", 
ªads
,Ñód†* 1000.0 / 
duøti⁄
);

1575 
	`¥ötf
("#upd©êtx† : %lu (%‡/ s)\n", 
upd©es
, upd©e†* 1000.0 / 
duøti⁄
);

1576 
	`¥ötf
("#ab‹t† : %lu (%‡/ s)\n", 
ab‹ts
,áb‹t†* 1000.0 / 
duøti⁄
);

1577 
	`¥ötf
(" #lock-∏ : %lu (%‡/ s)\n", 
ab‹ts_locked_ªad
,áb‹ts_locked_ªad * 1000.0 / 
duøti⁄
);

1578 
	`¥ötf
(" #lock-w : %lu (%‡/ s)\n", 
ab‹ts_locked_wrôe
,áb‹ts_locked_wrôê* 1000.0 / 
duøti⁄
);

1579 
	`¥ötf
(" #vÆ-∏ : %lu (%‡/ s)\n", 
ab‹ts_vÆid©e_ªad
,áb‹ts_vÆid©e_ªad * 1000.0 / 
duøti⁄
);

1580 
	`¥ötf
(" #vÆ-w : %lu (%‡/ s)\n", 
ab‹ts_vÆid©e_wrôe
,áb‹ts_vÆid©e_wrôê* 1000.0 / 
duøti⁄
);

1581 
	`¥ötf
(" #vÆ-¯ : %lu (%‡/ s)\n", 
ab‹ts_vÆid©e_commô
,áb‹ts_vÆid©e_commô * 1000.0 / 
duøti⁄
);

1582 
	`¥ötf
(" #öv-mem : %lu (%‡/ s)\n", 
ab‹ts_övÆid_mem‹y
,áb‹ts_övÆid_mem‹y * 1000.0 / 
duøti⁄
);

1583 
	`¥ötf
(" #Áûuª† : %lu\n", 
Áûuªs_beˇu£_c⁄ã¡i⁄
);

1584 
	`¥ötf
("MaxÑërõ† : %lu\n", 
max_ªåõs
);

1587 
	`¶_£t_dñëe
(
£t
);

1590 
	`°m_exô
();

1592 #i‚de‡
TLS


1593 
	`±hªad_key_dñëe
(
∫g_£ed_key
);

1596 
	`‰ì
(
thªads
);

1597 
	`‰ì
(
d©a
);

1600 
	}
}

	@utils/estm-0.2.4.3/include/mod_local.h

34 #i‚de‡
_MOD_LOCAL_H_


35 
	#_MOD_LOCAL_H_


	)

37 
	~"°m.h
"

39 #ifde‡
__˝lu•lus


51 
°m_°‹e_loˇl
(
TXPARAMS
 
°m_w‹d_t
 *
addr
, stm_w‹d_à
vÆue
);

61 
°m_°‹e_loˇl_ch¨
(
TXPARAMS
 *
addr
, 
vÆue
);

71 
°m_°‹e_loˇl_uch¨
(
TXPARAMS
 *
addr
, 
vÆue
);

81 
°m_°‹e_loˇl_sh‹t
(
TXPARAMS
 *
addr
, 
vÆue
);

91 
°m_°‹e_loˇl_ush‹t
(
TXPARAMS
 *
addr
, 
vÆue
);

101 
°m_°‹e_loˇl_öt
(
TXPARAMS
 *
addr
, 
vÆue
);

111 
°m_°‹e_loˇl_uöt
(
TXPARAMS
 *
addr
, 
vÆue
);

121 
°m_°‹e_loˇl_l⁄g
(
TXPARAMS
 *
addr
, 
vÆue
);

131 
°m_°‹e_loˇl_ul⁄g
(
TXPARAMS
 *
addr
, 
vÆue
);

141 
°m_°‹e_loˇl_Êﬂt
(
TXPARAMS
 *
addr
, 
vÆue
);

151 
°m_°‹e_loˇl_doubÀ
(
TXPARAMS
 *
addr
, 
vÆue
);

161 
°m_°‹e_loˇl_±r
(
TXPARAMS
 **
addr
, *
vÆue
);

168 
mod_loˇl_öô
();

170 #ifde‡
__˝lu•lus


	@utils/estm-0.2.4.3/include/mod_mem.h

35 #i‚de‡
_MOD_MEM_H_


36 
	#_MOD_MEM_H_


	)

38 
	~"°m.h
"

40 #ifde‡
__˝lu•lus


53 *
°m_mÆloc
(
TXPARAMS
 
size_t
 
size
);

67 
°m_‰ì
(
TXPARAMS
 *
addr
, 
size_t
 
size
);

83 
°m_‰ì2
(
TXPARAMS
 *
addr
, 
size_t
 
idx
, size_à
size
);

90 
mod_mem_öô
();

92 #ifde‡
__˝lu•lus


	@utils/estm-0.2.4.3/include/mod_print.h

32 #i‚de‡
_MOD_PRINT_H_


33 
	#_MOD_PRINT_H_


	)

35 #ifde‡
__˝lu•lus


44 
mod_¥öt_öô
();

46 #ifde‡
__˝lu•lus


	@utils/estm-0.2.4.3/include/mod_stats.h

36 #i‚de‡
_MOD_STATS_H_


37 
	#_MOD_STATS_H_


	)

39 
	~"°m.h
"

41 #ifde‡
__˝lu•lus


57 
°m_gë_globÆ_°©s
(c⁄° *
«me
, *
vÆ
);

71 
°m_gë_loˇl_°©s
(
TXPARAMS
 c⁄° *
«me
, *
vÆ
);

78 
mod_°©s_öô
();

80 #ifde‡
__˝lu•lus


	@utils/estm-0.2.4.3/include/stm.h

80 #i‚de‡
_STM_H_


81 
	#_STM_H_


	)

83 
	~<£tjmp.h
>

84 
	~<°döt.h
>

85 
	~<°dio.h
>

86 
	~<°dlib.h
>

88 #ifde‡
__˝lu•lus


100 #ifde‡
EXPLICIT_TX_PARAMETER


101 
°m_tx
;

102 
	#TXTYPE
 
°m_tx
 *

	)

103 
	#TXPARAM
 
°m_tx
 *
tx


	)

104 
	#TXPARAMS
 
°m_tx
 *
tx
,

	)

105 
	#TXARG
 (
°m_tx
 *)
tx


	)

106 
	#TXARGS
 (
°m_tx
 *)
tx
,

	)

107 
°m_tx
 *
°m_cuºít_tx
();

109 
	#TXTYPE
 

	)

110 
	#TXPARAM


	)

111 
	#TXPARAMS


	)

112 
	#TXARG


	)

113 
	#TXARGS


	)

116 
	#EL
 0

	)

117 
	#NL
 1

	)

127 
uöçå_t
 
	t°m_w‹d_t
;

132 
	s°m_tx_©å
 {

140 
	gid
;

147 
	gro
;

148 } 
	t°m_tx_©å_t
;

159 
°m_öô
();

165 
°m_exô
();

172 
TXTYPE
 
°m_öô_thªad
();

178 
°m_exô_thªad
(
TXPARAM
);

210 
°m_°¨t
(
TXPARAMS
 
sigjmp_buf
 *
ív
, 
°m_tx_©å_t
 *
©å
, 
ty≥
);

230 
°m_commô
(
TXPARAM
);

238 
°m_ab‹t
(
TXPARAM
);

283 
°m_w‹d_t
 
°m_lﬂd
(
TXPARAMS
 vﬁ©ûê°m_w‹d_à*
addr
);

304 
°m_°‹e
(vﬁ©ûê
°m_w‹d_t
 *
addr
, stm_w‹d_à
vÆue
);

316 
°m_°‹e
(
TXPARAMS
 vﬁ©ûê
°m_w‹d_t
 *
addr
, stm_w‹d_à
vÆue
);

317 
°m_°‹e2
(
TXPARAMS
 vﬁ©ûê
°m_w‹d_t
 *
addr
, stm_w‹d_à
vÆue
, stm_w‹d_à
mask
);

351 
°m_°‹e2
(
TXPARAMS
 vﬁ©ûê
°m_w‹d_t
 *
addr
, stm_w‹d_à
vÆue
, stm_w‹d_à
mask
);

359 
°m_a˘ive
(
TXPARAM
);

367 
°m_ab‹ãd
(
TXPARAM
);

381 
sigjmp_buf
 *
°m_gë_ív
(
TXPARAM
);

391 
°m_tx_©å_t
 *
°m_gë_©åibuãs
(
TXPARAM
);

405 
°m_gë_°©s
(
TXPARAMS
 c⁄° *
«me
, *
vÆ
);

419 
°m_gë_∑ømëî
(c⁄° *
«me
, *
vÆ
);

432 
°m_£t_∑ømëî
(c⁄° *
«me
, *
vÆ
);

442 
°m_¸óã_•ecific
();

453 *
°m_gë_•ecific
(
TXPARAMS
 
key
);

464 
°m_£t_•ecific
(
TXPARAMS
 
key
, *
d©a
);

485 
°m_ªgi°î
((*
⁄_thªad_öô
)(
TXPARAMS
 *
¨g
),

486 (*
⁄_thªad_exô
)(
TXPARAMS
 *
¨g
),

487 (*
⁄_°¨t
)(
TXPARAMS
 *
¨g
),

488 (*
⁄_commô
)(
TXPARAMS
 *
¨g
),

489 (*
⁄_ab‹t
)(
TXPARAMS
 *
¨g
),

490 *
¨g
);

506 
°m_w‹d_t
 
°m_unô_lﬂd
(vﬁ©ûê°m_w‹d_à*
addr
, stm_w‹d_à*
time°amp
);

508 
°m_w‹d_t
 
n⁄_°m_unô_lﬂd
(vﬁ©ûê°m_w‹d_à*
addr
, stm_w‹d_à*
time°amp
);

531 
°m_unô_°‹e
(vﬁ©ûê
°m_w‹d_t
 *
addr
, stm_w‹d_à
vÆue
, stm_w‹d_à*
time°amp
);

558 
°m_unô_°‹e2
(vﬁ©ûê
°m_w‹d_t
 *
addr
, stm_w‹d_à
vÆue
, stm_w‹d_à
mask
, stm_w‹d_à*
time°amp
);

574 
°m_£t_exãnsi⁄
(
TXPARAMS
 
íabÀ
, 
°m_w‹d_t
 *
time°amp
);

583 
°m_w‹d_t
 
°m_gë_˛ock
();

585 #ifde‡
__˝lu•lus


	@utils/estm-0.2.4.3/include/wrappers.h

33 #i‚de‡
_WRAPPERS_H_


34 
	#_WRAPPERS_H_


	)

36 
	~<°döt.h
>

38 
	~"°m.h
"

40 #ifde‡
__˝lu•lus


52 
uöt8_t
 
°m_lﬂd8
(
TXPARAMS
 vﬁ©ûêuöt8_à*
addr
);

62 
uöt16_t
 
°m_lﬂd16
(
TXPARAMS
 vﬁ©ûêuöt16_à*
addr
);

72 
uöt32_t
 
°m_lﬂd32
(
TXPARAMS
 vﬁ©ûêuöt32_à*
addr
);

82 
uöt64_t
 
°m_lﬂd64
(
TXPARAMS
 vﬁ©ûêuöt64_à*
addr
);

92 
°m_lﬂd_ch¨
(
TXPARAMS
 vﬁ©ûê*
addr
);

102 
°m_lﬂd_uch¨
(
TXPARAMS
 vﬁ©ûê*
addr
);

112 
°m_lﬂd_sh‹t
(
TXPARAMS
 vﬁ©ûê*
addr
);

122 
°m_lﬂd_ush‹t
(
TXPARAMS
 vﬁ©ûê*
addr
);

132 
°m_lﬂd_öt
(
TXPARAMS
 vﬁ©ûê*
addr
);

142 
°m_lﬂd_uöt
(
TXPARAMS
 vﬁ©ûê*
addr
);

152 
°m_lﬂd_l⁄g
(
TXPARAMS
 vﬁ©ûê*
addr
);

162 
°m_lﬂd_ul⁄g
(
TXPARAMS
 vﬁ©ûê*
addr
);

172 
°m_lﬂd_Êﬂt
(
TXPARAMS
 vﬁ©ûê*
addr
);

182 
°m_lﬂd_doubÀ
(
TXPARAMS
 vﬁ©ûê*
addr
);

192 *
°m_lﬂd_±r
(
TXPARAMS
 vﬁ©ûê**
addr
);

207 
°m_lﬂd_byãs
(
TXPARAMS
 vﬁ©ûê
uöt8_t
 *
addr
, uöt8_à*
buf
, 
size_t
 
size
);

217 
°m_°‹e8
(
TXPARAMS
 vﬁ©ûê
uöt8_t
 *
addr
, uöt8_à
vÆue
);

227 
°m_°‹e16
(
TXPARAMS
 vﬁ©ûê
uöt16_t
 *
addr
, uöt16_à
vÆue
);

237 
°m_°‹e32
(
TXPARAMS
 vﬁ©ûê
uöt32_t
 *
addr
, uöt32_à
vÆue
);

247 
°m_°‹e64
(
TXPARAMS
 vﬁ©ûê
uöt64_t
 *
addr
, uöt64_à
vÆue
);

257 
°m_°‹e_ch¨
(
TXPARAMS
 vﬁ©ûê*
addr
, 
vÆue
);

267 
°m_°‹e_uch¨
(
TXPARAMS
 vﬁ©ûê*
addr
, 
vÆue
);

277 
°m_°‹e_sh‹t
(
TXPARAMS
 vﬁ©ûê*
addr
, 
vÆue
);

287 
°m_°‹e_ush‹t
(
TXPARAMS
 vﬁ©ûê*
addr
, 
vÆue
);

297 
°m_°‹e_öt
(
TXPARAMS
 vﬁ©ûê*
addr
, 
vÆue
);

307 
°m_°‹e_uöt
(
TXPARAMS
 vﬁ©ûê*
addr
, 
vÆue
);

317 
°m_°‹e_l⁄g
(
TXPARAMS
 vﬁ©ûê*
addr
, 
vÆue
);

327 
°m_°‹e_ul⁄g
(
TXPARAMS
 vﬁ©ûê*
addr
, 
vÆue
);

337 
°m_°‹e_Êﬂt
(
TXPARAMS
 vﬁ©ûê*
addr
, 
vÆue
);

347 
°m_°‹e_doubÀ
(
TXPARAMS
 vﬁ©ûê*
addr
, 
vÆue
);

357 
°m_°‹e_±r
(
TXPARAMS
 vﬁ©ûê**
addr
, *
vÆue
);

371 
°m_°‹e_byãs
(
TXPARAMS
 vﬁ©ûê
uöt8_t
 *
addr
, uöt8_à*
buf
, 
size_t
 
size
);

373 #ifde‡
__˝lu•lus


	@utils/estm-0.2.4.3/src/atomic.h

22 #i‚de‡
_ATOMIC_H_


23 
	#_ATOMIC_H_


	)

25 
	~<©omic_›s.h
>

27 
AO_t
 
	t©omic_t
;

29 #ifde‡
NO_AO


31 
	#ATOMIC_CAS_FULL
(
a
, 
e
, 
v
Ë(*◊Ë(v), 1)

	)

32 
	#ATOMIC_FETCH_INC_FULL
(
a
Ë((*◊))++)

	)

33 
	#ATOMIC_FETCH_DEC_FULL
(
a
Ë((*◊))--)

	)

34 
	#ATOMIC_FETCH_ADD_FULL
(
a
, 
v
Ë((*◊)Ë+(v))

	)

35 
	#ATOMIC_LOAD_ACQ
(
a
Ë(*◊))

	)

36 
	#ATOMIC_LOAD
(
a
Ë(*◊))

	)

37 
	#ATOMIC_STORE_REL
(
a
, 
v
Ë(*◊Ë(v))

	)

38 
	#ATOMIC_STORE
(
a
, 
v
Ë(*◊Ë(v))

	)

39 
	#ATOMIC_MB_READ


	)

40 
	#ATOMIC_MB_WRITE


	)

41 
	#ATOMIC_MB_FULL


	)

43 
	#ATOMIC_CAS_FULL
(
a
, 
e
, 
v
Ë(
	`AO_com∑ª_™d_sw≠_fuŒ
((vﬁ©ûê
AO_t
 *)◊), (AO_t)”), (AO_t)(v)))

	)

44 
	#ATOMIC_FETCH_INC_FULL
(
a
Ë(
	`AO_„tch_™d_add1_fuŒ
((vﬁ©ûê
AO_t
 *)◊)))

	)

45 
	#ATOMIC_FETCH_DEC_FULL
(
a
Ë(
	`AO_„tch_™d_sub1_fuŒ
((vﬁ©ûê
AO_t
 *)◊)))

	)

46 
	#ATOMIC_FETCH_ADD_FULL
(
a
, 
v
Ë(
	`AO_„tch_™d_add_fuŒ
((vﬁ©ûê
AO_t
 *)◊), (AO_t)(v)))

	)

47 #ifde‡
SAFE


48 
	#ATOMIC_LOAD_ACQ
(
a
Ë(
	`AO_lﬂd_fuŒ
((vﬁ©ûê
AO_t
 *)◊)))

	)

49 
	#ATOMIC_LOAD
(
a
Ë(
	`AO_lﬂd_fuŒ
((vﬁ©ûê
AO_t
 *)◊)))

	)

50 
	#ATOMIC_STORE_REL
(
a
, 
v
Ë(
	`AO_°‹e_fuŒ
((vﬁ©ûê
AO_t
 *)◊), (AO_t)(v)))

	)

51 
	#ATOMIC_STORE
(
a
, 
v
Ë(
	`AO_°‹e_fuŒ
((vﬁ©ûê
AO_t
 *)◊), (AO_t)(v)))

	)

52 
	#ATOMIC_MB_READ
 
	`AO_n›_fuŒ
()

	)

53 
	#ATOMIC_MB_WRITE
 
	`AO_n›_fuŒ
()

	)

54 
	#ATOMIC_MB_FULL
 
	`AO_n›_fuŒ
()

	)

56 
	#ATOMIC_LOAD_ACQ
(
a
Ë(
	`AO_lﬂd_acquúe_ªad
((vﬁ©ûê
AO_t
 *)◊)))

	)

57 
	#ATOMIC_LOAD
(
a
Ë(*((vﬁ©ûê
AO_t
 *)◊)))

	)

58 
	#ATOMIC_STORE_REL
(
a
, 
v
Ë(
	`AO_°‹e_ªÀa£
((vﬁ©ûê
AO_t
 *)◊), (AO_t)(v)))

	)

59 
	#ATOMIC_STORE
(
a
, 
v
Ë(*((vﬁ©ûê
AO_t
 *)◊)Ë(AO_t)(v))

	)

60 
	#ATOMIC_MB_READ
 
	`AO_n›_ªad
()

	)

61 
	#ATOMIC_MB_WRITE
 
	`AO_n›_wrôe
()

	)

62 
	#ATOMIC_MB_FULL
 
	`AO_n›_fuŒ
()

	)

	@utils/estm-0.2.4.3/src/gc.c

23 
	~<as£π.h
>

24 
	~<°dio.h
>

25 
	~<°döt.h
>

27 
	~<±hªad.h
>

29 
	~"gc.h
"

31 
	~"©omic.h
"

32 
	~"°m.h
"

40 
	#MAX_THREADS
 1024

	)

41 
	#EPOCH_MAX
 (~(
gc_w‹d_t
)0)

	)

43 #i‚de‡
NO_PERIODIC_CLEANUP


44 #i‚de‡
CLEANUP_FREQUENCY


45 
	#CLEANUP_FREQUENCY
 1

	)

49 #ifde‡
DEBUG


51 
	#IO_FLUSH
 
	`fÊush
(
NULL
)

	)

52 
	#PRINT_DEBUG
(...Ë
	`¥ötf
(
__VA_ARGS__
); 
	`fÊush
(
NULL
)

	)

54 
	#IO_FLUSH


	)

55 
	#PRINT_DEBUG
(...)

	)

63 
	mGC_NULL
 = 0,

64 
	mGC_BUSY
 = 1,

65 
	mGC_FREE_EMPTY
 = 2,

66 
	mGC_FREE_FULL
 = 3

69 
	smem_block
 {

70 *
	maddr
;

71 
mem_block
 *
	m√xt
;

72 } 
	tmem_block_t
;

74 
	smem_ªgi⁄
 {

75 
mem_block
 *
	mblocks
;

76 
gc_w‹d_t
 
	mts
;

77 
mem_ªgi⁄
 *
	m√xt
;

78 } 
	tmem_ªgi⁄_t
;

80 
	stm_thªad
 {

81 
gc_w‹d_t
 
	mu£d
;

82 
±hªad_t
 
	mthªad
;

83 
gc_w‹d_t
 
	mts
;

84 
mem_ªgi⁄_t
 *
	mhód
;

85 
mem_ªgi⁄_t
 *
	mèû
;

86 #i‚de‡
NO_PERIODIC_CLEANUP


87 
	m‰ìs
;

89 } 
	ttm_thªad_t
;

91 vﬁ©ûê
tm_thªad_t
 *
	gthªads
;

92 vﬁ©ûê
gc_w‹d_t
 
	gnb_thªads
;

94 
gc_w‹d_t
 (*
cuºít_ïoch
)();

96 #ifde‡
TLS


97 
__thªad
 
	gthªad_idx
;

99 
±hªad_key_t
 
	gthªad_idx
;

109 
ölöe
 
	$gc_gë_idx
()

111 #ifde‡
TLS


112  
thªad_idx
;

114  ()
	`±hªad_gë•ecific
(
thªad_idx
);

116 
	}
}

121 
ölöe
 
gc_w‹d_t
 
	$gc_compuã_mö
(
gc_w‹d_t
 
now
)

123 
i
;

124 
gc_w‹d_t
 
mö
, 
ts
;

125 
°m_w‹d_t
 
u£d
;

127 
	`PRINT_DEBUG
("==> gc_compuã_mö(%d)\n", 
	`gc_gë_idx
());

129 
mö
 = 
now
;

130 
i
 = 0; i < 
MAX_THREADS
; i++) {

131 
u£d
 = (
gc_w‹d_t
)
	`ATOMIC_LOAD
(&
thªads
[
i
].used);

132 i‡(
u£d
 =
GC_NULL
)

134 i‡(
u£d
 !
GC_BUSY
)

137 
ts
 = (
gc_w‹d_t
)
	`ATOMIC_LOAD
(&
thªads
[
i
].ts);

138 i‡(
ts
 < 
mö
)

139 
mö
 = 
ts
;

142 
	`PRINT_DEBUG
("==> gc_compuã_mö(%d,m=%lu)\n", 
	`gc_gë_idx
(), ()
mö
);

144  
mö
;

145 
	}
}

150 
ölöe
 
	$gc_˛ón_blocks
(
mem_block_t
 *
mb
)

152 
mem_block_t
 *
√xt_mb
;

154 
mb
 !
NULL
) {

155 
	`PRINT_DEBUG
("==> fªe(%d,a=%p)\n", 
	`gc_gë_idx
(), 
mb
->
addr
);

156 
	`‰ì
(
mb
->
addr
);

157 
√xt_mb
 = 
mb
->
√xt
;

158 
	`‰ì
(
mb
);

159 
mb
 = 
√xt_mb
;

161 
	}
}

166 
ölöe
 
	$gc_˛ón_ªgi⁄s
(
mem_ªgi⁄_t
 *
mr
)

168 
mem_ªgi⁄_t
 *
√xt_mr
;

170 
mr
 !
NULL
) {

171 
	`gc_˛ón_blocks
(
mr
->
blocks
);

172 
√xt_mr
 = 
mr
->
√xt
;

173 
	`‰ì
(
mr
);

174 
mr
 = 
√xt_mr
;

176 
	}
}

181 
	$gc_˛ónup_thªad
(
idx
, 
gc_w‹d_t
 
mö
)

183 
mem_ªgi⁄_t
 *
mr
;

185 
	`PRINT_DEBUG
("==> gc_˛ónup_thªad(%d,m=%lu)\n", 
idx
, ()
mö
);

187 i‡(
thªads
[
idx
].
hód
 =
NULL
) {

192 
mö
 > 
thªads
[
idx
].
hód
->
ts
) {

193 
	`gc_˛ón_blocks
(
thªads
[
idx
].
hód
->
blocks
);

194 
mr
 = 
thªads
[
idx
].
hód
->
√xt
;

195 
	`‰ì
(
thªads
[
idx
].
hód
);

196 
thªads
[
idx
].
hód
 = 
mr
;

197 if(
mr
 =
NULL
) {

199 
thªads
[
idx
].
èû
 = 
NULL
;

203 
	}
}

212 
gc_öô
(
	$gc_w‹d_t
 (*
ïoch
)())

214 
i
;

216 
	`PRINT_DEBUG
("==> gc_init()\n");

218 
cuºít_ïoch
 = 
ïoch
;

219 i‡((
thªads
 = (
tm_thªad_t
 *)
	`mÆloc
(
MAX_THREADS
 * —m_thªad_t))Ë=
NULL
) {

220 
	`≥º‹
("malloc");

221 
	`exô
(1);

223 
i
 = 0; i < 
MAX_THREADS
; i++) {

224 
thªads
[
i
].
u£d
 = 
GC_NULL
;

225 
thªads
[
i
].
ts
 = 
EPOCH_MAX
;

226 
thªads
[
i
].
hód
 =Åhªads[i].
èû
 = 
NULL
;

227 #i‚de‡
NO_PERIODIC_CLEANUP


228 
thªads
[
i
].
‰ìs
 = 0;

231 
nb_thªads
 = 0;

232 #i‚de‡
TLS


233 i‡(
	`±hªad_key_¸óã
(&
thªad_idx
, 
NULL
) != 0) {

234 
	`Ârötf
(
°dîr
, "Error creatingÅhreadÜocal\n");

235 
	`exô
(1);

238 
	}
}

243 
	$gc_exô
()

245 
i
;

247 
	`PRINT_DEBUG
("==> gc_exit()\n");

250 i‡(
	`ATOMIC_LOAD
(&
nb_thªads
) != 0) {

251 
	`Ârötf
(
°dîr
, "Error: someÅhreads haveÇot been cleaned up\n");

252 
	`exô
(1);

255 
i
 = 0; i < 
MAX_THREADS
; i++)

256 
	`gc_˛ón_ªgi⁄s
(
thªads
[
i
].
hód
);

258 
	`‰ì
((*)
thªads
);

259 
	}
}

264 
	$gc_öô_thªad
()

266 
i
, 
idx
;

267 
gc_w‹d_t
 
u£d
;

269 
	`PRINT_DEBUG
("==> gc_init_thread()\n");

271 i‡(
	`ATOMIC_FETCH_INC_FULL
(&
nb_thªads
Ë>
MAX_THREADS
) {

272 
	`Ârötf
(
°dîr
, "Error:Åoo many concurrentÅhreads created\n");

273 
	`exô
(1);

276 
i
 = 0;

279 
u£d
 = (
gc_w‹d_t
)
	`ATOMIC_LOAD
(&
thªads
[
i
].used);

280 i‡(
u£d
 !
GC_BUSY
) {

281 i‡(
	`ATOMIC_CAS_FULL
(&
thªads
[
i
].
u£d
, u£d, 
GC_BUSY
) != 0) {

282 
idx
 = 
i
;

284 
	`ATOMIC_STORE
(&
thªads
[
idx
].
ts
, 
	`cuºít_ïoch
());

288 
	`as£π
 (
thªads
[
i
].
u£d
 !
GC_NULL
);

290 i‡(++
i
 >
MAX_THREADS
)

291 
i
 = 0;

293 #ifde‡
TLS


294 
thªad_idx
 = 
idx
;

296 
	`±hªad_£t•ecific
(
thªad_idx
, (*)
idx
);

299 
	`PRINT_DEBUG
("==> gc_öô_thªad(i=%d)\n", 
idx
);

300 
	}
}

305 
	$gc_exô_thªad
()

307 
idx
 = 
	`gc_gë_idx
();

309 
	`PRINT_DEBUG
("==> gc_exô_thªad(%d)\n", 
idx
);

312 
	`ATOMIC_STORE
(&
thªads
[
idx
].
ts
, 
EPOCH_MAX
);

314 
	`ATOMIC_STORE
(&
thªads
[
idx
].
u£d
,Åhªads[idx].
hód
 =
NULL
 ? 
GC_FREE_EMPTY
 : 
GC_FREE_FULL
);

315 
	`ATOMIC_FETCH_DEC_FULL
(&
nb_thªads
);

317 
	}
}

323 
	$gc_£t_ïoch
(
gc_w‹d_t
 
ïoch
)

325 
idx
 = 
	`gc_gë_idx
();

327 
	`PRINT_DEBUG
("==> gc_£t_ïoch(%d,%lu)\n", 
idx
, ()
ïoch
);

329 i‡(
ïoch
 >
EPOCH_MAX
) {

330 
	`Ârötf
(
°dîr
, "Ex˚eded maximumÉpochÇumbî: 0x%lx\n", ()
ïoch
);

336 
	`ATOMIC_STORE
(&
thªads
[
idx
].
ts
, 
ïoch
);

337 
	}
}

342 
	$gc_‰ì
(*
addr
, 
gc_w‹d_t
 
ïoch
)

344 
mem_ªgi⁄_t
 *
mr
;

345 
mem_block_t
 *
mb
;

346 
idx
 = 
	`gc_gë_idx
();

348 
	`PRINT_DEBUG
("==> gc_‰ì(%d,%lu)\n", 
idx
, ()
ïoch
);

350 i‡(
thªads
[
idx
].
hód
 =
NULL
 ||Åhªads[idx].hód->
ts
 < 
ïoch
) {

352 i‡((
mr
 = (
mem_ªgi⁄_t
 *)
	`mÆloc
((mem_ªgi⁄_t))Ë=
NULL
) {

353 
	`≥º‹
("malloc");

354 
	`exô
(1);

356 
mr
->
ts
 = 
ïoch
;

357 
mr
->
blocks
 = 
NULL
;

358 
mr
->
√xt
 = 
NULL
;

359 i‡(
thªads
[
idx
].
hód
 =
NULL
) {

360 
thªads
[
idx
].
hód
 =Åhªads[idx].
èû
 = 
mr
;

362 
thªads
[
idx
].
èû
->
√xt
 = 
mr
;

363 
thªads
[
idx
].
èû
 = 
mr
;

367 
mr
 = 
thªads
[
idx
].
hód
;

371 i‡((
mb
 = (
mem_block_t
 *)
	`mÆloc
((mem_block_t))Ë=
NULL
) {

372 
	`≥º‹
("malloc");

373 
	`exô
(1);

375 
mb
->
addr
 =áddr;

376 
mb
->
√xt
 = 
mr
->
blocks
;

377 
mr
->
blocks
 = 
mb
;

379 #i‚de‡
NO_PERIODIC_CLEANUP


380 
thªads
[
idx
].
‰ìs
++;

381 i‡(
thªads
[
idx
].
‰ìs
 % 
CLEANUP_FREQUENCY
 == 0)

382 
	`gc_˛ónup
();

384 
	}
}

390 
	$gc_˛ónup
()

392 
gc_w‹d_t
 
mö
;

393 
idx
 = 
	`gc_gë_idx
();

395 
	`PRINT_DEBUG
("==> gc_˛ónup(%d)\n", 
idx
);

397 i‡(
thªads
[
idx
].
hód
 =
NULL
) {

402 
mö
 = 
	`gc_compuã_mö
(
	`cuºít_ïoch
());

404 
	`gc_˛ónup_thªad
(
idx
, 
mö
);

405 
	}
}

411 
	$gc_˛ónup_Æl
()

413 
i
;

414 
gc_w‹d_t
 
mö
 = 
EPOCH_MAX
;

416 
	`PRINT_DEBUG
("==> gc_cleanup_all()\n");

418 
i
 = 0; i < 
MAX_THREADS
; i++) {

419 i‡((
gc_w‹d_t
)
	`ATOMIC_LOAD
(&
thªads
[
i
].
u£d
Ë=
GC_NULL
)

421 i‡((
gc_w‹d_t
)
	`ATOMIC_LOAD
(&
thªads
[
i
].
u£d
Ë=
GC_FREE_FULL
) {

422 i‡(
	`ATOMIC_CAS_FULL
(&
thªads
[
i
].
u£d
, 
GC_FREE_FULL
, 
GC_BUSY
) != 0) {

423 i‡(
mö
 =
EPOCH_MAX
)

424 
mö
 = 
	`gc_compuã_mö
(
	`cuºít_ïoch
());

425 
	`gc_˛ónup_thªad
(
i
, 
mö
);

426 
	`ATOMIC_STORE
(&
thªads
[
i
].
u£d
,Åhªads[i].
hód
 =
NULL
 ? 
GC_FREE_EMPTY
 : 
GC_FREE_FULL
);

430 
	}
}

436 
	$gc_ª£t
()

438 
i
;

440 
	`PRINT_DEBUG
("==> gc_reset()\n");

442 
	`as£π
(
nb_thªads
 == 0);

444 
i
 = 0; i < 
MAX_THREADS
; i++) {

445 i‡(
thªads
[
i
].
u£d
 =
GC_NULL
)

447 
	`gc_˛ón_ªgi⁄s
(
thªads
[
i
].
hód
);

448 
thªads
[
i
].
ts
 = 
EPOCH_MAX
;

449 
thªads
[
i
].
hód
 =Åhªads[i].
èû
 = 
NULL
;

450 #i‚de‡
NO_PERIODIC_CLEANUP


451 
thªads
[
i
].
‰ìs
 = 0;

454 
	}
}

	@utils/estm-0.2.4.3/src/gc.h

23 #i‚de‡
_GC_H_


24 
	#_GC_H_


	)

26 
	~<°dlib.h
>

28 #ifde‡
__˝lu•lus


32 
uöçå_t
 
	tgc_w‹d_t
;

34 
gc_öô
(
gc_w‹d_t
 (*
ïoch
)());

35 
gc_exô
();

37 
gc_öô_thªad
();

38 
gc_exô_thªad
();

40 
gc_£t_ïoch
(
gc_w‹d_t
 
ïoch
);

42 
gc_‰ì
(*
addr
, 
gc_w‹d_t
 
ïoch
);

44 
gc_˛ónup
();

46 
gc_˛ónup_Æl
();

48 
gc_ª£t
();

50 #ifde‡
__˝lu•lus


	@utils/estm-0.2.4.3/src/mod_local.c

22 
	~<as£π.h
>

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

26 
	~"mod_loˇl.h
"

28 
	~"°m.h
"

30 #i‚de‡
LW_SET_SIZE


31 
	#LW_SET_SIZE
 1024

	)

39 
	mTYPE_WORD
,

40 
	mTYPE_CHAR
,

41 
	mTYPE_UCHAR
,

42 
	mTYPE_SHORT
,

43 
	mTYPE_USHORT
,

44 
	mTYPE_INT
,

45 
	mTYPE_UINT
,

46 
	mTYPE_LONG
,

47 
	mTYPE_ULONG
,

48 
	mTYPE_FLOAT
,

49 
	mTYPE_DOUBLE


52 
	sw_íåy
 {

53 
	mty≥
;

55 °ru˘ { vﬁ©ûê*
	ma
; 
	mv
; } 
	mc
;

56 °ru˘ { vﬁ©ûê*
	ma
; 
	mv
; } 
	muc
;

57 °ru˘ { vﬁ©ûê*
	ma
; 
	mv
; } 
	ms
;

58 °ru˘ { vﬁ©ûê*
	ma
; 
	mv
; } 
	mus
;

59 °ru˘ { vﬁ©ûê*
	ma
; 
	mv
; } 
	mi
;

60 °ru˘ { vﬁ©ûê*
	ma
; 
	mv
; } 
	mui
;

61 °ru˘ { vﬁ©ûê*
	ma
; 
	mv
; } 
	ml
;

62 °ru˘ { vﬁ©ûê*
	ma
; 
	mv
; } 
	mul
;

63 °ru˘ { vﬁ©ûê*
	ma
; 
	mv
; } 
	mf
;

64 °ru˘ { vﬁ©ûê*
	ma
; 
	mv
; } 
	md
;

65 °ru˘ { vﬁ©ûê
°m_w‹d_t
 *
	ma
; stm_w‹d_à
	mv
; } 
	mw
;

66 } 
	md©a
;

67 } 
	tw_íåy_t
;

69 
	sw_£t
 {

70 
w_íåy_t
 *
	míåõs
;

71 
	mnb_íåõs
;

72 
	msize
;

73 } 
	tw_£t_t
;

75 
	gkey
;

76 
	göôülized
 = 0;

85 
ölöe
 
w_íåy_t
 *
	$gë_íåy
(
TXPARAM
)

87 
w_£t_t
 *
ws
;

89 i‡(!
öôülized
) {

90 
	`Ârötf
(
°dîr
, "Module mod_localÇot initialized\n");

91 
	`exô
(1);

95 
ws
 = (
w_£t_t
 *)
	`°m_gë_•ecific
(
TXARGS
 
key
);

96 
	`as£π
(
ws
 !
NULL
);

98 i‡(
ws
->
nb_íåõs
 =ws->
size
) {

100 
ws
->
size
 = (ws->sizê< 
LW_SET_SIZE
 ? LW_SET_SIZE : ws->size * 2);

101 i‡((
ws
->
íåõs
 = (
w_íåy_t
 *)
	`ªÆloc
(ws->íåõs, ws->
size
 * (w_íåy_t))Ë=
NULL
) {

102 
	`≥º‹
("realloc");

103 
	`exô
(1);

107  &
ws
->
íåõs
[ws->
nb_íåõs
++];

108 
	}
}

114 
	$°m_°‹e_loˇl
(
TXPARAMS
 
°m_w‹d_t
 *
addr
, stm_w‹d_à
vÆue
)

116 
w_íåy_t
 *
w
 = 
	`gë_íåy
(
TXARG
);

118 
w
->
ty≥
 = 
TYPE_WORD
;

119 
w
->
d©a
.w.
a
 = 
addr
;

120 
w
->
d©a
.w.
v
 = *
addr
;

123 *
addr
 = 
vÆue
;

124 
	}
}

126 
	$°m_°‹e_loˇl_ch¨
(
TXPARAMS
 *
addr
, 
vÆue
)

128 
w_íåy_t
 *
w
 = 
	`gë_íåy
(
TXARG
);

130 
w
->
ty≥
 = 
TYPE_CHAR
;

131 
w
->
d©a
.
c
.
a
 = 
addr
;

132 
w
->
d©a
.
c
.
v
 = *
addr
;

135 *
addr
 = 
vÆue
;

136 
	}
}

138 
	$°m_°‹e_loˇl_uch¨
(
TXPARAMS
 *
addr
, 
vÆue
)

140 
w_íåy_t
 *
w
 = 
	`gë_íåy
(
TXARG
);

142 
w
->
ty≥
 = 
TYPE_UCHAR
;

143 
w
->
d©a
.
uc
.
a
 = 
addr
;

144 
w
->
d©a
.
uc
.
v
 = *
addr
;

147 *
addr
 = 
vÆue
;

148 
	}
}

150 
	$°m_°‹e_loˇl_sh‹t
(
TXPARAMS
 *
addr
, 
vÆue
)

152 
w_íåy_t
 *
w
 = 
	`gë_íåy
(
TXARG
);

154 
w
->
ty≥
 = 
TYPE_SHORT
;

155 
w
->
d©a
.
s
.
a
 = 
addr
;

156 
w
->
d©a
.
s
.
v
 = *
addr
;

159 *
addr
 = 
vÆue
;

160 
	}
}

162 
	$°m_°‹e_loˇl_ush‹t
(
TXPARAMS
 *
addr
, 
vÆue
)

164 
w_íåy_t
 *
w
 = 
	`gë_íåy
(
TXARG
);

166 
w
->
ty≥
 = 
TYPE_USHORT
;

167 
w
->
d©a
.
us
.
a
 = 
addr
;

168 
w
->
d©a
.
us
.
v
 = *
addr
;

171 *
addr
 = 
vÆue
;

172 
	}
}

174 
	$°m_°‹e_loˇl_öt
(
TXPARAMS
 *
addr
, 
vÆue
)

176 
w_íåy_t
 *
w
 = 
	`gë_íåy
(
TXARG
);

178 
w
->
ty≥
 = 
TYPE_INT
;

179 
w
->
d©a
.
i
.
a
 = 
addr
;

180 
w
->
d©a
.
i
.
v
 = *
addr
;

183 *
addr
 = 
vÆue
;

184 
	}
}

186 
	$°m_°‹e_loˇl_uöt
(
TXPARAMS
 *
addr
, 
vÆue
)

188 
w_íåy_t
 *
w
 = 
	`gë_íåy
(
TXARG
);

190 
w
->
ty≥
 = 
TYPE_UINT
;

191 
w
->
d©a
.
ui
.
a
 = 
addr
;

192 
w
->
d©a
.
ui
.
v
 = *
addr
;

195 *
addr
 = 
vÆue
;

196 
	}
}

198 
	$°m_°‹e_loˇl_l⁄g
(
TXPARAMS
 *
addr
, 
vÆue
)

200 
w_íåy_t
 *
w
 = 
	`gë_íåy
(
TXARG
);

202 
w
->
ty≥
 = 
TYPE_LONG
;

203 
w
->
d©a
.
l
.
a
 = 
addr
;

204 
w
->
d©a
.
l
.
v
 = *
addr
;

207 *
addr
 = 
vÆue
;

208 
	}
}

210 
	$°m_°‹e_loˇl_ul⁄g
(
TXPARAMS
 *
addr
, 
vÆue
)

212 
w_íåy_t
 *
w
 = 
	`gë_íåy
(
TXARG
);

214 
w
->
ty≥
 = 
TYPE_ULONG
;

215 
w
->
d©a
.
ul
.
a
 = 
addr
;

216 
w
->
d©a
.
ul
.
v
 = *
addr
;

219 *
addr
 = 
vÆue
;

220 
	}
}

222 
	$°m_°‹e_loˇl_Êﬂt
(
TXPARAMS
 *
addr
, 
vÆue
)

224 
w_íåy_t
 *
w
 = 
	`gë_íåy
(
TXARG
);

226 
w
->
ty≥
 = 
TYPE_FLOAT
;

227 
w
->
d©a
.
f
.
a
 = 
addr
;

228 
w
->
d©a
.
f
.
v
 = *
addr
;

231 *
addr
 = 
vÆue
;

232 
	}
}

234 
	$°m_°‹e_loˇl_doubÀ
(
TXPARAMS
 *
addr
, 
vÆue
)

236 
w_íåy_t
 *
w
 = 
	`gë_íåy
(
TXARG
);

238 
w
->
ty≥
 = 
TYPE_DOUBLE
;

239 
w
->
d©a
.
d
.
a
 = 
addr
;

240 
w
->
d©a
.
d
.
v
 = *
addr
;

243 *
addr
 = 
vÆue
;

244 
	}
}

246 
	$°m_°‹e_loˇl_±r
(
TXPARAMS
 **
addr
, *
vÆue
)

248 uni⁄ { 
°m_w‹d_t
 
w
; *
v
; } 
c⁄vît
;

249 
c⁄vît
.
v
 = 
vÆue
;

250 
	`°m_°‹e_loˇl
(
	`TXARGS
 (
°m_w‹d_t
 *)
addr
, 
c⁄vît
.
w
);

251 
	}
}

256 
	$⁄_thªad_öô
(
TXPARAMS
 *
¨g
)

258 
w_£t_t
 *
ws
;

260 i‡((
ws
 = (
w_£t_t
 *)
	`mÆloc
((w_£t_t))Ë=
NULL
) {

261 
	`≥º‹
("malloc");

262 
	`exô
(1);

264 
ws
->
íåõs
 = 
NULL
;

265 
ws
->
nb_íåõs
 = ws->
size
 = 0;

267 
	`°m_£t_•ecific
(
TXARGS
 
key
, 
ws
);

268 
	}
}

273 
	$⁄_thªad_exô
(
TXPARAMS
 *
¨g
)

275 
w_£t_t
 *
ws
;

277 
ws
 = (
w_£t_t
 *)
	`°m_gë_•ecific
(
TXARGS
 
key
);

278 
	`as£π
(
ws
 !
NULL
);

280 
	`‰ì
(
ws
->
íåõs
);

281 
	`‰ì
(
ws
);

282 
	}
}

287 
	$⁄_commô
(
TXPARAMS
 *
¨g
)

289 
w_£t_t
 *
ws
;

291 
ws
 = (
w_£t_t
 *)
	`°m_gë_•ecific
(
TXARGS
 
key
);

292 
	`as£π
(
ws
 !
NULL
);

295 
ws
->
nb_íåõs
 = 0;

296 
	}
}

301 
	$⁄_ab‹t
(
TXPARAMS
 *
¨g
)

303 
w_£t_t
 *
ws
;

304 
i
;

306 
ws
 = (
w_£t_t
 *)
	`°m_gë_•ecific
(
TXARGS
 
key
);

307 
	`as£π
(
ws
 !
NULL
);

310 
i
 = 
ws
->
nb_íåõs
 - 1; i >= 0; i--) {

311 
ws
->
íåõs
[
i
].
ty≥
) {

312 
TYPE_WORD
:

313 *
ws
->
íåõs
[
i
].
d©a
.
w
.
a
 = ws->íåõs[i].d©a.w.
v
;

315 
TYPE_CHAR
:

316 *
ws
->
íåõs
[
i
].
d©a
.
c
.
a
 = ws->íåõs[i].d©a.c.
v
;

318 
TYPE_UCHAR
:

319 *
ws
->
íåõs
[
i
].
d©a
.
uc
.
a
 = ws->íåõs[i].d©a.uc.
v
;

321 
TYPE_SHORT
:

322 *
ws
->
íåõs
[
i
].
d©a
.
s
.
a
 = ws->íåõs[i].d©a.s.
v
;

324 
TYPE_USHORT
:

325 *
ws
->
íåõs
[
i
].
d©a
.
us
.
a
 = ws->íåõs[i].d©a.us.
v
;

327 
TYPE_INT
:

328 *
ws
->
íåõs
[
i
].
d©a
.i.
a
 = ws->íåõs[i].d©a.i.
v
;

330 
TYPE_UINT
:

331 *
ws
->
íåõs
[
i
].
d©a
.
ui
.
a
 = ws->íåõs[i].d©a.ui.
v
;

333 
TYPE_LONG
:

334 *
ws
->
íåõs
[
i
].
d©a
.
l
.
a
 = ws->íåõs[i].d©a.l.
v
;

336 
TYPE_ULONG
:

337 *
ws
->
íåõs
[
i
].
d©a
.
ul
.
a
 = ws->íåõs[i].d©a.ul.
v
;

339 
TYPE_FLOAT
:

340 *
ws
->
íåõs
[
i
].
d©a
.
f
.
a
 = ws->íåõs[i].d©a.f.
v
;

342 
TYPE_DOUBLE
:

343 *
ws
->
íåõs
[
i
].
d©a
.
d
.
a
 = ws->íåõs[i].d©a.d.
v
;

346 
	`Ârötf
(
°dîr
, "UnexpectedÉntry in undoÜog\n");

347 
	`ab‹t
();

348 
	`exô
(1);

351 
	}
}

356 
	$mod_loˇl_öô
()

358 i‡(
öôülized
)

361 
	`°m_ªgi°î
(
⁄_thªad_öô
, 
⁄_thªad_exô
, 
NULL
, 
⁄_commô
, 
⁄_ab‹t
, NULL);

362 
key
 = 
	`°m_¸óã_•ecific
();

363 i‡(
key
 < 0) {

364 
	`Ârötf
(
°dîr
, "Cannot create specific key\n");

365 
	`exô
(1);

367 
öôülized
 = 1;

368 
	}
}

	@utils/estm-0.2.4.3/src/mod_mem.c

23 
	~<as£π.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

27 
	~"mod_mem.h
"

29 
	~"gc.h
"

30 
	~"°m.h
"

36 
	smem_block
 {

37 *
	maddr
;

38 
mem_block
 *
	m√xt
;

39 } 
	tmem_block_t
;

41 
	smem_öfo
 {

42 
mem_block_t
 *
	mÆloˇãd
;

43 
mem_block_t
 *
	m‰ìd
;

44 } 
	tmem_öfo_t
;

46 
	gkey
;

47 
	göôülized
 = 0;

56 *
	$°m_mÆloc
(
TXPARAMS
 
size_t
 
size
)

59 
mem_öfo_t
 *
mi
;

60 
mem_block_t
 *
mb
;

62 i‡(!
öôülized
) {

63 
	`Ârötf
(
°dîr
, "Module mod_memÇot initialized\n");

64 
	`exô
(1);

67 
mi
 = (
mem_öfo_t
 *)
	`°m_gë_•ecific
(
TXARGS
 
key
);

68 
	`as£π
(
mi
 !
NULL
);

71 i‡((
°m_w‹d_t
) == 4) {

72 
size
 = (sizê+ 3Ë& ~(
size_t
)0x03;

74 
size
 = (sizê+ 7Ë& ~(
size_t
)0x07;

77 i‡((
mb
 = (
mem_block_t
 *)
	`mÆloc
((mem_block_t))Ë=
NULL
) {

78 
	`≥º‹
("malloc");

79 
	`exô
(1);

81 i‡((
mb
->
addr
 = 
	`mÆloc
(
size
)Ë=
NULL
) {

82 
	`≥º‹
("malloc");

83 
	`exô
(1);

85 
mb
->
√xt
 = 
mi
->
Æloˇãd
;

86 
mi
->
Æloˇãd
 = 
mb
;

88  
mb
->
addr
;

89 
	}
}

94 
	$°m_‰ì
(
TXPARAMS
 *
addr
, 
size_t
 
size
)

96 
	`°m_‰ì2
(
TXARGS
 
addr
, 0, 
size
);

97 
	}
}

102 
	$°m_‰ì2
(
TXPARAMS
 *
addr
, 
size_t
 
idx
, size_à
size
)

105 
mem_öfo_t
 *
mi
;

106 
mem_block_t
 *
mb
;

107 
°m_w‹d_t
 *
a
;

109 i‡(!
öôülized
) {

110 
	`Ârötf
(
°dîr
, "Module mod_memÇot initialized\n");

111 
	`exô
(1);

114 
mi
 = (
mem_öfo_t
 *)
	`°m_gë_•ecific
(
TXARGS
 
key
);

115 
	`as£π
(
mi
 !
NULL
);

118 i‡(
size
 > 0) {

120 i‡((
°m_w‹d_t
) == 4) {

121 
idx
 = (idx + 3) >> 2;

122 
size
 = (size + 3) >> 2;

124 
idx
 = (idx + 7) >> 3;

125 
size
 = (size + 7) >> 3;

127 
a
 = (
°m_w‹d_t
 *)
addr
 + 
idx
;

128 
size
-- > 0) {

130 
	`°m_°‹e2
(
TXARGS
 
a
++, 0, 0);

134 i‡((
mb
 = (
mem_block_t
 *)
	`mÆloc
((mem_block_t))Ë=
NULL
) {

135 
	`≥º‹
("malloc");

136 
	`exô
(1);

138 
mb
->
addr
 =áddr;

139 
mb
->
√xt
 = 
mi
->
‰ìd
;

140 
mi
->
‰ìd
 = 
mb
;

141 
	}
}

146 
	$⁄_thªad_öô
(
TXPARAMS
 *
¨g
)

148 
mem_öfo_t
 *
mi
;

150 i‡((
mi
 = (
mem_öfo_t
 *)
	`mÆloc
((mem_öfo_t))Ë=
NULL
) {

151 
	`≥º‹
("malloc");

152 
	`exô
(1);

154 
mi
->
Æloˇãd
 = mi->
‰ìd
 = 
NULL
;

156 
	`°m_£t_•ecific
(
TXARGS
 
key
, 
mi
);

157 
	}
}

162 
	$⁄_thªad_exô
(
TXPARAMS
 *
¨g
)

164 
	`‰ì
(
	`°m_gë_•ecific
(
TXARGS
 
key
));

165 
	}
}

170 
	$⁄_commô
(
TXPARAMS
 *
¨g
)

172 
mem_öfo_t
 *
mi
;

173 
mem_block_t
 *
mb
, *
√xt
;

175 
mi
 = (
mem_öfo_t
 *)
	`°m_gë_•ecific
(
TXARGS
 
key
);

176 
	`as£π
(
mi
 !
NULL
);

179 i‡(
mi
->
Æloˇãd
 !
NULL
) {

180 
mb
 = 
mi
->
Æloˇãd
;

181 
mb
 !
NULL
) {

182 
√xt
 = 
mb
->next;

183 
	`‰ì
(
mb
);

184 
mb
 = 
√xt
;

186 
mi
->
Æloˇãd
 = 
NULL
;

190 i‡(
mi
->
‰ìd
 !
NULL
) {

191 #ifde‡
EPOCH_GC


192 
°m_w‹d_t
 
t
 = 
	`°m_gë_˛ock
();

194 
mb
 = 
mi
->
‰ìd
;

195 
mb
 !
NULL
) {

196 
√xt
 = 
mb
->next;

197 #ifde‡
EPOCH_GC


198 
	`gc_‰ì
(
mb
->
addr
, 
t
);

200 
	`‰ì
(
mb
->
addr
);

202 
	`‰ì
(
mb
);

203 
mb
 = 
√xt
;

205 
mi
->
‰ìd
 = 
NULL
;

207 
	}
}

212 
	$⁄_ab‹t
(
TXPARAMS
 *
¨g
)

214 
mem_öfo_t
 *
mi
;

215 
mem_block_t
 *
mb
, *
√xt
;

217 
mi
 = (
mem_öfo_t
 *)
	`°m_gë_•ecific
(
TXARGS
 
key
);

218 
	`as£π
 (
mi
 !
NULL
);

221 i‡(
mi
->
Æloˇãd
 !
NULL
) {

222 
mb
 = 
mi
->
Æloˇãd
;

223 
mb
 !
NULL
) {

224 
√xt
 = 
mb
->next;

225 
	`‰ì
(
mb
->
addr
);

226 
	`‰ì
(
mb
);

227 
mb
 = 
√xt
;

229 
mi
->
Æloˇãd
 = 
NULL
;

233 i‡(
mi
->
‰ìd
 !
NULL
) {

234 
mb
 = 
mi
->
‰ìd
;

235 
mb
 !
NULL
) {

236 
√xt
 = 
mb
->next;

237 
	`‰ì
(
mb
);

238 
mb
 = 
√xt
;

240 
mi
->
‰ìd
 = 
NULL
;

242 
	}
}

247 
	$mod_mem_öô
()

249 i‡(
öôülized
)

252 
	`°m_ªgi°î
(
⁄_thªad_öô
, 
⁄_thªad_exô
, 
NULL
, 
⁄_commô
, 
⁄_ab‹t
, NULL);

253 
key
 = 
	`°m_¸óã_•ecific
();

254 i‡(
key
 < 0) {

255 
	`Ârötf
(
°dîr
, "Cannot create specific key\n");

256 
	`exô
(1);

258 
öôülized
 = 1;

259 
	}
}

	@utils/estm-0.2.4.3/src/mod_print.c

22 
	~"mod_¥öt.h
"

24 
	~"°m.h
"

29 
	$⁄_thªad_öô
(
TXPARAMS
 *
¨g
)

31 
	`¥ötf
("==> on_thread_init()\n");

32 
	`fÊush
(
NULL
);

33 
	}
}

38 
	$⁄_thªad_exô
(
TXPARAMS
 *
¨g
)

40 
	`¥ötf
("==> on_thread_exit()\n");

41 
	`fÊush
(
NULL
);

42 
	}
}

47 
	$⁄_°¨t
(
TXPARAMS
 *
¨g
)

49 
	`¥ötf
("==> on_start()\n");

50 
	`fÊush
(
NULL
);

51 
	}
}

56 
	$⁄_commô
(
TXPARAMS
 *
¨g
)

58 
	`¥ötf
("==> on_commit()\n");

59 
	`fÊush
(
NULL
);

60 
	}
}

65 
	$⁄_ab‹t
(
TXPARAMS
 *
¨g
)

67 
	`¥ötf
("==> on_abort()\n");

68 
	`fÊush
(
NULL
);

69 
	}
}

74 
	$mod_¥öt_öô
()

76 
	`°m_ªgi°î
(
⁄_thªad_öô
, 
⁄_thªad_exô
, 
⁄_°¨t
, 
⁄_commô
, 
⁄_ab‹t
, 
NULL
);

77 
	}
}

	@utils/estm-0.2.4.3/src/mod_stats.c

22 
	~<as£π.h
>

23 
	~<°dio.h
>

24 
	~<°rög.h
>

26 
	~"mod_°©s.h
"

28 
	~"©omic.h
"

29 
	~"°m.h
"

35 
	stx_°©s
 {

36 
	mcommôs
;

37 
	mab‹ts
;

38 
	mªåõs
;

39 
	mmax_ªåõs
;

40 } 
	ttx_°©s_t
;

42 
	gkey
;

43 
	göôülized
 = 0;

45 
tx_°©s_t
 
	gglobÆ_°©s
 = { 0, 0, 0, 0 };

54 
	$°m_gë_globÆ_°©s
(c⁄° *
«me
, *
vÆ
)

56 i‡(!
öôülized
) {

57 
	`Ârötf
(
°dîr
, "Module mod_statsÇot initialized\n");

58 
	`exô
(1);

61 i‡(
	`°rcmp
("globÆ_nb_commôs", 
«me
) == 0) {

62 *(*)
vÆ
 = 
globÆ_°©s
.
commôs
;

65 i‡(
	`°rcmp
("globÆ_nb_ab‹ts", 
«me
) == 0) {

66 *(*)
vÆ
 = 
globÆ_°©s
.
ab‹ts
;

69 i‡(
	`°rcmp
("globÆ_max_ªåõs", 
«me
) == 0) {

70 *(*)
vÆ
 = 
globÆ_°©s
.
max_ªåõs
;

75 
	}
}

80 
	$°m_gë_loˇl_°©s
(
TXPARAMS
 c⁄° *
«me
, *
vÆ
)

82 
tx_°©s_t
 *
°©s
;

84 i‡(!
öôülized
) {

85 
	`Ârötf
(
°dîr
, "Module mod_statsÇot initialized\n");

86 
	`exô
(1);

89 
°©s
 = (
tx_°©s_t
 *)
	`°m_gë_•ecific
(
TXARGS
 
key
);

90 
	`as£π
(
°©s
 !
NULL
);

92 i‡(
	`°rcmp
("nb_commôs", 
«me
) == 0) {

93 *(*)
vÆ
 = 
°©s
->
commôs
;

96 i‡(
	`°rcmp
("nb_ab‹ts", 
«me
) == 0) {

97 *(*)
vÆ
 = 
°©s
->
ab‹ts
;

100 i‡(
	`°rcmp
("max_ªåõs", 
«me
) == 0) {

101 *(*)
vÆ
 = 
°©s
->
max_ªåõs
;

106 
	}
}

111 
	$⁄_thªad_öô
(
TXPARAMS
 *
¨g
)

113 
tx_°©s_t
 *
°©s
;

115 i‡((
°©s
 = (
tx_°©s_t
 *)
	`mÆloc
(—x_°©s_t))Ë=
NULL
) {

116 
	`≥º‹
("malloc");

117 
	`exô
(1);

119 
°©s
->
commôs
 = 0;

120 
°©s
->
ab‹ts
 = 0;

121 
°©s
->
ªåõs
 = 0;

122 
°©s
->
max_ªåõs
 = 0;

124 
	`°m_£t_•ecific
(
TXARGS
 
key
, 
°©s
);

125 
	}
}

130 
	$⁄_thªad_exô
(
TXPARAMS
 *
¨g
)

132 
tx_°©s_t
 *
°©s
;

133 
max
;

135 
°©s
 = (
tx_°©s_t
 *)
	`°m_gë_•ecific
(
TXARGS
 
key
);

136 
	`as£π
(
°©s
 !
NULL
);

138 
	`ATOMIC_FETCH_ADD_FULL
(&
globÆ_°©s
.
commôs
, 
°©s
->commits);

139 
	`ATOMIC_FETCH_ADD_FULL
(&
globÆ_°©s
.
ab‹ts
, 
°©s
->aborts);

140 
ªåy
:

141 
max
 = 
	`ATOMIC_LOAD
(&
globÆ_°©s
.
max_ªåõs
);

142 i‡(
°©s
->
max_ªåõs
 > 
max
) {

143 i‡(
	`ATOMIC_CAS_FULL
(&
globÆ_°©s
.
max_ªåõs
, 
max
, 
°©s
->max_retries) == 0)

144 
ªåy
;

147 
	`‰ì
(
°©s
);

148 
	}
}

153 
	$⁄_commô
(
TXPARAMS
 *
¨g
)

155 
tx_°©s_t
 *
°©s
;

157 
°©s
 = (
tx_°©s_t
 *)
	`°m_gë_•ecific
(
TXARGS
 
key
);

158 
	`as£π
(
°©s
 !
NULL
);

160 
°©s
->
commôs
++;

161 
°©s
->
ªåõs
 = 0;

162 
	}
}

167 
	$⁄_ab‹t
(
TXPARAMS
 *
¨g
)

169 
tx_°©s_t
 *
°©s
;

171 
°©s
 = (
tx_°©s_t
 *)
	`°m_gë_•ecific
(
TXARGS
 
key
);

172 
	`as£π
(
°©s
 !
NULL
);

174 
°©s
->
ab‹ts
++;

175 
°©s
->
ªåõs
++;

176 i‡(
°©s
->
max_ªåõs
 < sèts->
ªåõs
)

177 
°©s
->
max_ªåõs
 = sèts->
ªåõs
;

178 
	}
}

183 
	$mod_°©s_öô
()

185 i‡(
öôülized
)

188 
	`°m_ªgi°î
(
⁄_thªad_öô
, 
⁄_thªad_exô
, 
NULL
, 
⁄_commô
, 
⁄_ab‹t
, NULL);

189 
key
 = 
	`°m_¸óã_•ecific
();

190 i‡(
key
 < 0) {

191 
	`Ârötf
(
°dîr
, "Cannot create specific key\n");

192 
	`exô
(1);

194 
öôülized
 = 1;

195 
	}
}

	@utils/estm-0.2.4.3/src/stm.c

23 
	~<as£π.h
>

24 
	~<sig«l.h
>

25 
	~<°dio.h
>

26 
	~<°rög.h
>

28 
	~<±hªad.h
>

29 
	~<sched.h
>

31 
	~"°m.h
"

33 
	~"©omic.h
"

34 
	~"gc.h
"

40 
	#COMPILE_TIME_ASSERT
(
¥ed
Ë0Ë{ 0: ¥ed: ; }

	)

43 
	#WRITE_BACK_ETL
 0

	)

44 
	#WRITE_BACK_CTL
 1

	)

45 
	#WRITE_THROUGH
 2

	)

47 
	#EL
 0

	)

48 
	#NL
 1

	)

50 c⁄° *
	gdesign_«mes
[] = {

58 
	#CM_SUICIDE
 0

	)

59 
	#CM_DELAY
 1

	)

60 
	#CM_BACKOFF
 2

	)

61 
	#CM_PRIORITY
 3

	)

63 c⁄° *
	gcm_«mes
[] = {

75 #ifde‡
EXPLICIT_TX_PARAMETER


76 
	#TX_RETURN
  
tx


	)

77 
	#TX_GET


	)

79 
	#TX_RETURN


	)

80 
	#TX_GET
 
°m_tx_t
 *
tx
 = 
	`°m_gë_tx
()

	)

84 
	#IO_FLUSH


	)

85 
	#PRINT_DEBUG
(...)

	)

87 
	#PRINT_DEBUG2
(...)

	)

89 #i‚de‡
RW_SET_SIZE


90 
	#RW_SET_SIZE
 4096

	)

93 #i‚de‡
LOCK_ARRAY_LOG_SIZE


94 
	#LOCK_ARRAY_LOG_SIZE
 20

	)

97 #i‚de‡
LOCK_SHIFT_EXTRA


98 
	#LOCK_SHIFT_EXTRA
 2

	)

103 
	#XSTR
(
s
Ë
	`STR
(s)

	)

104 
	#STR
(
s
Ë#s

	)

116 
	mTX_IDLE
 = 0,

117 
	mTX_ACTIVE
 = 1,

118 
	mTX_COMMITTED
 = 2,

119 
	mTX_ABORTED
 = 3

122 
	sr_íåy
 {

123 
°m_w‹d_t
 
	mvîsi⁄
;

124 vﬁ©ûê
°m_w‹d_t
 *
	mlock
;

125 } 
	tr_íåy_t
;

127 
	sr_£t
 {

128 
r_íåy_t
 *
	míåõs
;

129 
	mnb_íåõs
;

130 
	msize
;

131 } 
	tr_£t_t
;

133 
	sw_íåy
 {

136 vﬁ©ûê
°m_w‹d_t
 *
	maddr
;

137 
°m_w‹d_t
 
	mvÆue
;

138 
°m_w‹d_t
 
	mmask
;

139 
°m_w‹d_t
 
	mvîsi⁄
;

140 vﬁ©ûê
°m_w‹d_t
 *
	mlock
;

141 
w_íåy
 *
	m√xt
;

144 } 
	tw_íåy_t
;

146 
	sw_£t
 {

147 
w_íåy_t
 *
	míåõs
;

148 
	mnb_íåõs
;

149 
	msize
;

150 
	mªÆloˇã
;

151 } 
	tw_£t_t
;

153 #i‚de‡
MAX_SPECIFIC


154 
	#MAX_SPECIFIC
 16

	)

157 
	s°m_tx
 {

158 
°m_tx_©å_t
 *
	m©å
;

159 
°m_w‹d_t
 
	m°©us
;

160 
°m_w‹d_t
 
	m°¨t
;

161 
°m_w‹d_t
 
	míd
;

162 
r_£t_t
 
	mr_£t
;

163 
w_£t_t
 
	mw_£t
;

164 
sigjmp_buf
 
	mív
;

165 
sigjmp_buf
 *
	mjmp
;

166 
	m√°ög
;

167 
	mro
;

168 
	mˇn_exãnd
;

169 *
	md©a
[
MAX_SPECIFIC
];

170 
	mªåõs
;

171 
	mab‹ts
;

172 
	mab‹ts_ro
;

173 
	mab‹ts_locked_ªad
;

174 
	mab‹ts_locked_wrôe
;

175 
	mab‹ts_vÆid©e_ªad
;

176 
	mab‹ts_vÆid©e_wrôe
;

177 
	mab‹ts_vÆid©e_commô
;

178 
	mab‹ts_övÆid_mem‹y
;

179 
	mab‹ts_doubÀ_wrôe
;

180 
	mab‹ts_ªÆloˇã
;

181 
	mab‹ts_rﬁlovî
;

182 
	mmax_ªåõs
;

183 
	mty≥
;

184 
°m_w‹d_t
 *
	mœ°øddr
;

185 } 
	t°m_tx_t
;

187 
	gnb_•ecific
 = 0;

225 
	scb_íåy
 {

226 (*
	mf
)(
TXPARAMS
 *);

227 *
	m¨g
;

228 } 
	tcb_íåy_t
;

230 
	#MAX_CB
 16

	)

233 
cb_íåy_t
 
	göô_cb
[
MAX_CB
];

234 
cb_íåy_t
 
	gexô_cb
[
MAX_CB
];

235 
cb_íåy_t
 
	g°¨t_cb
[
MAX_CB
];

236 
cb_íåy_t
 
	gcommô_cb
[
MAX_CB
];

237 
cb_íåy_t
 
	gab‹t_cb
[
MAX_CB
];

239 
	gnb_öô_cb
 = 0;

240 
	gnb_exô_cb
 = 0;

241 
	gnb_°¨t_cb
 = 0;

242 
	gnb_commô_cb
 = 0;

243 
	gnb_ab‹t_cb
 = 0;

250 #ifde‡
TLS


251 
__thªad
 
°m_tx_t
* 
	gthªad_tx
;

253 
±hªad_key_t
 
	gthªad_tx
;

284 
	#OWNED_MASK
 0x01

	)

285 
	#VERSION_MAX
 (~(
°m_w‹d_t
)0 >> 1)

	)

287 
	#LOCK_GET_OWNED
(
l
Ë÷ & 
OWNED_MASK
)

	)

288 
	#LOCK_SET_ADDR
(
a
Ë◊ | 
OWNED_MASK
Ë

	)

289 
	#LOCK_GET_ADDR
(
l
Ë÷ & ~(
°m_w‹d_t
)
OWNED_MASK
)

	)

290 
	#LOCK_GET_TIMESTAMP
(
l
Ë÷ >> 1Ë

	)

291 
	#LOCK_SET_TIMESTAMP
(
t
Ë— << 1Ë

	)

292 
	#LOCK_UNIT
 (~(
°m_w‹d_t
)0)

	)

303 
	#LOCK_ARRAY_SIZE
 (1 << 
LOCK_ARRAY_LOG_SIZE
)

	)

304 
	#LOCK_MASK
 (
LOCK_ARRAY_SIZE
 - 1)

	)

305 
	#LOCK_SHIFT
 ((((
°m_w‹d_t
Ë=4Ë? 2 : 3Ë+ 
LOCK_SHIFT_EXTRA
)

	)

306 
	#LOCK_IDX
(
a
Ë(((
°m_w‹d_t
)◊Ë>> 
LOCK_SHIFT
Ë& 
LOCK_MASK
)

	)

307 
	#GET_LOCK
(
a
Ë(
locks
 + 
	`LOCK_IDX
◊))

	)

309 vﬁ©ûê
°m_w‹d_t
 
	glocks
[
LOCK_ARRAY_SIZE
];

316 vﬁ©ûê
°m_w‹d_t
 
	gg˛ock
[1024 / (stm_word_t)];

317 
	#CLOCK
 (
g˛ock
[512 / (
°m_w‹d_t
)])

	)

319 
	#GET_CLOCK
 (
	`ATOMIC_LOAD_ACQ
(&
CLOCK
))

	)

320 
	#FETCH_INC_CLOCK
 (
	`ATOMIC_FETCH_INC_FULL
(&
CLOCK
))

	)

329 
ölöe
 
°m_tx_t
 *
	$°m_gë_tx
()

331 #ifde‡
TLS


332  
thªad_tx
;

334  (
°m_tx_t
 *)
	`±hªad_gë•ecific
(
thªad_tx
);

336 
	}
}

356 
±hªad_muãx_t
 
	gtx_cou¡_muãx
;

357 
±hªad_c⁄d_t
 
	gtx_ª£t
;

358 
	gtx_cou¡
;

359 
	gtx_ovîÊow
;

364 
ölöe
 
	$°m_rﬁlovî_íãr
(
°m_tx_t
 *
tx
)

366 
	`PRINT_DEBUG
("==> stm_rﬁlovî_íãr(%p)\n", 
tx
);

368 
	`±hªad_muãx_lock
(&
tx_cou¡_muãx
);

369 
tx_ovîÊow
 != 0)

370 
	`±hªad_c⁄d_waô
(&
tx_ª£t
, &
tx_cou¡_muãx
);

372 
tx_cou¡
++;

373 
	`±hªad_muãx_u∆ock
(&
tx_cou¡_muãx
);

374 
	}
}

379 
ölöe
 
	$°m_rﬁlovî_exô
(
°m_tx_t
 *
tx
)

381 
	`PRINT_DEBUG
("==> stm_rﬁlovî_exô(%p[%lu-%lu])\n", 
tx
, (Èx->
°¨t
, (Èx->
íd
);

383 
	`±hªad_muãx_lock
(&
tx_cou¡_muãx
);

385 
tx_cou¡
--;

386 
	`as£π
(
tx_cou¡
 >= 0);

388 i‡(
tx_ovîÊow
 !0 && 
tx_cou¡
 == 0) {

390 
	`mem£t
((*)
locks
, 0, 
LOCK_ARRAY_SIZE
 * (
°m_w‹d_t
));

391 
CLOCK
 = 0;

392 
tx_ovîÊow
 = 0;

394 
	`gc_ª£t
();

396 
	`±hªad_c⁄d_brﬂdˇ°
(&
tx_ª£t
);

398 
	`±hªad_muãx_u∆ock
(&
tx_cou¡_muãx
);

399 
	}
}

404 
ölöe
 
	$°m_ovîÊow
(
°m_tx_t
 *
tx
)

406 
	`PRINT_DEBUG
("==> stm_ovîÊow(%p[%lu-%lu])\n", 
tx
, (Èx->
°¨t
, (Èx->
íd
);

408 
	`±hªad_muãx_lock
(&
tx_cou¡_muãx
);

410 
tx_ovîÊow
 = 1;

412 
tx_cou¡
--;

413 
	`as£π
(
tx_cou¡
 >= 0);

415 i‡(
tx_cou¡
 == 0) {

417 
	`mem£t
((*)
locks
, 0, 
LOCK_ARRAY_SIZE
 * (
°m_w‹d_t
));

418 
CLOCK
 = 0;

419 
tx_ovîÊow
 = 0;

421 
	`gc_ª£t
();

423 
	`±hªad_c⁄d_brﬂdˇ°
(&
tx_ª£t
);

426 
	`±hªad_c⁄d_waô
(&
tx_ª£t
, &
tx_cou¡_muãx
);

429 
tx_cou¡
++;

430 
	`±hªad_muãx_u∆ock
(&
tx_cou¡_muãx
);

431 
	}
}

436 
ölöe
 
r_íåy_t
 *
	$°m_has_ªad
(
°m_tx_t
 *
tx
, vﬁ©ûê
°m_w‹d_t
 *
lock
)

438 
r_íåy_t
 *
r
;

439 
i
;

441 
	`PRINT_DEBUG
("==> stm_has_ªad(%p[%lu-%lu],%p)\n", 
tx
, (Èx->
°¨t
, (Èx->
íd
, 
lock
);

444 
	`as£π
(
tx
->
°©us
 =
TX_ACTIVE
);

447 
r
 = 
tx
->
r_£t
.
íåõs
;

448 
i
 = 
tx
->
r_£t
.
nb_íåõs
; i > 0; i--, 
r
++) {

449 i‡(
r
->
lock
 ==Üock) {

451  
r
;

454  
NULL
;

455 
	}
}

461 
ölöe
 
	$°m_Æloˇã_rs_íåõs
(
°m_tx_t
 *
tx
, 
exãnd
)

463 i‡(
exãnd
) {

465 
tx
->
r_£t
.
size
 *= 2;

466 
	`PRINT_DEBUG2
("==>ÑóŒoˇãÑód së (%p[%lu-%lu],%d)\n", 
tx
, (Èx->
°¨t
, (Èx->
íd
,Åx->
r_£t
.
size
);

467 i‡((
tx
->
r_£t
.
íåõs
 = (
r_íåy_t
 *)
	`ªÆloc
—x->r_£t.íåõs,Åx->r_£t.
size
 * ‘_íåy_t))Ë=
NULL
) {

468 
	`≥º‹
("realloc");

469 
	`exô
(1);

473 i‡((
tx
->
r_£t
.
íåõs
 = (
r_íåy_t
 *)
	`mÆloc
—x->r_£t.
size
 * ‘_íåy_t))Ë=
NULL
) {

474 
	`≥º‹
("malloc");

475 
	`exô
(1);

478 
	}
}

483 
ölöe
 
	$°m_Æloˇã_ws_íåõs
(
°m_tx_t
 *
tx
, 
exãnd
)

486 i‡(
exãnd
) {

488 
tx
->
w_£t
.
size
 *= 2;

489 
	`PRINT_DEBUG
("==>ÑóŒoˇã wrôê£à(%p[%lu-%lu],%d)\n", 
tx
, (Èx->
°¨t
, (Èx->
íd
,Åx->
w_£t
.
size
);

490 i‡((
tx
->
w_£t
.
íåõs
 = (
w_íåy_t
 *)
	`ªÆloc
—x->w_£t.íåõs,Åx->w_£t.
size
 * (w_íåy_t))Ë=
NULL
) {

491 
	`≥º‹
("realloc");

492 
	`exô
(1);

496 i‡((
tx
->
w_£t
.
íåõs
 = (
w_íåy_t
 *)
	`mÆloc
—x->w_£t.
size
 * (w_íåy_t))Ë=
NULL
) {

497 
	`≥º‹
("malloc");

498 
	`exô
(1);

502 
	}
}

507 
ölöe
 
	$°m_vÆid©e
(
°m_tx_t
 *
tx
)

509 
r_íåy_t
 *
r
;

510 
i
;

511 
°m_w‹d_t
 
l
;

513 
	`PRINT_DEBUG
("==> stm_vÆid©e(%p[%lu-%lu])\n", 
tx
, (Èx->
°¨t
, (Èx->
íd
);

516 
	`as£π
(
tx
->
°©us
 =
TX_ACTIVE
);

519 
r
 = 
tx
->
r_£t
.
íåõs
;

520 
i
 = 
tx
->
r_£t
.
nb_íåõs
; i > 0; i--, 
r
++) {

522 
l
 = 
	`ATOMIC_LOAD
(
r
->
lock
);

524 i‡(
	`LOCK_GET_OWNED
(
l
)) {

526 
w_íåy_t
 *
w
 = (w_íåy_à*)
	`LOCK_GET_ADDR
(
l
);

528 i‡(!(
tx
->
w_£t
.
íåõs
 <
w
 && w <Åx->w_£t.íåõ†+Åx->w_£t.
nb_íåõs
))

535 i‡(
	`LOCK_GET_TIMESTAMP
(
l
Ë!
r
->
vîsi⁄
) {

543 
	}
}

548 
ölöe
 
	$°m_exãnd
(
°m_tx_t
 *
tx
)

550 
°m_w‹d_t
 
now
;

552 
	`PRINT_DEBUG
("==> stm_exãnd(%p[%lu-%lu])\n", 
tx
, (Èx->
°¨t
, (Èx->
íd
);

555 
	`as£π
(
tx
->
°©us
 =
TX_ACTIVE
);

558 
now
 = 
GET_CLOCK
;

559 i‡(
now
 >
VERSION_MAX
) {

564 i‡(
	`°m_vÆid©e
(
tx
)) {

566 
tx
->
íd
 = 
now
;

570 
	}
}

575 
ölöe
 
	$°m_rﬁlback
(
°m_tx_t
 *
tx
)

577 
w_íåy_t
 *
w
;

578 
i
;

580 
	`PRINT_DEBUG
("==> stm_rﬁlback(%p[%lu-%lu])\n", 
tx
, (Èx->
°¨t
, (Èx->
íd
);

583 
	`as£π
(
tx
->
°©us
 =
TX_ACTIVE
);

586 
i
 = 
tx
->
w_£t
.
nb_íåõs
;

587 i‡(
i
 > 0) {

588 
w
 = 
tx
->
w_£t
.
íåõs
;

589 ; 
i
 > 0; i--, 
w
++) {

590 i‡(
w
->
√xt
 =
NULL
) {

592 
	`ATOMIC_STORE
(
w
->
lock
, 
	`LOCK_SET_TIMESTAMP
(w->
vîsi⁄
));

594 
	`PRINT_DEBUG2
("==> discard(t=%p[%lu-%lu],a=%p,d=%p-%lu,v=%lu)\n",

595 
tx
, (Èx->
°¨t
, (Èx->
íd
, 
w
->
addr
, (*)w->
vÆue
, ()w->vÆue, ()w->
vîsi⁄
);

598 
ATOMIC_MB_WRITE
;

601 
tx
->
ªåõs
++;

602 
tx
->
ab‹ts
++;

603 i‡(
tx
->
max_ªåõs
 <Åx->
ªåõs
)

604 
tx
->
max_ªåõs
 =Åx->
ªåõs
;

607 i‡(
nb_ab‹t_cb
 != 0) {

608 
cb
;

609 
cb
 = 0; cb < 
nb_ab‹t_cb
; cb++)

610 
ab‹t_cb
[
cb
].
	`f
(
TXARGS
áb‹t_cb[cb].
¨g
);

614 
tx
->
°©us
 = 
TX_ABORTED
;

617 
tx
->
√°ög
 = 0;

621 i‡(
tx
->
jmp
 !
NULL
)

622 
	`sigl⁄gjmp
(*
tx
->
jmp
, 1);

623 
	}
}

629 
ölöe
 
w_íåy_t
 *
	$°m_ña°ic_wrôe
(
°m_tx_t
 *
tx
, vﬁ©ûê
°m_w‹d_t
 *
addr
, stm_w‹d_à
vÆue
, stm_w‹d_à
mask
)

631 vﬁ©ûê
°m_w‹d_t
 *
lock
, *
lock2
;

632 
°m_w‹d_t
 
ts_x
 = 0;

633 
°m_w‹d_t
 
l
, 
l2
, 
vîsi⁄
;

634 
w_íåy_t
 *
w
;

635 
w_íåy_t
 *
¥ev
 = 
NULL
;

637 
	`PRINT_DEBUG2
("==> stm_write(t=%p[%lu-%lu],a=%p,d=%p-%lu,m=0x%lx)\n",

638 
tx
, (Èx->
°¨t
, (Èx->
íd
, 
addr
, (*)
vÆue
, ()vÆue, ()
mask
);

641 
	`as£π
(
tx
->
°©us
 =
TX_ACTIVE
);

643 
tx
->
ty≥
 = 
NL
;

645 i‡(
tx
->
ro
) {

647 
	`as£π
(
tx
->
©å
 !
NULL
);

648 
tx
->
©å
->
ro
 = 0;

649 
tx
->
ab‹ts_ro
++;

650 
	`°m_rﬁlback
(
tx
);

651  
NULL
;

655 
lock
 = 
	`GET_LOCK
(
addr
);

658 
ª°¨t
:

659 
l
 = 
	`ATOMIC_LOAD_ACQ
(
lock
);

660 
ª°¨t_no_lﬂd
:

661 i‡(
	`LOCK_GET_OWNED
(
l
)) {

664 
w
 = (
w_íåy_t
 *)
	`LOCK_GET_ADDR
(
l
);

666 i‡(
tx
->
w_£t
.
íåõs
 <
w
 && w <Åx->w_£t.íåõ†+Åx->w_£t.
nb_íåõs
) {

668 
¥ev
 = 
w
;

671 i‡(
addr
 =
¥ev
->addr) {

672 i‡(
mask
 == 0)

673  
¥ev
;

675 
	`PRINT_DEBUG2
("==> stm_write(t=%p[%lu-%lu],a=%p,l=%p,*l=%lu,d=%p-%lu,m=0x%lx)\n",

676 
tx
, (Èx->
°¨t
, (Èx->
íd
, 
addr
, 
lock
, ()
l
, (*)
vÆue
, ()vÆue, ()
mask
);

677 i‡(
mask
 !~(
°m_w‹d_t
)0) {

678 i‡(
¥ev
->
mask
 == 0)

679 
¥ev
->
vÆue
 = 
	`ATOMIC_LOAD
(
addr
);

680 
vÆue
 = (
¥ev
->vÆuê& ~
mask
) | (value & mask);

682 
¥ev
->
vÆue
 = value;

683 
¥ev
->
mask
 |= mask;

684  
¥ev
;

686 i‡(
¥ev
->
√xt
 =
NULL
) {

690 
¥ev
 =Öªv->
√xt
;

693 
vîsi⁄
 = 
¥ev
->version;

695 i‡(
tx
->
w_£t
.
nb_íåõs
 =tx->w_£t.
size
) {

697 
tx
->
w_£t
.
size
 *= 2;

698 
tx
->
w_£t
.
ªÆloˇã
 = 1;

699 
tx
->
ab‹ts_ªÆloˇã
++;

700 
	`°m_rﬁlback
(
tx
);

701  
NULL
;

703 
w
 = &
tx
->
w_£t
.
íåõs
[tx->w_£t.
nb_íåõs
];

704 
do_wrôe
;

709 
tx
->
ab‹ts_locked_wrôe
++;

710 
	`°m_rﬁlback
(
tx
);

711  
NULL
;

715 i‡(
tx
->
œ°øddr
) {

716 
lock2
 = 
	`GET_LOCK
(
tx
->
œ°øddr
);

717 
l2
 = 
	`ATOMIC_LOAD_ACQ
(
lock2
);

718 i‡(
	`LOCK_GET_OWNED
(
l2
Ë&& (
°m_tx_t
 *)
	`LOCK_GET_ADDR
(
l
Ë!
tx
) {

720 
tx
->
ab‹ts_locked_wrôe
++;

721 
	`°m_rﬁlback
(
tx
);

724 
ts_x
 = (
°m_w‹d_t
)
	`LOCK_GET_TIMESTAMP
(
l2
);

725 i‡(
ts_x
 > 
tx
->
°¨t
) {

727 
tx
->
ab‹ts_doubÀ_wrôe
++;

728 
	`°m_rﬁlback
(
tx
);

731 
tx
->
œ°øddr
 = 
NULL
;

735 
vîsi⁄
 = 
	`LOCK_GET_TIMESTAMP
(
l
);

736 i‡(
vîsi⁄
 > 
tx
->
íd
) {

738 i‡(!
tx
->
ˇn_exãnd
 || 
	`°m_has_ªad
—x, 
lock
Ë!
NULL
) {

741 
tx
->
ab‹ts_vÆid©e_wrôe
++;

742 
	`°m_rﬁlback
(
tx
);

743  
NULL
;

747 i‡(
tx
->
w_£t
.
nb_íåõs
 =tx->w_£t.
size
) {

749 
tx
->
w_£t
.
size
 *= 2;

750 
tx
->
w_£t
.
ªÆloˇã
 = 1;

751 
tx
->
ab‹ts_ªÆloˇã
++;

752 
	`°m_rﬁlback
(
tx
);

753  
NULL
;

755 
w
 = &
tx
->
w_£t
.
íåõs
[tx->w_£t.
nb_íåõs
];

756 i‡(
	`ATOMIC_CAS_FULL
(
lock
, 
l
, 
	`LOCK_SET_ADDR
((
°m_w‹d_t
)
w
)) == 0)

757 
ª°¨t
;

760 
do_wrôe
:

761 
	`PRINT_DEBUG2
("==> stm_write(t=%p[%lu-%lu],a=%p,l=%p,*l=%lu,d=%p-%lu,m=0x%lx)\n",

762 
tx
, (Èx->
°¨t
, (Èx->
íd
, 
addr
, 
lock
, ()
l
, (*)
vÆue
, ()vÆue, ()
mask
);

765 i‡(
tx
->
w_£t
.
nb_íåõs
 =tx->w_£t.
size
)

766 
	`°m_Æloˇã_ws_íåõs
(
tx
, 1);

767 
w
 = &
tx
->
w_£t
.
íåõs
[tx->w_£t.
nb_íåõs
++];

768 
w
->
addr
 =áddr;

769 
w
->
mask
 = mask;

770 
w
->
lock
 =Üock;

771 i‡(
mask
 == 0) {

773 #i‚de‡
NDEBUG


774 
w
->
vÆue
 = 0;

778 i‡(
mask
 !~(
°m_w‹d_t
)0)

779 
vÆue
 = (
	`ATOMIC_LOAD
(
addr
Ë& ~
mask
) | (value & mask);

780 
w
->
vÆue
 = value;

782 
w
->
vîsi⁄
 = version;

783 
w
->
√xt
 = 
NULL
;

784 i‡(
¥ev
 !
NULL
) {

786 
¥ev
->
√xt
 = 
w
;

788 
tx
->
w_£t
.
nb_íåõs
++;

790  
w
;

791 
	}
}

797 
ölöe
 
w_íåy_t
 *
	$°m_wrôe
(
°m_tx_t
 *
tx
, vﬁ©ûê
°m_w‹d_t
 *
addr
, stm_w‹d_à
vÆue
, stm_w‹d_à
mask
)

799 vﬁ©ûê
°m_w‹d_t
 *
lock
;

800 
°m_w‹d_t
 
l
, 
vîsi⁄
;

801 
w_íåy_t
 *
w
;

802 
w_íåy_t
 *
¥ev
 = 
NULL
;

804 
	`PRINT_DEBUG2
("==> stm_write(t=%p[%lu-%lu],a=%p,d=%p-%lu,m=0x%lx)\n",

805 
tx
, (Èx->
°¨t
, (Èx->
íd
, 
addr
, (*)
vÆue
, ()vÆue, ()
mask
);

808 
	`as£π
(
tx
->
°©us
 =
TX_ACTIVE
);

810 i‡(
tx
->
ro
) {

812 
	`as£π
(
tx
->
©å
 !
NULL
);

813 
tx
->
©å
->
ro
 = 0;

814 
tx
->
ab‹ts_ro
++;

815 
	`°m_rﬁlback
(
tx
);

816  
NULL
;

820 
lock
 = 
	`GET_LOCK
(
addr
);

823 
ª°¨t
:

824 
l
 = 
	`ATOMIC_LOAD_ACQ
(
lock
);

825 
ª°¨t_no_lﬂd
:

826 i‡(
	`LOCK_GET_OWNED
(
l
)) {

829 
w
 = (
w_íåy_t
 *)
	`LOCK_GET_ADDR
(
l
);

831 i‡(
tx
->
w_£t
.
íåõs
 <
w
 && w <Åx->w_£t.íåõ†+Åx->w_£t.
nb_íåõs
) {

833 
¥ev
 = 
w
;

836 i‡(
addr
 =
¥ev
->addr) {

837 i‡(
mask
 == 0)

838  
¥ev
;

840 
	`PRINT_DEBUG2
("==> stm_write(t=%p[%lu-%lu],a=%p,l=%p,*l=%lu,d=%p-%lu,m=0x%lx)\n",

841 
tx
, (Èx->
°¨t
, (Èx->
íd
, 
addr
, 
lock
, ()
l
, (*)
vÆue
, ()vÆue, ()
mask
);

842 i‡(
mask
 !~(
°m_w‹d_t
)0) {

843 i‡(
¥ev
->
mask
 == 0)

844 
¥ev
->
vÆue
 = 
	`ATOMIC_LOAD
(
addr
);

845 
vÆue
 = (
¥ev
->vÆuê& ~
mask
) | (value & mask);

847 
¥ev
->
vÆue
 = value;

848 
¥ev
->
mask
 |= mask;

849  
¥ev
;

851 i‡(
¥ev
->
√xt
 =
NULL
) {

855 
¥ev
 =Öªv->
√xt
;

858 
vîsi⁄
 = 
¥ev
->version;

860 i‡(
tx
->
w_£t
.
nb_íåõs
 =tx->w_£t.
size
) {

862 
tx
->
w_£t
.
size
 *= 2;

863 
tx
->
w_£t
.
ªÆloˇã
 = 1;

864 
tx
->
ab‹ts_ªÆloˇã
++;

865 
	`°m_rﬁlback
(
tx
);

866  
NULL
;

868 
w
 = &
tx
->
w_£t
.
íåõs
[tx->w_£t.
nb_íåõs
];

869 
do_wrôe
;

873 
tx
->
ab‹ts_locked_wrôe
++;

874 
	`°m_rﬁlback
(
tx
);

875  
NULL
;

879 
vîsi⁄
 = 
	`LOCK_GET_TIMESTAMP
(
l
);

880 i‡(
vîsi⁄
 > 
tx
->
íd
) {

882 i‡(!
tx
->
ˇn_exãnd
 || 
	`°m_has_ªad
—x, 
lock
Ë!
NULL
) {

885 
tx
->
ab‹ts_vÆid©e_wrôe
++;

886 
	`°m_rﬁlback
(
tx
);

887  
NULL
;

891 i‡(
tx
->
w_£t
.
nb_íåõs
 =tx->w_£t.
size
) {

893 
tx
->
w_£t
.
size
 *= 2;

894 
tx
->
w_£t
.
ªÆloˇã
 = 1;

895 
tx
->
ab‹ts_ªÆloˇã
++;

896 
	`°m_rﬁlback
(
tx
);

897  
NULL
;

899 
w
 = &
tx
->
w_£t
.
íåõs
[tx->w_£t.
nb_íåõs
];

900 i‡(
	`ATOMIC_CAS_FULL
(
lock
, 
l
, 
	`LOCK_SET_ADDR
((
°m_w‹d_t
)
w
)) == 0)

901 
ª°¨t
;

904 
do_wrôe
:

905 
	`PRINT_DEBUG2
("==> stm_write(t=%p[%lu-%lu],a=%p,l=%p,*l=%lu,d=%p-%lu,m=0x%lx)\n",

906 
tx
, (Èx->
°¨t
, (Èx->
íd
, 
addr
, 
lock
, ()
l
, (*)
vÆue
, ()vÆue, ()
mask
);

909 
w
->
addr
 =áddr;

910 
w
->
mask
 = mask;

911 
w
->
lock
 =Üock;

912 i‡(
mask
 == 0) {

914 #i‚de‡
NDEBUG


915 
w
->
vÆue
 = 0;

920 i‡(
mask
 !~(
°m_w‹d_t
)0)

921 
vÆue
 = (
	`ATOMIC_LOAD
(
addr
Ë& ~
mask
) | (value & mask);

922 
w
->
vÆue
 = value;

924 
w
->
vîsi⁄
 = version;

925 
w
->
√xt
 = 
NULL
;

926 i‡(
¥ev
 !
NULL
) {

928 
¥ev
->
√xt
 = 
w
;

930 
tx
->
w_£t
.
nb_íåõs
++;

932  
w
;

933 
	}
}

938 
ölöe
 
	$°m_unô_wrôe
(vﬁ©ûê
°m_w‹d_t
 *
addr
, stm_w‹d_à
vÆue
, stm_w‹d_à
mask
, stm_w‹d_à*
time°amp
)

940 vﬁ©ûê
°m_w‹d_t
 *
lock
;

941 
°m_w‹d_t
 
l
;

943 
	`PRINT_DEBUG2
("==> stm_unit_write(a=%p,d=%p-%lu,m=0x%lx)\n",

944 
addr
, (*)
vÆue
, ()vÆue, ()
mask
);

947 
lock
 = 
	`GET_LOCK
(
addr
);

950 
ª°¨t
:

951 
l
 = 
	`ATOMIC_LOAD_ACQ
(
lock
);

952 i‡(
	`LOCK_GET_OWNED
(
l
)) {

954 
ª°¨t
;

957 i‡(
time°amp
 !
NULL
 && 
	`LOCK_GET_TIMESTAMP
(
l
) > *timestamp) {

959 *
time°amp
 = 
	`LOCK_GET_TIMESTAMP
(
l
);

963 i‡(
	`ATOMIC_CAS_FULL
(
lock
, 
l
, 
LOCK_UNIT
) == 0)

964 
ª°¨t
;

965 
	`ATOMIC_STORE
(
addr
, 
vÆue
);

967 
l
 = 
FETCH_INC_CLOCK
 + 1;

968 i‡(
time°amp
 !
NULL
)

969 *
time°amp
 = 
l
;

971 
	`ATOMIC_STORE_REL
(
lock
, 
	`LOCK_SET_TIMESTAMP
(
l
));

973 
	}
}

978 
	$sig«l_ˇtchî
(
sig
)

980 
°m_tx_t
 *
tx
 = 
	`°m_gë_tx
();

983 
	`PRINT_DEBUG
("Caughàsig«l: %d\n", 
sig
);

985 i‡(
tx
 =
NULL
 ||Åx->
jmp
 == NULL) {

987 
	`Ârötf
(
°dîr
, "Error: invalid memoryáccessedándÇoÜongjmp destination\n");

988 
	`exô
(1);

991 
tx
->
ab‹ts_övÆid_mem‹y
++;

993 
	`°m_rﬁlback
(
tx
);

994 
	}
}

1003 
	$°m_öô
()

1005 
siga˘i⁄
 
a˘
;

1007 
	`PRINT_DEBUG
("==> stm_init()\n");

1009 
	`PRINT_DEBUG
("\tsizeof(w‹d)=%d\n", ()(
°m_w‹d_t
));

1011 
	`PRINT_DEBUG
("\tVERSION_MAX=0x%lx\n", ()
VERSION_MAX
);

1013 
	`COMPILE_TIME_ASSERT
((
°m_w‹d_t
) == (*));

1014 
	`COMPILE_TIME_ASSERT
((
°m_w‹d_t
Ë=(
©omic_t
));

1016 
	`gc_öô
(
°m_gë_˛ock
);

1018 
	`mem£t
((*)
locks
, 0, 
LOCK_ARRAY_SIZE
 * (
°m_w‹d_t
));

1021 
CLOCK
 = 0;

1022 i‡(
	`±hªad_muãx_öô
(&
tx_cou¡_muãx
, 
NULL
) != 0) {

1023 
	`Ârötf
(
°dîr
, "Error creating mutex\n");

1024 
	`exô
(1);

1026 i‡(
	`±hªad_c⁄d_öô
(&
tx_ª£t
, 
NULL
) != 0) {

1027 
	`Ârötf
(
°dîr
, "Error creating condition variable\n");

1028 
	`exô
(1);

1030 
tx_cou¡
 = 0;

1031 
tx_ovîÊow
 = 0;

1033 #i‚de‡
TLS


1034 i‡(
	`±hªad_key_¸óã
(&
thªad_tx
, 
NULL
) != 0) {

1035 
	`Ârötf
(
°dîr
, "Error creatingÅhreadÜocal\n");

1036 
	`exô
(1);

1041 
a˘
.
ß_h™dÀr
 = 
sig«l_ˇtchî
;

1042 
a˘
.
ß_Êags
 = 0;

1043 
	`sigem±y£t
(&
a˘
.
ß_mask
);

1044 i‡(
	`siga˘i⁄
(
SIGBUS
, &
a˘
, 
NULL
Ë< 0 || siga˘i⁄(
SIGSEGV
, &act, NULL) < 0) {

1045 
	`≥º‹
("sigaction");

1046 
	`exô
(1);

1049 
	}
}

1054 
	$°m_exô
()

1056 
	`PRINT_DEBUG
("==> stm_exit()\n");

1058 #i‚de‡
TLS


1059 
	`±hªad_key_dñëe
(
thªad_tx
);

1061 
	`±hªad_c⁄d_de°roy
(&
tx_ª£t
);

1062 
	`±hªad_muãx_de°roy
(&
tx_cou¡_muãx
);

1064 
	`gc_exô
();

1065 
	}
}

1070 
TXTYPE
 
	$°m_öô_thªad
()

1072 
°m_tx_t
 *
tx
;

1074 
	`PRINT_DEBUG
("==> stm_init_thread()\n");

1076 
	`gc_öô_thªad
();

1079 i‡((
tx
 = (
°m_tx_t
 *)
	`mÆloc
((°m_tx_t))Ë=
NULL
) {

1080 
	`≥º‹
("malloc");

1081 
	`exô
(1);

1084 
tx
->
°©us
 = 
TX_IDLE
;

1086 
tx
->
r_£t
.
nb_íåõs
 = 0;

1087 
tx
->
r_£t
.
size
 = 
RW_SET_SIZE
;

1088 
	`°m_Æloˇã_rs_íåõs
(
tx
, 0);

1090 
tx
->
w_£t
.
nb_íåõs
 = 0;

1091 
tx
->
w_£t
.
size
 = 
RW_SET_SIZE
;

1092 
tx
->
w_£t
.
ªÆloˇã
 = 0;

1093 
	`°m_Æloˇã_ws_íåõs
(
tx
, 0);

1095 
tx
->
√°ög
 = 0;

1097 
	`mem£t
(
tx
->
d©a
, 0, 
MAX_SPECIFIC
 * (*));

1098 
tx
->
ªåõs
 = 0;

1100 
tx
->
ab‹ts
 = 0;

1101 
tx
->
ab‹ts_ro
 = 0;

1102 
tx
->
ab‹ts_locked_ªad
 = 0;

1103 
tx
->
ab‹ts_locked_wrôe
 = 0;

1104 
tx
->
ab‹ts_vÆid©e_ªad
 = 0;

1105 
tx
->
ab‹ts_vÆid©e_wrôe
 = 0;

1106 
tx
->
ab‹ts_vÆid©e_commô
 = 0;

1107 
tx
->
ab‹ts_övÆid_mem‹y
 = 0;

1108 
tx
->
ab‹ts_ªÆloˇã
 = 0;

1109 
tx
->
ab‹ts_rﬁlovî
 = 0;

1110 
tx
->
max_ªåõs
 = 0;

1112 #ifde‡
TLS


1113 
thªad_tx
 = 
tx
;

1115 
	`±hªad_£t•ecific
(
thªad_tx
, 
tx
);

1117 
	`°m_rﬁlovî_íãr
(
tx
);

1120 i‡(
nb_öô_cb
 != 0) {

1121 
cb
;

1122 
cb
 = 0; cb < 
nb_öô_cb
; cb++)

1123 
öô_cb
[
cb
].
	`f
(
TXARGS
 inô_cb[cb].
¨g
);

1126 
	`PRINT_DEBUG
("==> %p\n", 
tx
);

1128 
TX_RETURN
;

1129 
	}
}

1134 
	$°m_exô_thªad
(
TXPARAM
)

1136 
°m_w‹d_t
 
t
;

1137 
TX_GET
;

1139 
	`PRINT_DEBUG
("==> stm_exô_thªad(%p[%lu-%lu])\n", 
tx
, (Èx->
°¨t
, (Èx->
íd
);

1142 i‡(
nb_exô_cb
 != 0) {

1143 
cb
;

1144 
cb
 = 0; cb < 
nb_exô_cb
; cb++)

1145 
exô_cb
[
cb
].
	`f
(
TXARGS
Éxô_cb[cb].
¨g
);

1148 
	`°m_rﬁlovî_exô
(
tx
);

1150 
t
 = 
GET_CLOCK
;

1151 
	`gc_‰ì
(
tx
->
r_£t
.
íåõs
, 
t
);

1152 
	`gc_‰ì
(
tx
->
w_£t
.
íåõs
, 
t
);

1153 
	`gc_‰ì
(
tx
, 
t
);

1154 
	`gc_exô_thªad
();

1155 
	}
}

1161 
ölöe
 
	$°m_ña°ic_°¨t
(
TXPARAMS
 
sigjmp_buf
 *
ív
, 
°m_tx_©å_t
 *
©å
)

1163 
TX_GET
;

1164 
tx
->
ty≥
 = 
EL
;

1165 
tx
->
œ°øddr
 = 
NULL
;

1167 
	`PRINT_DEBUG
("==> stm_ña°ic_°¨t(%p)\n", 
tx
);

1170 i‡(
tx
->
√°ög
++ > 0)

1174 
tx
->
jmp
 = 
ív
;

1176 
tx
->
©å
 =áttr;

1177 
tx
->
ro
 = (
©å
 =
NULL
 ? 0 :áttr->ro);

1179 
tx
->
°©us
 = 
TX_ACTIVE
;

1180 
°¨t
:

1182 
tx
->
°¨t
 =Åx->
íd
 = 
GET_CLOCK
;

1184 
tx
->
ˇn_exãnd
 = 0;

1185 i‡(
tx
->
°¨t
 >
VERSION_MAX
) {

1187 
	`°m_ovîÊow
(
tx
);

1188 
°¨t
;

1191 i‡(
tx
->
w_£t
.
ªÆloˇã
) {

1193 
	`gc_‰ì
(
tx
->
w_£t
.
íåõs
,Åx->
°¨t
);

1194 
	`°m_Æloˇã_ws_íåõs
(
tx
, 0);

1195 
tx
->
w_£t
.
ªÆloˇã
 = 0;

1197 
tx
->
w_£t
.
nb_íåõs
 = 0;

1198 
tx
->
r_£t
.
nb_íåõs
 = 0;

1200 
	`gc_£t_ïoch
(
tx
->
°¨t
);

1203 i‡(
nb_°¨t_cb
 != 0) {

1204 
cb
;

1205 
cb
 = 0; cb < 
nb_°¨t_cb
; cb++)

1206 
°¨t_cb
[
cb
].
	`f
(
TXARGS
 sèπ_cb[cb].
¨g
);

1208 
	}
}

1213 
ölöe
 
	$°m_n‹mÆ_°¨t
(
TXPARAMS
 
sigjmp_buf
 *
ív
, 
°m_tx_©å_t
 *
©å
)

1215 
TX_GET
;

1216 
tx
->
ty≥
 = 
NL
;

1218 
	`PRINT_DEBUG
("==> stm_n‹mÆ_°¨t(%p)\n", 
tx
);

1221 i‡(
tx
->
√°ög
++ > 0)

1225 
tx
->
jmp
 = 
ív
;

1227 
tx
->
©å
 =áttr;

1228 
tx
->
ro
 = (
©å
 =
NULL
 ? 0 :áttr->ro);

1230 
tx
->
°©us
 = 
TX_ACTIVE
;

1231 
°¨t
:

1233 
tx
->
°¨t
 =Åx->
íd
 = 
GET_CLOCK
;

1235 
tx
->
ˇn_exãnd
 = 1;

1236 i‡(
tx
->
°¨t
 >
VERSION_MAX
) {

1238 
	`°m_ovîÊow
(
tx
);

1239 
°¨t
;

1242 i‡(
tx
->
w_£t
.
ªÆloˇã
) {

1244 
	`gc_‰ì
(
tx
->
w_£t
.
íåõs
,Åx->
°¨t
);

1245 
	`°m_Æloˇã_ws_íåõs
(
tx
, 0);

1246 
tx
->
w_£t
.
ªÆloˇã
 = 0;

1248 
tx
->
w_£t
.
nb_íåõs
 = 0;

1249 
tx
->
r_£t
.
nb_íåõs
 = 0;

1251 
	`gc_£t_ïoch
(
tx
->
°¨t
);

1254 i‡(
nb_°¨t_cb
 != 0) {

1255 
cb
;

1256 
cb
 = 0; cb < 
nb_°¨t_cb
; cb++)

1257 
°¨t_cb
[
cb
].
	`f
(
TXARGS
 sèπ_cb[cb].
¨g
);

1259 
	}
}

1261 
	$°m_°¨t
(
TXPARAMS
 
sigjmp_buf
 *
ív
, 
°m_tx_©å_t
 *
©å
, 
ty≥
) {

1262 i‡(
ty≥
 =
NL
Ë
	`°m_n‹mÆ_°¨t
(
ív
, 
©å
);

1263 
	`°m_ña°ic_°¨t
(
ív
, 
©å
);

1264 
	}
}

1269 
ölöe
 
	$°m_ña°ic_commô
(
TXPARAM
)

1271 
TX_GET
;

1273 
	`PRINT_DEBUG
("==> stm_ña°ic_commô(%p[%lu-%lu])\n", 
tx
, (Èx->
°¨t
, (Èx->
íd
);

1276 
	`as£π
(
tx
->
°©us
 =
TX_ACTIVE
);

1279 i‡(--
tx
->
√°ög
 > 0)

1282 
tx
->
ªåõs
 = 0;

1287 i‡(
nb_commô_cb
 != 0) {

1288 
cb
;

1289 
cb
 = 0; cb < 
nb_commô_cb
; cb++)

1290 
commô_cb
[
cb
].
	`f
(
TXARGS
 commô_cb[cb].
¨g
);

1294 
tx
->
°©us
 = 
TX_COMMITTED
;

1297 
	}
}

1302 
ölöe
 
	$°m_n‹mÆ_commô
(
TXPARAM
)

1304 
w_íåy_t
 *
w
;

1305 
°m_w‹d_t
 
t
;

1306 
i
;

1307 
TX_GET
;

1309 
	`PRINT_DEBUG
("==> stm_n‹mÆ_commô(%p[%lu-%lu])\n", 
tx
, (Èx->
°¨t
, (Èx->
íd
);

1312 
	`as£π
(
tx
->
°©us
 =
TX_ACTIVE
);

1315 i‡(--
tx
->
√°ög
 > 0)

1318 i‡(
tx
->
w_£t
.
nb_íåõs
 > 0) {

1323 
t
 = 
FETCH_INC_CLOCK
 + 1;

1324 i‡(
t
 >
VERSION_MAX
) {

1326 
tx
->
ab‹ts_rﬁlovî
++;

1327 
	`°m_rﬁlback
(
tx
);

1332 i‡(
tx
->
°¨t
 !
t
 - 1 && !
	`°m_vÆid©e
(tx)) {

1334 
tx
->
ab‹ts_vÆid©e_commô
++;

1335 
	`°m_rﬁlback
(
tx
);

1340 
w
 = 
tx
->
w_£t
.
íåõs
;

1341 
i
 = 
tx
->
w_£t
.
nb_íåõs
; i > 0; i--, 
w
++) {

1342 i‡(
w
->
mask
 != 0)

1343 
	`ATOMIC_STORE
(
w
->
addr
, w->
vÆue
);

1345 i‡(
w
->
√xt
 =
NULL
)

1346 
	`ATOMIC_STORE_REL
(
w
->
lock
, 
	`LOCK_SET_TIMESTAMP
(
t
));

1348 
	`PRINT_DEBUG2
("==> write(t=%p[%lu-%lu],a=%p,d=%p-%d,v=%d)\n",

1349 
tx
, (Èx->
°¨t
, (Èx->
íd
, 
w
->
addr
, (*)w->
vÆue
, ()w->vÆue, ()w->
vîsi⁄
);

1353 
tx
->
ªåõs
 = 0;

1358 i‡(
nb_commô_cb
 != 0) {

1359 
cb
;

1360 
cb
 = 0; cb < 
nb_commô_cb
; cb++)

1361 
commô_cb
[
cb
].
	`f
(
TXARGS
 commô_cb[cb].
¨g
);

1365 
tx
->
°©us
 = 
TX_COMMITTED
;

1368 
	}
}

1370 
	$°m_commô
(
TXPARAM
) {

1371 
TX_GET
;

1372 i‡(
tx
->
ty≥
 =
NL
Ë 
	`°m_n‹mÆ_commô
();

1373  
	`°m_ña°ic_commô
();

1374 
	}
}

1379 
	$°m_ab‹t
(
TXPARAM
)

1381 
TX_GET
;

1382 
	`°m_rﬁlback
(
tx
);

1383 
	}
}

1388 
ölöe
 
°m_w‹d_t
 
	$°m_ªad_vîvÆvî
(vﬁ©ûê
°m_w‹d_t
 *
addr
, stm_w‹d_à*
time°amp
)

1390 vﬁ©ûê
°m_w‹d_t
 *
lock
;

1391 
°m_w‹d_t
 
l
, 
l2
, 
vÆue
;

1392 
w_íåy_t
 *
w
;

1394 
TX_GET
;

1396 
	`PRINT_DEBUG2
("==> stm_unô_lﬂd◊=%p)\n", 
addr
);

1399 
lock
 = 
	`GET_LOCK
(
addr
);

1402 
ª°¨t
:

1403 
l
 = 
	`ATOMIC_LOAD_ACQ
(
lock
);

1404 
ª°¨t_no_lﬂd
:

1405 i‡(
	`LOCK_GET_OWNED
(
l
)) {

1407 i‡((
°m_tx_t
 *)
	`LOCK_GET_ADDR
(
l
Ë=
tx
) {

1409 
w
 = (
w_íåy_t
 *)
	`LOCK_GET_ADDR
(
l
);

1411 i‡(
tx
->
w_£t
.
íåõs
 <
w
 && w <Åx->w_£t.íåõ†+Åx->w_£t.
nb_íåõs
) {

1414 i‡(
addr
 =
w
->addr) {

1416 
vÆue
 = (
w
->
mask
 =0 ? 
	`ATOMIC_LOAD
(
addr
) : w->value);

1419 i‡(
w
->
√xt
 =
NULL
) {

1421 
vÆue
 = 
	`ATOMIC_LOAD
(
addr
);

1424 
w
 = w->
√xt
;

1427 
	`PRINT_DEBUG2
("==> stm_normal_load(t=%p[%lu-%lu],a=%p,l=%p,*l=%lu,d=%p-%lu)\n",

1428 
tx
, (Èx->
°¨t
, (Èx->
íd
, 
addr
, 
lock
, ()
l
, (*)
vÆue
, ()value);

1429  
vÆue
;

1436 
ª°¨t
;

1439 
vÆue
 = 
	`ATOMIC_LOAD_ACQ
(
addr
);

1440 
l2
 = 
	`ATOMIC_LOAD_ACQ
(
lock
);

1441 i‡(
l
 !
l2
) {

1442 
l
 = 
l2
;

1443 
ª°¨t_no_lﬂd
;

1446 i‡(
time
 !
NULL
)

1447 *
time°amp
 = 
	`LOCK_GET_TIMESTAMP
(
l
);

1449 
	`PRINT_DEBUG2
("==> stm_read_vervalver(a=%p,l=%p,*l=%lu,d=%p-%lu)\n",

1450 
addr
, 
lock
, ()
l
, (*)
vÆue
, ()value);

1452  
vÆue
;

1453 
	}
}

1459 
ölöe
 
°m_w‹d_t
 
	$°m_ña°ic_lﬂd
(
TXPARAMS
 vﬁ©ûê
°m_w‹d_t
 *
x
)

1461 
°m_w‹d_t
 
v_x
;

1462 
°m_w‹d_t
 *
y
;

1463 
°m_w‹d_t
 
ts_x
 = 0;

1464 
°m_w‹d_t
 
ts_y
 = 0;

1466 
TX_GET
;

1469 
	`as£π
(
tx
->
°©us
 =
TX_ACTIVE
);

1475 
	`PRINT_DEBUG2
("==> stm_ña°ic_lﬂd—=%p[%lu-%lu],a=%p)\n", 
tx
,

1476 ()
tx
->
°¨t
, (Èx->
íd
, 
addr
);

1478 
v_x
 = 
	`°m_ªad_vîvÆvî
(
x
, &
ts_x
);

1479 i‡(!
tx
->
œ°øddr
) {

1480 i‡(
ts_x
 > 
tx
->
°¨t
)Åx->start =Ås_x;

1482 i‡(
ts_x
 > 
tx
->
°¨t
) {

1483 
y
 = 
tx
->
œ°øddr
;

1484 
	`°m_ªad_vîvÆvî
(
y
, &
ts_y
);

1485 i‡(
ts_y
 > 
tx
->
°¨t
) {

1487 
	`°m_rﬁlback
(
tx
);

1490 
tx
->
°¨t
 = 
ts_x
;

1493 
tx
->
œ°øddr
 = (
°m_w‹d_t
 *)
x
;

1494  
v_x
;

1495 
	}
}

1526 
ölöe
 
°m_w‹d_t
 
	$°m_n‹mÆ_lﬂd
(
TXPARAMS
 vﬁ©ûê
°m_w‹d_t
 *
addr
)

1528 vﬁ©ûê
°m_w‹d_t
 *
lock
;

1529 
°m_w‹d_t
 
l
, 
l2
, 
vÆue
, 
vîsi⁄
;

1530 
r_íåy_t
 *
r
;

1531 
w_íåy_t
 *
w
;

1532 
TX_GET
;

1534 
	`PRINT_DEBUG2
("==> stm_n‹mÆ_lﬂd—=%p[%lu-%lu],a=%p)\n", 
tx
, (Èx->
°¨t
, (Èx->
íd
, 
addr
);

1537 
	`as£π
(
tx
->
°©us
 =
TX_ACTIVE
);

1542 
lock
 = 
	`GET_LOCK
(
addr
);

1547 
ª°¨t
:

1548 
l
 = 
	`ATOMIC_LOAD_ACQ
(
lock
);

1549 
ª°¨t_no_lﬂd
:

1550 i‡(
	`LOCK_GET_OWNED
(
l
)) {

1553 
w
 = (
w_íåy_t
 *)
	`LOCK_GET_ADDR
(
l
);

1555 i‡(
tx
->
w_£t
.
íåõs
 <
w
 && w <Åx->w_£t.íåõ†+Åx->w_£t.
nb_íåõs
) {

1558 i‡(
addr
 =
w
->addr) {

1560 
vÆue
 = (
w
->
mask
 =0 ? 
	`ATOMIC_LOAD
(
addr
) : w->value);

1563 i‡(
w
->
√xt
 =
NULL
) {

1565 
vÆue
 = 
	`ATOMIC_LOAD
(
addr
);

1568 
w
 = w->
√xt
;

1571 
	`PRINT_DEBUG2
("==> stm_normal_load(t=%p[%lu-%lu],a=%p,l=%p,*l=%lu,d=%p-%lu)\n",

1572 
tx
, (Èx->
°¨t
, (Èx->
íd
, 
addr
, 
lock
, ()
l
, (*)
vÆue
, ()value);

1573  
vÆue
;

1579 
	`°m_rﬁlback
(
tx
);

1583 
vÆue
 = 
	`ATOMIC_LOAD_ACQ
(
addr
);

1584 
l2
 = 
	`ATOMIC_LOAD_ACQ
(
lock
);

1585 i‡(
l
 !
l2
) {

1586 
l
 = 
l2
;

1587 
ª°¨t_no_lﬂd
;

1590 
vîsi⁄
 = 
	`LOCK_GET_TIMESTAMP
(
l
);

1592 i‡(
vîsi⁄
 > 
tx
->
íd
) {

1594 i‡(
tx
->
ro
 || !tx->
ˇn_exãnd
 || !
	`°m_exãnd
(tx)) {

1597 
	`°m_rﬁlback
(
tx
);

1603 
l
 = 
	`ATOMIC_LOAD_ACQ
(
lock
);

1604 i‡(
l
 !
l2
) {

1605 
l
 = 
l2
;

1606 
ª°¨t_no_lﬂd
;

1613 i‡(!
tx
->
ro
) {

1615 i‡(
tx
->
r_£t
.
nb_íåõs
 =tx->r_£t.
size
)

1616 
	`°m_Æloˇã_rs_íåõs
(
tx
, 1);

1617 
r
 = &
tx
->
r_£t
.
íåõs
[tx->r_£t.
nb_íåõs
++];

1618 
r
->
vîsi⁄
 = version;

1619 
r
->
lock
 =Üock;

1622 
	`PRINT_DEBUG2
("==> stm_normal_load(t=%p[%lu-%lu],a=%p,l=%p,*l=%lu,d=%p-%lu,v=%lu)\n",

1623 
tx
, (Èx->
°¨t
, (Èx->
íd
, 
addr
, 
lock
, ()
l
, (*)
vÆue
, ()vÆue, ()
vîsi⁄
);

1625  
vÆue
;

1626 
	}
}

1632 
°m_w‹d_t
 
	$°m_lﬂd
(
TXPARAMS
 vﬁ©ûê
°m_w‹d_t
 *
addr
) {

1633 
TX_GET
;

1634 i‡(
tx
->
ty≥
 =
NL
Ë 
	`°m_n‹mÆ_lﬂd
(
addr
);

1635  
	`°m_ña°ic_lﬂd
(
addr
);

1636 
	}
}

1642 
ölöe
 
	$°m_ña°ic_°‹e
(vﬁ©ûê
°m_w‹d_t
 *
addr
, stm_w‹d_à
vÆue
)

1644 
°m_w‹d_t
 
ts_x
;

1645 vﬁ©ûê
°m_w‹d_t
 *
lock
;

1646 
°m_w‹d_t
 
l
;

1647 
w_íåy_t
 *
w
;

1649 
TX_GET
;

1651 
	`PRINT_DEBUG2
("==> stm_ña°ic_°‹e—=%p[%lu-%lu],a=%p)\n", 
tx
,

1652 ()
tx
->
°¨t
, (Èx->
íd
, 
addr
);

1654 
tx
->
ty≥
 = 
NL
;

1655 
	`°m_wrôe
(
tx
, 
addr
, 
vÆue
, ~(
°m_w‹d_t
)0);

1657 i‡(
tx
->
œ°øddr
) {

1658 
lock
 = 
	`GET_LOCK
(
tx
->
œ°øddr
);

1659 
l
 = 
	`ATOMIC_LOAD_ACQ
(
lock
);

1660 i‡(
	`LOCK_GET_OWNED
(
l
)) {

1661 
w
 = (
w_íåy_t
 *)
	`LOCK_GET_ADDR
(
l
);

1663 i‡((
tx
->
w_£t
.
íåõs
 <
w
 && w <Åx->w_£t.íåõ†+Åx->w_£t.
nb_íåõs
))

1668 
	`°m_rﬁlback
(
tx
);

1671 
ts_x
 = (
°m_w‹d_t
)
	`LOCK_GET_TIMESTAMP
(
l
);

1672 i‡(
ts_x
 > 
tx
->
°¨t
) {

1675 
	`°m_rﬁlback
(
tx
);

1678 
tx
->
œ°øddr
 = 
NULL
;

1681 
	}
}

1687 
ölöe
 
	$°m_n‹mÆ_°‹e
(vﬁ©ûê
°m_w‹d_t
 *
addr
, stm_w‹d_à
vÆue
)

1689 
TX_GET
;

1690 
	`°m_wrôe
(
tx
, 
addr
, 
vÆue
, ~(
°m_w‹d_t
)0);

1691 
	}
}

1697 
	$°m_°‹e
(
TXPARAMS
 vﬁ©ûê
°m_w‹d_t
 *
addr
, stm_w‹d_à
vÆue
)

1699 
TX_GET
;

1700 i‡(
tx
->
ty≥
 =
EL
Ë
	`°m_ña°ic_°‹e
(
addr
, 
vÆue
);

1701 
	`°m_n‹mÆ_°‹e
(
addr
, 
vÆue
);

1702 
	}
}

1709 
	$°m_n‹mÆ_°‹e2
(
TXPARAMS
 vﬁ©ûê
°m_w‹d_t
 *
addr
, stm_w‹d_à
vÆue
, stm_w‹d_à
mask
)

1711 
TX_GET
;

1712 i‡(
tx
->
ty≥
 =
EL
Ë
	`°m_ña°ic_wrôe
—x, 
addr
, 
vÆue
, 
mask
);

1713 
	`°m_wrôe
(
tx
, 
addr
, 
vÆue
, 
mask
);

1714 
	}
}

1748 
	$°m_°‹e2
(
TXPARAMS
 vﬁ©ûê
°m_w‹d_t
 *
addr
, stm_w‹d_à
vÆue
, stm_w‹d_à
mask
)

1750 
TX_GET
;

1751 
	`°m_wrôe
(
tx
, 
addr
, 
vÆue
, 
mask
);

1752 
	}
}

1757 
	$°m_a˘ive
(
TXPARAM
)

1759 
TX_GET
;

1761  (
tx
->
°©us
 =
TX_ACTIVE
);

1762 
	}
}

1767 
	$°m_ab‹ãd
(
TXPARAM
)

1769 
TX_GET
;

1771  (
tx
->
°©us
 =
TX_ABORTED
);

1772 
	}
}

1777 
sigjmp_buf
 *
	$°m_gë_ív
(
TXPARAM
)

1779 
TX_GET
;

1782  
tx
->
√°ög
 =0 ? &tx->
ív
 : 
NULL
;

1783 
	}
}

1788 
°m_tx_©å_t
 *
	$°m_gë_©åibuãs
(
TXPARAM
)

1790 
TX_GET
;

1792  
tx
->
©å
;

1793 
	}
}

1798 
	$°m_gë_°©s
(
TXPARAMS
 c⁄° *
«me
, *
vÆ
)

1800 
TX_GET
;

1802 i‡(
	`°rcmp
("ªad_£t_size", 
«me
) == 0) {

1803 *(*)
vÆ
 = 
tx
->
r_£t
.
size
;

1806 i‡(
	`°rcmp
("wrôe_£t_size", 
«me
) == 0) {

1807 *(*)
vÆ
 = 
tx
->
w_£t
.
size
;

1810 i‡(
	`°rcmp
("ªad_£t_nb_íåõs", 
«me
) == 0) {

1811 *(*)
vÆ
 = 
tx
->
r_£t
.
nb_íåõs
;

1814 i‡(
	`°rcmp
("wrôe_£t_nb_íåõs", 
«me
) == 0) {

1815 *(*)
vÆ
 = 
tx
->
w_£t
.
nb_íåõs
;

1818 i‡(
	`°rcmp
("ªad_⁄ly", 
«me
) == 0) {

1819 *(*)
vÆ
 = 
tx
->
ro
;

1822 i‡(
	`°rcmp
("nb_ab‹ts", 
«me
) == 0) {

1823 *(*)
vÆ
 = 
tx
->
ab‹ts
;

1826 i‡(
	`°rcmp
("nb_ab‹ts_ro", 
«me
) == 0) {

1827 *(*)
vÆ
 = 
tx
->
ab‹ts_ro
;

1830 i‡(
	`°rcmp
("nb_ab‹ts_locked_ªad", 
«me
) == 0) {

1831 *(*)
vÆ
 = 
tx
->
ab‹ts_locked_ªad
;

1834 i‡(
	`°rcmp
("nb_ab‹ts_locked_wrôe", 
«me
) == 0) {

1835 *(*)
vÆ
 = 
tx
->
ab‹ts_locked_wrôe
;

1838 i‡(
	`°rcmp
("nb_ab‹ts_vÆid©e_ªad", 
«me
) == 0) {

1839 *(*)
vÆ
 = 
tx
->
ab‹ts_vÆid©e_ªad
;

1842 i‡(
	`°rcmp
("nb_ab‹ts_vÆid©e_wrôe", 
«me
) == 0) {

1843 *(*)
vÆ
 = 
tx
->
ab‹ts_vÆid©e_wrôe
;

1846 i‡(
	`°rcmp
("nb_ab‹ts_vÆid©e_commô", 
«me
) == 0) {

1847 *(*)
vÆ
 = 
tx
->
ab‹ts_vÆid©e_commô
;

1850 i‡(
	`°rcmp
("nb_ab‹ts_övÆid_mem‹y", 
«me
) == 0) {

1851 *(*)
vÆ
 = 
tx
->
ab‹ts_övÆid_mem‹y
;

1854 i‡(
	`°rcmp
("nb_ab‹ts_doubÀ_wrôe", 
«me
) == 0) {

1855 *(*)
vÆ
 = 
tx
->
ab‹ts_doubÀ_wrôe
;

1859 i‡(
	`°rcmp
("nb_ab‹ts_ªÆloˇã", 
«me
) == 0) {

1860 *(*)
vÆ
 = 
tx
->
ab‹ts_ªÆloˇã
;

1863 i‡(
	`°rcmp
("nb_ab‹ts_rﬁlovî", 
«me
) == 0) {

1864 *(*)
vÆ
 = 
tx
->
ab‹ts_rﬁlovî
;

1867 i‡(
	`°rcmp
("max_ªåõs", 
«me
) == 0) {

1868 *(*)
vÆ
 = 
tx
->
max_ªåõs
;

1872 
	}
}

1877 
	$°m_gë_∑ømëî
(c⁄° *
«me
, *
vÆ
)

1879 i‡(
	`°rcmp
("c⁄ã¡i⁄_m™agî", 
«me
) == 0) {

1880 *(c⁄° **)
vÆ
 = 
cm_«mes
[
CM
];

1883 i‡(
	`°rcmp
("design", 
«me
) == 0) {

1884 *(c⁄° **)
vÆ
 = 
design_«mes
[
DESIGN
];

1887 i‡(
	`°rcmp
("öôül_rw_£t_size", 
«me
) == 0) {

1888 *(*)
vÆ
 = 
RW_SET_SIZE
;

1891 #ifde‡
COMPILE_FLAGS


1892 i‡(
	`°rcmp
("compûe_Êags", 
«me
) == 0) {

1893 *(c⁄° **)
vÆ
 = 
	`XSTR
(
COMPILE_FLAGS
);

1898 
	}
}

1903 
	$°m_£t_∑ømëî
(c⁄° *
«me
, *
vÆ
)

1906 
	}
}

1911 
	$°m_¸óã_•ecific
()

1913 i‡(
nb_•ecific
 >
MAX_SPECIFIC
) {

1914 
	`Ârötf
(
°dîr
, "Error: maximumÇumber of specific slotsÑeached\n");

1917  
nb_•ecific
++;

1918 
	}
}

1923 
	$°m_£t_•ecific
(
TXPARAMS
 
key
, *
d©a
)

1925 
TX_GET
;

1927 
	`as£π
 (
key
 >0 && key < 
nb_•ecific
);

1928 
tx
->
d©a
[
key
] = data;

1929 
	}
}

1934 *
	$°m_gë_•ecific
(
TXPARAMS
 
key
)

1936 
TX_GET
;

1938 
	`as£π
 (
key
 >0 && key < 
nb_•ecific
);

1939  
tx
->
d©a
[
key
];

1940 
	}
}

1945 
°m_ªgi°î
((*
⁄_thªad_öô
)(
TXPARAMS
 *
¨g
),

1946 (*
⁄_thªad_exô
)(
TXPARAMS
 *
¨g
),

1947 (*
⁄_°¨t
)(
TXPARAMS
 *
¨g
),

1948 (*
⁄_commô
)(
TXPARAMS
 *
¨g
),

1949 (*
⁄_ab‹t
)(
TXPARAMS
 *
¨g
),

1950 *
¨g
)

1952 i‡((
⁄_thªad_öô
 !
NULL
 && 
nb_öô_cb
 >
MAX_CB
) ||

1953 (
⁄_thªad_exô
 !
NULL
 && 
nb_exô_cb
 >
MAX_CB
) ||

1954 (
⁄_°¨t
 !
NULL
 && 
nb_°¨t_cb
 >
MAX_CB
) ||

1955 (
⁄_commô
 !
NULL
 && 
nb_commô_cb
 >
MAX_CB
) ||

1956 (
⁄_ab‹t
 !
NULL
 && 
nb_ab‹t_cb
 >
MAX_CB
)) {

1957 
	`Ârötf
(
°dîr
, "Error: maximumÇumber of modulesÑeached\n");

1961 i‡(
⁄_thªad_öô
 !
NULL
) {

1962 
öô_cb
[
nb_öô_cb
].
f
 = 
⁄_thªad_öô
;

1963 
öô_cb
[
nb_öô_cb
++].
¨g
 =árg;

1966 i‡(
⁄_thªad_exô
 !
NULL
) {

1967 
exô_cb
[
nb_exô_cb
].
f
 = 
⁄_thªad_exô
;

1968 
exô_cb
[
nb_exô_cb
++].
¨g
 =árg;

1971 i‡(
⁄_°¨t
 !
NULL
) {

1972 
°¨t_cb
[
nb_°¨t_cb
].
f
 = 
⁄_°¨t
;

1973 
°¨t_cb
[
nb_°¨t_cb
++].
¨g
 =árg;

1976 i‡(
⁄_commô
 !
NULL
) {

1977 
commô_cb
[
nb_commô_cb
].
f
 = 
⁄_commô
;

1978 
commô_cb
[
nb_commô_cb
++].
¨g
 =árg;

1981 i‡(
⁄_ab‹t
 !
NULL
) {

1982 
ab‹t_cb
[
nb_ab‹t_cb
].
f
 = 
⁄_ab‹t
;

1983 
ab‹t_cb
[
nb_ab‹t_cb
++].
¨g
 =árg;

1987 
	}
}

1990 
°m_w‹d_t
 
	$n⁄_°m_unô_lﬂd
(vﬁ©ûê
°m_w‹d_t
 *
addr
, stm_w‹d_à*
time°amp
) {

1991 vﬁ©ûê
°m_w‹d_t
 *
lock
;

1992 
°m_w‹d_t
 
l
, 
l2
, 
vÆue
;

1994 
	`PRINT_DEBUG2
("==> stm_unô_lﬂd◊=%p)\n", 
addr
);

1999 
lock
 = 
	`GET_LOCK
(
addr
);

2002 
ª°¨t
:

2003 
l
 = 
	`ATOMIC_LOAD_ACQ
(
lock
);

2004 
ª°¨t_no_lﬂd
:

2005 i‡(
	`LOCK_GET_OWNED
(
l
)) {

2007 i‡(
l
 =
LOCK_UNIT
) {

2009 
ª°¨t
;

2013 #ifde‡
WAIT_YIELD


2014 
	`sched_yõld
();

2016 
ª°¨t
;

2020 
vÆue
 = 
	`ATOMIC_LOAD_ACQ
(
addr
);

2021 
l2
 = 
	`ATOMIC_LOAD_ACQ
(
lock
);

2022 i‡(
l
 !
l2
) {

2023 
l
 = 
l2
;

2024 
ª°¨t_no_lﬂd
;

2027 i‡(
time°amp
 !
NULL
)

2028 *
time°amp
 = 
	`LOCK_GET_TIMESTAMP
(
l
);

2038  
vÆue
;

2039 
	}
}

2046 
°m_w‹d_t
 
	$°m_unô_lﬂd
(vﬁ©ûê
°m_w‹d_t
 *
addr
, stm_w‹d_à*
time°amp
)

2048 vﬁ©ûê
°m_w‹d_t
 *
lock
;

2049 
°m_w‹d_t
 
l
, 
l2
, 
vÆue
;

2051 
	`PRINT_DEBUG2
("==> stm_unô_lﬂd◊=%p)\n", 
addr
);

2054 
lock
 = 
	`GET_LOCK
(
addr
);

2057 
ª°¨t
:

2058 
l
 = 
	`ATOMIC_LOAD_ACQ
(
lock
);

2059 
ª°¨t_no_lﬂd
:

2060 i‡(
	`LOCK_GET_OWNED
(
l
)) {

2062 
ª°¨t
;

2065 
vÆue
 = 
	`ATOMIC_LOAD_ACQ
(
addr
);

2066 
l2
 = 
	`ATOMIC_LOAD_ACQ
(
lock
);

2067 i‡(
l
 !
l2
) {

2068 
l
 = 
l2
;

2069 
ª°¨t_no_lﬂd
;

2072 i‡(
time°amp
 !
NULL
)

2073 *
time°amp
 = 
	`LOCK_GET_TIMESTAMP
(
l
);

2075 
	`PRINT_DEBUG2
("==> stm_unit_load(a=%p,l=%p,*l=%lu,d=%p-%lu)\n",

2076 
addr
, 
lock
, ()
l
, (*)
vÆue
, ()value);

2078  
vÆue
;

2079 
	}
}

2084 
	$°m_unô_°‹e
(vﬁ©ûê
°m_w‹d_t
 *
addr
, stm_w‹d_à
vÆue
, stm_w‹d_à*
time°amp
)

2086  
	`°m_unô_wrôe
(
addr
, 
vÆue
, ~(
°m_w‹d_t
)0, 
time°amp
);

2087 
	}
}

2092 
	$°m_unô_°‹e2
(vﬁ©ûê
°m_w‹d_t
 *
addr
, stm_w‹d_à
vÆue
, stm_w‹d_à
mask
, stm_w‹d_à*
time°amp
)

2094  
	`°m_unô_wrôe
(
addr
, 
vÆue
, 
mask
, 
time°amp
);

2095 
	}
}

2100 
	$°m_£t_exãnsi⁄
(
TXPARAMS
 
íabÀ
, 
°m_w‹d_t
 *
time°amp
)

2102 
TX_GET
;

2104 
tx
->
ˇn_exãnd
 = 
íabÀ
;

2105 i‡(
time°amp
 !
NULL
 && *time°am∞< 
tx
->
íd
)

2106 
tx
->
íd
 = *
time°amp
;

2107 
	}
}

2112 
°m_w‹d_t
 
	$°m_gë_˛ock
()

2114  
GET_CLOCK
;

2115 
	}
}

2120 
°m_tx_t
 *
	$°m_cuºít_tx
()

2122  
	`°m_gë_tx
();

2123 
	}
}

	@utils/estm-0.2.4.3/src/wrappers.c

22 
	~<as£π.h
>

24 
	~"wøµîs.h
"

26 
	#COMPILE_TIME_ASSERT
(
¥ed
Ë0Ë{ 0: ¥ed: ; }

	)

28 
	uc⁄vît_64
 {

29 
uöt64_t
 
	mu64
;

30 
uöt32_t
 
	mu32
[2];

31 
uöt16_t
 
	mu16
[4];

32 
uöt8_t
 
	mu8
[8];

33 
öt64_t
 
	ms64
;

34 
	md
;

35 } 
	tc⁄vît_64_t
;

37 
	uc⁄vît_32
 {

38 
uöt32_t
 
	mu32
;

39 
uöt16_t
 
	mu16
[2];

40 
uöt8_t
 
	mu8
[4];

41 
öt32_t
 
	ms32
;

42 
	mf
;

43 } 
	tc⁄vît_32_t
;

45 
	uc⁄vît_16
 {

46 
uöt16_t
 
	mu16
;

47 
öt16_t
 
	ms16
;

48 } 
	tc⁄vît_16_t
;

50 
	uc⁄vît_8
 {

51 
uöt8_t
 
	mu8
;

52 
öt8_t
 
	ms8
;

53 } 
	tc⁄vît_8_t
;

55 
	uc⁄vît
 {

56 
°m_w‹d_t
 
	mw
;

57 
uöt8_t
 
	mb
[(
°m_w‹d_t
)];

58 } 
	tc⁄vît_t
;

60 
	$ßnôy_checks
()

62 
	`COMPILE_TIME_ASSERT
((
c⁄vît_64_t
) == 8);

63 
	`COMPILE_TIME_ASSERT
((
c⁄vît_32_t
) == 4);

64 
	`COMPILE_TIME_ASSERT
((
°m_w‹d_t
) == 4 || (stm_word_t) == 8);

65 
	`COMPILE_TIME_ASSERT
(() == 1);

66 
	`COMPILE_TIME_ASSERT
(() == 2);

67 
	`COMPILE_TIME_ASSERT
(() == 4);

68 
	`COMPILE_TIME_ASSERT
(() == 4 || () == 8);

69 
	`COMPILE_TIME_ASSERT
(() == 4);

70 
	`COMPILE_TIME_ASSERT
(() == 8);

71 
	}
}

77 
uöt8_t
 
	$°m_lﬂd8
(
TXPARAMS
 vﬁ©ûê
uöt8_t
 *
addr
)

79 i‡((
°m_w‹d_t
) == 4) {

80 
c⁄vît_32_t
 
vÆ
;

81 
vÆ
.
u32
 = (
uöt32_t
)
	`°m_lﬂd
(
	`TXARGS
 (vﬁ©ûê
°m_w‹d_t
 *)((
uöçå_t
)
addr
 & ~(uintptr_t)0x03));

82  
vÆ
.
u8
[(
uöçå_t
)
addr
 & 0x03];

84 
c⁄vît_64_t
 
vÆ
;

85 
vÆ
.
u64
 = (
uöt64_t
)
	`°m_lﬂd
(
	`TXARGS
 (vﬁ©ûê
°m_w‹d_t
 *)((
uöçå_t
)
addr
 & ~(uintptr_t)0x07));

86  
vÆ
.
u8
[(
uöçå_t
)
addr
 & 0x07];

88 
	}
}

90 
uöt16_t
 
	$°m_lﬂd16
(
TXPARAMS
 vﬁ©ûê
uöt16_t
 *
addr
)

92 i‡(((
uöçå_t
)
addr
 & 0x01) != 0) {

93 
uöt16_t
 
vÆ
;

94 
	`°m_lﬂd_byãs
(
	`TXARGS
 (vﬁ©ûê
uöt8_t
 *)
addr
, (uöt8_à*)&
vÆ
, (
uöt16_t
));

95  
vÆ
;

96 } i‡((
°m_w‹d_t
) == 4) {

97 
c⁄vît_32_t
 
vÆ
;

98 
vÆ
.
u32
 = (
uöt32_t
)
	`°m_lﬂd
(
	`TXARGS
 (vﬁ©ûê
°m_w‹d_t
 *)((
uöçå_t
)
addr
 & ~(uintptr_t)0x03));

99  
vÆ
.
u16
[((
uöçå_t
)
addr
 & 0x03) >> 1];

101 
c⁄vît_64_t
 
vÆ
;

102 
vÆ
.
u64
 = (
uöt64_t
)
	`°m_lﬂd
(
	`TXARGS
 (vﬁ©ûê
°m_w‹d_t
 *)((
uöçå_t
)
addr
 & ~(uintptr_t)0x07));

103  
vÆ
.
u16
[((
uöçå_t
)
addr
 & 0x07) >> 1];

105 
	}
}

107 
uöt32_t
 
	$°m_lﬂd32
(
TXPARAMS
 vﬁ©ûê
uöt32_t
 *
addr
)

109 i‡(((
uöçå_t
)
addr
 & 0x03) != 0) {

110 
uöt32_t
 
vÆ
;

111 
	`°m_lﬂd_byãs
(
	`TXARGS
 (vﬁ©ûê
uöt8_t
 *)
addr
, (uöt8_à*)&
vÆ
, (
uöt32_t
));

112  
vÆ
;

113 } i‡((
°m_w‹d_t
) == 4) {

114  (
uöt32_t
)
	`°m_lﬂd
(
	`TXARGS
 (vﬁ©ûê
°m_w‹d_t
 *)
addr
);

116 
c⁄vît_64_t
 
vÆ
;

117 
vÆ
.
u64
 = (
uöt64_t
)
	`°m_lﬂd
(
	`TXARGS
 (vﬁ©ûê
°m_w‹d_t
 *)((
uöçå_t
)
addr
 & ~(uintptr_t)0x07));

118  
vÆ
.
u32
[((
uöçå_t
)
addr
 & 0x07) >> 2];

120 
	}
}

122 
uöt64_t
 
	$°m_lﬂd64
(
TXPARAMS
 vﬁ©ûê
uöt64_t
 *
addr
)

124 i‡(((
uöçå_t
)
addr
 & 0x07) != 0) {

125 
uöt64_t
 
vÆ
;

126 
	`°m_lﬂd_byãs
(
	`TXARGS
 (vﬁ©ûê
uöt8_t
 *)
addr
, (uöt8_à*)&
vÆ
, (
uöt64_t
));

127  
vÆ
;

128 } i‡((
°m_w‹d_t
) == 4) {

129 
c⁄vît_64_t
 
vÆ
;

130 
vÆ
.
u32
[0] = (
uöt32_t
)
	`°m_lﬂd
(
	`TXARGS
 (vﬁ©ûê
°m_w‹d_t
 *)
addr
);

131 
vÆ
.
u32
[1] = (
uöt32_t
)
	`°m_lﬂd
(
	`TXARGS
 (vﬁ©ûê
°m_w‹d_t
 *)
addr
 + 1);

132  
vÆ
.
u64
;

134  (
uöt64_t
)
	`°m_lﬂd
(
	`TXARGS
 (vﬁ©ûê
°m_w‹d_t
 *)
addr
);

136 
	}
}

138 
	$°m_lﬂd_ch¨
(
TXPARAMS
 vﬁ©ûê*
addr
)

140 
c⁄vît_8_t
 
vÆ
;

141 
vÆ
.
u8
 = 
	`°m_lﬂd8
(
	`TXARGS
 (vﬁ©ûê
uöt8_t
 *)
addr
);

142  
vÆ
.
s8
;

143 
	}
}

145 
	$°m_lﬂd_uch¨
(
TXPARAMS
 vﬁ©ûê*
addr
)

147  ()
	`°m_lﬂd8
(
	`TXARGS
 (vﬁ©ûê
uöt8_t
 *)
addr
);

148 
	}
}

150 
	$°m_lﬂd_sh‹t
(
TXPARAMS
 vﬁ©ûê*
addr
)

152 
c⁄vît_16_t
 
vÆ
;

153 
vÆ
.
u16
 = 
	`°m_lﬂd16
(
	`TXARGS
 (vﬁ©ûê
uöt16_t
 *)
addr
);

154  
vÆ
.
s16
;

155 
	}
}

157 
	$°m_lﬂd_ush‹t
(
TXPARAMS
 vﬁ©ûê*
addr
)

159  ()
	`°m_lﬂd16
(
	`TXARGS
 (vﬁ©ûê
uöt16_t
 *)
addr
);

160 
	}
}

162 
	$°m_lﬂd_öt
(
TXPARAMS
 vﬁ©ûê*
addr
)

164 
c⁄vît_32_t
 
vÆ
;

165 
vÆ
.
u32
 = 
	`°m_lﬂd32
(
	`TXARGS
 (vﬁ©ûê
uöt32_t
 *)
addr
);

166  
vÆ
.
s32
;

167 
	}
}

169 
	$°m_lﬂd_uöt
(
TXPARAMS
 vﬁ©ûê*
addr
)

171  ()
	`°m_lﬂd32
(
	`TXARGS
 (vﬁ©ûê
uöt32_t
 *)
addr
);

172 
	}
}

174 
	$°m_lﬂd_l⁄g
(
TXPARAMS
 vﬁ©ûê*
addr
)

177 
c⁄vît_32_t
 
vÆ
;

178 
vÆ
.
u32
 = 
	`°m_lﬂd32
(
	`TXARGS
 (vﬁ©ûê
uöt32_t
 *)
addr
);

179  
vÆ
.
s32
;

181 
c⁄vît_64_t
 
vÆ
;

182 
vÆ
.
u64
 = 
	`°m_lﬂd64
(
	`TXARGS
 (vﬁ©ûê
uöt64_t
 *)
addr
);

183  
vÆ
.
s64
;

185 
	}
}

187 
	$°m_lﬂd_ul⁄g
(
TXPARAMS
 vﬁ©ûê*
addr
)

190  ()
	`°m_lﬂd32
(
	`TXARGS
 (vﬁ©ûê
uöt32_t
 *)
addr
);

192  ()
	`°m_lﬂd64
(
	`TXARGS
 (vﬁ©ûê
uöt64_t
 *)
addr
);

194 
	}
}

196 
	$°m_lﬂd_Êﬂt
(
TXPARAMS
 vﬁ©ûê*
addr
)

198 
c⁄vît_32_t
 
vÆ
;

199 
vÆ
.
u32
 = 
	`°m_lﬂd32
(
	`TXARGS
 (vﬁ©ûê
uöt32_t
 *)
addr
);

200  
vÆ
.
f
;

201 
	}
}

203 
	$°m_lﬂd_doubÀ
(
TXPARAMS
 vﬁ©ûê*
addr
)

205 
c⁄vît_64_t
 
vÆ
;

206 
vÆ
.
u64
 = 
	`°m_lﬂd64
(
	`TXARGS
 (vﬁ©ûê
uöt64_t
 *)
addr
);

207  
vÆ
.
d
;

208 
	}
}

210 *
	$°m_lﬂd_±r
(
TXPARAMS
 vﬁ©ûê**
addr
)

212 uni⁄ { 
°m_w‹d_t
 
w
; *
v
; } 
c⁄vît
;

213 
c⁄vît
.
w
 = 
	`°m_lﬂd
(
	`TXARGS
 (
°m_w‹d_t
 *)
addr
);

214  
c⁄vît
.
v
;

215 
	}
}

217 
	$°m_lﬂd_byãs
(
TXPARAMS
 vﬁ©ûê
uöt8_t
 *
addr
, uöt8_à*
buf
, 
size_t
 
size
)

219 
c⁄vît_t
 
vÆ
;

220 
i
;

221 
°m_w‹d_t
 *
a
;

223 i‡(
size
 == 0)

225 
i
 = (
uöçå_t
)
addr
 & ((
°m_w‹d_t
) - 1);

226 i‡(
i
 != 0) {

228 
a
 = (
°m_w‹d_t
 *)((
uöçå_t
)
addr
 & ~(uintptr_t)((stm_word_t) - 1));

229 
vÆ
.
w
 = 
	`°m_lﬂd
(
TXARGS
 
a
++);

230 ; 
i
 < (
°m_w‹d_t
Ë&& 
size
 > 0; i++, size--)

231 *
buf
++ = 
vÆ
.
b
[
i
];

233 
a
 = (
°m_w‹d_t
 *)
addr
;

235 
size
 >(
°m_w‹d_t
)) {

236 #ifde‡
ALLOW_MISALIGNED_ACCESSES


237 *((
°m_w‹d_t
 *)
buf
Ë
	`°m_lﬂd
(
TXARGS
 
a
++);

238 
buf
 +(
°m_w‹d_t
);

240 
vÆ
.
w
 = 
	`°m_lﬂd
(
TXARGS
 
a
++);

241 
i
 = 0; i < (
°m_w‹d_t
); i++)

242 *
buf
++ = 
vÆ
.
b
[
i
];

244 
size
 -(
°m_w‹d_t
);

246 i‡(
size
 > 0) {

248 
vÆ
.
w
 = 
	`°m_lﬂd
(
TXARGS
 
a
);

249 
i
 = 0;

250 
i
 = 0; 
size
 > 0; i++, size--)

251 *
buf
++ = 
vÆ
.
b
[
i
];

253 
	}
}

259 
	$°m_°‹e8
(
TXPARAMS
 vﬁ©ûê
uöt8_t
 *
addr
, uöt8_à
vÆue
)

261 i‡((
°m_w‹d_t
) == 4) {

262 
c⁄vît_32_t
 
vÆ
, 
mask
;

263 
vÆ
.
u8
[(
uöçå_t
)
addr
 & 0x03] = 
vÆue
;

264 
mask
.
u32
 = 0;

265 
mask
.
u8
[(
uöçå_t
)
addr
 & 0x03] = ~(
uöt8_t
)0;

266 
	`°m_°‹e2
(
	`TXARGS
 (vﬁ©ûê
°m_w‹d_t
 *)((
uöçå_t
)
addr
 & ~(uöçå_t)0x03), (°m_w‹d_t)
vÆ
.
u32
, (°m_w‹d_t)
mask
.u32);

268 
c⁄vît_64_t
 
vÆ
, 
mask
;

269 
vÆ
.
u8
[(
uöçå_t
)
addr
 & 0x07] = 
vÆue
;

270 
mask
.
u64
 = 0;

271 
mask
.
u8
[(
uöçå_t
)
addr
 & 0x07] = ~(
uöt8_t
)0;

272 
	`°m_°‹e2
(
	`TXARGS
 (vﬁ©ûê
°m_w‹d_t
 *)((
uöçå_t
)
addr
 & ~(uöçå_t)0x07), (°m_w‹d_t)
vÆ
.
u64
, (°m_w‹d_t)
mask
.u64);

274 
	}
}

276 
	$°m_°‹e16
(
TXPARAMS
 vﬁ©ûê
uöt16_t
 *
addr
, uöt16_à
vÆue
)

278 i‡(((
uöçå_t
)
addr
 & 0x01) != 0) {

279 
	`°m_°‹e_byãs
(
	`TXARGS
 (vﬁ©ûê
uöt8_t
 *)
addr
, (uöt8_à*)&
vÆue
, (
uöt16_t
));

280 } i‡((
°m_w‹d_t
) == 4) {

281 
c⁄vît_32_t
 
vÆ
, 
mask
;

282 
vÆ
.
u16
[((
uöçå_t
)
addr
 & 0x03Ë>> 1] = 
vÆue
;

283 
mask
.
u32
 = 0;

284 
mask
.
u16
[((
uöçå_t
)
addr
 & 0x03Ë>> 1] = ~(
uöt16_t
)0;

285 
	`°m_°‹e2
(
	`TXARGS
 (vﬁ©ûê
°m_w‹d_t
 *)((
uöçå_t
)
addr
 & ~(uöçå_t)0x03), (°m_w‹d_t)
vÆ
.
u32
, (°m_w‹d_t)
mask
.u32);

287 
c⁄vît_64_t
 
vÆ
, 
mask
;

288 
vÆ
.
u16
[((
uöçå_t
)
addr
 & 0x07Ë>> 1] = 
vÆue
;

289 
mask
.
u64
 = 0;

290 
mask
.
u16
[((
uöçå_t
)
addr
 & 0x07Ë>> 1] = ~(
uöt16_t
)0;

291 
	`°m_°‹e2
(
	`TXARGS
 (vﬁ©ûê
°m_w‹d_t
 *)((
uöçå_t
)
addr
 & ~(uöçå_t)0x07), (°m_w‹d_t)
vÆ
.
u64
, (°m_w‹d_t)
mask
.u64);

293 
	}
}

295 
	$°m_°‹e32
(
TXPARAMS
 vﬁ©ûê
uöt32_t
 *
addr
, uöt32_à
vÆue
)

297 i‡(((
uöçå_t
)
addr
 & 0x03) != 0) {

298 
	`°m_°‹e_byãs
(
	`TXARGS
 (vﬁ©ûê
uöt8_t
 *)
addr
, (uöt8_à*)&
vÆue
, (
uöt32_t
));

299 } i‡((
°m_w‹d_t
) == 4) {

300 
	`°m_°‹e
(
	`TXARGS
 (vﬁ©ûê
°m_w‹d_t
 *)
addr
, (°m_w‹d_t)
vÆue
);

302 
c⁄vît_64_t
 
vÆ
, 
mask
;

303 
vÆ
.
u32
[((
uöçå_t
)
addr
 & 0x07Ë>> 2] = 
vÆue
;

304 
mask
.
u64
 = 0;

305 
mask
.
u32
[((
uöçå_t
)
addr
 & 0x07Ë>> 2] = ~(
uöt32_t
)0;

306 
	`°m_°‹e2
(
	`TXARGS
 (vﬁ©ûê
°m_w‹d_t
 *)((
uöçå_t
)
addr
 & ~(uöçå_t)0x07), (°m_w‹d_t)
vÆ
.
u64
, (°m_w‹d_t)
mask
.u64);

308 
	}
}

310 
	$°m_°‹e64
(
TXPARAMS
 vﬁ©ûê
uöt64_t
 *
addr
, uöt64_à
vÆue
)

312 i‡(((
uöçå_t
)
addr
 & 0x07) != 0) {

313 
	`°m_°‹e_byãs
(
	`TXARGS
 (vﬁ©ûê
uöt8_t
 *)
addr
, (uöt8_à*)&
vÆue
, (
uöt64_t
));

314 } i‡((
°m_w‹d_t
) == 4) {

315 
c⁄vît_64_t
 
vÆ
;

316 
vÆ
.
u64
 = 
vÆue
;

317 
	`°m_°‹e
(
	`TXARGS
 (vﬁ©ûê
°m_w‹d_t
 *)
addr
, (°m_w‹d_t)
vÆ
.
u32
[0]);

318 
	`°m_°‹e
(
	`TXARGS
 (vﬁ©ûê
°m_w‹d_t
 *)
addr
 + 1, (°m_w‹d_t)
vÆ
.
u32
[1]);

320  
	`°m_°‹e
(
	`TXARGS
 (vﬁ©ûê
°m_w‹d_t
 *)
addr
, (°m_w‹d_t)
vÆue
);

322 
	}
}

324 
	$°m_°‹e_ch¨
(
TXPARAMS
 vﬁ©ûê*
addr
, 
vÆue
)

326 
c⁄vît_8_t
 
vÆ
;

327 
vÆ
.
s8
 = 
vÆue
;

328 
	`°m_°‹e8
(
	`TXARGS
 (vﬁ©ûê
uöt8_t
 *)
addr
, 
vÆ
.
u8
);

329 
	}
}

331 
	$°m_°‹e_uch¨
(
TXPARAMS
 vﬁ©ûê*
addr
, 
vÆue
)

333 
	`°m_°‹e8
(
	`TXARGS
 (vﬁ©ûê
uöt8_t
 *)
addr
, (uöt8_t)
vÆue
);

334 
	}
}

336 
	$°m_°‹e_sh‹t
(
TXPARAMS
 vﬁ©ûê*
addr
, 
vÆue
)

338 
c⁄vît_16_t
 
vÆ
;

339 
vÆ
.
s16
 = 
vÆue
;

340 
	`°m_°‹e16
(
	`TXARGS
 (vﬁ©ûê
uöt16_t
 *)
addr
, 
vÆ
.
u16
);

341 
	}
}

343 
	$°m_°‹e_ush‹t
(
TXPARAMS
 vﬁ©ûê*
addr
, 
vÆue
)

345 
	`°m_°‹e16
(
	`TXARGS
 (vﬁ©ûê
uöt16_t
 *)
addr
, (uöt16_t)
vÆue
);

346 
	}
}

348 
	$°m_°‹e_öt
(
TXPARAMS
 vﬁ©ûê*
addr
, 
vÆue
)

350 
c⁄vît_32_t
 
vÆ
;

351 
vÆ
.
s32
 = 
vÆue
;

352 
	`°m_°‹e32
(
	`TXARGS
 (vﬁ©ûê
uöt32_t
 *)
addr
, 
vÆ
.
u32
);

353 
	}
}

355 
	$°m_°‹e_uöt
(
TXPARAMS
 vﬁ©ûê*
addr
, 
vÆue
)

357 
	`°m_°‹e32
(
	`TXARGS
 (vﬁ©ûê
uöt32_t
 *)
addr
, (uöt32_t)
vÆue
);

358 
	}
}

360 
	$°m_°‹e_l⁄g
(
TXPARAMS
 vﬁ©ûê*
addr
, 
vÆue
)

363 
c⁄vît_32_t
 
vÆ
;

364 
vÆ
.
s32
 = 
vÆue
;

365 
	`°m_°‹e32
(
	`TXARGS
 (vﬁ©ûê
uöt32_t
 *)
addr
, 
vÆ
.
u32
);

367 
c⁄vît_64_t
 
vÆ
;

368 
vÆ
.
s64
 = 
vÆue
;

369 
	`°m_°‹e64
(
	`TXARGS
 (vﬁ©ûê
uöt64_t
 *)
addr
, 
vÆ
.
u64
);

371 
	}
}

373 
	$°m_°‹e_ul⁄g
(
TXPARAMS
 vﬁ©ûê*
addr
, 
vÆue
)

376 
	`°m_°‹e32
(
	`TXARGS
 (vﬁ©ûê
uöt32_t
 *)
addr
, (uöt32_t)
vÆue
);

378 
	`°m_°‹e64
(
	`TXARGS
 (vﬁ©ûê
uöt64_t
 *)
addr
, (uöt64_t)
vÆue
);

380 
	}
}

382 
	$°m_°‹e_Êﬂt
(
TXPARAMS
 vﬁ©ûê*
addr
, 
vÆue
)

384 
c⁄vît_32_t
 
vÆ
;

385 
vÆ
.
f
 = 
vÆue
;

386 
	`°m_°‹e32
(
	`TXARGS
 (vﬁ©ûê
uöt32_t
 *)
addr
, 
vÆ
.
u32
);

387 
	}
}

389 
	$°m_°‹e_doubÀ
(
TXPARAMS
 vﬁ©ûê*
addr
, 
vÆue
)

391 
c⁄vît_64_t
 
vÆ
;

392 
vÆ
.
d
 = 
vÆue
;

393 
	`°m_°‹e64
(
	`TXARGS
 (vﬁ©ûê
uöt64_t
 *)
addr
, 
vÆ
.
u64
);

394 
	}
}

396 
	$°m_°‹e_±r
(
TXPARAMS
 vﬁ©ûê**
addr
, *
vÆue
)

398 uni⁄ { 
°m_w‹d_t
 
w
; *
v
; } 
c⁄vît
;

399 
c⁄vît
.
v
 = 
vÆue
;

400 
	`°m_°‹e
(
	`TXARGS
 (
°m_w‹d_t
 *)
addr
, 
c⁄vît
.
w
);

401 
	}
}

403 
	$°m_°‹e_byãs
(
TXPARAMS
 vﬁ©ûê
uöt8_t
 *
addr
, uöt8_à*
buf
, 
size_t
 
size
)

405 
c⁄vît_t
 
vÆ
, 
mask
;

406 
i
;

407 
°m_w‹d_t
 *
a
;

409 i‡(
size
 == 0)

411 
i
 = (
uöçå_t
)
addr
 & ((
°m_w‹d_t
) - 1);

412 i‡(
i
 != 0) {

414 
a
 = (
°m_w‹d_t
 *)((
uöçå_t
)
addr
 & ~(uintptr_t)((stm_word_t) - 1));

415 
vÆ
.
w
 = 
mask
.w = 0;

416 ; 
i
 < (
°m_w‹d_t
Ë&& 
size
 > 0; i++, size--) {

417 
mask
.
b
[
i
] = 0xFF;

418 
vÆ
.
b
[
i
] = *
buf
++;

420 
	`°m_°‹e2
(
TXARGS
 
a
++, 
vÆ
.
w
, 
mask
.w);

422 
a
 = (
°m_w‹d_t
 *)
addr
;

424 
size
 >(
°m_w‹d_t
)) {

425 #ifde‡
ALLOW_MISALIGNED_ACCESSES


426 
	`°m_°‹e
(
TXARGS
 
a
++, *((
°m_w‹d_t
 *)
buf
));

427 
buf
 +(
°m_w‹d_t
);

429 
i
 = 0; i < (
°m_w‹d_t
); i++)

430 
vÆ
.
b
[
i
] = *
buf
++;

431 
	`°m_°‹e
(
TXARGS
 
a
++, 
vÆ
.
w
);

433 
size
 -(
°m_w‹d_t
);

435 i‡(
size
 > 0) {

437 
vÆ
.
w
 = 
mask
.w = 0;

438 
i
 = 0; 
size
 > 0; i++, size--) {

439 
mask
.
b
[
i
] = 0xFF;

440 
vÆ
.
b
[
i
] = *
buf
++;

442 
	`°m_°‹e2
(
TXARGS
 
a
, 
vÆ
.
w
, 
mask
.w);

444 
	}
}

	@utils/estm-0.3.0/include/mod_local.h

34 #i‚de‡
_MOD_LOCAL_H_


35 
	#_MOD_LOCAL_H_


	)

37 
	~"°m.h
"

39 #ifde‡
__˝lu•lus


51 
°m_°‹e_loˇl
(
TXPARAMS
 
°m_w‹d_t
 *
addr
, stm_w‹d_à
vÆue
);

61 
°m_°‹e_loˇl_ch¨
(
TXPARAMS
 *
addr
, 
vÆue
);

71 
°m_°‹e_loˇl_uch¨
(
TXPARAMS
 *
addr
, 
vÆue
);

81 
°m_°‹e_loˇl_sh‹t
(
TXPARAMS
 *
addr
, 
vÆue
);

91 
°m_°‹e_loˇl_ush‹t
(
TXPARAMS
 *
addr
, 
vÆue
);

101 
°m_°‹e_loˇl_öt
(
TXPARAMS
 *
addr
, 
vÆue
);

111 
°m_°‹e_loˇl_uöt
(
TXPARAMS
 *
addr
, 
vÆue
);

121 
°m_°‹e_loˇl_l⁄g
(
TXPARAMS
 *
addr
, 
vÆue
);

131 
°m_°‹e_loˇl_ul⁄g
(
TXPARAMS
 *
addr
, 
vÆue
);

141 
°m_°‹e_loˇl_Êﬂt
(
TXPARAMS
 *
addr
, 
vÆue
);

151 
°m_°‹e_loˇl_doubÀ
(
TXPARAMS
 *
addr
, 
vÆue
);

161 
°m_°‹e_loˇl_±r
(
TXPARAMS
 **
addr
, *
vÆue
);

168 
mod_loˇl_öô
();

170 #ifde‡
__˝lu•lus


	@utils/estm-0.3.0/include/mod_mem.h

35 #i‚de‡
_MOD_MEM_H_


36 
	#_MOD_MEM_H_


	)

38 
	~"°m.h
"

40 #ifde‡
__˝lu•lus


53 *
°m_mÆloc
(
TXPARAMS
 
size_t
 
size
);

67 
°m_‰ì
(
TXPARAMS
 *
addr
, 
size_t
 
size
);

83 
°m_‰ì2
(
TXPARAMS
 *
addr
, 
size_t
 
idx
, size_à
size
);

90 
mod_mem_öô
();

92 #ifde‡
__˝lu•lus


	@utils/estm-0.3.0/include/mod_print.h

32 #i‚de‡
_MOD_PRINT_H_


33 
	#_MOD_PRINT_H_


	)

35 #ifde‡
__˝lu•lus


44 
mod_¥öt_öô
();

46 #ifde‡
__˝lu•lus


	@utils/estm-0.3.0/include/mod_stats.h

36 #i‚de‡
_MOD_STATS_H_


37 
	#_MOD_STATS_H_


	)

39 
	~"°m.h
"

41 #ifde‡
__˝lu•lus


57 
°m_gë_globÆ_°©s
(c⁄° *
«me
, *
vÆ
);

71 
°m_gë_loˇl_°©s
(
TXPARAMS
 c⁄° *
«me
, *
vÆ
);

78 
mod_°©s_öô
();

80 #ifde‡
__˝lu•lus


	@utils/estm-0.3.0/include/stm.h

80 #i‚de‡
_STM_H_


81 
	#_STM_H_


	)

83 
	~<£tjmp.h
>

84 
	~<°döt.h
>

85 
	~<°dio.h
>

86 
	~<°dlib.h
>

88 #ifde‡
__˝lu•lus


100 #ifde‡
EXPLICIT_TX_PARAMETER


101 
°m_tx
;

102 
	#TXTYPE
 
°m_tx
 *

	)

103 
	#TXPARAM
 
°m_tx
 *
tx


	)

104 
	#TXPARAMS
 
°m_tx
 *
tx
,

	)

105 
	#TXARG
 (
°m_tx
 *)
tx


	)

106 
	#TXARGS
 (
°m_tx
 *)
tx
,

	)

107 
°m_tx
 *
°m_cuºít_tx
();

109 
	#TXTYPE
 

	)

110 
	#TXPARAM


	)

111 
	#TXPARAMS


	)

112 
	#TXARG


	)

113 
	#TXARGS


	)

116 
	#EL
 0

	)

117 
	#NL
 1

	)

127 
uöçå_t
 
	t°m_w‹d_t
;

132 
	s°m_tx_©å
 {

140 
	gid
;

147 
	gro
;

148 } 
	t°m_tx_©å_t
;

159 
°m_öô
();

165 
°m_exô
();

172 
TXTYPE
 
°m_öô_thªad
();

178 
°m_exô_thªad
(
TXPARAM
);

197 
°m_°¨t
(
TXPARAMS
 
sigjmp_buf
 *
ív
, 
°m_tx_©å_t
 *
©å
, 
ty≥
);

206 
°m_commô
(
TXPARAM
);

214 
°m_ab‹t
(
TXPARAM
);

239 
°m_w‹d_t
 
°m_lﬂd
(
TXPARAMS
 vﬁ©ûê°m_w‹d_à*
addr
);

262 
°m_°‹e
(
TXPARAMS
 vﬁ©ûê
°m_w‹d_t
 *
addr
, stm_w‹d_à
vÆue
);

277 
°m_°‹e2
(
TXPARAMS
 vﬁ©ûê
°m_w‹d_t
 *
addr
, stm_w‹d_à
vÆue
, stm_w‹d_à
mask
);

285 
°m_a˘ive
(
TXPARAM
);

293 
°m_ab‹ãd
(
TXPARAM
);

307 
sigjmp_buf
 *
°m_gë_ív
(
TXPARAM
);

317 
°m_tx_©å_t
 *
°m_gë_©åibuãs
(
TXPARAM
);

331 
°m_gë_°©s
(
TXPARAMS
 c⁄° *
«me
, *
vÆ
);

345 
°m_gë_∑ømëî
(c⁄° *
«me
, *
vÆ
);

358 
°m_£t_∑ømëî
(c⁄° *
«me
, *
vÆ
);

368 
°m_¸óã_•ecific
();

379 *
°m_gë_•ecific
(
TXPARAMS
 
key
);

390 
°m_£t_•ecific
(
TXPARAMS
 
key
, *
d©a
);

411 
°m_ªgi°î
((*
⁄_thªad_öô
)(
TXPARAMS
 *
¨g
),

412 (*
⁄_thªad_exô
)(
TXPARAMS
 *
¨g
),

413 (*
⁄_°¨t
)(
TXPARAMS
 *
¨g
),

414 (*
⁄_commô
)(
TXPARAMS
 *
¨g
),

415 (*
⁄_ab‹t
)(
TXPARAMS
 *
¨g
),

416 *
¨g
);

425 
°m_w‹d_t
 
°m_gë_˛ock
();

427 #ifde‡
__˝lu•lus


	@utils/estm-0.3.0/include/wrappers.h

33 #i‚de‡
_WRAPPERS_H_


34 
	#_WRAPPERS_H_


	)

36 
	~<°döt.h
>

38 
	~"°m.h
"

40 #ifde‡
__˝lu•lus


52 
uöt8_t
 
°m_lﬂd8
(
TXPARAMS
 vﬁ©ûêuöt8_à*
addr
);

62 
uöt16_t
 
°m_lﬂd16
(
TXPARAMS
 vﬁ©ûêuöt16_à*
addr
);

72 
uöt32_t
 
°m_lﬂd32
(
TXPARAMS
 vﬁ©ûêuöt32_à*
addr
);

82 
uöt64_t
 
°m_lﬂd64
(
TXPARAMS
 vﬁ©ûêuöt64_à*
addr
);

92 
°m_lﬂd_ch¨
(
TXPARAMS
 vﬁ©ûê*
addr
);

102 
°m_lﬂd_uch¨
(
TXPARAMS
 vﬁ©ûê*
addr
);

112 
°m_lﬂd_sh‹t
(
TXPARAMS
 vﬁ©ûê*
addr
);

122 
°m_lﬂd_ush‹t
(
TXPARAMS
 vﬁ©ûê*
addr
);

132 
°m_lﬂd_öt
(
TXPARAMS
 vﬁ©ûê*
addr
);

142 
°m_lﬂd_uöt
(
TXPARAMS
 vﬁ©ûê*
addr
);

152 
°m_lﬂd_l⁄g
(
TXPARAMS
 vﬁ©ûê*
addr
);

162 
°m_lﬂd_ul⁄g
(
TXPARAMS
 vﬁ©ûê*
addr
);

172 
°m_lﬂd_Êﬂt
(
TXPARAMS
 vﬁ©ûê*
addr
);

182 
°m_lﬂd_doubÀ
(
TXPARAMS
 vﬁ©ûê*
addr
);

192 *
°m_lﬂd_±r
(
TXPARAMS
 vﬁ©ûê**
addr
);

207 
°m_lﬂd_byãs
(
TXPARAMS
 vﬁ©ûê
uöt8_t
 *
addr
, uöt8_à*
buf
, 
size_t
 
size
);

217 
°m_°‹e8
(
TXPARAMS
 vﬁ©ûê
uöt8_t
 *
addr
, uöt8_à
vÆue
);

227 
°m_°‹e16
(
TXPARAMS
 vﬁ©ûê
uöt16_t
 *
addr
, uöt16_à
vÆue
);

237 
°m_°‹e32
(
TXPARAMS
 vﬁ©ûê
uöt32_t
 *
addr
, uöt32_à
vÆue
);

247 
°m_°‹e64
(
TXPARAMS
 vﬁ©ûê
uöt64_t
 *
addr
, uöt64_à
vÆue
);

257 
°m_°‹e_ch¨
(
TXPARAMS
 vﬁ©ûê*
addr
, 
vÆue
);

267 
°m_°‹e_uch¨
(
TXPARAMS
 vﬁ©ûê*
addr
, 
vÆue
);

277 
°m_°‹e_sh‹t
(
TXPARAMS
 vﬁ©ûê*
addr
, 
vÆue
);

287 
°m_°‹e_ush‹t
(
TXPARAMS
 vﬁ©ûê*
addr
, 
vÆue
);

297 
°m_°‹e_öt
(
TXPARAMS
 vﬁ©ûê*
addr
, 
vÆue
);

307 
°m_°‹e_uöt
(
TXPARAMS
 vﬁ©ûê*
addr
, 
vÆue
);

317 
°m_°‹e_l⁄g
(
TXPARAMS
 vﬁ©ûê*
addr
, 
vÆue
);

327 
°m_°‹e_ul⁄g
(
TXPARAMS
 vﬁ©ûê*
addr
, 
vÆue
);

337 
°m_°‹e_Êﬂt
(
TXPARAMS
 vﬁ©ûê*
addr
, 
vÆue
);

347 
°m_°‹e_doubÀ
(
TXPARAMS
 vﬁ©ûê*
addr
, 
vÆue
);

357 
°m_°‹e_±r
(
TXPARAMS
 vﬁ©ûê**
addr
, *
vÆue
);

371 
°m_°‹e_byãs
(
TXPARAMS
 vﬁ©ûê
uöt8_t
 *
addr
, uöt8_à*
buf
, 
size_t
 
size
);

373 #ifde‡
__˝lu•lus


	@utils/estm-0.3.0/src/atomic.h

22 #i‚de‡
_ATOMIC_H_


23 
	#_ATOMIC_H_


	)

25 
	~<©omic_›s.h
>

27 
AO_t
 
	t©omic_t
;

29 #ifde‡
NO_AO


31 
	#ATOMIC_CAS_FULL
(
a
, 
e
, 
v
Ë(*◊Ë(v), 1)

	)

32 
	#ATOMIC_FETCH_INC_FULL
(
a
Ë((*◊))++)

	)

33 
	#ATOMIC_FETCH_DEC_FULL
(
a
Ë((*◊))--)

	)

34 
	#ATOMIC_FETCH_ADD_FULL
(
a
, 
v
Ë((*◊)Ë+(v))

	)

35 
	#ATOMIC_LOAD_ACQ
(
a
Ë(*◊))

	)

36 
	#ATOMIC_LOAD
(
a
Ë(*◊))

	)

37 
	#ATOMIC_STORE_REL
(
a
, 
v
Ë(*◊Ë(v))

	)

38 
	#ATOMIC_STORE
(
a
, 
v
Ë(*◊Ë(v))

	)

39 
	#ATOMIC_MB_READ


	)

40 
	#ATOMIC_MB_WRITE


	)

41 
	#ATOMIC_MB_FULL


	)

43 
	#ATOMIC_CAS_FULL
(
a
, 
e
, 
v
Ë(
	`AO_com∑ª_™d_sw≠_fuŒ
((vﬁ©ûê
AO_t
 *)◊), (AO_t)”), (AO_t)(v)))

	)

44 
	#ATOMIC_FETCH_INC_FULL
(
a
Ë(
	`AO_„tch_™d_add1_fuŒ
((vﬁ©ûê
AO_t
 *)◊)))

	)

45 
	#ATOMIC_FETCH_DEC_FULL
(
a
Ë(
	`AO_„tch_™d_sub1_fuŒ
((vﬁ©ûê
AO_t
 *)◊)))

	)

46 
	#ATOMIC_FETCH_ADD_FULL
(
a
, 
v
Ë(
	`AO_„tch_™d_add_fuŒ
((vﬁ©ûê
AO_t
 *)◊), (AO_t)(v)))

	)

47 #ifde‡
SAFE


48 
	#ATOMIC_LOAD_ACQ
(
a
Ë(
	`AO_lﬂd_fuŒ
((vﬁ©ûê
AO_t
 *)◊)))

	)

49 
	#ATOMIC_LOAD
(
a
Ë(
	`AO_lﬂd_fuŒ
((vﬁ©ûê
AO_t
 *)◊)))

	)

50 
	#ATOMIC_STORE_REL
(
a
, 
v
Ë(
	`AO_°‹e_fuŒ
((vﬁ©ûê
AO_t
 *)◊), (AO_t)(v)))

	)

51 
	#ATOMIC_STORE
(
a
, 
v
Ë(
	`AO_°‹e_fuŒ
((vﬁ©ûê
AO_t
 *)◊), (AO_t)(v)))

	)

52 
	#ATOMIC_MB_READ
 
	`AO_n›_fuŒ
()

	)

53 
	#ATOMIC_MB_WRITE
 
	`AO_n›_fuŒ
()

	)

54 
	#ATOMIC_MB_FULL
 
	`AO_n›_fuŒ
()

	)

56 
	#ATOMIC_LOAD_ACQ
(
a
Ë(
	`AO_lﬂd_acquúe_ªad
((vﬁ©ûê
AO_t
 *)◊)))

	)

57 
	#ATOMIC_LOAD
(
a
Ë(*((vﬁ©ûê
AO_t
 *)◊)))

	)

58 
	#ATOMIC_STORE_REL
(
a
, 
v
Ë(
	`AO_°‹e_ªÀa£
((vﬁ©ûê
AO_t
 *)◊), (AO_t)(v)))

	)

59 
	#ATOMIC_STORE
(
a
, 
v
Ë(*((vﬁ©ûê
AO_t
 *)◊)Ë(AO_t)(v))

	)

60 
	#ATOMIC_MB_READ
 
	`AO_n›_ªad
()

	)

61 
	#ATOMIC_MB_WRITE
 
	`AO_n›_wrôe
()

	)

62 
	#ATOMIC_MB_FULL
 
	`AO_n›_fuŒ
()

	)

	@utils/estm-0.3.0/src/gc.c

23 
	~<as£π.h
>

24 
	~<°dio.h
>

25 
	~<°döt.h
>

27 
	~<±hªad.h
>

29 
	~"gc.h
"

31 
	~"©omic.h
"

32 
	~"°m.h
"

40 
	#MAX_THREADS
 1024

	)

41 
	#EPOCH_MAX
 (~(
gc_w‹d_t
)0)

	)

43 #i‚de‡
NO_PERIODIC_CLEANUP


44 #i‚de‡
CLEANUP_FREQUENCY


45 
	#CLEANUP_FREQUENCY
 1

	)

49 #ifde‡
DEBUG


51 
	#IO_FLUSH
 
	`fÊush
(
NULL
)

	)

52 
	#PRINT_DEBUG
(...Ë
	`¥ötf
(
__VA_ARGS__
); 
	`fÊush
(
NULL
)

	)

54 
	#IO_FLUSH


	)

55 
	#PRINT_DEBUG
(...)

	)

63 
	mGC_NULL
 = 0,

64 
	mGC_BUSY
 = 1,

65 
	mGC_FREE_EMPTY
 = 2,

66 
	mGC_FREE_FULL
 = 3

69 
	smem_block
 {

70 *
	maddr
;

71 
mem_block
 *
	m√xt
;

72 } 
	tmem_block_t
;

74 
	smem_ªgi⁄
 {

75 
mem_block
 *
	mblocks
;

76 
gc_w‹d_t
 
	mts
;

77 
mem_ªgi⁄
 *
	m√xt
;

78 } 
	tmem_ªgi⁄_t
;

80 
	stm_thªad
 {

81 
gc_w‹d_t
 
	mu£d
;

82 
±hªad_t
 
	mthªad
;

83 
gc_w‹d_t
 
	mts
;

84 
mem_ªgi⁄_t
 *
	mhód
;

85 
mem_ªgi⁄_t
 *
	mèû
;

86 #i‚de‡
NO_PERIODIC_CLEANUP


87 
	m‰ìs
;

89 } 
	ttm_thªad_t
;

91 vﬁ©ûê
tm_thªad_t
 *
	gthªads
;

92 vﬁ©ûê
gc_w‹d_t
 
	gnb_thªads
;

94 
gc_w‹d_t
 (*
cuºít_ïoch
)();

96 #ifde‡
TLS


97 
__thªad
 
	gthªad_idx
;

99 
±hªad_key_t
 
	gthªad_idx
;

109 
ölöe
 
	$gc_gë_idx
()

111 #ifde‡
TLS


112  
thªad_idx
;

114  ()
	`±hªad_gë•ecific
(
thªad_idx
);

116 
	}
}

121 
ölöe
 
gc_w‹d_t
 
	$gc_compuã_mö
(
gc_w‹d_t
 
now
)

123 
i
;

124 
gc_w‹d_t
 
mö
, 
ts
;

125 
°m_w‹d_t
 
u£d
;

127 
	`PRINT_DEBUG
("==> gc_compuã_mö(%d)\n", 
	`gc_gë_idx
());

129 
mö
 = 
now
;

130 
i
 = 0; i < 
MAX_THREADS
; i++) {

131 
u£d
 = (
gc_w‹d_t
)
	`ATOMIC_LOAD
(&
thªads
[
i
].used);

132 i‡(
u£d
 =
GC_NULL
)

134 i‡(
u£d
 !
GC_BUSY
)

137 
ts
 = (
gc_w‹d_t
)
	`ATOMIC_LOAD
(&
thªads
[
i
].ts);

138 i‡(
ts
 < 
mö
)

139 
mö
 = 
ts
;

142 
	`PRINT_DEBUG
("==> gc_compuã_mö(%d,m=%lu)\n", 
	`gc_gë_idx
(), ()
mö
);

144  
mö
;

145 
	}
}

150 
ölöe
 
	$gc_˛ón_blocks
(
mem_block_t
 *
mb
)

152 
mem_block_t
 *
√xt_mb
;

154 
mb
 !
NULL
) {

155 
	`PRINT_DEBUG
("==> fªe(%d,a=%p)\n", 
	`gc_gë_idx
(), 
mb
->
addr
);

156 
	`‰ì
(
mb
->
addr
);

157 
√xt_mb
 = 
mb
->
√xt
;

158 
	`‰ì
(
mb
);

159 
mb
 = 
√xt_mb
;

161 
	}
}

166 
ölöe
 
	$gc_˛ón_ªgi⁄s
(
mem_ªgi⁄_t
 *
mr
)

168 
mem_ªgi⁄_t
 *
√xt_mr
;

170 
mr
 !
NULL
) {

171 
	`gc_˛ón_blocks
(
mr
->
blocks
);

172 
√xt_mr
 = 
mr
->
√xt
;

173 
	`‰ì
(
mr
);

174 
mr
 = 
√xt_mr
;

176 
	}
}

181 
	$gc_˛ónup_thªad
(
idx
, 
gc_w‹d_t
 
mö
)

183 
mem_ªgi⁄_t
 *
mr
;

185 
	`PRINT_DEBUG
("==> gc_˛ónup_thªad(%d,m=%lu)\n", 
idx
, ()
mö
);

187 i‡(
thªads
[
idx
].
hód
 =
NULL
) {

192 
mö
 > 
thªads
[
idx
].
hód
->
ts
) {

193 
	`gc_˛ón_blocks
(
thªads
[
idx
].
hód
->
blocks
);

194 
mr
 = 
thªads
[
idx
].
hód
->
√xt
;

195 
	`‰ì
(
thªads
[
idx
].
hód
);

196 
thªads
[
idx
].
hód
 = 
mr
;

197 if(
mr
 =
NULL
) {

199 
thªads
[
idx
].
èû
 = 
NULL
;

203 
	}
}

212 
gc_öô
(
	$gc_w‹d_t
 (*
ïoch
)())

214 
i
;

216 
	`PRINT_DEBUG
("==> gc_init()\n");

218 
cuºít_ïoch
 = 
ïoch
;

219 i‡((
thªads
 = (
tm_thªad_t
 *)
	`mÆloc
(
MAX_THREADS
 * —m_thªad_t))Ë=
NULL
) {

220 
	`≥º‹
("malloc");

221 
	`exô
(1);

223 
i
 = 0; i < 
MAX_THREADS
; i++) {

224 
thªads
[
i
].
u£d
 = 
GC_NULL
;

225 
thªads
[
i
].
ts
 = 
EPOCH_MAX
;

226 
thªads
[
i
].
hód
 =Åhªads[i].
èû
 = 
NULL
;

227 #i‚de‡
NO_PERIODIC_CLEANUP


228 
thªads
[
i
].
‰ìs
 = 0;

231 
nb_thªads
 = 0;

232 #i‚de‡
TLS


233 i‡(
	`±hªad_key_¸óã
(&
thªad_idx
, 
NULL
) != 0) {

234 
	`Ârötf
(
°dîr
, "Error creatingÅhreadÜocal\n");

235 
	`exô
(1);

238 
	}
}

243 
	$gc_exô
()

245 
i
;

247 
	`PRINT_DEBUG
("==> gc_exit()\n");

250 i‡(
	`ATOMIC_LOAD
(&
nb_thªads
) != 0) {

251 
	`Ârötf
(
°dîr
, "Error: someÅhreads haveÇot been cleaned up\n");

252 
	`exô
(1);

255 
i
 = 0; i < 
MAX_THREADS
; i++)

256 
	`gc_˛ón_ªgi⁄s
(
thªads
[
i
].
hód
);

258 
	`‰ì
((*)
thªads
);

259 
	}
}

264 
	$gc_öô_thªad
()

266 
i
, 
idx
;

267 
gc_w‹d_t
 
u£d
;

269 
	`PRINT_DEBUG
("==> gc_init_thread()\n");

271 i‡(
	`ATOMIC_FETCH_INC_FULL
(&
nb_thªads
Ë>
MAX_THREADS
) {

272 
	`Ârötf
(
°dîr
, "Error:Åoo many concurrentÅhreads created\n");

273 
	`exô
(1);

276 
i
 = 0;

279 
u£d
 = (
gc_w‹d_t
)
	`ATOMIC_LOAD
(&
thªads
[
i
].used);

280 i‡(
u£d
 !
GC_BUSY
) {

281 i‡(
	`ATOMIC_CAS_FULL
(&
thªads
[
i
].
u£d
, u£d, 
GC_BUSY
) != 0) {

282 
idx
 = 
i
;

284 
	`ATOMIC_STORE
(&
thªads
[
idx
].
ts
, 
	`cuºít_ïoch
());

288 
	`as£π
 (
thªads
[
i
].
u£d
 !
GC_NULL
);

290 i‡(++
i
 >
MAX_THREADS
)

291 
i
 = 0;

293 #ifde‡
TLS


294 
thªad_idx
 = 
idx
;

296 
	`±hªad_£t•ecific
(
thªad_idx
, (*)
idx
);

299 
	`PRINT_DEBUG
("==> gc_öô_thªad(i=%d)\n", 
idx
);

300 
	}
}

305 
	$gc_exô_thªad
()

307 
idx
 = 
	`gc_gë_idx
();

309 
	`PRINT_DEBUG
("==> gc_exô_thªad(%d)\n", 
idx
);

312 
	`ATOMIC_STORE
(&
thªads
[
idx
].
ts
, 
EPOCH_MAX
);

314 
	`ATOMIC_STORE
(&
thªads
[
idx
].
u£d
,Åhªads[idx].
hód
 =
NULL
 ? 
GC_FREE_EMPTY
 : 
GC_FREE_FULL
);

315 
	`ATOMIC_FETCH_DEC_FULL
(&
nb_thªads
);

317 
	}
}

323 
	$gc_£t_ïoch
(
gc_w‹d_t
 
ïoch
)

325 
idx
 = 
	`gc_gë_idx
();

327 
	`PRINT_DEBUG
("==> gc_£t_ïoch(%d,%lu)\n", 
idx
, ()
ïoch
);

329 i‡(
ïoch
 >
EPOCH_MAX
) {

330 
	`Ârötf
(
°dîr
, "Ex˚eded maximumÉpochÇumbî: 0x%lx\n", ()
ïoch
);

336 
	`ATOMIC_STORE
(&
thªads
[
idx
].
ts
, 
ïoch
);

337 
	}
}

342 
	$gc_‰ì
(*
addr
, 
gc_w‹d_t
 
ïoch
)

344 
mem_ªgi⁄_t
 *
mr
;

345 
mem_block_t
 *
mb
;

346 
idx
 = 
	`gc_gë_idx
();

348 
	`PRINT_DEBUG
("==> gc_‰ì(%d,%lu)\n", 
idx
, ()
ïoch
);

350 i‡(
thªads
[
idx
].
hód
 =
NULL
 ||Åhªads[idx].hód->
ts
 < 
ïoch
) {

352 i‡((
mr
 = (
mem_ªgi⁄_t
 *)
	`mÆloc
((mem_ªgi⁄_t))Ë=
NULL
) {

353 
	`≥º‹
("malloc");

354 
	`exô
(1);

356 
mr
->
ts
 = 
ïoch
;

357 
mr
->
blocks
 = 
NULL
;

358 
mr
->
√xt
 = 
NULL
;

359 i‡(
thªads
[
idx
].
hód
 =
NULL
) {

360 
thªads
[
idx
].
hód
 =Åhªads[idx].
èû
 = 
mr
;

362 
thªads
[
idx
].
èû
->
√xt
 = 
mr
;

363 
thªads
[
idx
].
èû
 = 
mr
;

367 
mr
 = 
thªads
[
idx
].
hód
;

371 i‡((
mb
 = (
mem_block_t
 *)
	`mÆloc
((mem_block_t))Ë=
NULL
) {

372 
	`≥º‹
("malloc");

373 
	`exô
(1);

375 
mb
->
addr
 =áddr;

376 
mb
->
√xt
 = 
mr
->
blocks
;

377 
mr
->
blocks
 = 
mb
;

379 #i‚de‡
NO_PERIODIC_CLEANUP


380 
thªads
[
idx
].
‰ìs
++;

381 i‡(
thªads
[
idx
].
‰ìs
 % 
CLEANUP_FREQUENCY
 == 0)

382 
	`gc_˛ónup
();

384 
	}
}

390 
	$gc_˛ónup
()

392 
gc_w‹d_t
 
mö
;

393 
idx
 = 
	`gc_gë_idx
();

395 
	`PRINT_DEBUG
("==> gc_˛ónup(%d)\n", 
idx
);

397 i‡(
thªads
[
idx
].
hód
 =
NULL
) {

402 
mö
 = 
	`gc_compuã_mö
(
	`cuºít_ïoch
());

404 
	`gc_˛ónup_thªad
(
idx
, 
mö
);

405 
	}
}

411 
	$gc_˛ónup_Æl
()

413 
i
;

414 
gc_w‹d_t
 
mö
 = 
EPOCH_MAX
;

416 
	`PRINT_DEBUG
("==> gc_cleanup_all()\n");

418 
i
 = 0; i < 
MAX_THREADS
; i++) {

419 i‡((
gc_w‹d_t
)
	`ATOMIC_LOAD
(&
thªads
[
i
].
u£d
Ë=
GC_NULL
)

421 i‡((
gc_w‹d_t
)
	`ATOMIC_LOAD
(&
thªads
[
i
].
u£d
Ë=
GC_FREE_FULL
) {

422 i‡(
	`ATOMIC_CAS_FULL
(&
thªads
[
i
].
u£d
, 
GC_FREE_FULL
, 
GC_BUSY
) != 0) {

423 i‡(
mö
 =
EPOCH_MAX
)

424 
mö
 = 
	`gc_compuã_mö
(
	`cuºít_ïoch
());

425 
	`gc_˛ónup_thªad
(
i
, 
mö
);

426 
	`ATOMIC_STORE
(&
thªads
[
i
].
u£d
,Åhªads[i].
hód
 =
NULL
 ? 
GC_FREE_EMPTY
 : 
GC_FREE_FULL
);

430 
	}
}

436 
	$gc_ª£t
()

438 
i
;

440 
	`PRINT_DEBUG
("==> gc_reset()\n");

442 
	`as£π
(
nb_thªads
 == 0);

444 
i
 = 0; i < 
MAX_THREADS
; i++) {

445 i‡(
thªads
[
i
].
u£d
 =
GC_NULL
)

447 
	`gc_˛ón_ªgi⁄s
(
thªads
[
i
].
hód
);

448 
thªads
[
i
].
ts
 = 
EPOCH_MAX
;

449 
thªads
[
i
].
hód
 =Åhªads[i].
èû
 = 
NULL
;

450 #i‚de‡
NO_PERIODIC_CLEANUP


451 
thªads
[
i
].
‰ìs
 = 0;

454 
	}
}

	@utils/estm-0.3.0/src/gc.h

23 #i‚de‡
_GC_H_


24 
	#_GC_H_


	)

26 
	~<°dlib.h
>

28 #ifde‡
__˝lu•lus


32 
uöçå_t
 
	tgc_w‹d_t
;

34 
gc_öô
(
gc_w‹d_t
 (*
ïoch
)());

35 
gc_exô
();

37 
gc_öô_thªad
();

38 
gc_exô_thªad
();

40 
gc_£t_ïoch
(
gc_w‹d_t
 
ïoch
);

42 
gc_‰ì
(*
addr
, 
gc_w‹d_t
 
ïoch
);

44 
gc_˛ónup
();

46 
gc_˛ónup_Æl
();

48 
gc_ª£t
();

50 #ifde‡
__˝lu•lus


	@utils/estm-0.3.0/src/mod_local.c

22 
	~<as£π.h
>

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

26 
	~"mod_loˇl.h
"

28 
	~"°m.h
"

30 #i‚de‡
LW_SET_SIZE


31 
	#LW_SET_SIZE
 1024

	)

39 
	mTYPE_WORD
,

40 
	mTYPE_CHAR
,

41 
	mTYPE_UCHAR
,

42 
	mTYPE_SHORT
,

43 
	mTYPE_USHORT
,

44 
	mTYPE_INT
,

45 
	mTYPE_UINT
,

46 
	mTYPE_LONG
,

47 
	mTYPE_ULONG
,

48 
	mTYPE_FLOAT
,

49 
	mTYPE_DOUBLE


52 
	sw_íåy
 {

53 
	mty≥
;

55 °ru˘ { vﬁ©ûê*
	ma
; 
	mv
; } 
	mc
;

56 °ru˘ { vﬁ©ûê*
	ma
; 
	mv
; } 
	muc
;

57 °ru˘ { vﬁ©ûê*
	ma
; 
	mv
; } 
	ms
;

58 °ru˘ { vﬁ©ûê*
	ma
; 
	mv
; } 
	mus
;

59 °ru˘ { vﬁ©ûê*
	ma
; 
	mv
; } 
	mi
;

60 °ru˘ { vﬁ©ûê*
	ma
; 
	mv
; } 
	mui
;

61 °ru˘ { vﬁ©ûê*
	ma
; 
	mv
; } 
	ml
;

62 °ru˘ { vﬁ©ûê*
	ma
; 
	mv
; } 
	mul
;

63 °ru˘ { vﬁ©ûê*
	ma
; 
	mv
; } 
	mf
;

64 °ru˘ { vﬁ©ûê*
	ma
; 
	mv
; } 
	md
;

65 °ru˘ { vﬁ©ûê
°m_w‹d_t
 *
	ma
; stm_w‹d_à
	mv
; } 
	mw
;

66 } 
	md©a
;

67 } 
	tw_íåy_t
;

69 
	sw_£t
 {

70 
w_íåy_t
 *
	míåõs
;

71 
	mnb_íåõs
;

72 
	msize
;

73 } 
	tw_£t_t
;

75 
	gkey
;

76 
	göôülized
 = 0;

85 
ölöe
 
w_íåy_t
 *
	$gë_íåy
(
TXPARAM
)

87 
w_£t_t
 *
ws
;

89 i‡(!
öôülized
) {

90 
	`Ârötf
(
°dîr
, "Module mod_localÇot initialized\n");

91 
	`exô
(1);

95 
ws
 = (
w_£t_t
 *)
	`°m_gë_•ecific
(
TXARGS
 
key
);

96 
	`as£π
(
ws
 !
NULL
);

98 i‡(
ws
->
nb_íåõs
 =ws->
size
) {

100 
ws
->
size
 = (ws->sizê< 
LW_SET_SIZE
 ? LW_SET_SIZE : ws->size * 2);

101 i‡((
ws
->
íåõs
 = (
w_íåy_t
 *)
	`ªÆloc
(ws->íåõs, ws->
size
 * (w_íåy_t))Ë=
NULL
) {

102 
	`≥º‹
("realloc");

103 
	`exô
(1);

107  &
ws
->
íåõs
[ws->
nb_íåõs
++];

108 
	}
}

114 
	$°m_°‹e_loˇl
(
TXPARAMS
 
°m_w‹d_t
 *
addr
, stm_w‹d_à
vÆue
)

116 
w_íåy_t
 *
w
 = 
	`gë_íåy
(
TXARG
);

118 
w
->
ty≥
 = 
TYPE_WORD
;

119 
w
->
d©a
.w.
a
 = 
addr
;

120 
w
->
d©a
.w.
v
 = *
addr
;

123 *
addr
 = 
vÆue
;

124 
	}
}

126 
	$°m_°‹e_loˇl_ch¨
(
TXPARAMS
 *
addr
, 
vÆue
)

128 
w_íåy_t
 *
w
 = 
	`gë_íåy
(
TXARG
);

130 
w
->
ty≥
 = 
TYPE_CHAR
;

131 
w
->
d©a
.
c
.
a
 = 
addr
;

132 
w
->
d©a
.
c
.
v
 = *
addr
;

135 *
addr
 = 
vÆue
;

136 
	}
}

138 
	$°m_°‹e_loˇl_uch¨
(
TXPARAMS
 *
addr
, 
vÆue
)

140 
w_íåy_t
 *
w
 = 
	`gë_íåy
(
TXARG
);

142 
w
->
ty≥
 = 
TYPE_UCHAR
;

143 
w
->
d©a
.
uc
.
a
 = 
addr
;

144 
w
->
d©a
.
uc
.
v
 = *
addr
;

147 *
addr
 = 
vÆue
;

148 
	}
}

150 
	$°m_°‹e_loˇl_sh‹t
(
TXPARAMS
 *
addr
, 
vÆue
)

152 
w_íåy_t
 *
w
 = 
	`gë_íåy
(
TXARG
);

154 
w
->
ty≥
 = 
TYPE_SHORT
;

155 
w
->
d©a
.
s
.
a
 = 
addr
;

156 
w
->
d©a
.
s
.
v
 = *
addr
;

159 *
addr
 = 
vÆue
;

160 
	}
}

162 
	$°m_°‹e_loˇl_ush‹t
(
TXPARAMS
 *
addr
, 
vÆue
)

164 
w_íåy_t
 *
w
 = 
	`gë_íåy
(
TXARG
);

166 
w
->
ty≥
 = 
TYPE_USHORT
;

167 
w
->
d©a
.
us
.
a
 = 
addr
;

168 
w
->
d©a
.
us
.
v
 = *
addr
;

171 *
addr
 = 
vÆue
;

172 
	}
}

174 
	$°m_°‹e_loˇl_öt
(
TXPARAMS
 *
addr
, 
vÆue
)

176 
w_íåy_t
 *
w
 = 
	`gë_íåy
(
TXARG
);

178 
w
->
ty≥
 = 
TYPE_INT
;

179 
w
->
d©a
.
i
.
a
 = 
addr
;

180 
w
->
d©a
.
i
.
v
 = *
addr
;

183 *
addr
 = 
vÆue
;

184 
	}
}

186 
	$°m_°‹e_loˇl_uöt
(
TXPARAMS
 *
addr
, 
vÆue
)

188 
w_íåy_t
 *
w
 = 
	`gë_íåy
(
TXARG
);

190 
w
->
ty≥
 = 
TYPE_UINT
;

191 
w
->
d©a
.
ui
.
a
 = 
addr
;

192 
w
->
d©a
.
ui
.
v
 = *
addr
;

195 *
addr
 = 
vÆue
;

196 
	}
}

198 
	$°m_°‹e_loˇl_l⁄g
(
TXPARAMS
 *
addr
, 
vÆue
)

200 
w_íåy_t
 *
w
 = 
	`gë_íåy
(
TXARG
);

202 
w
->
ty≥
 = 
TYPE_LONG
;

203 
w
->
d©a
.
l
.
a
 = 
addr
;

204 
w
->
d©a
.
l
.
v
 = *
addr
;

207 *
addr
 = 
vÆue
;

208 
	}
}

210 
	$°m_°‹e_loˇl_ul⁄g
(
TXPARAMS
 *
addr
, 
vÆue
)

212 
w_íåy_t
 *
w
 = 
	`gë_íåy
(
TXARG
);

214 
w
->
ty≥
 = 
TYPE_ULONG
;

215 
w
->
d©a
.
ul
.
a
 = 
addr
;

216 
w
->
d©a
.
ul
.
v
 = *
addr
;

219 *
addr
 = 
vÆue
;

220 
	}
}

222 
	$°m_°‹e_loˇl_Êﬂt
(
TXPARAMS
 *
addr
, 
vÆue
)

224 
w_íåy_t
 *
w
 = 
	`gë_íåy
(
TXARG
);

226 
w
->
ty≥
 = 
TYPE_FLOAT
;

227 
w
->
d©a
.
f
.
a
 = 
addr
;

228 
w
->
d©a
.
f
.
v
 = *
addr
;

231 *
addr
 = 
vÆue
;

232 
	}
}

234 
	$°m_°‹e_loˇl_doubÀ
(
TXPARAMS
 *
addr
, 
vÆue
)

236 
w_íåy_t
 *
w
 = 
	`gë_íåy
(
TXARG
);

238 
w
->
ty≥
 = 
TYPE_DOUBLE
;

239 
w
->
d©a
.
d
.
a
 = 
addr
;

240 
w
->
d©a
.
d
.
v
 = *
addr
;

243 *
addr
 = 
vÆue
;

244 
	}
}

246 
	$°m_°‹e_loˇl_±r
(
TXPARAMS
 **
addr
, *
vÆue
)

248 uni⁄ { 
°m_w‹d_t
 
w
; *
v
; } 
c⁄vît
;

249 
c⁄vît
.
v
 = 
vÆue
;

250 
	`°m_°‹e_loˇl
(
	`TXARGS
 (
°m_w‹d_t
 *)
addr
, 
c⁄vît
.
w
);

251 
	}
}

256 
	$⁄_thªad_öô
(
TXPARAMS
 *
¨g
)

258 
w_£t_t
 *
ws
;

260 i‡((
ws
 = (
w_£t_t
 *)
	`mÆloc
((w_£t_t))Ë=
NULL
) {

261 
	`≥º‹
("malloc");

262 
	`exô
(1);

264 
ws
->
íåõs
 = 
NULL
;

265 
ws
->
nb_íåõs
 = ws->
size
 = 0;

267 
	`°m_£t_•ecific
(
TXARGS
 
key
, 
ws
);

268 
	}
}

273 
	$⁄_thªad_exô
(
TXPARAMS
 *
¨g
)

275 
w_£t_t
 *
ws
;

277 
ws
 = (
w_£t_t
 *)
	`°m_gë_•ecific
(
TXARGS
 
key
);

278 
	`as£π
(
ws
 !
NULL
);

280 
	`‰ì
(
ws
->
íåõs
);

281 
	`‰ì
(
ws
);

282 
	}
}

287 
	$⁄_commô
(
TXPARAMS
 *
¨g
)

289 
w_£t_t
 *
ws
;

291 
ws
 = (
w_£t_t
 *)
	`°m_gë_•ecific
(
TXARGS
 
key
);

292 
	`as£π
(
ws
 !
NULL
);

295 
ws
->
nb_íåõs
 = 0;

296 
	}
}

301 
	$⁄_ab‹t
(
TXPARAMS
 *
¨g
)

303 
w_£t_t
 *
ws
;

304 
i
;

306 
ws
 = (
w_£t_t
 *)
	`°m_gë_•ecific
(
TXARGS
 
key
);

307 
	`as£π
(
ws
 !
NULL
);

310 
i
 = 
ws
->
nb_íåõs
 - 1; i >= 0; i--) {

311 
ws
->
íåõs
[
i
].
ty≥
) {

312 
TYPE_WORD
:

313 *
ws
->
íåõs
[
i
].
d©a
.
w
.
a
 = ws->íåõs[i].d©a.w.
v
;

315 
TYPE_CHAR
:

316 *
ws
->
íåõs
[
i
].
d©a
.
c
.
a
 = ws->íåõs[i].d©a.c.
v
;

318 
TYPE_UCHAR
:

319 *
ws
->
íåõs
[
i
].
d©a
.
uc
.
a
 = ws->íåõs[i].d©a.uc.
v
;

321 
TYPE_SHORT
:

322 *
ws
->
íåõs
[
i
].
d©a
.
s
.
a
 = ws->íåõs[i].d©a.s.
v
;

324 
TYPE_USHORT
:

325 *
ws
->
íåõs
[
i
].
d©a
.
us
.
a
 = ws->íåõs[i].d©a.us.
v
;

327 
TYPE_INT
:

328 *
ws
->
íåõs
[
i
].
d©a
.i.
a
 = ws->íåõs[i].d©a.i.
v
;

330 
TYPE_UINT
:

331 *
ws
->
íåõs
[
i
].
d©a
.
ui
.
a
 = ws->íåõs[i].d©a.ui.
v
;

333 
TYPE_LONG
:

334 *
ws
->
íåõs
[
i
].
d©a
.
l
.
a
 = ws->íåõs[i].d©a.l.
v
;

336 
TYPE_ULONG
:

337 *
ws
->
íåõs
[
i
].
d©a
.
ul
.
a
 = ws->íåõs[i].d©a.ul.
v
;

339 
TYPE_FLOAT
:

340 *
ws
->
íåõs
[
i
].
d©a
.
f
.
a
 = ws->íåõs[i].d©a.f.
v
;

342 
TYPE_DOUBLE
:

343 *
ws
->
íåõs
[
i
].
d©a
.
d
.
a
 = ws->íåõs[i].d©a.d.
v
;

346 
	`Ârötf
(
°dîr
, "UnexpectedÉntry in undoÜog\n");

347 
	`ab‹t
();

348 
	`exô
(1);

351 
	}
}

356 
	$mod_loˇl_öô
()

358 i‡(
öôülized
)

361 
	`°m_ªgi°î
(
⁄_thªad_öô
, 
⁄_thªad_exô
, 
NULL
, 
⁄_commô
, 
⁄_ab‹t
, NULL);

362 
key
 = 
	`°m_¸óã_•ecific
();

363 i‡(
key
 < 0) {

364 
	`Ârötf
(
°dîr
, "Cannot create specific key\n");

365 
	`exô
(1);

367 
öôülized
 = 1;

368 
	}
}

	@utils/estm-0.3.0/src/mod_mem.c

23 
	~<as£π.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

27 
	~"mod_mem.h
"

29 
	~"gc.h
"

30 
	~"°m.h
"

36 
	smem_block
 {

37 *
	maddr
;

38 
mem_block
 *
	m√xt
;

39 } 
	tmem_block_t
;

41 
	smem_öfo
 {

42 
mem_block_t
 *
	mÆloˇãd
;

43 
mem_block_t
 *
	m‰ìd
;

44 } 
	tmem_öfo_t
;

46 
	gkey
;

47 
	göôülized
 = 0;

56 *
	$°m_mÆloc
(
TXPARAMS
 
size_t
 
size
)

59 
mem_öfo_t
 *
mi
;

60 
mem_block_t
 *
mb
;

62 i‡(!
öôülized
) {

63 
	`Ârötf
(
°dîr
, "Module mod_memÇot initialized\n");

64 
	`exô
(1);

67 
mi
 = (
mem_öfo_t
 *)
	`°m_gë_•ecific
(
TXARGS
 
key
);

68 
	`as£π
(
mi
 !
NULL
);

71 i‡((
°m_w‹d_t
) == 4) {

72 
size
 = (sizê+ 3Ë& ~(
size_t
)0x03;

74 
size
 = (sizê+ 7Ë& ~(
size_t
)0x07;

77 i‡((
mb
 = (
mem_block_t
 *)
	`mÆloc
((mem_block_t))Ë=
NULL
) {

78 
	`≥º‹
("malloc");

79 
	`exô
(1);

81 i‡((
mb
->
addr
 = 
	`mÆloc
(
size
)Ë=
NULL
) {

82 
	`≥º‹
("malloc");

83 
	`exô
(1);

85 
mb
->
√xt
 = 
mi
->
Æloˇãd
;

86 
mi
->
Æloˇãd
 = 
mb
;

88  
mb
->
addr
;

89 
	}
}

94 
	$°m_‰ì
(
TXPARAMS
 *
addr
, 
size_t
 
size
)

96 
	`°m_‰ì2
(
TXARGS
 
addr
, 0, 
size
);

97 
	}
}

102 
	$°m_‰ì2
(
TXPARAMS
 *
addr
, 
size_t
 
idx
, size_à
size
)

105 
mem_öfo_t
 *
mi
;

106 
mem_block_t
 *
mb
;

107 
°m_w‹d_t
 *
a
;

109 i‡(!
öôülized
) {

110 
	`Ârötf
(
°dîr
, "Module mod_memÇot initialized\n");

111 
	`exô
(1);

114 
mi
 = (
mem_öfo_t
 *)
	`°m_gë_•ecific
(
TXARGS
 
key
);

115 
	`as£π
(
mi
 !
NULL
);

118 i‡(
size
 > 0) {

120 i‡((
°m_w‹d_t
) == 4) {

121 
idx
 = (idx + 3) >> 2;

122 
size
 = (size + 3) >> 2;

124 
idx
 = (idx + 7) >> 3;

125 
size
 = (size + 7) >> 3;

127 
a
 = (
°m_w‹d_t
 *)
addr
 + 
idx
;

128 
size
-- > 0) {

130 
	`°m_°‹e2
(
TXARGS
 
a
++, 0, 0);

134 i‡((
mb
 = (
mem_block_t
 *)
	`mÆloc
((mem_block_t))Ë=
NULL
) {

135 
	`≥º‹
("malloc");

136 
	`exô
(1);

138 
mb
->
addr
 =áddr;

139 
mb
->
√xt
 = 
mi
->
‰ìd
;

140 
mi
->
‰ìd
 = 
mb
;

141 
	}
}

146 
	$⁄_thªad_öô
(
TXPARAMS
 *
¨g
)

148 
mem_öfo_t
 *
mi
;

150 i‡((
mi
 = (
mem_öfo_t
 *)
	`mÆloc
((mem_öfo_t))Ë=
NULL
) {

151 
	`≥º‹
("malloc");

152 
	`exô
(1);

154 
mi
->
Æloˇãd
 = mi->
‰ìd
 = 
NULL
;

156 
	`°m_£t_•ecific
(
TXARGS
 
key
, 
mi
);

157 
	}
}

162 
	$⁄_thªad_exô
(
TXPARAMS
 *
¨g
)

164 
	`‰ì
(
	`°m_gë_•ecific
(
TXARGS
 
key
));

165 
	}
}

170 
	$⁄_commô
(
TXPARAMS
 *
¨g
)

172 
mem_öfo_t
 *
mi
;

173 
mem_block_t
 *
mb
, *
√xt
;

175 
mi
 = (
mem_öfo_t
 *)
	`°m_gë_•ecific
(
TXARGS
 
key
);

176 
	`as£π
(
mi
 !
NULL
);

179 i‡(
mi
->
Æloˇãd
 !
NULL
) {

180 
mb
 = 
mi
->
Æloˇãd
;

181 
mb
 !
NULL
) {

182 
√xt
 = 
mb
->next;

183 
	`‰ì
(
mb
);

184 
mb
 = 
√xt
;

186 
mi
->
Æloˇãd
 = 
NULL
;

190 i‡(
mi
->
‰ìd
 !
NULL
) {

191 #ifde‡
EPOCH_GC


192 
°m_w‹d_t
 
t
 = 
	`°m_gë_˛ock
();

194 
mb
 = 
mi
->
‰ìd
;

195 
mb
 !
NULL
) {

196 
√xt
 = 
mb
->next;

197 #ifde‡
EPOCH_GC


198 
	`gc_‰ì
(
mb
->
addr
, 
t
);

200 
	`‰ì
(
mb
->
addr
);

202 
	`‰ì
(
mb
);

203 
mb
 = 
√xt
;

205 
mi
->
‰ìd
 = 
NULL
;

207 
	}
}

212 
	$⁄_ab‹t
(
TXPARAMS
 *
¨g
)

214 
mem_öfo_t
 *
mi
;

215 
mem_block_t
 *
mb
, *
√xt
;

217 
mi
 = (
mem_öfo_t
 *)
	`°m_gë_•ecific
(
TXARGS
 
key
);

218 
	`as£π
 (
mi
 !
NULL
);

221 i‡(
mi
->
Æloˇãd
 !
NULL
) {

222 
mb
 = 
mi
->
Æloˇãd
;

223 
mb
 !
NULL
) {

224 
√xt
 = 
mb
->next;

225 
	`‰ì
(
mb
->
addr
);

226 
	`‰ì
(
mb
);

227 
mb
 = 
√xt
;

229 
mi
->
Æloˇãd
 = 
NULL
;

233 i‡(
mi
->
‰ìd
 !
NULL
) {

234 
mb
 = 
mi
->
‰ìd
;

235 
mb
 !
NULL
) {

236 
√xt
 = 
mb
->next;

237 
	`‰ì
(
mb
);

238 
mb
 = 
√xt
;

240 
mi
->
‰ìd
 = 
NULL
;

242 
	}
}

247 
	$mod_mem_öô
()

249 i‡(
öôülized
)

252 
	`°m_ªgi°î
(
⁄_thªad_öô
, 
⁄_thªad_exô
, 
NULL
, 
⁄_commô
, 
⁄_ab‹t
, NULL);

253 
key
 = 
	`°m_¸óã_•ecific
();

254 i‡(
key
 < 0) {

255 
	`Ârötf
(
°dîr
, "Cannot create specific key\n");

256 
	`exô
(1);

258 
öôülized
 = 1;

259 
	}
}

	@utils/estm-0.3.0/src/mod_print.c

22 
	~"mod_¥öt.h
"

24 
	~"°m.h
"

29 
	$⁄_thªad_öô
(
TXPARAMS
 *
¨g
)

31 
	`¥ötf
("==> on_thread_init()\n");

32 
	`fÊush
(
NULL
);

33 
	}
}

38 
	$⁄_thªad_exô
(
TXPARAMS
 *
¨g
)

40 
	`¥ötf
("==> on_thread_exit()\n");

41 
	`fÊush
(
NULL
);

42 
	}
}

47 
	$⁄_°¨t
(
TXPARAMS
 *
¨g
)

49 
	`¥ötf
("==> on_start()\n");

50 
	`fÊush
(
NULL
);

51 
	}
}

56 
	$⁄_commô
(
TXPARAMS
 *
¨g
)

58 
	`¥ötf
("==> on_commit()\n");

59 
	`fÊush
(
NULL
);

60 
	}
}

65 
	$⁄_ab‹t
(
TXPARAMS
 *
¨g
)

67 
	`¥ötf
("==> on_abort()\n");

68 
	`fÊush
(
NULL
);

69 
	}
}

74 
	$mod_¥öt_öô
()

76 
	`°m_ªgi°î
(
⁄_thªad_öô
, 
⁄_thªad_exô
, 
⁄_°¨t
, 
⁄_commô
, 
⁄_ab‹t
, 
NULL
);

77 
	}
}

	@utils/estm-0.3.0/src/mod_stats.c

22 
	~<as£π.h
>

23 
	~<°dio.h
>

24 
	~<°rög.h
>

26 
	~"mod_°©s.h
"

28 
	~"©omic.h
"

29 
	~"°m.h
"

35 
	stx_°©s
 {

36 
	mcommôs
;

37 
	mab‹ts
;

38 
	mªåõs
;

39 
	mmax_ªåõs
;

40 } 
	ttx_°©s_t
;

42 
	gkey
;

43 
	göôülized
 = 0;

45 
tx_°©s_t
 
	gglobÆ_°©s
 = { 0, 0, 0, 0 };

54 
	$°m_gë_globÆ_°©s
(c⁄° *
«me
, *
vÆ
)

56 i‡(!
öôülized
) {

57 
	`Ârötf
(
°dîr
, "Module mod_statsÇot initialized\n");

58 
	`exô
(1);

61 i‡(
	`°rcmp
("globÆ_nb_commôs", 
«me
) == 0) {

62 *(*)
vÆ
 = 
globÆ_°©s
.
commôs
;

65 i‡(
	`°rcmp
("globÆ_nb_ab‹ts", 
«me
) == 0) {

66 *(*)
vÆ
 = 
globÆ_°©s
.
ab‹ts
;

69 i‡(
	`°rcmp
("globÆ_max_ªåõs", 
«me
) == 0) {

70 *(*)
vÆ
 = 
globÆ_°©s
.
max_ªåõs
;

75 
	}
}

80 
	$°m_gë_loˇl_°©s
(
TXPARAMS
 c⁄° *
«me
, *
vÆ
)

82 
tx_°©s_t
 *
°©s
;

84 i‡(!
öôülized
) {

85 
	`Ârötf
(
°dîr
, "Module mod_statsÇot initialized\n");

86 
	`exô
(1);

89 
°©s
 = (
tx_°©s_t
 *)
	`°m_gë_•ecific
(
TXARGS
 
key
);

90 
	`as£π
(
°©s
 !
NULL
);

92 i‡(
	`°rcmp
("nb_commôs", 
«me
) == 0) {

93 *(*)
vÆ
 = 
°©s
->
commôs
;

96 i‡(
	`°rcmp
("nb_ab‹ts", 
«me
) == 0) {

97 *(*)
vÆ
 = 
°©s
->
ab‹ts
;

100 i‡(
	`°rcmp
("max_ªåõs", 
«me
) == 0) {

101 *(*)
vÆ
 = 
°©s
->
max_ªåõs
;

106 
	}
}

111 
	$⁄_thªad_öô
(
TXPARAMS
 *
¨g
)

113 
tx_°©s_t
 *
°©s
;

115 i‡((
°©s
 = (
tx_°©s_t
 *)
	`mÆloc
(—x_°©s_t))Ë=
NULL
) {

116 
	`≥º‹
("malloc");

117 
	`exô
(1);

119 
°©s
->
commôs
 = 0;

120 
°©s
->
ab‹ts
 = 0;

121 
°©s
->
ªåõs
 = 0;

122 
°©s
->
max_ªåõs
 = 0;

124 
	`°m_£t_•ecific
(
TXARGS
 
key
, 
°©s
);

125 
	}
}

130 
	$⁄_thªad_exô
(
TXPARAMS
 *
¨g
)

132 
tx_°©s_t
 *
°©s
;

133 
max
;

135 
°©s
 = (
tx_°©s_t
 *)
	`°m_gë_•ecific
(
TXARGS
 
key
);

136 
	`as£π
(
°©s
 !
NULL
);

138 
	`ATOMIC_FETCH_ADD_FULL
(&
globÆ_°©s
.
commôs
, 
°©s
->commits);

139 
	`ATOMIC_FETCH_ADD_FULL
(&
globÆ_°©s
.
ab‹ts
, 
°©s
->aborts);

140 
ªåy
:

141 
max
 = 
	`ATOMIC_LOAD
(&
globÆ_°©s
.
max_ªåõs
);

142 i‡(
°©s
->
max_ªåõs
 > 
max
) {

143 i‡(
	`ATOMIC_CAS_FULL
(&
globÆ_°©s
.
max_ªåõs
, 
max
, 
°©s
->max_retries) == 0)

144 
ªåy
;

147 
	`‰ì
(
°©s
);

148 
	}
}

153 
	$⁄_commô
(
TXPARAMS
 *
¨g
)

155 
tx_°©s_t
 *
°©s
;

157 
°©s
 = (
tx_°©s_t
 *)
	`°m_gë_•ecific
(
TXARGS
 
key
);

158 
	`as£π
(
°©s
 !
NULL
);

160 
°©s
->
commôs
++;

161 
°©s
->
ªåõs
 = 0;

162 
	}
}

167 
	$⁄_ab‹t
(
TXPARAMS
 *
¨g
)

169 
tx_°©s_t
 *
°©s
;

171 
°©s
 = (
tx_°©s_t
 *)
	`°m_gë_•ecific
(
TXARGS
 
key
);

172 
	`as£π
(
°©s
 !
NULL
);

174 
°©s
->
ab‹ts
++;

175 
°©s
->
ªåõs
++;

176 i‡(
°©s
->
max_ªåõs
 < sèts->
ªåõs
)

177 
°©s
->
max_ªåõs
 = sèts->
ªåõs
;

178 
	}
}

183 
	$mod_°©s_öô
()

185 i‡(
öôülized
)

188 
	`°m_ªgi°î
(
⁄_thªad_öô
, 
⁄_thªad_exô
, 
NULL
, 
⁄_commô
, 
⁄_ab‹t
, NULL);

189 
key
 = 
	`°m_¸óã_•ecific
();

190 i‡(
key
 < 0) {

191 
	`Ârötf
(
°dîr
, "Cannot create specific key\n");

192 
	`exô
(1);

194 
öôülized
 = 1;

195 
	}
}

	@utils/estm-0.3.0/src/stm.c

23 
	~<as£π.h
>

24 
	~<sig«l.h
>

25 
	~<°dio.h
>

26 
	~<°rög.h
>

28 
	~<±hªad.h
>

29 
	~<sched.h
>

31 
	~"°m.h
"

32 
	~"©omic.h
"

33 
	~"gc.h
"

39 
	#COMPILE_TIME_ASSERT
(
¥ed
Ë0Ë{ 0: ¥ed: ; }

	)

42 
	#WRITE_BACK_ETL
 0

	)

43 
	#WRITE_BACK_CTL
 1

	)

44 
	#WRITE_THROUGH
 2

	)

46 
	#EL
 0

	)

47 
	#NL
 1

	)

49 #ifde‡
EXPLICIT_TX_PARAMETER


50 
	#TX_RETURN
  
tx


	)

51 
	#TX_GET


	)

53 
	#TX_RETURN


	)

54 
	#TX_GET
 
°m_tx_t
 *
tx
 = 
	`°m_gë_tx
()

	)

57 
	#IO_FLUSH


	)

58 
	#PRINT_DEBUG
(...)

	)

59 
	#PRINT_DEBUG2
(...)

	)

61 #i‚de‡
RW_SET_SIZE


62 
	#RW_SET_SIZE
 4096

	)

65 #i‚de‡
LOCK_ARRAY_LOG_SIZE


66 
	#LOCK_ARRAY_LOG_SIZE
 20

	)

69 #i‚de‡
LOCK_SHIFT_EXTRA


70 
	#LOCK_SHIFT_EXTRA
 2

	)

73 
	#XSTR
(
s
Ë
	`STR
(s)

	)

74 
	#STR
(
s
Ë#s

	)

81 
	mTX_IDLE
 = 0,

82 
	mTX_ACTIVE
 = 1,

83 
	mTX_COMMITTED
 = 2,

84 
	mTX_ABORTED
 = 3

87 
	sr_íåy
 {

88 
°m_w‹d_t
 
	mvîsi⁄
;

89 vﬁ©ûê
°m_w‹d_t
 *
	mlock
;

90 } 
	tr_íåy_t
;

92 
	sr_£t
 {

93 
r_íåy_t
 *
	míåõs
;

94 
	mnb_íåõs
;

95 
	msize
;

96 } 
	tr_£t_t
;

98 
	sw_íåy
 {

101 vﬁ©ûê
°m_w‹d_t
 *
	maddr
;

102 
°m_w‹d_t
 
	mvÆue
;

103 
°m_w‹d_t
 
	mmask
;

104 
°m_w‹d_t
 
	mvîsi⁄
;

105 vﬁ©ûê
°m_w‹d_t
 *
	mlock
;

106 
w_íåy
 *
	m√xt
;

109 } 
	tw_íåy_t
;

111 
	sw_£t
 {

112 
w_íåy_t
 *
	míåõs
;

113 
	mnb_íåõs
;

114 
	msize
;

115 
	mªÆloˇã
;

116 } 
	tw_£t_t
;

118 
	#ELASTICITY
 2

	)

119 #i‚de‡
MAX_SPECIFIC


120 
	#MAX_SPECIFIC
 16

	)

123 
	s°m_tx
 {

124 
°m_tx_©å_t
 *
	m©å
;

125 
°m_w‹d_t
 
	m°©us
;

126 
°m_w‹d_t
 
	m°¨t
;

127 
°m_w‹d_t
 
	míd
;

128 
r_£t_t
 
	mr_£t
;

129 
w_£t_t
 
	mw_£t
;

130 
sigjmp_buf
 
	mív
;

131 
sigjmp_buf
 *
	mjmp
;

132 
	m√°ög
;

133 
	mro
;

134 
	mˇn_exãnd
;

135 *
	md©a
[
MAX_SPECIFIC
];

136 
	mªåõs
;

137 
	mab‹ts
;

138 
	mab‹ts_ro
;

139 
	mab‹ts_locked_ªad
;

140 
	mab‹ts_locked_wrôe
;

141 
	mab‹ts_vÆid©e_ªad
;

142 
	mab‹ts_vÆid©e_wrôe
;

143 
	mab‹ts_vÆid©e_commô
;

144 
	mab‹ts_övÆid_mem‹y
;

145 
	mab‹ts_doubÀ_wrôe
;

146 
	mab‹ts_ªÆloˇã
;

147 
	mab‹ts_rﬁlovî
;

148 
	mmax_ªåõs
;

149 
	mty≥
;

150 
°m_w‹d_t
 *
	mœ°øddr
[
ELASTICITY
];

151 
	mm¨kî
;

152 } 
	t°m_tx_t
;

154 
	gnb_•ecific
 = 0;

192 
	scb_íåy
 {

193 (*
	mf
)(
TXPARAMS
 *);

194 *
	m¨g
;

195 } 
	tcb_íåy_t
;

197 
	#MAX_CB
 16

	)

200 
cb_íåy_t
 
	göô_cb
[
MAX_CB
];

201 
cb_íåy_t
 
	gexô_cb
[
MAX_CB
];

202 
cb_íåy_t
 
	g°¨t_cb
[
MAX_CB
];

203 
cb_íåy_t
 
	gcommô_cb
[
MAX_CB
];

204 
cb_íåy_t
 
	gab‹t_cb
[
MAX_CB
];

206 
	gnb_öô_cb
 = 0;

207 
	gnb_exô_cb
 = 0;

208 
	gnb_°¨t_cb
 = 0;

209 
	gnb_commô_cb
 = 0;

210 
	gnb_ab‹t_cb
 = 0;

216 #ifde‡
TLS


217 
__thªad
 
°m_tx_t
* 
	gthªad_tx
;

219 
±hªad_key_t
 
	gthªad_tx
;

250 
	#OWNED_MASK
 0x01

	)

251 
	#VERSION_MAX
 (~(
°m_w‹d_t
)0 >> 1)

	)

253 
	#LOCK_GET_OWNED
(
l
Ë÷ & 
OWNED_MASK
)

	)

254 
	#LOCK_SET_ADDR
(
a
Ë◊ | 
OWNED_MASK
Ë

	)

255 
	#LOCK_GET_ADDR
(
l
Ë÷ & ~(
°m_w‹d_t
)
OWNED_MASK
)

	)

256 
	#LOCK_GET_TIMESTAMP
(
l
Ë÷ >> 1Ë

	)

257 
	#LOCK_SET_TIMESTAMP
(
t
Ë— << 1Ë

	)

258 
	#LOCK_UNIT
 (~(
°m_w‹d_t
)0)

	)

269 
	#LOCK_ARRAY_SIZE
 (1 << 
LOCK_ARRAY_LOG_SIZE
)

	)

270 
	#LOCK_MASK
 (
LOCK_ARRAY_SIZE
 - 1)

	)

271 
	#LOCK_SHIFT
 ((((
°m_w‹d_t
Ë=4Ë? 2 : 3Ë+ 
LOCK_SHIFT_EXTRA
)

	)

272 
	#LOCK_IDX
(
a
Ë(((
°m_w‹d_t
)◊Ë>> 
LOCK_SHIFT
Ë& 
LOCK_MASK
)

	)

273 
	#GET_LOCK
(
a
Ë(
locks
 + 
	`LOCK_IDX
◊))

	)

275 vﬁ©ûê
°m_w‹d_t
 
	glocks
[
LOCK_ARRAY_SIZE
];

282 vﬁ©ûê
°m_w‹d_t
 
	gg˛ock
[1024 / (stm_word_t)];

283 
	#CLOCK
 (
g˛ock
[512 / (
°m_w‹d_t
)])

	)

285 
	#GET_CLOCK
 (
	`ATOMIC_LOAD_ACQ
(&
CLOCK
))

	)

286 
	#FETCH_INC_CLOCK
 (
	`ATOMIC_FETCH_INC_FULL
(&
CLOCK
))

	)

295 
ölöe
 
°m_tx_t
 *
	$°m_gë_tx
()

297 #ifde‡
TLS


298  
thªad_tx
;

300  (
°m_tx_t
 *)
	`±hªad_gë•ecific
(
thªad_tx
);

302 
	}
}

322 
±hªad_muãx_t
 
	gtx_cou¡_muãx
;

323 
±hªad_c⁄d_t
 
	gtx_ª£t
;

324 
	gtx_cou¡
;

325 
	gtx_ovîÊow
;

330 
ölöe
 
	$°m_rﬁlovî_íãr
(
°m_tx_t
 *
tx
)

332 
	`PRINT_DEBUG
("==> stm_rﬁlovî_íãr(%p)\n", 
tx
);

334 
	`±hªad_muãx_lock
(&
tx_cou¡_muãx
);

335 
tx_ovîÊow
 != 0)

336 
	`±hªad_c⁄d_waô
(&
tx_ª£t
, &
tx_cou¡_muãx
);

338 
tx_cou¡
++;

339 
	`±hªad_muãx_u∆ock
(&
tx_cou¡_muãx
);

340 
	}
}

345 
ölöe
 
	$°m_rﬁlovî_exô
(
°m_tx_t
 *
tx
)

347 
	`PRINT_DEBUG
("==> stm_rﬁlovî_exô(%p[%lu-%lu])\n", 
tx
, (Èx->
°¨t
, (Èx->
íd
);

349 
	`±hªad_muãx_lock
(&
tx_cou¡_muãx
);

351 
tx_cou¡
--;

352 
	`as£π
(
tx_cou¡
 >= 0);

354 i‡(
tx_ovîÊow
 !0 && 
tx_cou¡
 == 0) {

356 
	`mem£t
((*)
locks
, 0, 
LOCK_ARRAY_SIZE
 * (
°m_w‹d_t
));

357 
CLOCK
 = 0;

358 
tx_ovîÊow
 = 0;

360 
	`gc_ª£t
();

362 
	`±hªad_c⁄d_brﬂdˇ°
(&
tx_ª£t
);

364 
	`±hªad_muãx_u∆ock
(&
tx_cou¡_muãx
);

365 
	}
}

370 
ölöe
 
	$°m_ovîÊow
(
°m_tx_t
 *
tx
)

372 
	`PRINT_DEBUG
("==> stm_ovîÊow(%p[%lu-%lu])\n", 
tx
, (Èx->
°¨t
, (Èx->
íd
);

374 
	`±hªad_muãx_lock
(&
tx_cou¡_muãx
);

376 
tx_ovîÊow
 = 1;

378 
tx_cou¡
--;

379 
	`as£π
(
tx_cou¡
 >= 0);

381 i‡(
tx_cou¡
 == 0) {

383 
	`mem£t
((*)
locks
, 0, 
LOCK_ARRAY_SIZE
 * (
°m_w‹d_t
));

384 
CLOCK
 = 0;

385 
tx_ovîÊow
 = 0;

387 
	`gc_ª£t
();

389 
	`±hªad_c⁄d_brﬂdˇ°
(&
tx_ª£t
);

392 
	`±hªad_c⁄d_waô
(&
tx_ª£t
, &
tx_cou¡_muãx
);

395 
tx_cou¡
++;

396 
	`±hªad_muãx_u∆ock
(&
tx_cou¡_muãx
);

397 
	}
}

402 
ölöe
 
r_íåy_t
 *
	$°m_has_ªad
(
°m_tx_t
 *
tx
, vﬁ©ûê
°m_w‹d_t
 *
lock
)

404 
r_íåy_t
 *
r
;

405 
i
;

407 
	`PRINT_DEBUG
("==> stm_has_ªad(%p[%lu-%lu],%p)\n", 
tx
, (Èx->
°¨t
, (Èx->
íd
, 
lock
);

410 
	`as£π
(
tx
->
°©us
 =
TX_ACTIVE
);

413 
r
 = 
tx
->
r_£t
.
íåõs
;

414 
i
 = 
tx
->
r_£t
.
nb_íåõs
; i > 0; i--, 
r
++) {

415 i‡(
r
->
lock
 ==Üock) {

417  
r
;

420  
NULL
;

421 
	}
}

426 
ölöe
 
	$°m_Æloˇã_rs_íåõs
(
°m_tx_t
 *
tx
, 
exãnd
)

428 i‡(
exãnd
) {

430 
tx
->
r_£t
.
size
 *= 2;

431 
	`PRINT_DEBUG2
("==>ÑóŒoˇãÑód së (%p[%lu-%lu],%d)\n", 
tx
, (Èx->
°¨t
, (Èx->
íd
,Åx->
r_£t
.
size
);

432 i‡((
tx
->
r_£t
.
íåõs
 = (
r_íåy_t
 *)
	`ªÆloc
—x->r_£t.íåõs,Åx->r_£t.
size
 * ‘_íåy_t))Ë=
NULL
) {

433 
	`≥º‹
("realloc");

434 
	`exô
(1);

438 i‡((
tx
->
r_£t
.
íåõs
 = (
r_íåy_t
 *)
	`mÆloc
—x->r_£t.
size
 * ‘_íåy_t))Ë=
NULL
) {

439 
	`≥º‹
("malloc");

440 
	`exô
(1);

443 
	}
}

448 
ölöe
 
	$°m_Æloˇã_ws_íåõs
(
°m_tx_t
 *
tx
, 
exãnd
)

451 i‡(
exãnd
) {

453 
tx
->
w_£t
.
size
 *= 2;

454 
	`PRINT_DEBUG
("==>ÑóŒoˇã wrôê£à(%p[%lu-%lu],%d)\n", 
tx
, (Èx->
°¨t
, (Èx->
íd
,Åx->
w_£t
.
size
);

455 i‡((
tx
->
w_£t
.
íåõs
 = (
w_íåy_t
 *)
	`ªÆloc
—x->w_£t.íåõs,Åx->w_£t.
size
 * (w_íåy_t))Ë=
NULL
) {

456 
	`≥º‹
("realloc");

457 
	`exô
(1);

461 i‡((
tx
->
w_£t
.
íåõs
 = (
w_íåy_t
 *)
	`mÆloc
—x->w_£t.
size
 * (w_íåy_t))Ë=
NULL
) {

462 
	`≥º‹
("malloc");

463 
	`exô
(1);

467 
	}
}

472 
ölöe
 
	$°m_vÆid©e
(
°m_tx_t
 *
tx
)

474 
r_íåy_t
 *
r
;

475 
i
;

476 
°m_w‹d_t
 
l
;

478 
	`PRINT_DEBUG
("==> stm_vÆid©e(%p[%lu-%lu])\n", 
tx
, (Èx->
°¨t
, (Èx->
íd
);

481 
	`as£π
(
tx
->
°©us
 =
TX_ACTIVE
);

484 
r
 = 
tx
->
r_£t
.
íåõs
;

485 
i
 = 
tx
->
r_£t
.
nb_íåõs
; i > 0; i--, 
r
++) {

487 
l
 = 
	`ATOMIC_LOAD
(
r
->
lock
);

489 i‡(
	`LOCK_GET_OWNED
(
l
)) {

491 
w_íåy_t
 *
w
 = (w_íåy_à*)
	`LOCK_GET_ADDR
(
l
);

493 i‡(!(
tx
->
w_£t
.
íåõs
 <
w
 && w <Åx->w_£t.íåõ†+Åx->w_£t.
nb_íåõs
))

500 i‡(
	`LOCK_GET_TIMESTAMP
(
l
Ë!
r
->
vîsi⁄
) {

508 
	}
}

513 
ölöe
 
	$°m_exãnd
(
°m_tx_t
 *
tx
)

515 
°m_w‹d_t
 
now
;

517 
	`PRINT_DEBUG
("==> stm_exãnd(%p[%lu-%lu])\n", 
tx
, (Èx->
°¨t
, (Èx->
íd
);

520 
	`as£π
(
tx
->
°©us
 =
TX_ACTIVE
);

523 
now
 = 
GET_CLOCK
;

524 i‡(
now
 >
VERSION_MAX
) {

529 i‡(
	`°m_vÆid©e
(
tx
)) {

531 
tx
->
íd
 = 
now
;

535 
	}
}

540 
ölöe
 
	$°m_rﬁlback
(
°m_tx_t
 *
tx
)

542 
w_íåy_t
 *
w
;

543 
i
;

545 
	`PRINT_DEBUG
("==> stm_rﬁlback(%p[%lu-%lu])\n", 
tx
, (Èx->
°¨t
, (Èx->
íd
);

548 
	`as£π
(
tx
->
°©us
 =
TX_ACTIVE
);

551 
i
 = 
tx
->
w_£t
.
nb_íåõs
;

552 i‡(
i
 > 0) {

553 
w
 = 
tx
->
w_£t
.
íåõs
;

554 ; 
i
 > 0; i--, 
w
++) {

555 i‡(
w
->
√xt
 =
NULL
) {

557 
	`ATOMIC_STORE
(
w
->
lock
, 
	`LOCK_SET_TIMESTAMP
(w->
vîsi⁄
));

559 
	`PRINT_DEBUG2
("==> discard(t=%p[%lu-%lu],a=%p,d=%p-%lu,v=%lu)\n",

560 
tx
, (Èx->
°¨t
, (Èx->
íd
, 
w
->
addr
, (*)w->
vÆue
, ()w->vÆue, ()w->
vîsi⁄
);

563 
ATOMIC_MB_WRITE
;

566 
tx
->
ªåõs
++;

567 
tx
->
ab‹ts
++;

568 i‡(
tx
->
max_ªåõs
 <Åx->
ªåõs
)

569 
tx
->
max_ªåõs
 =Åx->
ªåõs
;

572 i‡(
nb_ab‹t_cb
 != 0) {

573 
cb
;

574 
cb
 = 0; cb < 
nb_ab‹t_cb
; cb++)

575 
ab‹t_cb
[
cb
].
	`f
(
TXARGS
áb‹t_cb[cb].
¨g
);

579 
tx
->
°©us
 = 
TX_ABORTED
;

582 
tx
->
√°ög
 = 0;

586 i‡(
tx
->
jmp
 !
NULL
)

587 
	`sigl⁄gjmp
(*
tx
->
jmp
, 1);

588 
	}
}

593 
ölöe
 
w_íåy_t
 *
	$°m_wrôe
(
°m_tx_t
 *
tx
, vﬁ©ûê
°m_w‹d_t
 *
addr
, stm_w‹d_à
vÆue
, stm_w‹d_à
mask
)

595 vﬁ©ûê
°m_w‹d_t
 *
lock
;

596 
°m_w‹d_t
 
l
, 
vîsi⁄
;

597 
w_íåy_t
 *
w
;

598 
w_íåy_t
 *
¥ev
 = 
NULL
;

600 
	`PRINT_DEBUG2
("==> stm_write(t=%p[%lu-%lu],a=%p,d=%p-%lu,m=0x%lx)\n",

601 
tx
, (Èx->
°¨t
, (Èx->
íd
, 
addr
, (*)
vÆue
, ()vÆue, ()
mask
);

604 
	`as£π
(
tx
->
°©us
 =
TX_ACTIVE
);

606 i‡(
tx
->
ro
) {

608 
	`as£π
(
tx
->
©å
 !
NULL
);

609 
tx
->
©å
->
ro
 = 0;

610 
tx
->
ab‹ts_ro
++;

611 
	`°m_rﬁlback
(
tx
);

612  
NULL
;

616 
lock
 = 
	`GET_LOCK
(
addr
);

619 
ª°¨t
:

620 
l
 = 
	`ATOMIC_LOAD_ACQ
(
lock
);

621 i‡(
	`LOCK_GET_OWNED
(
l
)) {

624 
w
 = (
w_íåy_t
 *)
	`LOCK_GET_ADDR
(
l
);

626 i‡(
tx
->
w_£t
.
íåõs
 <
w
 && w <Åx->w_£t.íåõ†+Åx->w_£t.
nb_íåõs
) {

628 
¥ev
 = 
w
;

631 i‡(
addr
 =
¥ev
->addr) {

632 i‡(
mask
 == 0)

633  
¥ev
;

635 
	`PRINT_DEBUG2
("==> stm_write(t=%p[%lu-%lu],a=%p,l=%p,*l=%lu,d=%p-%lu,m=0x%lx)\n",

636 
tx
, (Èx->
°¨t
, (Èx->
íd
, 
addr
, 
lock
, ()
l
, (*)
vÆue
, ()vÆue, ()
mask
);

637 i‡(
mask
 !~(
°m_w‹d_t
)0) {

638 i‡(
¥ev
->
mask
 == 0)

639 
¥ev
->
vÆue
 = 
	`ATOMIC_LOAD
(
addr
);

640 
vÆue
 = (
¥ev
->vÆuê& ~
mask
) | (value & mask);

642 
¥ev
->
vÆue
 = value;

643 
¥ev
->
mask
 |= mask;

644  
¥ev
;

646 i‡(
¥ev
->
√xt
 =
NULL
) {

650 
¥ev
 =Öªv->
√xt
;

653 
vîsi⁄
 = 
¥ev
->version;

655 i‡(
tx
->
w_£t
.
nb_íåõs
 =tx->w_£t.
size
) {

657 
tx
->
w_£t
.
size
 *= 2;

658 
tx
->
w_£t
.
ªÆloˇã
 = 1;

659 
tx
->
ab‹ts_ªÆloˇã
++;

660 
	`°m_rﬁlback
(
tx
);

661  
NULL
;

663 
w
 = &
tx
->
w_£t
.
íåõs
[tx->w_£t.
nb_íåõs
];

664 
do_wrôe
;

667 
tx
->
ab‹ts_locked_wrôe
++;

668 
	`°m_rﬁlback
(
tx
);

669  
NULL
;

673 
vîsi⁄
 = 
	`LOCK_GET_TIMESTAMP
(
l
);

674 i‡(
vîsi⁄
 > 
tx
->
íd
) {

676 i‡(!
tx
->
ˇn_exãnd
 || 
	`°m_has_ªad
—x, 
lock
Ë!
NULL
) {

679 
tx
->
ab‹ts_vÆid©e_wrôe
++;

680 
	`°m_rﬁlback
(
tx
);

681  
NULL
;

685 i‡(
tx
->
w_£t
.
nb_íåõs
 =tx->w_£t.
size
) {

687 
tx
->
w_£t
.
size
 *= 2;

688 
tx
->
w_£t
.
ªÆloˇã
 = 1;

689 
tx
->
ab‹ts_ªÆloˇã
++;

690 
	`°m_rﬁlback
(
tx
);

691  
NULL
;

693 
w
 = &
tx
->
w_£t
.
íåõs
[tx->w_£t.
nb_íåõs
];

694 i‡(
	`ATOMIC_CAS_FULL
(
lock
, 
l
, 
	`LOCK_SET_ADDR
((
°m_w‹d_t
)
w
)) == 0)

695 
ª°¨t
;

698 
do_wrôe
:

699 
	`PRINT_DEBUG2
("==> stm_write(t=%p[%lu-%lu],a=%p,l=%p,*l=%lu,d=%p-%lu,m=0x%lx)\n",

700 
tx
, (Èx->
°¨t
, (Èx->
íd
, 
addr
, 
lock
, ()
l
, (*)
vÆue
, ()vÆue, ()
mask
);

703 
w
->
addr
 =áddr;

704 
w
->
mask
 = mask;

705 
w
->
lock
 =Üock;

706 i‡(
mask
 == 0) {

708 #i‚de‡
NDEBUG


709 
w
->
vÆue
 = 0;

714 i‡(
mask
 !~(
°m_w‹d_t
)0)

715 
vÆue
 = (
	`ATOMIC_LOAD
(
addr
Ë& ~
mask
) | (value & mask);

716 
w
->
vÆue
 = value;

718 
w
->
vîsi⁄
 = version;

719 
w
->
√xt
 = 
NULL
;

720 i‡(
¥ev
 !
NULL
) {

722 
¥ev
->
√xt
 = 
w
;

724 
tx
->
w_£t
.
nb_íåõs
++;

726  
w
;

727 
	}
}

734 
	$sig«l_ˇtchî
(
sig
)

736 
°m_tx_t
 *
tx
 = 
	`°m_gë_tx
();

739 
	`PRINT_DEBUG
("Caughàsig«l: %d\n", 
sig
);

741 i‡(
tx
 =
NULL
 ||Åx->
jmp
 == NULL) {

743 
	`Ârötf
(
°dîr
, "Error: invalid memoryáccessedándÇoÜongjmp destination\n");

744 
	`exô
(1);

747 
tx
->
ab‹ts_övÆid_mem‹y
++;

749 
	`°m_rﬁlback
(
tx
);

750 
	}
}

759 
	$°m_öô
()

761 
siga˘i⁄
 
a˘
;

763 
	`PRINT_DEBUG
("==> stm_init()\n");

765 
	`PRINT_DEBUG
("\tsizeof(w‹d)=%d\n", ()(
°m_w‹d_t
));

767 
	`PRINT_DEBUG
("\tVERSION_MAX=0x%lx\n", ()
VERSION_MAX
);

769 
	`COMPILE_TIME_ASSERT
((
°m_w‹d_t
) == (*));

770 
	`COMPILE_TIME_ASSERT
((
°m_w‹d_t
Ë=(
©omic_t
));

772 
	`gc_öô
(
°m_gë_˛ock
);

774 
	`mem£t
((*)
locks
, 0, 
LOCK_ARRAY_SIZE
 * (
°m_w‹d_t
));

777 
CLOCK
 = 0;

778 i‡(
	`±hªad_muãx_öô
(&
tx_cou¡_muãx
, 
NULL
) != 0) {

779 
	`Ârötf
(
°dîr
, "Error creating mutex\n");

780 
	`exô
(1);

782 i‡(
	`±hªad_c⁄d_öô
(&
tx_ª£t
, 
NULL
) != 0) {

783 
	`Ârötf
(
°dîr
, "Error creating condition variable\n");

784 
	`exô
(1);

786 
tx_cou¡
 = 0;

787 
tx_ovîÊow
 = 0;

789 #i‚de‡
TLS


790 i‡(
	`±hªad_key_¸óã
(&
thªad_tx
, 
NULL
) != 0) {

791 
	`Ârötf
(
°dîr
, "Error creatingÅhreadÜocal\n");

792 
	`exô
(1);

797 
a˘
.
ß_h™dÀr
 = 
sig«l_ˇtchî
;

798 
a˘
.
ß_Êags
 = 0;

799 
	`sigem±y£t
(&
a˘
.
ß_mask
);

800 i‡(
	`siga˘i⁄
(
SIGBUS
, &
a˘
, 
NULL
Ë< 0 || siga˘i⁄(
SIGSEGV
, &act, NULL) < 0) {

801 
	`≥º‹
("sigaction");

802 
	`exô
(1);

805 
	}
}

810 
	$°m_exô
()

812 
	`PRINT_DEBUG
("==> stm_exit()\n");

814 #i‚de‡
TLS


815 
	`±hªad_key_dñëe
(
thªad_tx
);

817 
	`±hªad_c⁄d_de°roy
(&
tx_ª£t
);

818 
	`±hªad_muãx_de°roy
(&
tx_cou¡_muãx
);

820 
	`gc_exô
();

821 
	}
}

826 
TXTYPE
 
	$°m_öô_thªad
()

828 
°m_tx_t
 *
tx
;

830 
	`PRINT_DEBUG
("==> stm_init_thread()\n");

832 
	`gc_öô_thªad
();

835 i‡((
tx
 = (
°m_tx_t
 *)
	`mÆloc
((°m_tx_t))Ë=
NULL
) {

836 
	`≥º‹
("malloc");

837 
	`exô
(1);

840 
tx
->
°©us
 = 
TX_IDLE
;

842 
tx
->
r_£t
.
nb_íåõs
 = 0;

843 
tx
->
r_£t
.
size
 = 
RW_SET_SIZE
;

844 
	`°m_Æloˇã_rs_íåõs
(
tx
, 0);

846 
tx
->
w_£t
.
nb_íåõs
 = 0;

847 
tx
->
w_£t
.
size
 = 
RW_SET_SIZE
;

848 
tx
->
w_£t
.
ªÆloˇã
 = 0;

849 
	`°m_Æloˇã_ws_íåõs
(
tx
, 0);

851 
tx
->
√°ög
 = 0;

853 
	`mem£t
(
tx
->
d©a
, 0, 
MAX_SPECIFIC
 * (*));

854 
tx
->
ªåõs
 = 0;

856 
tx
->
ab‹ts
 = 0;

857 
tx
->
ab‹ts_ro
 = 0;

858 
tx
->
ab‹ts_locked_ªad
 = 0;

859 
tx
->
ab‹ts_locked_wrôe
 = 0;

860 
tx
->
ab‹ts_vÆid©e_ªad
 = 0;

861 
tx
->
ab‹ts_vÆid©e_wrôe
 = 0;

862 
tx
->
ab‹ts_vÆid©e_commô
 = 0;

863 
tx
->
ab‹ts_övÆid_mem‹y
 = 0;

864 
tx
->
ab‹ts_ªÆloˇã
 = 0;

865 
tx
->
ab‹ts_rﬁlovî
 = 0;

866 
tx
->
max_ªåõs
 = 0;

868 #ifde‡
TLS


869 
thªad_tx
 = 
tx
;

871 
	`±hªad_£t•ecific
(
thªad_tx
, 
tx
);

873 
	`°m_rﬁlovî_íãr
(
tx
);

876 i‡(
nb_öô_cb
 != 0) {

877 
cb
;

878 
cb
 = 0; cb < 
nb_öô_cb
; cb++)

879 
öô_cb
[
cb
].
	`f
(
TXARGS
 inô_cb[cb].
¨g
);

882 
	`PRINT_DEBUG
("==> %p\n", 
tx
);

884 
TX_RETURN
;

885 
	}
}

890 
	$°m_exô_thªad
(
TXPARAM
)

892 
°m_w‹d_t
 
t
;

893 
TX_GET
;

895 
	`PRINT_DEBUG
("==> stm_exô_thªad(%p[%lu-%lu])\n", 
tx
, (Èx->
°¨t
, (Èx->
íd
);

898 i‡(
nb_exô_cb
 != 0) {

899 
cb
;

900 
cb
 = 0; cb < 
nb_exô_cb
; cb++)

901 
exô_cb
[
cb
].
	`f
(
TXARGS
Éxô_cb[cb].
¨g
);

904 
	`°m_rﬁlovî_exô
(
tx
);

906 
t
 = 
GET_CLOCK
;

907 
	`gc_‰ì
(
tx
->
r_£t
.
íåõs
, 
t
);

908 
	`gc_‰ì
(
tx
->
w_£t
.
íåõs
, 
t
);

909 
	`gc_‰ì
(
tx
, 
t
);

910 
	`gc_exô_thªad
();

911 
	}
}

916 
ölöe
 
	$°m_ña°ic_°¨t
(
TXPARAMS
 
sigjmp_buf
 *
ív
, 
°m_tx_©å_t
 *
©å
)

918 
TX_GET
;

919 
tx
->
ty≥
 = 
EL
;

921 
	`mem£t
(
tx
->
œ°øddr
, 0, 
ELASTICITY
 * (*));

922 
tx
->
m¨kî
 = 0;

924 
	`PRINT_DEBUG
("==> stm_ña°ic_°¨t(%p)\n", 
tx
);

927 i‡(
tx
->
√°ög
++ > 0)

931 
tx
->
jmp
 = 
ív
;

933 
tx
->
©å
 =áttr;

934 
tx
->
ro
 = (
©å
 =
NULL
 ? 0 :áttr->ro);

936 
tx
->
°©us
 = 
TX_ACTIVE
;

937 
°¨t
:

939 
tx
->
°¨t
 =Åx->
íd
 = 
GET_CLOCK
;

941 
tx
->
ˇn_exãnd
 = 0;

942 i‡(
tx
->
°¨t
 >
VERSION_MAX
) {

944 
	`°m_ovîÊow
(
tx
);

945 
°¨t
;

948 i‡(
tx
->
w_£t
.
ªÆloˇã
) {

950 
	`gc_‰ì
(
tx
->
w_£t
.
íåõs
,Åx->
°¨t
);

951 
	`°m_Æloˇã_ws_íåõs
(
tx
, 0);

952 
tx
->
w_£t
.
ªÆloˇã
 = 0;

954 
tx
->
w_£t
.
nb_íåõs
 = 0;

955 
tx
->
r_£t
.
nb_íåõs
 = 0;

957 
	`gc_£t_ïoch
(
tx
->
°¨t
);

960 i‡(
nb_°¨t_cb
 != 0) {

961 
cb
;

962 
cb
 = 0; cb < 
nb_°¨t_cb
; cb++)

963 
°¨t_cb
[
cb
].
	`f
(
TXARGS
 sèπ_cb[cb].
¨g
);

965 
	}
}

970 
ölöe
 
	$°m_n‹mÆ_°¨t
(
TXPARAMS
 
sigjmp_buf
 *
ív
, 
°m_tx_©å_t
 *
©å
)

972 
TX_GET
;

973 
tx
->
ty≥
 = 
NL
;

975 
	`PRINT_DEBUG
("==> stm_n‹mÆ_°¨t(%p)\n", 
tx
);

978 i‡(
tx
->
√°ög
++ > 0)

982 
tx
->
jmp
 = 
ív
;

984 
tx
->
©å
 =áttr;

985 
tx
->
ro
 = (
©å
 =
NULL
 ? 0 :áttr->ro);

987 
tx
->
°©us
 = 
TX_ACTIVE
;

988 
°¨t
:

990 
tx
->
°¨t
 =Åx->
íd
 = 
GET_CLOCK
;

992 
tx
->
ˇn_exãnd
 = 1;

993 i‡(
tx
->
°¨t
 >
VERSION_MAX
) {

995 
	`°m_ovîÊow
(
tx
);

996 
°¨t
;

999 i‡(
tx
->
w_£t
.
ªÆloˇã
) {

1001 
	`gc_‰ì
(
tx
->
w_£t
.
íåõs
,Åx->
°¨t
);

1002 
	`°m_Æloˇã_ws_íåõs
(
tx
, 0);

1003 
tx
->
w_£t
.
ªÆloˇã
 = 0;

1005 
tx
->
w_£t
.
nb_íåõs
 = 0;

1006 
tx
->
r_£t
.
nb_íåõs
 = 0;

1008 
	`gc_£t_ïoch
(
tx
->
°¨t
);

1011 i‡(
nb_°¨t_cb
 != 0) {

1012 
cb
;

1013 
cb
 = 0; cb < 
nb_°¨t_cb
; cb++)

1014 
°¨t_cb
[
cb
].
	`f
(
TXARGS
 sèπ_cb[cb].
¨g
);

1016 
	}
}

1018 
	$°m_°¨t
(
TXPARAMS
 
sigjmp_buf
 *
ív
, 
°m_tx_©å_t
 *
©å
, 
ty≥
) {

1019 
	`PRINT_DEBUG
("==> stm_start\n");

1020 i‡(
ty≥
 =
NL
Ë
	`°m_n‹mÆ_°¨t
(
ív
, 
©å
);

1021 
	`°m_ña°ic_°¨t
(
ív
, 
©å
);

1022 
	}
}

1027 
ölöe
 
	$°m_ña°ic_commô
(
TXPARAM
)

1029 
TX_GET
;

1031 
	`PRINT_DEBUG
("==> stm_ña°ic_commô(%p[%lu-%lu])\n", 
tx
, (Èx->
°¨t
, (Èx->
íd
);

1034 
	`as£π
(
tx
->
°©us
 =
TX_ACTIVE
);

1037 i‡(--
tx
->
√°ög
 > 0)

1040 
tx
->
ªåõs
 = 0;

1043 i‡(
nb_commô_cb
 != 0) {

1044 
cb
;

1045 
cb
 = 0; cb < 
nb_commô_cb
; cb++)

1046 
commô_cb
[
cb
].
	`f
(
TXARGS
 commô_cb[cb].
¨g
);

1050 
tx
->
°©us
 = 
TX_COMMITTED
;

1053 
	}
}

1058 
ölöe
 
	$°m_n‹mÆ_commô
(
TXPARAM
)

1060 
w_íåy_t
 *
w
;

1061 
°m_w‹d_t
 
t
;

1062 
i
;

1063 
TX_GET
;

1065 
	`PRINT_DEBUG
("==> stm_n‹mÆ_commô(%p[%lu-%lu])\n", 
tx
, (Èx->
°¨t
, (Èx->
íd
);

1068 
	`as£π
(
tx
->
°©us
 =
TX_ACTIVE
);

1071 i‡(--
tx
->
√°ög
 > 0)

1074 i‡(
tx
->
w_£t
.
nb_íåõs
 > 0) {

1079 
t
 = 
FETCH_INC_CLOCK
 + 1;

1080 i‡(
t
 >
VERSION_MAX
) {

1082 
tx
->
ab‹ts_rﬁlovî
++;

1083 
	`°m_rﬁlback
(
tx
);

1088 i‡(
tx
->
°¨t
 !
t
 - 1 && !
	`°m_vÆid©e
(tx)) {

1090 
tx
->
ab‹ts_vÆid©e_commô
++;

1091 
	`°m_rﬁlback
(
tx
);

1096 
w
 = 
tx
->
w_£t
.
íåõs
;

1097 
i
 = 
tx
->
w_£t
.
nb_íåõs
; i > 0; i--, 
w
++) {

1098 i‡(
w
->
mask
 != 0)

1099 
	`ATOMIC_STORE
(
w
->
addr
, w->
vÆue
);

1101 i‡(
w
->
√xt
 =
NULL
)

1102 
	`ATOMIC_STORE_REL
(
w
->
lock
, 
	`LOCK_SET_TIMESTAMP
(
t
));

1104 
	`PRINT_DEBUG2
("==> write(t=%p[%lu-%lu],a=%p,d=%p-%d,v=%d)\n",

1105 
tx
, (Èx->
°¨t
, (Èx->
íd
, 
w
->
addr
, (*)w->
vÆue
, ()w->vÆue, ()w->
vîsi⁄
);

1109 
tx
->
ªåõs
 = 0;

1114 i‡(
nb_commô_cb
 != 0) {

1115 
cb
;

1116 
cb
 = 0; cb < 
nb_commô_cb
; cb++)

1117 
commô_cb
[
cb
].
	`f
(
TXARGS
 commô_cb[cb].
¨g
);

1121 
tx
->
°©us
 = 
TX_COMMITTED
;

1124 
	}
}

1126 
	$°m_commô
(
TXPARAM
) {

1127 
TX_GET
;

1128 i‡(
tx
->
ty≥
 =
NL
Ë 
	`°m_n‹mÆ_commô
();

1129  
	`°m_ña°ic_commô
();

1130 
	}
}

1135 
	$°m_ab‹t
(
TXPARAM
)

1137 
TX_GET
;

1138 
	`°m_rﬁlback
(
tx
);

1139 
	}
}

1144 
ölöe
 
°m_w‹d_t
 
	$°m_vîvÆvî
(vﬁ©ûê
°m_w‹d_t
 *
addr
, stm_w‹d_à*
time°amp
)

1146 vﬁ©ûê
°m_w‹d_t
 *
lock
;

1147 
°m_w‹d_t
 
l
, 
l2
, 
vÆue
;

1148 
w_íåy_t
 *
w
;

1150 
TX_GET
;

1152 
	`PRINT_DEBUG2
("==> stm_vîvÆvî◊=%p)\n", 
addr
);

1155 
lock
 = 
	`GET_LOCK
(
addr
);

1158 
ª°¨t
:

1159 
l
 = 
	`ATOMIC_LOAD_ACQ
(
lock
);

1160 
ª°¨t_no_lﬂd
:

1161 i‡(
	`LOCK_GET_OWNED
(
l
)) {

1163 i‡((
°m_tx_t
 *)
	`LOCK_GET_ADDR
(
l
Ë=
tx
) {

1165 
w
 = (
w_íåy_t
 *)
	`LOCK_GET_ADDR
(
l
);

1167 i‡(
tx
->
w_£t
.
íåõs
 <
w
 && w <Åx->w_£t.íåõ†+Åx->w_£t.
nb_íåõs
) {

1170 i‡(
addr
 =
w
->addr) {

1172 
vÆue
 = (
w
->
mask
 =0 ? 
	`ATOMIC_LOAD
(
addr
) : w->value);

1175 i‡(
w
->
√xt
 =
NULL
) {

1177 
vÆue
 = 
	`ATOMIC_LOAD
(
addr
);

1180 
w
 = w->
√xt
;

1183 
	`PRINT_DEBUG2
("==> stm_normal_load(t=%p[%lu-%lu],a=%p,l=%p,*l=%lu,d=%p-%lu)\n",

1184 
tx
, (Èx->
°¨t
, (Èx->
íd
, 
addr
, 
lock
, ()
l
, (*)
vÆue
, ()value);

1185  
vÆue
;

1190 
ª°¨t
;

1193 
vÆue
 = 
	`ATOMIC_LOAD_ACQ
(
addr
);

1194 
l2
 = 
	`ATOMIC_LOAD_ACQ
(
lock
);

1195 i‡(
l
 !
l2
) {

1196 
l
 = 
l2
;

1197 
ª°¨t_no_lﬂd
;

1200 *
time°amp
 = 
	`LOCK_GET_TIMESTAMP
(
l
);

1202 
	`PRINT_DEBUG2
("==> stm_vervalver(a=%p,l=%p,*l=%lu,d=%p-%lu)\n",

1203 
addr
, 
lock
, ()
l
, (*)
vÆue
, ()value);

1205  
vÆue
;

1206 
	}
}

1212 
ölöe
 
°m_w‹d_t
 
	$°m_ña°ic_lﬂd
(
TXPARAMS
 vﬁ©ûê
°m_w‹d_t
 *
x
)

1214 
i
;

1215 
°m_w‹d_t
 
v_x
;

1216 
°m_w‹d_t
 *
y
;

1217 
°m_w‹d_t
 
ts_x
 = 0;

1218 
°m_w‹d_t
 
ts_y
 = 0;

1220 
TX_GET
;

1223 
	`as£π
(
tx
->
°©us
 =
TX_ACTIVE
);

1225 
	`PRINT_DEBUG2
("==> stm_ña°ic_lﬂd—=%p[%lu-%lu],a=%p)\n", 
tx
,

1226 ()
tx
->
°¨t
, (Èx->
íd
, 
addr
);

1228 
v_x
 = 
	`°m_vîvÆvî
(
x
, &
ts_x
);

1230 i‡(
ts_x
 > 
tx
->
°¨t
) {

1232 
i
=0; i<
ELASTICITY
; i++) {

1233 i‡((
y
=
tx
->
œ°øddr
[
i
])) {

1234 
	`°m_vîvÆvî
(
y
, &
ts_y
);

1235 i‡(
ts_y
 > 
tx
->
°¨t
) {

1236 
tx
->
ab‹ts_ro
++;

1237 
	`°m_rﬁlback
(
tx
);

1242 
tx
->
°¨t
 = 
ts_x
;

1246 
tx
->
œ°øddr
[tx->
m¨kî
] = (
°m_w‹d_t
 *)
x
;

1248 
tx
->
m¨kî
 = ++tx->m¨kî % 
ELASTICITY
;

1250  
v_x
;

1251 
	}
}

1257 
ölöe
 
°m_w‹d_t
 
	$°m_n‹mÆ_lﬂd
(
TXPARAMS
 vﬁ©ûê
°m_w‹d_t
 *
addr
)

1259 vﬁ©ûê
°m_w‹d_t
 *
lock
;

1260 
°m_w‹d_t
 
l
, 
l2
, 
vÆue
, 
vîsi⁄
;

1261 
r_íåy_t
 *
r
;

1262 
w_íåy_t
 *
w
;

1263 
TX_GET
;

1265 
	`PRINT_DEBUG2
("==> stm_n‹mÆ_lﬂd—=%p[%lu-%lu],a=%p)\n", 
tx
, (Èx->
°¨t
, (Èx->
íd
, 
addr
);

1268 
	`as£π
(
tx
->
°©us
 =
TX_ACTIVE
);

1271 
lock
 = 
	`GET_LOCK
(
addr
);

1276 
l
 = 
	`ATOMIC_LOAD_ACQ
(
lock
);

1277 
ª°¨t_no_lﬂd
:

1278 i‡(
	`LOCK_GET_OWNED
(
l
)) {

1281 
w
 = (
w_íåy_t
 *)
	`LOCK_GET_ADDR
(
l
);

1283 i‡(
tx
->
w_£t
.
íåõs
 <
w
 && w <Åx->w_£t.íåõ†+Åx->w_£t.
nb_íåõs
) {

1286 i‡(
addr
 =
w
->addr) {

1288 
vÆue
 = (
w
->
mask
 =0 ? 
	`ATOMIC_LOAD
(
addr
) : w->value);

1291 i‡(
w
->
√xt
 =
NULL
) {

1293 
vÆue
 = 
	`ATOMIC_LOAD
(
addr
);

1296 
w
 = w->
√xt
;

1299 
	`PRINT_DEBUG2
("==> stm_normal_load(t=%p[%lu-%lu],a=%p,l=%p,*l=%lu,d=%p-%lu)\n",

1300 
tx
, (Èx->
°¨t
, (Èx->
íd
, 
addr
, 
lock
, ()
l
, (*)
vÆue
, ()value);

1301  
vÆue
;

1304 
tx
->
ab‹ts_locked_ªad
++;

1305 
	`°m_rﬁlback
(
tx
);

1309 
vÆue
 = 
	`ATOMIC_LOAD_ACQ
(
addr
);

1310 
l2
 = 
	`ATOMIC_LOAD_ACQ
(
lock
);

1311 i‡(
l
 !
l2
) {

1312 
l
 = 
l2
;

1313 
ª°¨t_no_lﬂd
;

1316 
vîsi⁄
 = 
	`LOCK_GET_TIMESTAMP
(
l
);

1318 i‡(
vîsi⁄
 > 
tx
->
íd
) {

1320 i‡(
tx
->
ro
 || !tx->
ˇn_exãnd
 || !
	`°m_exãnd
(tx)) {

1322 
tx
->
ab‹ts_vÆid©e_ªad
++;

1323 
	`°m_rﬁlback
(
tx
);

1329 
l
 = 
	`ATOMIC_LOAD_ACQ
(
lock
);

1330 i‡(
l
 !
l2
) {

1331 
l
 = 
l2
;

1332 
ª°¨t_no_lﬂd
;

1339 i‡(!
tx
->
ro
) {

1341 i‡(
tx
->
r_£t
.
nb_íåõs
 =tx->r_£t.
size
)

1342 
	`°m_Æloˇã_rs_íåõs
(
tx
, 1);

1343 
r
 = &
tx
->
r_£t
.
íåõs
[tx->r_£t.
nb_íåõs
++];

1344 
r
->
vîsi⁄
 = version;

1345 
r
->
lock
 =Üock;

1348 
	`PRINT_DEBUG2
("==> stm_normal_load(t=%p[%lu-%lu],a=%p,l=%p,*l=%lu,d=%p-%lu,v=%lu)\n",

1349 
tx
, (Èx->
°¨t
, (Èx->
íd
, 
addr
, 
lock
, ()
l
, (*)
vÆue
, ()vÆue, ()
vîsi⁄
);

1351  
vÆue
;

1352 
	}
}

1358 
°m_w‹d_t
 
	$°m_lﬂd
(
TXPARAMS
 vﬁ©ûê
°m_w‹d_t
 *
addr
) {

1359 
TX_GET
;

1360 i‡(
tx
->
ty≥
 =
NL
Ë 
	`°m_n‹mÆ_lﬂd
(
addr
);

1361  
	`°m_ña°ic_lﬂd
(
addr
);

1362 
	}
}

1368 
ölöe
 
	$°m_ña°ic_°‹e
(vﬁ©ûê
°m_w‹d_t
 *
addr
, stm_w‹d_à
vÆue
, stm_w‹d_à
mask
)

1370 
i
;

1371 
°m_w‹d_t
 
ts_x
;

1372 vﬁ©ûê
°m_w‹d_t
 *
lock
;

1373 
°m_w‹d_t
 
l
;

1374 
w_íåy_t
 *
w
;

1376 
TX_GET
;

1378 
	`PRINT_DEBUG2
("==> stm_ña°ic_°‹e—=%p[%lu-%lu],a=%p)\n", 
tx
,

1379 ()
tx
->
°¨t
, (Èx->
íd
, 
addr
);

1381 
tx
->
ty≥
 = 
NL
;

1382 
	`°m_wrôe
(
tx
, 
addr
, 
vÆue
, 
mask
);

1385 
i
=0; i<
ELASTICITY
; i++) {

1387 i‡(
tx
->
œ°øddr
[
i
]) {

1388 
lock
 = 
	`GET_LOCK
(
tx
->
œ°øddr
[
i
]);

1389 
l
 = 
	`ATOMIC_LOAD_ACQ
(
lock
);

1390 i‡(
	`LOCK_GET_OWNED
(
l
)) {

1392 
w
 = (
w_íåy_t
 *)
	`LOCK_GET_ADDR
(
l
);

1394 i‡((
tx
->
w_£t
.
íåõs
 <
w
 && w <Åx->w_£t.íåõ†+Åx->w_£t.
nb_íåõs
))

1397 
tx
->
ab‹ts_locked_wrôe
++;

1398 
	`°m_rﬁlback
(
tx
);

1402 
ts_x
 = (
°m_w‹d_t
)
	`LOCK_GET_TIMESTAMP
(
l
);

1403 i‡(
ts_x
 > 
tx
->
°¨t
) {

1405 
tx
->
ab‹ts_vÆid©e_wrôe
++;

1406 
	`°m_rﬁlback
(
tx
);

1412 
	`mem£t
(
tx
->
œ°øddr
, 0, 
ELASTICITY
 * (*));

1415 
	}
}

1421 
ölöe
 
	$°m_n‹mÆ_°‹e
(vﬁ©ûê
°m_w‹d_t
 *
addr
, stm_w‹d_à
vÆue
)

1423 
TX_GET
;

1424 
	`°m_wrôe
(
tx
, 
addr
, 
vÆue
, ~(
°m_w‹d_t
)0);

1425 
	}
}

1431 
	$°m_°‹e
(
TXPARAMS
 vﬁ©ûê
°m_w‹d_t
 *
addr
, stm_w‹d_à
vÆue
)

1433 
TX_GET
;

1434 i‡(
tx
->
ty≥
 =
EL
Ë
	`°m_ña°ic_°‹e
(
addr
, 
vÆue
, ~(
°m_w‹d_t
)0);

1435 
	`°m_wrôe
(
tx
, 
addr
, 
vÆue
, ~(
°m_w‹d_t
)0);

1436 
	}
}

1442 
	$°m_°‹e2
(
TXPARAMS
 vﬁ©ûê
°m_w‹d_t
 *
addr
, stm_w‹d_à
vÆue
, stm_w‹d_à
mask
)

1444 
TX_GET
;

1445 i‡(
tx
->
ty≥
 =
EL
Ë
	`°m_ña°ic_°‹e
(
addr
, 
vÆue
, 
mask
);

1446 
	`°m_wrôe
(
tx
, 
addr
, 
vÆue
, 
mask
);

1447 
	}
}

1452 
	$°m_a˘ive
(
TXPARAM
)

1454 
TX_GET
;

1456  (
tx
->
°©us
 =
TX_ACTIVE
);

1457 
	}
}

1462 
	$°m_ab‹ãd
(
TXPARAM
)

1464 
TX_GET
;

1466  (
tx
->
°©us
 =
TX_ABORTED
);

1467 
	}
}

1472 
sigjmp_buf
 *
	$°m_gë_ív
(
TXPARAM
)

1474 
TX_GET
;

1476  
tx
->
√°ög
 =0 ? &tx->
ív
 : 
NULL
;

1477 
	}
}

1482 
°m_tx_©å_t
 *
	$°m_gë_©åibuãs
(
TXPARAM
)

1484 
TX_GET
;

1486  
tx
->
©å
;

1487 
	}
}

1492 
	$°m_gë_°©s
(
TXPARAMS
 c⁄° *
«me
, *
vÆ
)

1494 
TX_GET
;

1496 i‡(
	`°rcmp
("ªad_£t_size", 
«me
) == 0) {

1497 *(*)
vÆ
 = 
tx
->
r_£t
.
size
;

1500 i‡(
	`°rcmp
("wrôe_£t_size", 
«me
) == 0) {

1501 *(*)
vÆ
 = 
tx
->
w_£t
.
size
;

1504 i‡(
	`°rcmp
("ªad_£t_nb_íåõs", 
«me
) == 0) {

1505 *(*)
vÆ
 = 
tx
->
r_£t
.
nb_íåõs
;

1508 i‡(
	`°rcmp
("wrôe_£t_nb_íåõs", 
«me
) == 0) {

1509 *(*)
vÆ
 = 
tx
->
w_£t
.
nb_íåõs
;

1512 i‡(
	`°rcmp
("ªad_⁄ly", 
«me
) == 0) {

1513 *(*)
vÆ
 = 
tx
->
ro
;

1516 i‡(
	`°rcmp
("nb_ab‹ts", 
«me
) == 0) {

1517 *(*)
vÆ
 = 
tx
->
ab‹ts
;

1520 i‡(
	`°rcmp
("nb_ab‹ts_ro", 
«me
) == 0) {

1521 *(*)
vÆ
 = 
tx
->
ab‹ts_ro
;

1524 i‡(
	`°rcmp
("nb_ab‹ts_locked_ªad", 
«me
) == 0) {

1525 *(*)
vÆ
 = 
tx
->
ab‹ts_locked_ªad
;

1528 i‡(
	`°rcmp
("nb_ab‹ts_locked_wrôe", 
«me
) == 0) {

1529 *(*)
vÆ
 = 
tx
->
ab‹ts_locked_wrôe
;

1532 i‡(
	`°rcmp
("nb_ab‹ts_vÆid©e_ªad", 
«me
) == 0) {

1533 *(*)
vÆ
 = 
tx
->
ab‹ts_vÆid©e_ªad
;

1536 i‡(
	`°rcmp
("nb_ab‹ts_vÆid©e_wrôe", 
«me
) == 0) {

1537 *(*)
vÆ
 = 
tx
->
ab‹ts_vÆid©e_wrôe
;

1540 i‡(
	`°rcmp
("nb_ab‹ts_vÆid©e_commô", 
«me
) == 0) {

1541 *(*)
vÆ
 = 
tx
->
ab‹ts_vÆid©e_commô
;

1544 i‡(
	`°rcmp
("nb_ab‹ts_övÆid_mem‹y", 
«me
) == 0) {

1545 *(*)
vÆ
 = 
tx
->
ab‹ts_övÆid_mem‹y
;

1548 i‡(
	`°rcmp
("nb_ab‹ts_doubÀ_wrôe", 
«me
) == 0) {

1549 *(*)
vÆ
 = 
tx
->
ab‹ts_doubÀ_wrôe
;

1552 i‡(
	`°rcmp
("nb_ab‹ts_ªÆloˇã", 
«me
) == 0) {

1553 *(*)
vÆ
 = 
tx
->
ab‹ts_ªÆloˇã
;

1556 i‡(
	`°rcmp
("nb_ab‹ts_rﬁlovî", 
«me
) == 0) {

1557 *(*)
vÆ
 = 
tx
->
ab‹ts_rﬁlovî
;

1560 i‡(
	`°rcmp
("max_ªåõs", 
«me
) == 0) {

1561 *(*)
vÆ
 = 
tx
->
max_ªåõs
;

1565 
	}
}

1570 
	$°m_gë_∑ømëî
(c⁄° *
«me
, *
vÆ
)

1572 i‡(
	`°rcmp
("c⁄ã¡i⁄_m™agî", 
«me
) == 0) {

1573 *(c⁄° **)
vÆ
 = 0;

1576 i‡(
	`°rcmp
("design", 
«me
) == 0) {

1577 *(c⁄° **)
vÆ
 = 0;

1580 i‡(
	`°rcmp
("öôül_rw_£t_size", 
«me
) == 0) {

1581 *(*)
vÆ
 = 
RW_SET_SIZE
;

1584 #ifde‡
COMPILE_FLAGS


1585 i‡(
	`°rcmp
("compûe_Êags", 
«me
) == 0) {

1586 *(c⁄° **)
vÆ
 = 
	`XSTR
(
COMPILE_FLAGS
);

1591 
	}
}

1596 
	$°m_£t_∑ømëî
(c⁄° *
«me
, *
vÆ
)

1599 
	}
}

1604 
	$°m_¸óã_•ecific
()

1606 i‡(
nb_•ecific
 >
MAX_SPECIFIC
) {

1607 
	`Ârötf
(
°dîr
, "Error: maximumÇumber of specific slotsÑeached\n");

1610  
nb_•ecific
++;

1611 
	}
}

1616 
	$°m_£t_•ecific
(
TXPARAMS
 
key
, *
d©a
)

1618 
TX_GET
;

1620 
	`as£π
 (
key
 >0 && key < 
nb_•ecific
);

1621 
tx
->
d©a
[
key
] = data;

1622 
	}
}

1627 *
	$°m_gë_•ecific
(
TXPARAMS
 
key
)

1629 
TX_GET
;

1631 
	`as£π
 (
key
 >0 && key < 
nb_•ecific
);

1632  
tx
->
d©a
[
key
];

1633 
	}
}

1638 
°m_ªgi°î
((*
⁄_thªad_öô
)(
TXPARAMS
 *
¨g
),

1639 (*
⁄_thªad_exô
)(
TXPARAMS
 *
¨g
),

1640 (*
⁄_°¨t
)(
TXPARAMS
 *
¨g
),

1641 (*
⁄_commô
)(
TXPARAMS
 *
¨g
),

1642 (*
⁄_ab‹t
)(
TXPARAMS
 *
¨g
),

1643 *
¨g
)

1645 i‡((
⁄_thªad_öô
 !
NULL
 && 
nb_öô_cb
 >
MAX_CB
) ||

1646 (
⁄_thªad_exô
 !
NULL
 && 
nb_exô_cb
 >
MAX_CB
) ||

1647 (
⁄_°¨t
 !
NULL
 && 
nb_°¨t_cb
 >
MAX_CB
) ||

1648 (
⁄_commô
 !
NULL
 && 
nb_commô_cb
 >
MAX_CB
) ||

1649 (
⁄_ab‹t
 !
NULL
 && 
nb_ab‹t_cb
 >
MAX_CB
)) {

1650 
	`Ârötf
(
°dîr
, "Error: maximumÇumber of modulesÑeached\n");

1654 i‡(
⁄_thªad_öô
 !
NULL
) {

1655 
öô_cb
[
nb_öô_cb
].
f
 = 
⁄_thªad_öô
;

1656 
öô_cb
[
nb_öô_cb
++].
¨g
 =árg;

1659 i‡(
⁄_thªad_exô
 !
NULL
) {

1660 
exô_cb
[
nb_exô_cb
].
f
 = 
⁄_thªad_exô
;

1661 
exô_cb
[
nb_exô_cb
++].
¨g
 =árg;

1664 i‡(
⁄_°¨t
 !
NULL
) {

1665 
°¨t_cb
[
nb_°¨t_cb
].
f
 = 
⁄_°¨t
;

1666 
°¨t_cb
[
nb_°¨t_cb
++].
¨g
 =árg;

1669 i‡(
⁄_commô
 !
NULL
) {

1670 
commô_cb
[
nb_commô_cb
].
f
 = 
⁄_commô
;

1671 
commô_cb
[
nb_commô_cb
++].
¨g
 =árg;

1674 i‡(
⁄_ab‹t
 !
NULL
) {

1675 
ab‹t_cb
[
nb_ab‹t_cb
].
f
 = 
⁄_ab‹t
;

1676 
ab‹t_cb
[
nb_ab‹t_cb
++].
¨g
 =árg;

1680 
	}
}

1685 
°m_w‹d_t
 
	$°m_gë_˛ock
()

1687  
GET_CLOCK
;

1688 
	}
}

1693 
°m_tx_t
 *
	$°m_cuºít_tx
()

1695  
	`°m_gë_tx
();

1696 
	}
}

	@utils/estm-0.3.0/src/wrappers.c

22 
	~<as£π.h
>

24 
	~"wøµîs.h
"

26 
	#COMPILE_TIME_ASSERT
(
¥ed
Ë0Ë{ 0: ¥ed: ; }

	)

28 
	uc⁄vît_64
 {

29 
uöt64_t
 
	mu64
;

30 
uöt32_t
 
	mu32
[2];

31 
uöt16_t
 
	mu16
[4];

32 
uöt8_t
 
	mu8
[8];

33 
öt64_t
 
	ms64
;

34 
	md
;

35 } 
	tc⁄vît_64_t
;

37 
	uc⁄vît_32
 {

38 
uöt32_t
 
	mu32
;

39 
uöt16_t
 
	mu16
[2];

40 
uöt8_t
 
	mu8
[4];

41 
öt32_t
 
	ms32
;

42 
	mf
;

43 } 
	tc⁄vît_32_t
;

45 
	uc⁄vît_16
 {

46 
uöt16_t
 
	mu16
;

47 
öt16_t
 
	ms16
;

48 } 
	tc⁄vît_16_t
;

50 
	uc⁄vît_8
 {

51 
uöt8_t
 
	mu8
;

52 
öt8_t
 
	ms8
;

53 } 
	tc⁄vît_8_t
;

55 
	uc⁄vît
 {

56 
°m_w‹d_t
 
	mw
;

57 
uöt8_t
 
	mb
[(
°m_w‹d_t
)];

58 } 
	tc⁄vît_t
;

64 
uöt8_t
 
	$°m_lﬂd8
(
TXPARAMS
 vﬁ©ûê
uöt8_t
 *
addr
)

66 i‡((
°m_w‹d_t
) == 4) {

67 
c⁄vît_32_t
 
vÆ
;

68 
vÆ
.
u32
 = (
uöt32_t
)
	`°m_lﬂd
(
	`TXARGS
 (vﬁ©ûê
°m_w‹d_t
 *)((
uöçå_t
)
addr
 & ~(uintptr_t)0x03));

69  
vÆ
.
u8
[(
uöçå_t
)
addr
 & 0x03];

71 
c⁄vît_64_t
 
vÆ
;

72 
vÆ
.
u64
 = (
uöt64_t
)
	`°m_lﬂd
(
	`TXARGS
 (vﬁ©ûê
°m_w‹d_t
 *)((
uöçå_t
)
addr
 & ~(uintptr_t)0x07));

73  
vÆ
.
u8
[(
uöçå_t
)
addr
 & 0x07];

75 
	}
}

77 
uöt16_t
 
	$°m_lﬂd16
(
TXPARAMS
 vﬁ©ûê
uöt16_t
 *
addr
)

79 i‡(((
uöçå_t
)
addr
 & 0x01) != 0) {

80 
uöt16_t
 
vÆ
;

81 
	`°m_lﬂd_byãs
(
	`TXARGS
 (vﬁ©ûê
uöt8_t
 *)
addr
, (uöt8_à*)&
vÆ
, (
uöt16_t
));

82  
vÆ
;

83 } i‡((
°m_w‹d_t
) == 4) {

84 
c⁄vît_32_t
 
vÆ
;

85 
vÆ
.
u32
 = (
uöt32_t
)
	`°m_lﬂd
(
	`TXARGS
 (vﬁ©ûê
°m_w‹d_t
 *)((
uöçå_t
)
addr
 & ~(uintptr_t)0x03));

86  
vÆ
.
u16
[((
uöçå_t
)
addr
 & 0x03) >> 1];

88 
c⁄vît_64_t
 
vÆ
;

89 
vÆ
.
u64
 = (
uöt64_t
)
	`°m_lﬂd
(
	`TXARGS
 (vﬁ©ûê
°m_w‹d_t
 *)((
uöçå_t
)
addr
 & ~(uintptr_t)0x07));

90  
vÆ
.
u16
[((
uöçå_t
)
addr
 & 0x07) >> 1];

92 
	}
}

94 
uöt32_t
 
	$°m_lﬂd32
(
TXPARAMS
 vﬁ©ûê
uöt32_t
 *
addr
)

96 i‡(((
uöçå_t
)
addr
 & 0x03) != 0) {

97 
uöt32_t
 
vÆ
;

98 
	`°m_lﬂd_byãs
(
	`TXARGS
 (vﬁ©ûê
uöt8_t
 *)
addr
, (uöt8_à*)&
vÆ
, (
uöt32_t
));

99  
vÆ
;

100 } i‡((
°m_w‹d_t
) == 4) {

101  (
uöt32_t
)
	`°m_lﬂd
(
	`TXARGS
 (vﬁ©ûê
°m_w‹d_t
 *)
addr
);

103 
c⁄vît_64_t
 
vÆ
;

104 
vÆ
.
u64
 = (
uöt64_t
)
	`°m_lﬂd
(
	`TXARGS
 (vﬁ©ûê
°m_w‹d_t
 *)((
uöçå_t
)
addr
 & ~(uintptr_t)0x07));

105  
vÆ
.
u32
[((
uöçå_t
)
addr
 & 0x07) >> 2];

107 
	}
}

109 
uöt64_t
 
	$°m_lﬂd64
(
TXPARAMS
 vﬁ©ûê
uöt64_t
 *
addr
)

111 i‡(((
uöçå_t
)
addr
 & 0x07) != 0) {

112 
uöt64_t
 
vÆ
;

113 
	`°m_lﬂd_byãs
(
	`TXARGS
 (vﬁ©ûê
uöt8_t
 *)
addr
, (uöt8_à*)&
vÆ
, (
uöt64_t
));

114  
vÆ
;

115 } i‡((
°m_w‹d_t
) == 4) {

116 
c⁄vît_64_t
 
vÆ
;

117 
vÆ
.
u32
[0] = (
uöt32_t
)
	`°m_lﬂd
(
	`TXARGS
 (vﬁ©ûê
°m_w‹d_t
 *)
addr
);

118 
vÆ
.
u32
[1] = (
uöt32_t
)
	`°m_lﬂd
(
	`TXARGS
 (vﬁ©ûê
°m_w‹d_t
 *)
addr
 + 1);

119  
vÆ
.
u64
;

121  (
uöt64_t
)
	`°m_lﬂd
(
	`TXARGS
 (vﬁ©ûê
°m_w‹d_t
 *)
addr
);

123 
	}
}

125 
	$°m_lﬂd_ch¨
(
TXPARAMS
 vﬁ©ûê*
addr
)

127 
c⁄vît_8_t
 
vÆ
;

128 
vÆ
.
u8
 = 
	`°m_lﬂd8
(
	`TXARGS
 (vﬁ©ûê
uöt8_t
 *)
addr
);

129  
vÆ
.
s8
;

130 
	}
}

132 
	$°m_lﬂd_uch¨
(
TXPARAMS
 vﬁ©ûê*
addr
)

134  ()
	`°m_lﬂd8
(
	`TXARGS
 (vﬁ©ûê
uöt8_t
 *)
addr
);

135 
	}
}

137 
	$°m_lﬂd_sh‹t
(
TXPARAMS
 vﬁ©ûê*
addr
)

139 
c⁄vît_16_t
 
vÆ
;

140 
vÆ
.
u16
 = 
	`°m_lﬂd16
(
	`TXARGS
 (vﬁ©ûê
uöt16_t
 *)
addr
);

141  
vÆ
.
s16
;

142 
	}
}

144 
	$°m_lﬂd_ush‹t
(
TXPARAMS
 vﬁ©ûê*
addr
)

146  ()
	`°m_lﬂd16
(
	`TXARGS
 (vﬁ©ûê
uöt16_t
 *)
addr
);

147 
	}
}

149 
	$°m_lﬂd_öt
(
TXPARAMS
 vﬁ©ûê*
addr
)

151 
c⁄vît_32_t
 
vÆ
;

152 
vÆ
.
u32
 = 
	`°m_lﬂd32
(
	`TXARGS
 (vﬁ©ûê
uöt32_t
 *)
addr
);

153  
vÆ
.
s32
;

154 
	}
}

156 
	$°m_lﬂd_uöt
(
TXPARAMS
 vﬁ©ûê*
addr
)

158  ()
	`°m_lﬂd32
(
	`TXARGS
 (vﬁ©ûê
uöt32_t
 *)
addr
);

159 
	}
}

161 
	$°m_lﬂd_l⁄g
(
TXPARAMS
 vﬁ©ûê*
addr
)

164 
c⁄vît_32_t
 
vÆ
;

165 
vÆ
.
u32
 = 
	`°m_lﬂd32
(
	`TXARGS
 (vﬁ©ûê
uöt32_t
 *)
addr
);

166  
vÆ
.
s32
;

168 
c⁄vît_64_t
 
vÆ
;

169 
vÆ
.
u64
 = 
	`°m_lﬂd64
(
	`TXARGS
 (vﬁ©ûê
uöt64_t
 *)
addr
);

170  
vÆ
.
s64
;

172 
	}
}

174 
	$°m_lﬂd_ul⁄g
(
TXPARAMS
 vﬁ©ûê*
addr
)

177  ()
	`°m_lﬂd32
(
	`TXARGS
 (vﬁ©ûê
uöt32_t
 *)
addr
);

179  ()
	`°m_lﬂd64
(
	`TXARGS
 (vﬁ©ûê
uöt64_t
 *)
addr
);

181 
	}
}

183 
	$°m_lﬂd_Êﬂt
(
TXPARAMS
 vﬁ©ûê*
addr
)

185 
c⁄vît_32_t
 
vÆ
;

186 
vÆ
.
u32
 = 
	`°m_lﬂd32
(
	`TXARGS
 (vﬁ©ûê
uöt32_t
 *)
addr
);

187  
vÆ
.
f
;

188 
	}
}

190 
	$°m_lﬂd_doubÀ
(
TXPARAMS
 vﬁ©ûê*
addr
)

192 
c⁄vît_64_t
 
vÆ
;

193 
vÆ
.
u64
 = 
	`°m_lﬂd64
(
	`TXARGS
 (vﬁ©ûê
uöt64_t
 *)
addr
);

194  
vÆ
.
d
;

195 
	}
}

197 *
	$°m_lﬂd_±r
(
TXPARAMS
 vﬁ©ûê**
addr
)

199 uni⁄ { 
°m_w‹d_t
 
w
; *
v
; } 
c⁄vît
;

200 
c⁄vît
.
w
 = 
	`°m_lﬂd
(
	`TXARGS
 (
°m_w‹d_t
 *)
addr
);

201  
c⁄vît
.
v
;

202 
	}
}

204 
	$°m_lﬂd_byãs
(
TXPARAMS
 vﬁ©ûê
uöt8_t
 *
addr
, uöt8_à*
buf
, 
size_t
 
size
)

206 
c⁄vît_t
 
vÆ
;

207 
i
;

208 
°m_w‹d_t
 *
a
;

210 i‡(
size
 == 0)

212 
i
 = (
uöçå_t
)
addr
 & ((
°m_w‹d_t
) - 1);

213 i‡(
i
 != 0) {

215 
a
 = (
°m_w‹d_t
 *)((
uöçå_t
)
addr
 & ~(uintptr_t)((stm_word_t) - 1));

216 
vÆ
.
w
 = 
	`°m_lﬂd
(
TXARGS
 
a
++);

217 ; 
i
 < (
°m_w‹d_t
Ë&& 
size
 > 0; i++, size--)

218 *
buf
++ = 
vÆ
.
b
[
i
];

220 
a
 = (
°m_w‹d_t
 *)
addr
;

222 
size
 >(
°m_w‹d_t
)) {

223 #ifde‡
ALLOW_MISALIGNED_ACCESSES


224 *((
°m_w‹d_t
 *)
buf
Ë
	`°m_lﬂd
(
TXARGS
 
a
++);

225 
buf
 +(
°m_w‹d_t
);

227 
vÆ
.
w
 = 
	`°m_lﬂd
(
TXARGS
 
a
++);

228 
i
 = 0; i < (
°m_w‹d_t
); i++)

229 *
buf
++ = 
vÆ
.
b
[
i
];

231 
size
 -(
°m_w‹d_t
);

233 i‡(
size
 > 0) {

235 
vÆ
.
w
 = 
	`°m_lﬂd
(
TXARGS
 
a
);

236 
i
 = 0;

237 
i
 = 0; 
size
 > 0; i++, size--)

238 *
buf
++ = 
vÆ
.
b
[
i
];

240 
	}
}

246 
	$°m_°‹e8
(
TXPARAMS
 vﬁ©ûê
uöt8_t
 *
addr
, uöt8_à
vÆue
)

248 i‡((
°m_w‹d_t
) == 4) {

249 
c⁄vît_32_t
 
vÆ
, 
mask
;

250 
vÆ
.
u8
[(
uöçå_t
)
addr
 & 0x03] = 
vÆue
;

251 
mask
.
u32
 = 0;

252 
mask
.
u8
[(
uöçå_t
)
addr
 & 0x03] = ~(
uöt8_t
)0;

253 
	`°m_°‹e2
(
	`TXARGS
 (vﬁ©ûê
°m_w‹d_t
 *)((
uöçå_t
)
addr
 & ~(uöçå_t)0x03), (°m_w‹d_t)
vÆ
.
u32
, (°m_w‹d_t)
mask
.u32);

255 
c⁄vît_64_t
 
vÆ
, 
mask
;

256 
vÆ
.
u8
[(
uöçå_t
)
addr
 & 0x07] = 
vÆue
;

257 
mask
.
u64
 = 0;

258 
mask
.
u8
[(
uöçå_t
)
addr
 & 0x07] = ~(
uöt8_t
)0;

259 
	`°m_°‹e2
(
	`TXARGS
 (vﬁ©ûê
°m_w‹d_t
 *)((
uöçå_t
)
addr
 & ~(uöçå_t)0x07), (°m_w‹d_t)
vÆ
.
u64
, (°m_w‹d_t)
mask
.u64);

261 
	}
}

263 
	$°m_°‹e16
(
TXPARAMS
 vﬁ©ûê
uöt16_t
 *
addr
, uöt16_à
vÆue
)

265 i‡(((
uöçå_t
)
addr
 & 0x01) != 0) {

266 
	`°m_°‹e_byãs
(
	`TXARGS
 (vﬁ©ûê
uöt8_t
 *)
addr
, (uöt8_à*)&
vÆue
, (
uöt16_t
));

267 } i‡((
°m_w‹d_t
) == 4) {

268 
c⁄vît_32_t
 
vÆ
, 
mask
;

269 
vÆ
.
u16
[((
uöçå_t
)
addr
 & 0x03Ë>> 1] = 
vÆue
;

270 
mask
.
u32
 = 0;

271 
mask
.
u16
[((
uöçå_t
)
addr
 & 0x03Ë>> 1] = ~(
uöt16_t
)0;

272 
	`°m_°‹e2
(
	`TXARGS
 (vﬁ©ûê
°m_w‹d_t
 *)((
uöçå_t
)
addr
 & ~(uöçå_t)0x03), (°m_w‹d_t)
vÆ
.
u32
, (°m_w‹d_t)
mask
.u32);

274 
c⁄vît_64_t
 
vÆ
, 
mask
;

275 
vÆ
.
u16
[((
uöçå_t
)
addr
 & 0x07Ë>> 1] = 
vÆue
;

276 
mask
.
u64
 = 0;

277 
mask
.
u16
[((
uöçå_t
)
addr
 & 0x07Ë>> 1] = ~(
uöt16_t
)0;

278 
	`°m_°‹e2
(
	`TXARGS
 (vﬁ©ûê
°m_w‹d_t
 *)((
uöçå_t
)
addr
 & ~(uöçå_t)0x07), (°m_w‹d_t)
vÆ
.
u64
, (°m_w‹d_t)
mask
.u64);

280 
	}
}

282 
	$°m_°‹e32
(
TXPARAMS
 vﬁ©ûê
uöt32_t
 *
addr
, uöt32_à
vÆue
)

284 i‡(((
uöçå_t
)
addr
 & 0x03) != 0) {

285 
	`°m_°‹e_byãs
(
	`TXARGS
 (vﬁ©ûê
uöt8_t
 *)
addr
, (uöt8_à*)&
vÆue
, (
uöt32_t
));

286 } i‡((
°m_w‹d_t
) == 4) {

287 
	`°m_°‹e
(
	`TXARGS
 (vﬁ©ûê
°m_w‹d_t
 *)
addr
, (°m_w‹d_t)
vÆue
);

289 
c⁄vît_64_t
 
vÆ
, 
mask
;

290 
vÆ
.
u32
[((
uöçå_t
)
addr
 & 0x07Ë>> 2] = 
vÆue
;

291 
mask
.
u64
 = 0;

292 
mask
.
u32
[((
uöçå_t
)
addr
 & 0x07Ë>> 2] = ~(
uöt32_t
)0;

293 
	`°m_°‹e2
(
	`TXARGS
 (vﬁ©ûê
°m_w‹d_t
 *)((
uöçå_t
)
addr
 & ~(uöçå_t)0x07), (°m_w‹d_t)
vÆ
.
u64
, (°m_w‹d_t)
mask
.u64);

295 
	}
}

297 
	$°m_°‹e64
(
TXPARAMS
 vﬁ©ûê
uöt64_t
 *
addr
, uöt64_à
vÆue
)

299 i‡(((
uöçå_t
)
addr
 & 0x07) != 0) {

300 
	`°m_°‹e_byãs
(
	`TXARGS
 (vﬁ©ûê
uöt8_t
 *)
addr
, (uöt8_à*)&
vÆue
, (
uöt64_t
));

301 } i‡((
°m_w‹d_t
) == 4) {

302 
c⁄vît_64_t
 
vÆ
;

303 
vÆ
.
u64
 = 
vÆue
;

304 
	`°m_°‹e
(
	`TXARGS
 (vﬁ©ûê
°m_w‹d_t
 *)
addr
, (°m_w‹d_t)
vÆ
.
u32
[0]);

305 
	`°m_°‹e
(
	`TXARGS
 (vﬁ©ûê
°m_w‹d_t
 *)
addr
 + 1, (°m_w‹d_t)
vÆ
.
u32
[1]);

307  
	`°m_°‹e
(
	`TXARGS
 (vﬁ©ûê
°m_w‹d_t
 *)
addr
, (°m_w‹d_t)
vÆue
);

309 
	}
}

311 
	$°m_°‹e_ch¨
(
TXPARAMS
 vﬁ©ûê*
addr
, 
vÆue
)

313 
c⁄vît_8_t
 
vÆ
;

314 
vÆ
.
s8
 = 
vÆue
;

315 
	`°m_°‹e8
(
	`TXARGS
 (vﬁ©ûê
uöt8_t
 *)
addr
, 
vÆ
.
u8
);

316 
	}
}

318 
	$°m_°‹e_uch¨
(
TXPARAMS
 vﬁ©ûê*
addr
, 
vÆue
)

320 
	`°m_°‹e8
(
	`TXARGS
 (vﬁ©ûê
uöt8_t
 *)
addr
, (uöt8_t)
vÆue
);

321 
	}
}

323 
	$°m_°‹e_sh‹t
(
TXPARAMS
 vﬁ©ûê*
addr
, 
vÆue
)

325 
c⁄vît_16_t
 
vÆ
;

326 
vÆ
.
s16
 = 
vÆue
;

327 
	`°m_°‹e16
(
	`TXARGS
 (vﬁ©ûê
uöt16_t
 *)
addr
, 
vÆ
.
u16
);

328 
	}
}

330 
	$°m_°‹e_ush‹t
(
TXPARAMS
 vﬁ©ûê*
addr
, 
vÆue
)

332 
	`°m_°‹e16
(
	`TXARGS
 (vﬁ©ûê
uöt16_t
 *)
addr
, (uöt16_t)
vÆue
);

333 
	}
}

335 
	$°m_°‹e_öt
(
TXPARAMS
 vﬁ©ûê*
addr
, 
vÆue
)

337 
c⁄vît_32_t
 
vÆ
;

338 
vÆ
.
s32
 = 
vÆue
;

339 
	`°m_°‹e32
(
	`TXARGS
 (vﬁ©ûê
uöt32_t
 *)
addr
, 
vÆ
.
u32
);

340 
	}
}

342 
	$°m_°‹e_uöt
(
TXPARAMS
 vﬁ©ûê*
addr
, 
vÆue
)

344 
	`°m_°‹e32
(
	`TXARGS
 (vﬁ©ûê
uöt32_t
 *)
addr
, (uöt32_t)
vÆue
);

345 
	}
}

347 
	$°m_°‹e_l⁄g
(
TXPARAMS
 vﬁ©ûê*
addr
, 
vÆue
)

350 
c⁄vît_32_t
 
vÆ
;

351 
vÆ
.
s32
 = 
vÆue
;

352 
	`°m_°‹e32
(
	`TXARGS
 (vﬁ©ûê
uöt32_t
 *)
addr
, 
vÆ
.
u32
);

354 
c⁄vît_64_t
 
vÆ
;

355 
vÆ
.
s64
 = 
vÆue
;

356 
	`°m_°‹e64
(
	`TXARGS
 (vﬁ©ûê
uöt64_t
 *)
addr
, 
vÆ
.
u64
);

358 
	}
}

360 
	$°m_°‹e_ul⁄g
(
TXPARAMS
 vﬁ©ûê*
addr
, 
vÆue
)

363 
	`°m_°‹e32
(
	`TXARGS
 (vﬁ©ûê
uöt32_t
 *)
addr
, (uöt32_t)
vÆue
);

365 
	`°m_°‹e64
(
	`TXARGS
 (vﬁ©ûê
uöt64_t
 *)
addr
, (uöt64_t)
vÆue
);

367 
	}
}

369 
	$°m_°‹e_Êﬂt
(
TXPARAMS
 vﬁ©ûê*
addr
, 
vÆue
)

371 
c⁄vît_32_t
 
vÆ
;

372 
vÆ
.
f
 = 
vÆue
;

373 
	`°m_°‹e32
(
	`TXARGS
 (vﬁ©ûê
uöt32_t
 *)
addr
, 
vÆ
.
u32
);

374 
	}
}

376 
	$°m_°‹e_doubÀ
(
TXPARAMS
 vﬁ©ûê*
addr
, 
vÆue
)

378 
c⁄vît_64_t
 
vÆ
;

379 
vÆ
.
d
 = 
vÆue
;

380 
	`°m_°‹e64
(
	`TXARGS
 (vﬁ©ûê
uöt64_t
 *)
addr
, 
vÆ
.
u64
);

381 
	}
}

383 
	$°m_°‹e_±r
(
TXPARAMS
 vﬁ©ûê**
addr
, *
vÆue
)

385 uni⁄ { 
°m_w‹d_t
 
w
; *
v
; } 
c⁄vît
;

386 
c⁄vît
.
v
 = 
vÆue
;

387 
	`°m_°‹e
(
	`TXARGS
 (
°m_w‹d_t
 *)
addr
, 
c⁄vît
.
w
);

388 
	}
}

390 
	$°m_°‹e_byãs
(
TXPARAMS
 vﬁ©ûê
uöt8_t
 *
addr
, uöt8_à*
buf
, 
size_t
 
size
)

392 
c⁄vît_t
 
vÆ
, 
mask
;

393 
i
;

394 
°m_w‹d_t
 *
a
;

396 i‡(
size
 == 0)

398 
i
 = (
uöçå_t
)
addr
 & ((
°m_w‹d_t
) - 1);

399 i‡(
i
 != 0) {

401 
a
 = (
°m_w‹d_t
 *)((
uöçå_t
)
addr
 & ~(uintptr_t)((stm_word_t) - 1));

402 
vÆ
.
w
 = 
mask
.w = 0;

403 ; 
i
 < (
°m_w‹d_t
Ë&& 
size
 > 0; i++, size--) {

404 
mask
.
b
[
i
] = 0xFF;

405 
vÆ
.
b
[
i
] = *
buf
++;

407 
	`°m_°‹e2
(
TXARGS
 
a
++, 
vÆ
.
w
, 
mask
.w);

409 
a
 = (
°m_w‹d_t
 *)
addr
;

411 
size
 >(
°m_w‹d_t
)) {

412 #ifde‡
ALLOW_MISALIGNED_ACCESSES


413 
	`°m_°‹e
(
TXARGS
 
a
++, *((
°m_w‹d_t
 *)
buf
));

414 
buf
 +(
°m_w‹d_t
);

416 
i
 = 0; i < (
°m_w‹d_t
); i++)

417 
vÆ
.
b
[
i
] = *
buf
++;

418 
	`°m_°‹e
(
TXARGS
 
a
++, 
vÆ
.
w
);

420 
size
 -(
°m_w‹d_t
);

422 i‡(
size
 > 0) {

424 
vÆ
.
w
 = 
mask
.w = 0;

425 
i
 = 0; 
size
 > 0; i++, size--) {

426 
mask
.
b
[
i
] = 0xFF;

427 
vÆ
.
b
[
i
] = *
buf
++;

429 
	`°m_°‹e2
(
TXARGS
 
a
, 
vÆ
.
w
, 
mask
.w);

431 
	}
}

	@utils/versioned-lock/versioned-lock.c

22 
	~"vîsi⁄ed-lock.h
"

24 
vîlock_t
 
gë_vîsi⁄
(
_Atomic
(vîlock_t)* 
lock
) {

25  (
©omic_lﬂd
(
lock
Ë& ~((
	gvîlock_t
)1));

28 
åy_lock_©_vîsi⁄
(
_Atomic
(
vîlock_t
)* 
lock
, vîlock_à
vîsi⁄
) {

29  
©omic_com∑ª_exch™ge_°r⁄g
(
lock
, &
vîsi⁄
, version+1);

32 
•ölock
(
_Atomic
(
vîlock_t
)* 
lock
) {

33 !
åy_lock_©_vîsi⁄
(
lock
, 
gë_vîsi⁄
(lock))) {};

36 
u∆ock_™d_ö¸emít_vîsi⁄
(
_Atomic
(
vîlock_t
)* 
lock
) {

37 
©omic_„tch_add
(
lock
, 1);

40 
vîlock_t
 
u∆ock_ö¸emít_™d_gë_vîsi⁄
(
_Atomic
(vîlock_t)* 
lock
) {

41 
vîlock_t
 
	g√xt_vîsi⁄
 = 
gë_vîsi⁄
(
lock
)+2;

42 
©omic_„tch_add
(
lock
, 1);

43  
	g√xt_vîsi⁄
;

46 
u∆ock_wôhout_ö¸emít_vîsi⁄
(
_Atomic
(
vîlock_t
)* 
lock
) {

47 
©omic_„tch_sub
(
lock
, 1);

	@utils/versioned-lock/versioned-lock.h

22 #i‚de‡
_VERSIONED_LOCK_H


23 
	#_VERSIONED_LOCK_H


	)

25 
	~<°döt.h
>

26 
	~<°d©omic.h
>

28 
uöt32_t
 
	tvîlock_t
;

30 
vîlock_t
 
gë_vîsi⁄
(
_Atomic
(vîlock_t)* 
lock
);

31 
åy_lock_©_vîsi⁄
(
_Atomic
(
vîlock_t
)* 
lock
, vîlock_à
vîsi⁄
);

32 
•ölock
(
_Atomic
(
vîlock_t
)* 
lock
);

33 
u∆ock_™d_ö¸emít_vîsi⁄
(
_Atomic
(
vîlock_t
)* 
lock
);

34 
vîlock_t
 
u∆ock_ö¸emít_™d_gë_vîsi⁄
(
_Atomic
(vîlock_t)* 
lock
);

35 
u∆ock_wôhout_ö¸emít_vîsi⁄
(
_Atomic
(
vîlock_t
)* 
lock
);

	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


88 
	#as£π
(
ex¥
) \

89 ((
ex¥
) \

90 ? 
	`__ASSERT_VOID_CAST
 (0) \

91 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

93 #ifdef 
__USE_GNU


94 
	#as£π_≥º‹
(
î∫um
) \

95 (!(
î∫um
) \

96 ? 
	`__ASSERT_VOID_CAST
 (0) \

97 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

105 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

106 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

108 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

109 
	#__ASSERT_FUNCTION
 
__func__


	)

111 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

118 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


120 #unde‡
°©ic_as£π


121 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/atomic_ops.h

23 #i‚de‡
AO_ATOMIC_OPS_H


24 
	#AO_ATOMIC_OPS_H


	)

26 
	~"©omic_›s/ao_vîsi⁄.h
"

30 
	~<as£π.h
>

31 
	~<°ddef.h
>

155 
	#AO_t
 
size_t


	)

160 
	#AO_TS_INITIALIZER
 (
AO_t
)
AO_TS_CLEAR


	)

163 #i‡(
deföed
(
__GNUC__
Ë|| deföed(
_MSC_VER
Ë|| deföed(
__INTEL_COMPILER
) \

164 || 
deföed
(
__DMC__
Ë|| deföed(
__WATCOMC__
)Ë&& !
	$deföed
(
AO_NO_INLINE
)

165 
	#AO_INLINE
 
__ölöe


	)

166 #ñi‡
	`deföed
(
__sun
Ë&& !deföed(
AO_NO_INLINE
)

167 
	#AO_INLINE
 
ölöe


	)

169 
	#AO_INLINE
 

	)

172 #i‡
__GNUC__
 >3 && !
	`deföed
(
LINT2
)

173 
	#AO_EXPECT_FALSE
(
ex¥
Ë
	`__buûtö_ex≥˘
”x¥, 0)

	)

176 
	#AO_EXPECT_FALSE
(
ex¥
Ë”x¥)

	)

179 #i‡
	`deföed
(
__GNUC__
Ë&& !deföed(
__INTEL_COMPILER
)

180 
	#AO_compûî_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
("" : : : "mem‹y")

	)

181 #ñi‡
	`deföed
(
_MSC_VER
Ë|| deföed(
__DMC__
Ë|| deföed(
__BORLANDC__
) \

182 || 
	$deföed
(
__WATCOMC__
)

183 #i‡
	`deföed
(
_AMD64_
Ë|| deföed(
_M_X64
Ë|| 
_MSC_VER
 >= 1400

184 #i‡
	`deföed
(
_WIN32_WCE
)

186 #ñi‡
	`deföed
(
_MSC_VER
)

187 
	~<öåö.h
>

189 #¥agm®
	`öåösic
(
_RódWrôeB¨rõr
)

190 
	#AO_compûî_b¨rõr
(Ë
	`_RódWrôeB¨rõr
()

	)

194 
	#AO_compûî_b¨rõr
(Ë
__asm
 { 
	}

	)
}

198 #ñi‡
deföed
(
__INTEL_COMPILER
)

199 
	#AO_compûî_b¨rõr
(Ë
	`__mem‹y_b¨rõr
()

	)

201 #ñi‡
deföed
(
_HPUX_SOURCE
)

202 #i‡
deföed
(
__ü64
)

203 
	~<machöe/sys/ölöe.h
>

204 
	#AO_compûî_b¨rõr
(Ë
	`_Asm_sched_„n˚
()

	)

208 vﬁ©ûê
	gAO_b¨rõr_dummy
;

209 
	#AO_compûî_b¨rõr
(Ë()(
AO_b¨rõr_dummy
 = AO_b¨rõr_dummy)

	)

214 
	#AO_compûî_b¨rõr
(Ë
	`asm
("")

	)

217 #i‡
deföed
(
AO_USE_PTHREAD_DEFS
)

218 
	~"©omic_›s/sysdïs/gíîic_±hªad.h
"

221 #i‡(
deföed
(
__CC_ARM
Ë|| deföed(
__ARMCC__
)Ë&& !deföed(
__GNUC__
) \

222 && !
	$deföed
(
AO_USE_PTHREAD_DEFS
)

223 
	~"©omic_›s/sysdïs/¨mcc/¨m_v6.h
"

224 
	#AO_GENERALIZE_TWICE


	)

227 #i‡
	`deföed
(
__GNUC__
Ë&& !deföed(
AO_USE_PTHREAD_DEFS
) \

228 && !
	$deföed
(
__INTEL_COMPILER
)

229 #i‡
	`deföed
(
__i386__
)

233 
	~"©omic_›s/sysdïs/gcc/x86.h
"

235 #i‡
	`deföed
(
__x86_64__
)

236 #i‡(
__GNUC__
 > 4 || (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 2)) \

237 && !
	$deföed
(
AO_USE_SYNC_CAS_BUILTIN
)

239 
	#AO_USE_SYNC_CAS_BUILTIN


	)

241 
	~"©omic_›s/sysdïs/gcc/x86.h
"

243 #i‡
	`deföed
(
__ü64__
)

244 
	~"©omic_›s/sysdïs/gcc/ü64.h
"

245 
	#AO_GENERALIZE_TWICE


	)

247 #i‡
	`deföed
(
__hµa__
)

248 
	~"©omic_›s/sysdïs/gcc/hµa.h
"

249 
	#AO_CAN_EMUL_CAS


	)

251 #i‡
	`deföed
(
__Æpha__
)

252 
	~"©omic_›s/sysdïs/gcc/Æpha.h
"

253 
	#AO_GENERALIZE_TWICE


	)

255 #i‡
	`deföed
(
__s390__
)

256 
	~"©omic_›s/sysdïs/gcc/s390.h
"

258 #i‡
	`deföed
(
__•¨c__
)

259 
	~"©omic_›s/sysdïs/gcc/•¨c.h
"

260 
	#AO_CAN_EMUL_CAS


	)

262 #i‡
	`deföed
(
__m68k__
)

263 
	~"©omic_›s/sysdïs/gcc/m68k.h
"

265 #i‡
	`deföed
(
__powîpc__
Ë|| deföed(
__µc__
Ë|| deföed(
__PPC__
) \

266 || 
	`deföed
(
__powîpc64__
Ë|| 
	$deföed
(
__µc64__
)

267 
	~"©omic_›s/sysdïs/gcc/powîpc.h
"

269 #i‡
	`deföed
(
__Ørch64__
)

270 
	~"©omic_›s/sysdïs/gcc/Ørch64.h
"

271 
	#AO_CAN_EMUL_CAS


	)

273 #i‡
	`deföed
(
__¨m__
)

274 
	~"©omic_›s/sysdïs/gcc/¨m.h
"

275 
	#AO_CAN_EMUL_CAS


	)

277 #i‡
	`deföed
(
__¸is__
Ë|| deföed(
CRIS
)

278 
	~"©omic_›s/sysdïs/gcc/¸is.h
"

279 
	#AO_GENERALIZE_TWICE


	)

281 #i‡
	`deföed
(
__mùs__
)

282 
	~"©omic_›s/sysdïs/gcc/mùs.h
"

284 #i‡
	`deföed
(
__sh__
Ë|| deföed(
SH4
)

285 
	~"©omic_›s/sysdïs/gcc/sh.h
"

286 
	#AO_CAN_EMUL_CAS


	)

288 #i‡
	`deföed
(
__avr32__
)

289 
	~"©omic_›s/sysdïs/gcc/avr32.h
"

291 #i‡
	`deföed
(
__hexag⁄__
)

292 
	~"©omic_›s/sysdïs/gcc/hexag⁄.h
"

296 #i‡(
	`deföed
(
__IBMC__
Ë|| deföed(
__IBMCPP__
)Ë&& !deföed(
__GNUC__
) \

297 && !
	$deföed
(
AO_USE_PTHREAD_DEFS
)

298 #i‡
	`deföed
(
__powîpc__
Ë|| deföed(
__powîpc
Ë|| deföed(
__µc__
) \

299 || 
	`deföed
(
__PPC__
Ë|| deföed(
_M_PPC
Ë|| deföed(
_ARCH_PPC
) \

300 || 
	$deföed
(
_ARCH_PWR
)

301 
	~"©omic_›s/sysdïs/ibmc/powîpc.h
"

302 
	#AO_GENERALIZE_TWICE


	)

306 #i‡
	`deföed
(
__INTEL_COMPILER
Ë&& !deföed(
AO_USE_PTHREAD_DEFS
)

307 #i‡
	`deföed
(
__ü64__
)

308 
	~"©omic_›s/sysdïs/icc/ü64.h
"

309 
	#AO_GENERALIZE_TWICE


	)

311 #i‡
	`deföed
(
__GNUC__
)

313 #i‡
	`deföed
(
__i386__
)

314 
	~"©omic_›s/sysdïs/gcc/x86.h
"

316 #i‡
	`deföed
(
__x86_64__
)

317 #i‡(
__INTEL_COMPILER
 > 1110Ë&& !
	`deföed
(
AO_USE_SYNC_CAS_BUILTIN
)

318 
	#AO_USE_SYNC_CAS_BUILTIN


	)

320 
	~"©omic_›s/sysdïs/gcc/x86.h
"

325 #i‡
	`deföed
(
_HPUX_SOURCE
Ë&& !deföed(
__GNUC__
Ë&& !deföed(
AO_USE_PTHREAD_DEFS
)

326 #i‡
	`deföed
(
__ü64
)

327 
	~"©omic_›s/sysdïs/hpc/ü64.h
"

328 
	#AO_GENERALIZE_TWICE


	)

330 
	~"©omic_›s/sysdïs/hpc/hµa.h
"

331 
	#AO_CAN_EMUL_CAS


	)

335 #i‡
	`deföed
(
_MSC_VER
Ë|| deföed(
__DMC__
Ë|| deföed(
__BORLANDC__
) \

336 || (
	`deföed
(
__WATCOMC__
Ë&& 
	$deföed
(
__NT__
))

337 #i‡
	`deföed
(
_AMD64_
Ë|| deföed(
_M_X64
)

338 
	~"©omic_›s/sysdïs/ms·c/x86_64.h
"

339 #ñi‡
	`deföed
(
_M_IX86
Ë|| deföed(
x86
)

340 
	~"©omic_›s/sysdïs/ms·c/x86.h
"

341 #ñi‡
	`deföed
(
_M_ARM
Ë|| deföed(
ARM
Ë|| deföed(
_ARM_
)

342 
	~"©omic_›s/sysdïs/ms·c/¨m.h
"

343 
	#AO_GENERALIZE_TWICE


	)

347 #i‡
	`deföed
(
__sun
Ë&& !deföed(
__GNUC__
Ë&& !deföed(
AO_USE_PTHREAD_DEFS
)

349 #i‡
	`deföed
(
__i386
Ë|| deföed(
__x86_64
Ë|| deföed(
__amd64
)

350 
	~"©omic_›s/sysdïs/sunc/x86.h
"

354 #i‡!
	`deföed
(
__GNUC__
Ë&& (deföed(
•¨c
Ë|| deföed(
__•¨c
)) \

355 && !
	$deföed
(
AO_USE_PTHREAD_DEFS
)

356 
	~"©omic_›s/sysdïs/sunc/•¨c.h
"

357 
	#AO_CAN_EMUL_CAS


	)

360 #i‡
	`deföed
(
AO_REQUIRE_CAS
Ë&& !deföed(
AO_HAVE_com∑ª_™d_sw≠
) \

361 && !
	`deföed
(
AO_HAVE_„tch_com∑ª_™d_sw≠
) \

362 && !
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_fuŒ
) \

363 && !
	`deföed
(
AO_HAVE_„tch_com∑ª_™d_sw≠_fuŒ
) \

364 && !
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_acquúe
) \

365 && !
	$deföed
(
AO_HAVE_„tch_com∑ª_™d_sw≠_acquúe
)

366 #i‡
	`deföed
(
AO_CAN_EMUL_CAS
)

367 
	~"©omic_›s/sysdïs/emul_ˇs.h
"

369 #îr‹ 
C™nŸ
 
im∂emít
 
AO_com∑ª_™d_sw≠_fuŒ
 
⁄
 
this
 
¨chôe˘uª
.

375 #i‡
AO_AO_TS_T
 && !
	`deföed
(
AO_CLEAR
)

376 
	#AO_CLEAR
(
addr
Ë
	`AO_°‹e_ªÀa£
((
AO_TS_t
 *)◊ddr), 
AO_TS_CLEAR
)

	)

378 #i‡
AO_CHAR_TS_T
 && !
	`deföed
(
AO_CLEAR
)

379 
	#AO_CLEAR
(
addr
Ë
	`AO_ch¨_°‹e_ªÀa£
((
AO_TS_t
 *)◊ddr), 
AO_TS_CLEAR
)

	)

383 #i‡!
	`deföed
(
AO_GENERALIZE_TWICE
Ë&& deföed(
AO_CAN_EMUL_CAS
) \

384 && !
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_fuŒ
) \

385 && !
	$deföed
(
AO_HAVE_„tch_com∑ª_™d_sw≠_fuŒ
)

386 
	#AO_GENERALIZE_TWICE


	)

392 
	~"©omic_›s/gíîÆize.h
"

394 #i‡!
	`deföed
(
AO_GENERALIZE_TWICE
) \

395 && 
	`deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ
) \

396 && (!
	`deföed
(
AO_HAVE_doubÀ_lﬂd
Ë|| !
	$deföed
(
AO_HAVE_doubÀ_°‹e
))

397 
	#AO_GENERALIZE_TWICE


	)

400 #ifde‡
AO_T_IS_INT


402 
	~"©omic_›s/sysdïs/ao_t_is_öt.h
"

403 #i‚de‡
AO_GENERALIZE_TWICE


405 
	#AO_GENERALIZE_TWICE


	)

409 #ifde‡
AO_GENERALIZE_TWICE


410 
	~"©omic_›s/gíîÆize.h
"

414 
	#AO_TS_T
 
AO_TS_t


	)

415 
	#AO_T
 
AO_t


	)

416 
	#AO_TS_VAL
 
AO_TS_VAL_t


	)

	@/usr/include/atomic_ops/sysdeps/emul_cas.h

38 #i‚de‡
AO_ATOMIC_OPS_H


39 #îr‹ 
This
 
fûe
 
should
 
nŸ
 
be
 
ö˛uded
 
dúe˘ly
.

42 #i‚de‡
AO_HAVE_doubÀ_t


43 
	~"°™d¨d_ao_doubÀ_t.h
"

46 
AO_t
 
AO_„tch_com∑ª_™d_sw≠_emuœti⁄
(vﬁ©ûêAO_à*
addr
, AO_à
ﬁd_vÆ
,

47 
AO_t
 
√w_vÆ
);

49 
AO_com∑ª_doubÀ_™d_sw≠_doubÀ_emuœti⁄
(vﬁ©ûê
AO_doubÀ_t
 *
addr
,

50 
AO_t
 
ﬁd_vÆ1
, AO_à
ﬁd_vÆ2
,

51 
AO_t
 
√w_vÆ1
, AO_à
√w_vÆ2
);

53 
AO_°‹e_fuŒ_emuœti⁄
(vﬁ©ûê
AO_t
 *
addr
, AO_à
vÆ
);

55 #i‚de‡
AO_HAVE_„tch_com∑ª_™d_sw≠_fuŒ


56 
	#AO_„tch_com∑ª_™d_sw≠_fuŒ
(
addr
, 
ﬁd
, 
√wvÆ
) \

57 
	`AO_„tch_com∑ª_™d_sw≠_emuœti⁄
(
addr
, 
ﬁd
, 
√wvÆ
)

	)

58 
	#AO_HAVE_„tch_com∑ª_™d_sw≠_fuŒ


	)

61 #i‚de‡
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ


62 
	#AO_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ
(
addr
, 
ﬁd1
, 
ﬁd2
, \

63 
√wvÆ1
, 
√wvÆ2
) \

64 
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_emuœti⁄
(
addr
, 
ﬁd1
, 
ﬁd2
, \

65 
√wvÆ1
, 
√wvÆ2
)

	)

66 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ


	)

69 #unde‡
AO_°‹e


70 #unde‡
AO_HAVE_°‹e


71 #unde‡
AO_°‹e_wrôe


72 #unde‡
AO_HAVE_°‹e_wrôe


73 #unde‡
AO_°‹e_ªÀa£


74 #unde‡
AO_HAVE_°‹e_ªÀa£


75 #unde‡
AO_°‹e_fuŒ


76 #unde‡
AO_HAVE_°‹e_fuŒ


77 
	#AO_°‹e_fuŒ
(
addr
, 
vÆ
Ë
	`AO_°‹e_fuŒ_emuœti⁄
◊ddr, vÆ)

	)

78 
	#AO_HAVE_°‹e_fuŒ


	)

	@/usr/include/atomic_ops/sysdeps/gcc/alpha.h

18 
	~"../lﬂd°‹e/©omic_lﬂd.h
"

19 
	~"../lﬂd°‹e/©omic_°‹e.h
"

21 
	~"../ã°_™d_£t_t_is_ao_t.h
"

23 
	#AO_NO_DD_ORDERING


	)

26 
AO_INLINE
 

27 
	$AO_n›_fuŒ
()

29 
__asm__
 
	`__vﬁ©ûe__
("mb" : : : "memory");

30 
	}
}

31 
	#AO_HAVE_n›_fuŒ


	)

33 
AO_INLINE
 

34 
	$AO_n›_wrôe
()

36 
__asm__
 
	`__vﬁ©ûe__
("wmb" : : : "memory");

37 
	}
}

38 
	#AO_HAVE_n›_wrôe


	)

45 
AO_INLINE
 

46 
	$AO_com∑ª_™d_sw≠
(vﬁ©ûê
AO_t
 *
addr
,

47 
AO_t
 
ﬁd
, AO_à
√w_vÆ
)

49 
was_equÆ
;

50 
ãmp
;

52 
__asm__
 
	`__vﬁ©ûe__
(

60 : "=&r" (
ãmp
), "+m" (*
addr
), "=&r" (
was_equÆ
)

61 : "r" (
√w_vÆ
), "Ir" (
ﬁd
)

63  ()
was_equÆ
;

64 
	}
}

65 
	#AO_HAVE_com∑ª_™d_sw≠


	)

	@/usr/include/atomic_ops/sysdeps/gcc/arm.h

18 
	~"../ã°_™d_£t_t_is_ao_t.h
"

20 #i‡
deföed
(
__thumb__
Ë&& !deföed(
__thumb2__
)

24 
	#AO_THUMB_GO_ARM
 \

29 "4:\n"

	)

30 
	#AO_THUMB_RESTORE_MODE
 \

34 "5:\n"

	)

35 
	#AO_THUMB_SWITCH_CLOBBERS
 "r3",

	)

37 
	#AO_THUMB_GO_ARM


	)

38 
	#AO_THUMB_RESTORE_MODE


	)

39 
	#AO_THUMB_SWITCH_CLOBBERS


	)

44 #i‡!
deföed
(
__ARM_ARCH_2__
Ë&& !deföed(
__ARM_ARCH_3__
) \

45 && !
deföed
(
__ARM_ARCH_3M__
Ë&& !deföed(
__ARM_ARCH_4__
) \

46 && !
deföed
(
__ARM_ARCH_4T__
) \

47 && ((!
deföed
(
__ARM_ARCH_5__
Ë&& !deföed(
__ARM_ARCH_5E__
) \

48 && !
deföed
(
__ARM_ARCH_5T__
Ë&& !deföed(
__ARM_ARCH_5TE__
) \

49 && !
deföed
(
__ARM_ARCH_5TEJ__
Ë&& !deföed(
__ARM_ARCH_6M__
)) \

50 || 
deföed
(
__ARM_ARCH_7__
Ë|| deföed(
__ARM_ARCH_7A__
) \

51 || 
	$deföed
(
__ARM_ARCH_8A__
))

52 
	#AO_ARM_HAVE_LDREX


	)

53 #i‡!
	`deföed
(
__ARM_ARCH_6__
Ë&& !deföed(
__ARM_ARCH_6J__
) \

54 && !
	$deföed
(
__ARM_ARCH_6T2__
)

56 
	#AO_ARM_HAVE_LDREXBH


	)

58 #i‡!
	`deföed
(
__ARM_ARCH_6__
Ë&& !deföed(
__ARM_ARCH_6J__
) \

59 && !
	`deföed
(
__ARM_ARCH_6T2__
Ë&& !deföed(
__ARM_ARCH_6Z__
) \

60 && !
	$deföed
(
__ARM_ARCH_6ZT2__
)

61 #i‡!
	`deföed
(
__ARM_ARCH_6K__
Ë&& !deföed(
__ARM_ARCH_6ZK__
)

63 
	#AO_ARM_HAVE_DMB


	)

65 #i‡(!
	`deföed
(
__thumb__
) \

66 || (
	`deföed
(
__thumb2__
Ë&& !deföed(
__ARM_ARCH_7__
) \

67 && !
	`deföed
(
__ARM_ARCH_7M__
Ë&& !deföed(
__ARM_ARCH_7EM__
))) \

68 && (!
	`deföed
(
__˛™g__
Ë|| (
__˛™g_maj‹__
 > 3) \

69 || (
__˛™g_maj‹__
 =3 && 
__˛™g_mö‹__
 >= 3))

75 
	#AO_ARM_HAVE_LDREXD


	)

80 #i‡!
	`deföed
(
__ARM_ARCH_2__
Ë&& !deföed(
__ARM_ARCH_6M__
) \

81 && !
	`deföed
(
__ARM_ARCH_8A__
Ë&& !
	$deföed
(
__thumb2__
)

82 
	#AO_ARM_HAVE_SWP


	)

87 #ifde‡
AO_UNIPROCESSOR


90 
AO_INLINE
 

91 
	$AO_n›_fuŒ
()

93 
	`AO_compûî_b¨rõr
();

94 
	}
}

95 
	#AO_HAVE_n›_fuŒ


	)

97 #ñi‡
deföed
(
AO_ARM_HAVE_DMB
)

102 
AO_INLINE
 

103 
	$AO_n›_fuŒ
()

106 
__asm__
 
	`__vﬁ©ûe__
("dmb" : : : "memory");

107 
	}
}

108 
	#AO_HAVE_n›_fuŒ


	)

110 
AO_INLINE
 

111 
	$AO_n›_wrôe
()

114 
__asm__
 
	`__vﬁ©ûe__
("dmb st" : : : "memory");

115 
	}
}

116 
	#AO_HAVE_n›_wrôe


	)

118 #ñi‡
deföed
(
AO_ARM_HAVE_LDREX
)

121 
AO_INLINE
 

122 
	$AO_n›_fuŒ
()

124 
de°
 = 0;

128 
__asm__
 
	`__vﬁ©ûe__
("@AO_nop_full\n"

129 
AO_THUMB_GO_ARM


131 
AO_THUMB_RESTORE_MODE


132 : "=&r"(
de°
)

134 : 
AO_THUMB_SWITCH_CLOBBERS
 "memory");

135 
	}
}

136 
	#AO_HAVE_n›_fuŒ


	)

142 #ifde‡
AO_ARM_HAVE_LDREX


146 
	#AO_ACCESS_CHECK_ALIGNED


	)

147 
	#AO_ACCESS_sh‹t_CHECK_ALIGNED


	)

148 
	#AO_ACCESS_öt_CHECK_ALIGNED


	)

149 
	~"../Æl_©omic_⁄ly_lﬂd.h
"

166 #ifde‡
AO_BROKEN_TASKSWITCH_CLREX


167 
AO_INLINE
 
	$AO_°‹e
(vﬁ©ûê
AO_t
 *
addr
, AO_à
vÆue
)

169 
Êag
;

171 
__asm__
 
	`__vﬁ©ûe__
("@AO_store\n"

172 
AO_THUMB_GO_ARM


177 
AO_THUMB_RESTORE_MODE


178 : "=&r" (
Êag
), "+m" (*
addr
)

179 : "r" (
addr
), "r" (
vÆue
)

180 : 
AO_THUMB_SWITCH_CLOBBERS
 "cc");

181 
	}
}

182 
	#AO_HAVE_°‹e


	)

184 #ifde‡
AO_ARM_HAVE_LDREXBH


185 
AO_INLINE
 
	$AO_ch¨_°‹e
(vﬁ©ûê*
addr
,

186 
vÆue
)

188 
Êag
;

190 
__asm__
 
	`__vﬁ©ûe__
("@AO_char_store\n"

191 
AO_THUMB_GO_ARM


196 
AO_THUMB_RESTORE_MODE


197 : "=&r" (
Êag
), "+m" (*
addr
)

198 : "r" (
addr
), "r" (
vÆue
)

199 : 
AO_THUMB_SWITCH_CLOBBERS
 "cc");

200 
	}
}

201 
	#AO_HAVE_ch¨_°‹e


	)

203 
AO_INLINE
 
	$AO_sh‹t_°‹e
(vﬁ©ûê*
addr
,

204 
vÆue
)

206 
Êag
;

208 
__asm__
 
	`__vﬁ©ûe__
("@AO_short_store\n"

209 
AO_THUMB_GO_ARM


214 
AO_THUMB_RESTORE_MODE


215 : "=&r" (
Êag
), "+m" (*
addr
)

216 : "r" (
addr
), "r" (
vÆue
)

217 : 
AO_THUMB_SWITCH_CLOBBERS
 "cc");

218 
	}
}

219 
	#AO_HAVE_sh‹t_°‹e


	)

223 
	~"../lﬂd°‹e/©omic_°‹e.h
"

227 #i‚de‡
AO_HAVE_ch¨_°‹e


228 
	~"../lﬂd°‹e/ch¨_©omic_°‹e.h
"

229 
	~"../lﬂd°‹e/sh‹t_©omic_°‹e.h
"

242 #i‚de‡
AO_PREFER_GENERALIZED


243 #i‡!
deföed
(
AO_FORCE_USE_SWP
Ë|| !deföed(
AO_ARM_HAVE_SWP
)

250 
AO_INLINE
 
AO_TS_VAL_t


251 
	$AO_ã°_™d_£t
(vﬁ©ûê
AO_TS_t
 *
addr
)

253 
AO_TS_VAL_t
 
ﬁdvÆ
;

254 
Êag
;

256 
__asm__
 
	`__vﬁ©ûe__
("@AO_test_and_set\n"

257 
AO_THUMB_GO_ARM


262 
AO_THUMB_RESTORE_MODE


263 : "=&r"(
ﬁdvÆ
), "=&r"(
Êag
), "+m"(*
addr
)

264 : "r"(
addr
), "r"(1)

265 : 
AO_THUMB_SWITCH_CLOBBERS
 "cc");

266  
ﬁdvÆ
;

267 
	}
}

268 
	#AO_HAVE_ã°_™d_£t


	)

271 
AO_INLINE
 
AO_t


272 
	$AO_„tch_™d_add
(vﬁ©ûê
AO_t
 *
p
, AO_à
ö¸
)

274 
AO_t
 
ªsu…
, 
tmp
;

275 
Êag
;

277 
__asm__
 
	`__vﬁ©ûe__
("@AO_fetch_and_add\n"

278 
AO_THUMB_GO_ARM


284 
AO_THUMB_RESTORE_MODE


285 : "=&r"(
ªsu…
), "=&r"(
Êag
), "=&r"(
tmp
), "+m"(*
p
)

286 : "r"(
ö¸
), "r"(
p
)

287 : 
AO_THUMB_SWITCH_CLOBBERS
 "cc");

288  
ªsu…
;

289 
	}
}

290 
	#AO_HAVE_„tch_™d_add


	)

292 
AO_INLINE
 
AO_t


293 
	$AO_„tch_™d_add1
(vﬁ©ûê
AO_t
 *
p
)

295 
AO_t
 
ªsu…
, 
tmp
;

296 
Êag
;

298 
__asm__
 
	`__vﬁ©ûe__
("@AO_fetch_and_add1\n"

299 
AO_THUMB_GO_ARM


305 
AO_THUMB_RESTORE_MODE


306 : "=&r"(
ªsu…
), "=&r"(
tmp
), "=&r"(
Êag
), "+m"(*
p
)

307 : "r"(
p
)

308 : 
AO_THUMB_SWITCH_CLOBBERS
 "cc");

309  
ªsu…
;

310 
	}
}

311 
	#AO_HAVE_„tch_™d_add1


	)

313 
AO_INLINE
 
AO_t


314 
	$AO_„tch_™d_sub1
(vﬁ©ûê
AO_t
 *
p
)

316 
AO_t
 
ªsu…
, 
tmp
;

317 
Êag
;

319 
__asm__
 
	`__vﬁ©ûe__
("@AO_fetch_and_sub1\n"

320 
AO_THUMB_GO_ARM


326 
AO_THUMB_RESTORE_MODE


327 : "=&r"(
ªsu…
), "=&r"(
tmp
), "=&r"(
Êag
), "+m"(*
p
)

328 : "r"(
p
)

329 : 
AO_THUMB_SWITCH_CLOBBERS
 "cc");

330  
ªsu…
;

331 
	}
}

332 
	#AO_HAVE_„tch_™d_sub1


	)

334 
AO_INLINE
 

335 
	$AO_™d
(vﬁ©ûê
AO_t
 *
p
, AO_à
vÆue
)

337 
AO_t
 
tmp
, 
ªsu…
;

339 
__asm__
 
	`__vﬁ©ûe__
("@AO_and\n"

340 
AO_THUMB_GO_ARM


346 
AO_THUMB_RESTORE_MODE


347 : "=&r" (
tmp
), "=&r" (
ªsu…
), "+m" (*
p
)

348 : "r" (
vÆue
), "r" (
p
)

349 : 
AO_THUMB_SWITCH_CLOBBERS
 "cc");

350 
	}
}

351 
	#AO_HAVE_™d


	)

353 
AO_INLINE
 

354 
	$AO_‹
(vﬁ©ûê
AO_t
 *
p
, AO_à
vÆue
)

356 
AO_t
 
tmp
, 
ªsu…
;

358 
__asm__
 
	`__vﬁ©ûe__
("@AO_or\n"

359 
AO_THUMB_GO_ARM


365 
AO_THUMB_RESTORE_MODE


366 : "=&r" (
tmp
), "=&r" (
ªsu…
), "+m" (*
p
)

367 : "r" (
vÆue
), "r" (
p
)

368 : 
AO_THUMB_SWITCH_CLOBBERS
 "cc");

369 
	}
}

370 
	#AO_HAVE_‹


	)

372 
AO_INLINE
 

373 
	$AO_x‹
(vﬁ©ûê
AO_t
 *
p
, AO_à
vÆue
)

375 
AO_t
 
tmp
, 
ªsu…
;

377 
__asm__
 
	`__vﬁ©ûe__
("@AO_xor\n"

378 
AO_THUMB_GO_ARM


384 
AO_THUMB_RESTORE_MODE


385 : "=&r" (
tmp
), "=&r" (
ªsu…
), "+m" (*
p
)

386 : "r" (
vÆue
), "r" (
p
)

387 : 
AO_THUMB_SWITCH_CLOBBERS
 "cc");

388 
	}
}

389 
	#AO_HAVE_x‹


	)

392 #ifde‡
AO_ARM_HAVE_LDREXBH


393 
AO_INLINE
 

394 
	$AO_ch¨_„tch_™d_add
(vﬁ©ûê*
p
, 
ö¸
)

396 
ªsu…
, 
tmp
;

397 
Êag
;

399 
__asm__
 
	`__vﬁ©ûe__
("@AO_char_fetch_and_add\n"

400 
AO_THUMB_GO_ARM


406 
AO_THUMB_RESTORE_MODE


407 : "=&r" (
ªsu…
), "=&r" (
Êag
), "=&r" (
tmp
), "+m" (*
p
)

408 : "r" (()
ö¸
), "r" (
p
)

409 : 
AO_THUMB_SWITCH_CLOBBERS
 "cc");

410  ()
ªsu…
;

411 
	}
}

412 
	#AO_HAVE_ch¨_„tch_™d_add


	)

414 
AO_INLINE
 

415 
	$AO_sh‹t_„tch_™d_add
(vﬁ©ûê*
p
, 
ö¸
)

417 
ªsu…
, 
tmp
;

418 
Êag
;

420 
__asm__
 
	`__vﬁ©ûe__
("@AO_short_fetch_and_add\n"

421 
AO_THUMB_GO_ARM


427 
AO_THUMB_RESTORE_MODE


428 : "=&r" (
ªsu…
), "=&r" (
Êag
), "=&r" (
tmp
), "+m" (*
p
)

429 : "r" (()
ö¸
), "r" (
p
)

430 : 
AO_THUMB_SWITCH_CLOBBERS
 "cc");

431  ()
ªsu…
;

432 
	}
}

433 
	#AO_HAVE_sh‹t_„tch_™d_add


	)

436 #i‚de‡
AO_GENERALIZE_ASM_BOOL_CAS


438 
AO_INLINE
 

439 
	$AO_com∑ª_™d_sw≠
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd_vÆ
, AO_à
√w_vÆ
)

441 
AO_t
 
ªsu…
, 
tmp
;

443 
__asm__
 
	`__vﬁ©ûe__
("@AO_compare_and_swap\n"

444 
AO_THUMB_GO_ARM


448 #ifde‡
__thumb2__


456 
AO_THUMB_RESTORE_MODE


457 : "=&r"(
ªsu…
), "=&r"(
tmp
), "+m"(*
addr
)

458 : "r"(
addr
), "r"(
ﬁd_vÆ
), "r"(
√w_vÆ
)

459 : 
AO_THUMB_SWITCH_CLOBBERS
 "cc");

460  !(
ªsu…
&2);

461 
	}
}

462 
	#AO_HAVE_com∑ª_™d_sw≠


	)

465 
AO_INLINE
 
AO_t


466 
	$AO_„tch_com∑ª_™d_sw≠
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd_vÆ
, AO_à
√w_vÆ
)

468 
AO_t
 
„tched_vÆ
;

469 
Êag
;

471 
__asm__
 
	`__vﬁ©ûe__
("@AO_fetch_compare_and_swap\n"

472 
AO_THUMB_GO_ARM


476 #ifde‡
__thumb2__


482 
AO_THUMB_RESTORE_MODE


483 : "=&r"(
Êag
), "=&r"(
„tched_vÆ
), "+m"(*
addr
)

484 : "r"(
addr
), "r"(
ﬁd_vÆ
), "r"(
√w_vÆ
)

485 : 
AO_THUMB_SWITCH_CLOBBERS
 "cc");

486  
„tched_vÆ
;

487 
	}
}

488 
	#AO_HAVE_„tch_com∑ª_™d_sw≠


	)

490 #ifde‡
AO_ARM_HAVE_LDREXD


491 
	~"../°™d¨d_ao_doubÀ_t.h
"

499 
AO_INLINE
 
AO_doubÀ_t


500 
	$AO_doubÀ_lﬂd
(c⁄° vﬁ©ûê
AO_doubÀ_t
 *
addr
)

502 
AO_doubÀ_t
 
ªsu…
;

505 
__asm__
 
	`__vﬁ©ûe__
("@AO_double_load\n"

507 : "=&r" (
ªsu…
.
AO_whﬁe
)

508 : "r" (
addr
)

510  
ªsu…
;

511 
	}
}

512 
	#AO_HAVE_doubÀ_lﬂd


	)

514 
AO_INLINE
 

515 
	$AO_doubÀ_°‹e
(vﬁ©ûê
AO_doubÀ_t
 *
addr
, AO_doubÀ_à
√w_vÆ
)

517 
AO_doubÀ_t
 
ﬁd_vÆ
;

518 
°©us
;

522 
__asm__
 
	`__vﬁ©ûe__
("@AO_double_store\n"

525 : "=&r" (
ﬁd_vÆ
.
AO_whﬁe
), "=&r" (
°©us
), "+m" (*
addr
)

526 : "r" (
addr
), "r" (
√w_vÆ
.
AO_whﬁe
)

528 } 
	`AO_EXPECT_FALSE
(
°©us
));

529 
	}
}

530 
	#AO_HAVE_doubÀ_°‹e


	)

532 
AO_INLINE
 

533 
	$AO_doubÀ_com∑ª_™d_sw≠
(vﬁ©ûê
AO_doubÀ_t
 *
addr
,

534 
AO_doubÀ_t
 
ﬁd_vÆ
, AO_doubÀ_à
√w_vÆ
)

536 
doubÀ_±r_°‹age
 
tmp
;

537 
ªsu…
 = 1;

541 
__asm__
 
	`__vﬁ©ûe__
("@AO_double_compare_and_swap\n"

543 : "=&r"(
tmp
)

544 : "r"(
addr
)

546 i‡(
tmp
 !
ﬁd_vÆ
.
AO_whﬁe
)

548 
__asm__
 
	`__vﬁ©ûe__
(

550 : "=&r"(
ªsu…
), "+m"(*
addr
)

551 : "r" (
addr
), "r" (
√w_vÆ
.
AO_whﬁe
)

553 } 
	`AO_EXPECT_FALSE
(
ªsu…
));

554  !
ªsu…
;

555 
	}
}

556 
	#AO_HAVE_doubÀ_com∑ª_™d_sw≠


	)

566 
	~"../Æl_Æig√d_©omic_lﬂd_°‹e.h
"

572 #i‡!
deföed
(
AO_HAVE_ã°_™d_£t_fuŒ
Ë&& !deföed(
AO_HAVE_ã°_™d_£t
) \

573 && 
deföed
 (
AO_ARM_HAVE_SWP
Ë&& (!deföed(
AO_PREFER_GENERALIZED
) \

574 || !
	$deföed
(
AO_HAVE_„tch_com∑ª_™d_sw≠
))

575 
AO_INLINE
 
AO_TS_VAL_t


576 
	$AO_ã°_™d_£t_fuŒ
(vﬁ©ûê
AO_TS_t
 *
addr
)

578 
AO_TS_VAL_t
 
ﬁdvÆ
;

587 
__asm__
 
	`__vﬁ©ûe__
("@AO_test_and_set_full\n"

588 
AO_THUMB_GO_ARM


592 
AO_THUMB_RESTORE_MODE


593 : "=&r"(
ﬁdvÆ
), "=&r"(
addr
)

594 : "r"(1), "1"(
addr
)

595 : 
AO_THUMB_SWITCH_CLOBBERS
 "memory");

596  
ﬁdvÆ
;

597 
	}
}

598 
	#AO_HAVE_ã°_™d_£t_fuŒ


	)

601 
	#AO_T_IS_INT


	)

	@/usr/include/atomic_ops/sysdeps/gcc/cris.h

28 
	~"../Æl_©omic_lﬂd_°‹e.h
"

30 
	~"../‹dîed.h
"

32 
	~"../ã°_™d_£t_t_is_ao_t.h
"

49 
AO_INLINE
 
AO_TS_VAL_t


50 
	$AO_ã°_™d_£t_fuŒ
(vﬁ©ûê
AO_TS_t
 *
addr
) {

52 
ªt
;

56 
__asm__
 
	`__vﬁ©ûe__
("clearf\n"

63 : "=&r" (
ªt
), "=m" (*
addr
)

64 : "r" (
addr
), "r" (() 1), "m" (*addr)

66  
ªt
;

67 
	}
}

68 
	#AO_HAVE_ã°_™d_£t_fuŒ


	)

	@/usr/include/atomic_ops/sysdeps/gcc/hppa.h

23 
	~"../Æl_©omic_lﬂd_°‹e.h
"

29 
	~"../‹dîed.h
"

34 
	sAO_∑_˛óøbÀ_loc
 {

35 
	md©a
[4];

38 #unde‡
AO_TS_INITIALIZER


39 
	#AO_TS_t
 
AO_∑_˛óøbÀ_loc


	)

40 
	#AO_TS_INITIALIZER
 {1,1,1,1}

	)

43 íum {
	mAO_PA_TS_£t
 = 0, 
	mAO_PA_TS_˛ór
 = 1} 
	tAO_PA_TS_vÆ
;

44 
	#AO_TS_VAL_t
 
AO_PA_TS_vÆ


	)

45 
	#AO_TS_CLEAR
 
AO_PA_TS_˛ór


	)

46 
	#AO_TS_SET
 
AO_PA_TS_£t


	)

52 
	#AO_ldcw
(
a
, 
ªt
) \

53 
__asm__
 
	`__vﬁ©ûe__
("ldcw 0(%2), %0" \

54 : "Ù" (
ªt
), "=m" (*(
a
)Ë: "r" (a))

	)

63 
	#AO_PA_LDCW_ALIGNMENT
 16

	)

64 
	#AO_ldcw_Æign
(
addr
) \

65 ((vﬁ©ûê*)((()(
addr
) \

66 + (
AO_PA_LDCW_ALIGNMENT
 - 1)) \

67 & ~(
AO_PA_LDCW_ALIGNMENT
 - 1)))

	)

70 
AO_INLINE
 
AO_TS_VAL_t


71 
	$AO_ã°_™d_£t_fuŒ
(vﬁ©ûê
AO_TS_t
 * 
addr
)

73 vﬁ©ûê
ªt
;

74 vﬁ©ûê*
a
 = 
	`AO_ldcw_Æign
(
addr
);

76 
	`AO_ldcw
(
a
, 
ªt
);

77  (
AO_TS_VAL_t
)
ªt
;

78 
	}
}

79 
	#AO_HAVE_ã°_™d_£t_fuŒ


	)

81 
AO_INLINE
 

82 
	$AO_∑_˛ór
(vﬁ©ûê
AO_TS_t
 * 
addr
)

84 vﬁ©ûê*
a
 = 
	`AO_ldcw_Æign
(
addr
);

86 
	`AO_compûî_b¨rõr
();

87 *
a
 = 1;

88 
	}
}

89 
	#AO_CLEAR
(
addr
Ë
	`AO_∑_˛ór
◊ddr)

	)

	@/usr/include/atomic_ops/sysdeps/gcc/m68k.h

20 #unde‡
AO_t


21 
	tAO_t
 
	t__©åibuã__
 ((
	tÆig√d
 (4)));

24 
	~"../Æl_Æig√d_©omic_lﬂd_°‹e.h
"

28 
	~"../‹dîed.h
"

30 
	~"../ã°_™d_£t_t_is_ch¨.h
"

32 
AO_INLINE
 
AO_TS_VAL_t


33 
	$AO_ã°_™d_£t_fuŒ
(vﬁ©ûê
AO_TS_t
 *
addr
) {

34 
AO_TS_t
 
ﬁdvÆ
;

40 
__asm__
 
	`__vﬁ©ûe__
(

42 : "=d" (
ﬁdvÆ
), "=m" (*
addr
)

43 : "m" (*
addr
)

46  (
AO_TS_VAL_t
)
ﬁdvÆ
;

47 
	}
}

48 
	#AO_HAVE_ã°_™d_£t_fuŒ


	)

51 
AO_INLINE
 

52 
	$AO_com∑ª_™d_sw≠_fuŒ
(vﬁ©ûê
AO_t
 *
addr
,

53 
AO_t
 
ﬁd
, AO_à
√w_vÆ
)

55 
ªsu…
;

57 
__asm__
 
	`__vﬁ©ûe__
(

59 : "=d" (
ªsu…
), "=m" (*
addr
)

60 : "m" (*
addr
), "d" (
ﬁd
), "d" (
√w_vÆ
)

62  -
ªsu…
;

63 
	}
}

64 
	#AO_HAVE_com∑ª_™d_sw≠_fuŒ


	)

68 
	#AO_T_IS_INT


	)

	@/usr/include/atomic_ops/sysdeps/gcc/mips.h

21 
	~"../Æl_Æig√d_©omic_lﬂd_°‹e.h
"

23 
	~"../lﬂd°‹e/acquúe_ªÀa£_vﬁ©ûe.h
"

25 
	~"../ã°_™d_£t_t_is_ao_t.h
"

28 
	#AO_NO_DD_ORDERING


	)

30 #ifde‡
AO_ICE9A1_LLSC_WAR


34 
	#AO_MIPS_LL_FIX
(
¨gs_°r
) \

35 "Ü» " 
¨gs_°r
 "\n"

	)

37 
	#AO_MIPS_LL_FIX
(
¨gs_°r
Ë""

	)

40 
AO_INLINE
 

41 
	$AO_n›_fuŒ
()

43 
__asm__
 
	`__vﬁ©ûe__
(

51 
	}
}

52 
	#AO_HAVE_n›_fuŒ


	)

54 #i‚de‡
AO_PREFER_GENERALIZED


55 
AO_INLINE
 
AO_t


56 
	$AO_„tch_™d_add
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ö¸
)

58 
ªsu…
;

59 
ãmp
;

61 
__asm__
 
	`__vﬁ©ûe__
(

67 
	`AO_MIPS_LL_FIX
("%0, %2")

73 : "=&r" (
ªsu…
), "=&r" (
ãmp
), "+m" (*
addr
)

74 : "Ir" (
ö¸
)

76  (
AO_t
)
ªsu…
;

77 
	}
}

78 
	#AO_HAVE_„tch_™d_add


	)

80 
AO_INLINE
 
AO_TS_VAL_t


81 
	$AO_ã°_™d_£t
(vﬁ©ûê
AO_TS_t
 *
addr
)

83 
ﬁdvÆ
;

84 
ãmp
;

86 
__asm__
 
	`__vﬁ©ûe__
(

92 
	`AO_MIPS_LL_FIX
("%0, %2")

98 : "=&r" (
ﬁdvÆ
), "=&r" (
ãmp
), "+m" (*
addr
)

101  (
AO_TS_VAL_t
)
ﬁdvÆ
;

102 
	}
}

103 
	#AO_HAVE_ã°_™d_£t


	)

108 #i‚de‡
AO_GENERALIZE_ASM_BOOL_CAS


109 
AO_INLINE
 

110 
	$AO_com∑ª_™d_sw≠
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd
, AO_à
√w_vÆ
)

112 
was_equÆ
 = 0;

113 
ãmp
;

115 
__asm__
 
	`__vﬁ©ûe__
(

121 
	`AO_MIPS_LL_FIX
("%0, %1")

129 : "=&r" (
ãmp
), "+m" (*
addr
), "+r" (
was_equÆ
)

130 : "r" (
√w_vÆ
), "r" (
ﬁd
)

132  
was_equÆ
;

133 
	}
}

134 
	#AO_HAVE_com∑ª_™d_sw≠


	)

137 
AO_INLINE
 
AO_t


138 
	$AO_„tch_com∑ª_™d_sw≠
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd
, AO_à
√w_vÆ
)

140 
„tched_vÆ
;

141 
ãmp
;

143 
__asm__
 
	`__vﬁ©ûe__
(

149 
	`AO_MIPS_LL_FIX
("%0, %2")

157 : "=&r" (
„tched_vÆ
), "=&r" (
ãmp
), "+m" (*
addr
)

158 : "r" (
√w_vÆ
), "Jr" (
ﬁd
)

160  (
AO_t
)
„tched_vÆ
;

161 
	}
}

162 
	#AO_HAVE_„tch_com∑ª_™d_sw≠


	)

172 
	#AO_T_IS_INT


	)

	@/usr/include/atomic_ops/sysdeps/gcc/s390.h

33 
	~"../Æl_Æig√d_©omic_lﬂd_°‹e.h
"

35 
	~"../‹dîed_ex˚±_wr.h
"

37 
	~"../ã°_™d_£t_t_is_ao_t.h
"

44 
AO_INLINE
 
	$AO_com∑ª_™d_sw≠_fuŒ
(vﬁ©ûê
AO_t
 *
addr
,

45 
AO_t
 
ﬁd
, AO_à
√w_vÆ
)

47 
ªtvÆ
;

48 
__asm__
 
	`__vﬁ©ûe__
 (

49 #i‚de‡
__s390x__


56 : "=&d" (
ªtvÆ
), "+d" (
ﬁd
)

57 : "d" (
√w_vÆ
), "a" (
addr
)

59  
ªtvÆ
 == 0;

60 
	}
}

61 
	#AO_HAVE_com∑ª_™d_sw≠_fuŒ


	)

	@/usr/include/atomic_ops/sysdeps/gcc/sh.h

15 
	~"../Æl_©omic_lﬂd_°‹e.h
"

16 
	~"../‹dîed.h
"

19 
	~"../ã°_™d_£t_t_is_ch¨.h
"

21 
AO_INLINE
 
AO_TS_VAL_t


22 
	$AO_ã°_™d_£t_fuŒ
(vﬁ©ûê
AO_TS_t
 *
addr
)

24 
ﬁdvÆ
;

25 
__asm__
 
	`__vﬁ©ûe__
(

27 : "Ù" (
ﬁdvÆ
)

28 : "r" (
addr
)

30  
ﬁdvÆ
? 
AO_TS_CLEAR
 : 
AO_TS_SET
;

31 
	}
}

32 
	#AO_HAVE_ã°_™d_£t_fuŒ


	)

	@/usr/include/atomic_ops/sysdeps/generic_pthread.h

30 
	~<±hªad.h
>

32 
	~"ã°_™d_£t_t_is_ao_t.h
"

38 
±hªad_muãx_t
 
AO_±_lock
;

40 
AO_INLINE
 

41 
	$AO_n›_fuŒ
()

43 
	`±hªad_muãx_lock
(&
AO_±_lock
);

44 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

45 
	}
}

46 
	#AO_HAVE_n›_fuŒ


	)

48 
AO_INLINE
 
AO_t


49 
	$AO_lﬂd_fuŒ
(c⁄° vﬁ©ûê
AO_t
 *
addr
)

51 
AO_t
 
ªsu…
;

52 
	`±hªad_muãx_lock
(&
AO_±_lock
);

53 
ªsu…
 = *
addr
;

54 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

55  
ªsu…
;

56 
	}
}

57 
	#AO_HAVE_lﬂd_fuŒ


	)

59 
AO_INLINE
 

60 
	$AO_°‹e_fuŒ
(vﬁ©ûê
AO_t
 *
addr
, AO_à
vÆ
)

62 
	`±hªad_muãx_lock
(&
AO_±_lock
);

63 *
addr
 = 
vÆ
;

64 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

65 
	}
}

66 
	#AO_HAVE_°‹e_fuŒ


	)

68 
AO_INLINE
 

69 
	$AO_ch¨_lﬂd_fuŒ
(c⁄° vﬁ©ûê*
addr
)

71 
ªsu…
;

72 
	`±hªad_muãx_lock
(&
AO_±_lock
);

73 
ªsu…
 = *
addr
;

74 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

75  
ªsu…
;

76 
	}
}

77 
	#AO_HAVE_ch¨_lﬂd_fuŒ


	)

79 
AO_INLINE
 

80 
	$AO_ch¨_°‹e_fuŒ
(vﬁ©ûê*
addr
, 
vÆ
)

82 
	`±hªad_muãx_lock
(&
AO_±_lock
);

83 *
addr
 = 
vÆ
;

84 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

85 
	}
}

86 
	#AO_HAVE_ch¨_°‹e_fuŒ


	)

88 
AO_INLINE
 

89 
	$AO_sh‹t_lﬂd_fuŒ
(c⁄° vﬁ©ûê*
addr
)

91 
ªsu…
;

92 
	`±hªad_muãx_lock
(&
AO_±_lock
);

93 
ªsu…
 = *
addr
;

94 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

95  
ªsu…
;

96 
	}
}

97 
	#AO_HAVE_sh‹t_lﬂd_fuŒ


	)

99 
AO_INLINE
 

100 
	$AO_sh‹t_°‹e_fuŒ
(vﬁ©ûê*
addr
, 
vÆ
)

102 
	`±hªad_muãx_lock
(&
AO_±_lock
);

103 *
addr
 = 
vÆ
;

104 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

105 
	}
}

106 
	#AO_HAVE_sh‹t_°‹e_fuŒ


	)

108 
AO_INLINE
 

109 
	$AO_öt_lﬂd_fuŒ
(c⁄° vﬁ©ûê*
addr
)

111 
ªsu…
;

112 
	`±hªad_muãx_lock
(&
AO_±_lock
);

113 
ªsu…
 = *
addr
;

114 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

115  
ªsu…
;

116 
	}
}

117 
	#AO_HAVE_öt_lﬂd_fuŒ


	)

119 
AO_INLINE
 

120 
	$AO_öt_°‹e_fuŒ
(vﬁ©ûê*
addr
, 
vÆ
)

122 
	`±hªad_muãx_lock
(&
AO_±_lock
);

123 *
addr
 = 
vÆ
;

124 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

125 
	}
}

126 
	#AO_HAVE_öt_°‹e_fuŒ


	)

128 
AO_INLINE
 
AO_TS_VAL_t


129 
	$AO_ã°_™d_£t_fuŒ
(vﬁ©ûê
AO_TS_t
 *
addr
)

131 
AO_TS_VAL_t
 
ªsu…
;

132 
	`±hªad_muãx_lock
(&
AO_±_lock
);

133 
ªsu…
 = (
AO_TS_VAL_t
)(*
addr
);

134 *
addr
 = 
AO_TS_SET
;

135 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

136 
	`as£π
(
ªsu…
 =
AO_TS_SET
 ||Ñesu… =
AO_TS_CLEAR
);

137  
ªsu…
;

138 
	}
}

139 
	#AO_HAVE_ã°_™d_£t_fuŒ


	)

141 
AO_INLINE
 
AO_t


142 
	$AO_„tch_™d_add_fuŒ
(vﬁ©ûê
AO_t
 *
p
, AO_à
ö¸
)

144 
AO_t
 
ﬁd_vÆ
;

146 
	`±hªad_muãx_lock
(&
AO_±_lock
);

147 
ﬁd_vÆ
 = *
p
;

148 *
p
 = 
ﬁd_vÆ
 + 
ö¸
;

149 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

150  
ﬁd_vÆ
;

151 
	}
}

152 
	#AO_HAVE_„tch_™d_add_fuŒ


	)

154 
AO_INLINE
 

155 
	$AO_ch¨_„tch_™d_add_fuŒ
(vﬁ©ûê*
p
, 
ö¸
)

157 
ﬁd_vÆ
;

159 
	`±hªad_muãx_lock
(&
AO_±_lock
);

160 
ﬁd_vÆ
 = *
p
;

161 *
p
 = 
ﬁd_vÆ
 + 
ö¸
;

162 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

163  
ﬁd_vÆ
;

164 
	}
}

165 
	#AO_HAVE_ch¨_„tch_™d_add_fuŒ


	)

167 
AO_INLINE
 

168 
	$AO_sh‹t_„tch_™d_add_fuŒ
(vﬁ©ûê*
p
, 
ö¸
)

170 
ﬁd_vÆ
;

172 
	`±hªad_muãx_lock
(&
AO_±_lock
);

173 
ﬁd_vÆ
 = *
p
;

174 *
p
 = 
ﬁd_vÆ
 + 
ö¸
;

175 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

176  
ﬁd_vÆ
;

177 
	}
}

178 
	#AO_HAVE_sh‹t_„tch_™d_add_fuŒ


	)

180 
AO_INLINE
 

181 
	$AO_öt_„tch_™d_add_fuŒ
(vﬁ©ûê*
p
, 
ö¸
)

183 
ﬁd_vÆ
;

185 
	`±hªad_muãx_lock
(&
AO_±_lock
);

186 
ﬁd_vÆ
 = *
p
;

187 *
p
 = 
ﬁd_vÆ
 + 
ö¸
;

188 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

189  
ﬁd_vÆ
;

190 
	}
}

191 
	#AO_HAVE_öt_„tch_™d_add_fuŒ


	)

193 
AO_INLINE
 

194 
	$AO_™d_fuŒ
(vﬁ©ûê
AO_t
 *
p
, AO_à
vÆue
)

196 
	`±hªad_muãx_lock
(&
AO_±_lock
);

197 *
p
 &
vÆue
;

198 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

199 
	}
}

200 
	#AO_HAVE_™d_fuŒ


	)

202 
AO_INLINE
 

203 
	$AO_‹_fuŒ
(vﬁ©ûê
AO_t
 *
p
, AO_à
vÆue
)

205 
	`±hªad_muãx_lock
(&
AO_±_lock
);

206 *
p
 |
vÆue
;

207 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

208 
	}
}

209 
	#AO_HAVE_‹_fuŒ


	)

211 
AO_INLINE
 

212 
	$AO_x‹_fuŒ
(vﬁ©ûê
AO_t
 *
p
, AO_à
vÆue
)

214 
	`±hªad_muãx_lock
(&
AO_±_lock
);

215 *
p
 ^
vÆue
;

216 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

217 
	}
}

218 
	#AO_HAVE_x‹_fuŒ


	)

220 
AO_INLINE
 

221 
	$AO_ch¨_™d_fuŒ
(vﬁ©ûê*
p
, 
vÆue
)

223 
	`±hªad_muãx_lock
(&
AO_±_lock
);

224 *
p
 &
vÆue
;

225 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

226 
	}
}

227 
	#AO_HAVE_ch¨_™d_fuŒ


	)

229 
AO_INLINE
 

230 
	$AO_ch¨_‹_fuŒ
(vﬁ©ûê*
p
, 
vÆue
)

232 
	`±hªad_muãx_lock
(&
AO_±_lock
);

233 *
p
 |
vÆue
;

234 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

235 
	}
}

236 
	#AO_HAVE_ch¨_‹_fuŒ


	)

238 
AO_INLINE
 

239 
	$AO_ch¨_x‹_fuŒ
(vﬁ©ûê*
p
, 
vÆue
)

241 
	`±hªad_muãx_lock
(&
AO_±_lock
);

242 *
p
 ^
vÆue
;

243 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

244 
	}
}

245 
	#AO_HAVE_ch¨_x‹_fuŒ


	)

247 
AO_INLINE
 

248 
	$AO_sh‹t_™d_fuŒ
(vﬁ©ûê*
p
, 
vÆue
)

250 
	`±hªad_muãx_lock
(&
AO_±_lock
);

251 *
p
 &
vÆue
;

252 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

253 
	}
}

254 
	#AO_HAVE_sh‹t_™d_fuŒ


	)

256 
AO_INLINE
 

257 
	$AO_sh‹t_‹_fuŒ
(vﬁ©ûê*
p
, 
vÆue
)

259 
	`±hªad_muãx_lock
(&
AO_±_lock
);

260 *
p
 |
vÆue
;

261 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

262 
	}
}

263 
	#AO_HAVE_sh‹t_‹_fuŒ


	)

265 
AO_INLINE
 

266 
	$AO_sh‹t_x‹_fuŒ
(vﬁ©ûê*
p
, 
vÆue
)

268 
	`±hªad_muãx_lock
(&
AO_±_lock
);

269 *
p
 ^
vÆue
;

270 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

271 
	}
}

272 
	#AO_HAVE_sh‹t_x‹_fuŒ


	)

274 
AO_INLINE
 

275 
	$AO_öt_™d_fuŒ
(vﬁ©ûê*
p
, 
vÆue
)

277 
	`±hªad_muãx_lock
(&
AO_±_lock
);

278 *
p
 &
vÆue
;

279 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

280 
	}
}

281 
	#AO_HAVE_öt_™d_fuŒ


	)

283 
AO_INLINE
 

284 
	$AO_öt_‹_fuŒ
(vﬁ©ûê*
p
, 
vÆue
)

286 
	`±hªad_muãx_lock
(&
AO_±_lock
);

287 *
p
 |
vÆue
;

288 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

289 
	}
}

290 
	#AO_HAVE_öt_‹_fuŒ


	)

292 
AO_INLINE
 

293 
	$AO_öt_x‹_fuŒ
(vﬁ©ûê*
p
, 
vÆue
)

295 
	`±hªad_muãx_lock
(&
AO_±_lock
);

296 *
p
 ^
vÆue
;

297 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

298 
	}
}

299 
	#AO_HAVE_öt_x‹_fuŒ


	)

301 
AO_INLINE
 
AO_t


302 
	$AO_„tch_com∑ª_™d_sw≠_fuŒ
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd_vÆ
,

303 
AO_t
 
√w_vÆ
)

305 
AO_t
 
„tched_vÆ
;

307 
	`±hªad_muãx_lock
(&
AO_±_lock
);

308 
„tched_vÆ
 = *
addr
;

309 i‡(
„tched_vÆ
 =
ﬁd_vÆ
)

310 *
addr
 = 
√w_vÆ
;

311 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

312  
„tched_vÆ
;

313 
	}
}

314 
	#AO_HAVE_„tch_com∑ª_™d_sw≠_fuŒ


	)

316 
AO_INLINE
 

317 
	$AO_ch¨_„tch_com∑ª_™d_sw≠_fuŒ
(vﬁ©ûê*
addr
,

318 
ﬁd_vÆ
,

319 
√w_vÆ
)

321 
„tched_vÆ
;

323 
	`±hªad_muãx_lock
(&
AO_±_lock
);

324 
„tched_vÆ
 = *
addr
;

325 i‡(
„tched_vÆ
 =
ﬁd_vÆ
)

326 *
addr
 = 
√w_vÆ
;

327 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

328  
„tched_vÆ
;

329 
	}
}

330 
	#AO_HAVE_ch¨_„tch_com∑ª_™d_sw≠_fuŒ


	)

332 
AO_INLINE
 

333 
	$AO_sh‹t_„tch_com∑ª_™d_sw≠_fuŒ
(vﬁ©ûê*
addr
,

334 
ﬁd_vÆ
,

335 
√w_vÆ
)

337 
„tched_vÆ
;

339 
	`±hªad_muãx_lock
(&
AO_±_lock
);

340 
„tched_vÆ
 = *
addr
;

341 i‡(
„tched_vÆ
 =
ﬁd_vÆ
)

342 *
addr
 = 
√w_vÆ
;

343 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

344  
„tched_vÆ
;

345 
	}
}

346 
	#AO_HAVE_sh‹t_„tch_com∑ª_™d_sw≠_fuŒ


	)

348 
AO_INLINE
 

349 
	$AO_öt_„tch_com∑ª_™d_sw≠_fuŒ
(vﬁ©ûê*
addr
, 
ﬁd_vÆ
,

350 
√w_vÆ
)

352 
„tched_vÆ
;

354 
	`±hªad_muãx_lock
(&
AO_±_lock
);

355 
„tched_vÆ
 = *
addr
;

356 i‡(
„tched_vÆ
 =
ﬁd_vÆ
)

357 *
addr
 = 
√w_vÆ
;

358 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

359  
„tched_vÆ
;

360 
	}
}

361 
	#AO_HAVE_öt_„tch_com∑ª_™d_sw≠_fuŒ


	)

366 
AO_t
 
	mAO_vÆ1
;

367 
AO_t
 
	mAO_vÆ2
;

368 } 
	tAO_doubÀ_t
;

369 
	#AO_HAVE_doubÀ_t


	)

371 
	#AO_DOUBLE_T_INITIALIZER
 { (
AO_t
)0, (AO_t)0 }

	)

373 
AO_INLINE
 
AO_doubÀ_t


374 
	$AO_doubÀ_lﬂd_fuŒ
(c⁄° vﬁ©ûê
AO_doubÀ_t
 *
addr
)

376 
AO_doubÀ_t
 
ªsu…
;

378 
	`±hªad_muãx_lock
(&
AO_±_lock
);

379 
ªsu…
.
AO_vÆ1
 = 
addr
->AO_val1;

380 
ªsu…
.
AO_vÆ2
 = 
addr
->AO_val2;

381 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

382  
ªsu…
;

383 
	}
}

384 
	#AO_HAVE_doubÀ_lﬂd_fuŒ


	)

386 
AO_INLINE
 

387 
	$AO_doubÀ_°‹e_fuŒ
(vﬁ©ûê
AO_doubÀ_t
 *
addr
, AO_doubÀ_à
vÆue
)

389 
	`±hªad_muãx_lock
(&
AO_±_lock
);

390 
addr
->
AO_vÆ1
 = 
vÆue
.AO_val1;

391 
addr
->
AO_vÆ2
 = 
vÆue
.AO_val2;

392 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

393 
	}
}

394 
	#AO_HAVE_doubÀ_°‹e_fuŒ


	)

396 
AO_INLINE
 

397 
	$AO_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ
(vﬁ©ûê
AO_doubÀ_t
 *
addr
,

398 
AO_t
 
ﬁd1
, AO_à
ﬁd2
,

399 
AO_t
 
√w1
, AO_à
√w2
)

401 
	`±hªad_muãx_lock
(&
AO_±_lock
);

402 i‡(
addr
 -> 
AO_vÆ1
 =
ﬁd1
 &&ádd∏-> 
AO_vÆ2
 =
ﬁd2
)

404 
addr
 -> 
AO_vÆ1
 = 
√w1
;

405 
addr
 -> 
AO_vÆ2
 = 
√w2
;

406 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

410 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

412 
	}
}

413 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ


	)

415 
AO_INLINE
 

416 
	$AO_com∑ª_™d_sw≠_doubÀ_fuŒ
(vﬁ©ûê
AO_doubÀ_t
 *
addr
,

417 
AO_t
 
ﬁd1
, AO_à
√w1
, AO_à
√w2
)

419 
	`±hªad_muãx_lock
(&
AO_±_lock
);

420 i‡(
addr
 -> 
AO_vÆ1
 =
ﬁd1
)

422 
addr
 -> 
AO_vÆ1
 = 
√w1
;

423 
addr
 -> 
AO_vÆ2
 = 
√w2
;

424 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

428 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

430 
	}
}

431 
	#AO_HAVE_com∑ª_™d_sw≠_doubÀ_fuŒ


	)

	@/usr/include/atomic_ops/sysdeps/hpc/hppa.h

25 
	~"../lﬂd°‹e/©omic_lﬂd.h
"

26 
	~"../lﬂd°‹e/©omic_°‹e.h
"

35 
	~"../‹dîed.h
"

37 
	~<machöe/ölöe.h
>

42 
	sAO_∑_˛óøbÀ_loc
 {

43 
	md©a
[4];

46 #unde‡
AO_TS_INITIALIZER


47 
	#AO_TS_t
 
AO_∑_˛óøbÀ_loc


	)

48 
	#AO_TS_INITIALIZER
 {1,1,1,1}

	)

51 íum {
	mAO_PA_TS_£t
 = 0, 
	mAO_PA_TS_˛ór
 = 1} 
	tAO_PA_TS_vÆ
;

52 
	#AO_TS_VAL_t
 
AO_PA_TS_vÆ


	)

53 
	#AO_TS_CLEAR
 
AO_PA_TS_˛ór


	)

54 
	#AO_TS_SET
 
AO_PA_TS_£t


	)

60 
	#AO_ldcw
(
a
, 
ªt
) \

61 
	`_LDCWX
(0 , 0 , 
a
 , 
ªt
)

	)

70 
	#AO_PA_LDCW_ALIGNMENT
 16

	)

71 
	#AO_ldcw_Æign
(
addr
) \

72 ((vﬁ©ûê*)((()(
addr
) \

73 + (
AO_PA_LDCW_ALIGNMENT
 - 1)) \

74 & ~(
AO_PA_LDCW_ALIGNMENT
 - 1)))

	)

77 
AO_INLINE
 
AO_TS_VAL_t


78 
	$AO_ã°_™d_£t_fuŒ
(vﬁ©ûê
AO_TS_t
 * 
addr
)

80 
ªt
;

81 
a
 = ()
	`AO_ldcw_Æign
(
addr
);

83 
	`AO_ldcw
(
a
, 
ªt
);

84  (
AO_TS_VAL_t
)
ªt
;

85 
	}
}

86 
	#AO_HAVE_ã°_™d_£t_fuŒ


	)

88 
AO_INLINE
 

89 
	$AO_∑_˛ór
(vﬁ©ûê
AO_TS_t
 * 
addr
)

91 vﬁ©ûê*
a
 = 
	`AO_ldcw_Æign
(
addr
);

93 
	`AO_compûî_b¨rõr
();

94 *
a
 = 1;

95 
	}
}

96 
	#AO_CLEAR
(
addr
Ë
	`AO_∑_˛ór
◊ddr)

	)

	@/usr/include/atomic_ops/sysdeps/hpc/ia64.h

29 
	~"../Æl_©omic_lﬂd_°‹e.h
"

31 
	~"../Æl_acquúe_ªÀa£_vﬁ©ûe.h
"

33 
	~"../ã°_™d_£t_t_is_ch¨.h
"

35 
	~<machöe/sys/ölöe.h
>

37 #ifde‡
__LP64__


38 
	#AO_T_FASIZE
 
_FASZ_D


	)

39 
	#AO_T_SIZE
 
_SZ_D


	)

41 
	#AO_T_FASIZE
 
_FASZ_W


	)

42 
	#AO_T_SIZE
 
_SZ_W


	)

45 
AO_INLINE
 

46 
	$AO_n›_fuŒ
()

48 
	`_Asm_mf
();

49 
	}
}

50 
	#AO_HAVE_n›_fuŒ


	)

52 #i‚de‡
AO_PREFER_GENERALIZED


53 
AO_INLINE
 
AO_t


54 
	$AO_„tch_™d_add1_acquúe
 (vﬁ©ûê
AO_t
 *
p
)

56  
	`_Asm_„tchadd
(
AO_T_FASIZE
, 
_SEM_ACQ
, 
p
, 1,

57 
_LDHINT_NONE
, 
_DOWN_MEM_FENCE
);

58 
	}
}

59 
	#AO_HAVE_„tch_™d_add1_acquúe


	)

61 
AO_INLINE
 
AO_t


62 
	$AO_„tch_™d_add1_ªÀa£
 (vﬁ©ûê
AO_t
 *
p
)

64  
	`_Asm_„tchadd
(
AO_T_FASIZE
, 
_SEM_REL
, 
p
, 1,

65 
_LDHINT_NONE
, 
_UP_MEM_FENCE
);

66 
	}
}

67 
	#AO_HAVE_„tch_™d_add1_ªÀa£


	)

69 
AO_INLINE
 
AO_t


70 
	$AO_„tch_™d_sub1_acquúe
 (vﬁ©ûê
AO_t
 *
p
)

72  
	`_Asm_„tchadd
(
AO_T_FASIZE
, 
_SEM_ACQ
, 
p
, -1,

73 
_LDHINT_NONE
, 
_DOWN_MEM_FENCE
);

74 
	}
}

75 
	#AO_HAVE_„tch_™d_sub1_acquúe


	)

77 
AO_INLINE
 
AO_t


78 
	$AO_„tch_™d_sub1_ªÀa£
 (vﬁ©ûê
AO_t
 *
p
)

80  
	`_Asm_„tchadd
(
AO_T_FASIZE
, 
_SEM_REL
, 
p
, -1,

81 
_LDHINT_NONE
, 
_UP_MEM_FENCE
);

82 
	}
}

83 
	#AO_HAVE_„tch_™d_sub1_ªÀa£


	)

86 
AO_INLINE
 
AO_t


87 
	$AO_„tch_com∑ª_™d_sw≠_acquúe
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd_vÆ
,

88 
AO_t
 
√w_vÆ
)

90 
	`_Asm_mov_to_¨
(
_AREG_CCV
, 
ﬁd_vÆ
, 
_DOWN_MEM_FENCE
);

91  
	`_Asm_cmpxchg
(
AO_T_SIZE
, 
_SEM_ACQ
, 
addr
,

92 
√w_vÆ
, 
_LDHINT_NONE
, 
_DOWN_MEM_FENCE
);

93 
	}
}

94 
	#AO_HAVE_„tch_com∑ª_™d_sw≠_acquúe


	)

96 
AO_INLINE
 
AO_t


97 
	$AO_„tch_com∑ª_™d_sw≠_ªÀa£
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd_vÆ
,

98 
AO_t
 
√w_vÆ
)

100 
	`_Asm_mov_to_¨
(
_AREG_CCV
, 
ﬁd_vÆ
, 
_UP_MEM_FENCE
);

101  
	`_Asm_cmpxchg
(
AO_T_SIZE
, 
_SEM_REL
, 
addr
,

102 
√w_vÆ
, 
_LDHINT_NONE
, 
_UP_MEM_FENCE
);

104 
	}
}

105 
	#AO_HAVE_„tch_com∑ª_™d_sw≠_ªÀa£


	)

107 
AO_INLINE
 

108 
	$AO_ch¨_„tch_com∑ª_™d_sw≠_acquúe
(vﬁ©ûê*
addr
,

109 
ﬁd_vÆ
, 
√w_vÆ
)

111 
	`_Asm_mov_to_¨
(
_AREG_CCV
, 
ﬁd_vÆ
, 
_DOWN_MEM_FENCE
);

112  
	`_Asm_cmpxchg
(
_SZ_B
, 
_SEM_ACQ
, 
addr
,

113 
√w_vÆ
, 
_LDHINT_NONE
, 
_DOWN_MEM_FENCE
);

115 
	}
}

116 
	#AO_HAVE_ch¨_„tch_com∑ª_™d_sw≠_acquúe


	)

118 
AO_INLINE
 

119 
	$AO_ch¨_„tch_com∑ª_™d_sw≠_ªÀa£
(vﬁ©ûê*
addr
,

120 
ﬁd_vÆ
, 
√w_vÆ
)

122 
	`_Asm_mov_to_¨
(
_AREG_CCV
, 
ﬁd_vÆ
, 
_UP_MEM_FENCE
);

123  
	`_Asm_cmpxchg
(
_SZ_B
, 
_SEM_REL
, 
addr
,

124 
√w_vÆ
, 
_LDHINT_NONE
, 
_UP_MEM_FENCE
);

126 
	}
}

127 
	#AO_HAVE_ch¨_„tch_com∑ª_™d_sw≠_ªÀa£


	)

129 
AO_INLINE
 

130 
	$AO_sh‹t_„tch_com∑ª_™d_sw≠_acquúe
(vﬁ©ûê*
addr
,

131 
ﬁd_vÆ
,

132 
√w_vÆ
)

134 
	`_Asm_mov_to_¨
(
_AREG_CCV
, 
ﬁd_vÆ
, 
_DOWN_MEM_FENCE
);

135  
	`_Asm_cmpxchg
(
_SZ_B
, 
_SEM_ACQ
, 
addr
,

136 
√w_vÆ
, 
_LDHINT_NONE
, 
_DOWN_MEM_FENCE
);

138 
	}
}

139 
	#AO_HAVE_sh‹t_„tch_com∑ª_™d_sw≠_acquúe


	)

141 
AO_INLINE
 

142 
	$AO_sh‹t_„tch_com∑ª_™d_sw≠_ªÀa£
(vﬁ©ûê*
addr
,

143 
ﬁd_vÆ
,

144 
√w_vÆ
)

146 
	`_Asm_mov_to_¨
(
_AREG_CCV
, 
ﬁd_vÆ
, 
_UP_MEM_FENCE
);

147  
	`_Asm_cmpxchg
(
_SZ_B
, 
_SEM_REL
, 
addr
,

148 
√w_vÆ
, 
_LDHINT_NONE
, 
_UP_MEM_FENCE
);

150 
	}
}

151 
	#AO_HAVE_sh‹t_„tch_com∑ª_™d_sw≠_ªÀa£


	)

153 #i‚de‡
__LP64__


154 
	#AO_T_IS_INT


	)

	@/usr/include/atomic_ops/sysdeps/msftc/arm.h

23 #i‚de‡
AO_ASSUME_WINDOWS98


25 
	#AO_ASSUME_WINDOWS98


	)

27 
	~"comm⁄32_defs.h
"

31 
	~"../ã°_™d_£t_t_is_ao_t.h
"

38 
	~"../Æl_Æig√d_©omic_lﬂd_°‹e.h
"

41 #ifde‡
AO_UNIPROCESSOR


42 
AO_INLINE
 
	$AO_n›_fuŒ
()

44 
	`AO_compûî_b¨rõr
();

45 
	}
}

46 
	#AO_HAVE_n›_fuŒ


	)

51 #i‡
_M_ARM
 >= 6

63 
	#AO_T_IS_INT


	)

	@/usr/include/atomic_ops/sysdeps/msftc/x86.h

27 
	~"../Æl_Æig√d_©omic_lﬂd_°‹e.h
"

29 
	~"../ã°_™d_£t_t_is_ch¨.h
"

31 #i‡
deföed
(
AO_ASSUME_VISTA
Ë&& !deföed(
AO_ASSUME_WINDOWS98
)

32 
	#AO_ASSUME_WINDOWS98


	)

35 #i‚de‡
AO_USE_INTERLOCKED_INTRINSICS


37 
	#AO_USE_INTERLOCKED_INTRINSICS


	)

39 
	~"comm⁄32_defs.h
"

48 #i‡
deföed
(
AO_USE_PENTIUM4_INSTRS
)

50 
AO_INLINE
 

51 
	$AO_n›_fuŒ
()

53 
__asm
 { 
m„n˚
 }

54 
	}
}

55 
	#AO_HAVE_n›_fuŒ


	)

65 #i‚de‡
AO_NO_ASM_XADD


66 
AO_INLINE
 

67 
	$AO_ch¨_„tch_™d_add_fuŒ
(vﬁ©ûê*
p
, 
ö¸
)

69 
__asm


71 
mov
 
Æ
, 
ö¸


72 
mov
 
ebx
, 
p


73 
lock
 
xadd
 
byã
 
±r
 [
ebx
], 
Æ


76 
	}
}

77 
	#AO_HAVE_ch¨_„tch_™d_add_fuŒ


	)

79 
AO_INLINE
 

80 
	$AO_sh‹t_„tch_™d_add_fuŒ
(vﬁ©ûê*
p
, 
ö¸
)

82 
__asm


84 
mov
 
ax
, 
ö¸


85 
mov
 
ebx
, 
p


86 
lock
 
xadd
 
w‹d
 
±r
 [
ebx
], 
ax


89 
	}
}

90 
	#AO_HAVE_sh‹t_„tch_™d_add_fuŒ


	)

93 
AO_INLINE
 
AO_TS_VAL_t


94 
	$AO_ã°_™d_£t_fuŒ
(vﬁ©ûê
AO_TS_t
 *
addr
)

96 
__asm


98 
mov
 
óx
,0xff ;

99 
mov
 
ebx
,
addr
 ;

100 
xchg
 
byã
 
±r
 [
ebx
],
Æ
 ;

103 
	}
}

104 
	#AO_HAVE_ã°_™d_£t_fuŒ


	)

106 #ifde‡
_WIN64


107 #îr‹ 
wr⁄g
 
¨chôe˘uª


110 #ifde‡
AO_ASSUME_VISTA


111 
	~"../°™d¨d_ao_doubÀ_t.h
"

115 
	#AO_ACCESS_doubÀ_CHECK_ALIGNED


	)

116 
	~"../lﬂd°‹e/doubÀ_©omic_lﬂd_°‹e.h
"

120 #¥agm®
öåösic
 (
_I¡îlockedCom∑ªExch™ge64
)

123 
AO_INLINE
 

124 
	$AO_doubÀ_com∑ª_™d_sw≠_fuŒ
(vﬁ©ûê
AO_doubÀ_t
 *
addr
,

125 
AO_doubÀ_t
 
ﬁd_vÆ
, AO_doubÀ_à
√w_vÆ
)

127  (
doubÀ_±r_°‹age
)
	`_I¡îlockedCom∑ªExch™ge64
(

128 (
__öt64
 vﬁ©ûê*)
addr
,

129 
√w_vÆ
.
AO_whﬁe
 ,

130 
ﬁd_vÆ
.
AO_whﬁe
) == old_val.AO_whole;

131 
	}
}

132 
	#AO_HAVE_doubÀ_com∑ª_™d_sw≠_fuŒ


	)

135 
	#AO_T_IS_INT


	)

143 
	~"../‹dîed_ex˚±_wr.h
"

	@/usr/include/atomic_ops/sysdeps/msftc/x86_64.h

23 
	~"../Æl_Æig√d_©omic_lﬂd_°‹e.h
"

32 
	~"../‹dîed_ex˚±_wr.h
"

34 #ifde‡
AO_ASM_X64_AVAILABLE


35 
	~"../ã°_™d_£t_t_is_ch¨.h
"

37 
	~"../ã°_™d_£t_t_is_ao_t.h
"

40 
	~<wödows.h
>

45 
	~<öåö.h
>

47 #¥agm®
öåösic
 (
_I¡îlockedExch™geAdd
)

48 #¥agm®
öåösic
 (
_I¡îlockedCom∑ªExch™ge64
)

50 #i‚de‡
AO_PREFER_GENERALIZED


52 #¥agm®
öåösic
 (
_I¡îlockedIn¸emít64
)

53 #¥agm®
öåösic
 (
_I¡îlockedDe¸emít64
)

54 #¥agm®
öåösic
 (
_I¡îlockedExch™geAdd64
)

56 
AO_INLINE
 
AO_t


57 
	$AO_„tch_™d_add_fuŒ
 (vﬁ©ûê
AO_t
 *
p
, AO_à
ö¸
)

59  
	`_I¡îlockedExch™geAdd64
((
LONGLONG
 vﬁ©ûê*)
p
, (LONGLONG)
ö¸
);

60 
	}
}

61 
	#AO_HAVE_„tch_™d_add_fuŒ


	)

63 
AO_INLINE
 
AO_t


64 
	$AO_„tch_™d_add1_fuŒ
 (vﬁ©ûê
AO_t
 *
p
)

66  
	`_I¡îlockedIn¸emít64
((
LONGLONG
 vﬁ©ûê*)
p
) - 1;

67 
	}
}

68 
	#AO_HAVE_„tch_™d_add1_fuŒ


	)

70 
AO_INLINE
 
AO_t


71 
	$AO_„tch_™d_sub1_fuŒ
 (vﬁ©ûê
AO_t
 *
p
)

73  
	`_I¡îlockedDe¸emít64
((
LONGLONG
 vﬁ©ûê*)
p
) + 1;

74 
	}
}

75 
	#AO_HAVE_„tch_™d_sub1_fuŒ


	)

78 
AO_INLINE
 
AO_t


79 
	$AO_„tch_com∑ª_™d_sw≠_fuŒ
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd_vÆ
,

80 
AO_t
 
√w_vÆ
)

82  (
AO_t
)
	`_I¡îlockedCom∑ªExch™ge64
((
LONGLONG
 vﬁ©ûê*)
addr
,

83 (
LONGLONG
)
√w_vÆ
, (LONGLONG)
ﬁd_vÆ
);

84 
	}
}

85 
	#AO_HAVE_„tch_com∑ª_™d_sw≠_fuŒ


	)

87 
AO_INLINE
 

88 
	$AO_öt_„tch_™d_add_fuŒ
(vﬁ©ûê*
p
, 
ö¸
)

90  
	`_I¡îlockedExch™geAdd
((
LONG
 vﬁ©ûê*)
p
, 
ö¸
);

91 
	}
}

92 
	#AO_HAVE_öt_„tch_™d_add_fuŒ


	)

94 #ifde‡
AO_ASM_X64_AVAILABLE


96 
AO_INLINE
 

97 
	$AO_ch¨_„tch_™d_add_fuŒ
(vﬁ©ûê*
p
, 
ö¸
)

99 
__asm


101 
mov
 
Æ
, 
ö¸


102 
mov
 
rbx
, 
p


103 
lock
 
xadd
 
byã
 
±r
 [
rbx
], 
Æ


105 
	}
}

106 
	#AO_HAVE_ch¨_„tch_™d_add_fuŒ


	)

108 
AO_INLINE
 

109 
	$AO_sh‹t_„tch_™d_add_fuŒ
(vﬁ©ûê*
p
, 
ö¸
)

111 
__asm


113 
mov
 
ax
, 
ö¸


114 
mov
 
rbx
, 
p


115 
lock
 
xadd
 
w‹d
 
±r
 [
rbx
], 
ax


117 
	}
}

118 
	#AO_HAVE_sh‹t_„tch_™d_add_fuŒ


	)

123 
AO_INLINE
 

124 
	$AO_n›_fuŒ
()

127 
__asm
 { 
m„n˚
 }

128 
	}
}

129 
	#AO_HAVE_n›_fuŒ


	)

131 
AO_INLINE
 
AO_TS_VAL_t


132 
	$AO_ã°_™d_£t_fuŒ
(vﬁ©ûê
AO_TS_t
 *
addr
)

134 
__asm


136 
mov
 
øx
,
AO_TS_SET
 ;

137 
mov
 
rbx
,
addr
 ;

138 
xchg
 
byã
 
±r
 [
rbx
],
Æ
 ;

140 
	}
}

141 
	#AO_HAVE_ã°_™d_£t_fuŒ


	)

145 #ifde‡
AO_CMPXCHG16B_AVAILABLE


150 #i‡
_MSC_VER
 >= 1500

152 
	~"../°™d¨d_ao_doubÀ_t.h
"

154 #¥agm®
öåösic
 (
_I¡îlockedCom∑ªExch™ge128
)

156 
AO_INLINE
 

157 
	$AO_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ
(vﬁ©ûê
AO_doubÀ_t
 *
addr
,

158 
AO_t
 
ﬁd_vÆ1
, AO_à
ﬁd_vÆ2
,

159 
AO_t
 
√w_vÆ1
, AO_à
√w_vÆ2
)

161 
__öt64
 
com∑øndResu…
[2];

162 
com∑øndResu…
[0] = 
ﬁd_vÆ1
;

163 
com∑øndResu…
[1] = 
ﬁd_vÆ2
;

164  
	`_I¡îlockedCom∑ªExch™ge128
((vﬁ©ûê
__öt64
 *)
addr
,

165 
√w_vÆ2
 , 
√w_vÆ1
 , 
com∑øndResu…
);

166 
	}
}

167 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ


	)

169 #ñi‡
deföed
(
AO_ASM_X64_AVAILABLE
)

171 
	~"../°™d¨d_ao_doubÀ_t.h
"

175 
AO_INLINE
 

176 
	$AO_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ
(vﬁ©ûê
AO_doubÀ_t
 *
addr
,

177 
AO_t
 
ﬁd_vÆ1
, AO_à
ﬁd_vÆ2
,

178 
AO_t
 
√w_vÆ1
, AO_à
√w_vÆ2
)

180 
__asm


182 
mov
 
rdx
,
QWORD
 
PTR
 [
ﬁd_vÆ2
] ;

183 
mov
 
øx
,
QWORD
 
PTR
 [
ﬁd_vÆ1
] ;

184 
mov
 
rcx
,
QWORD
 
PTR
 [
√w_vÆ2
] ;

185 
mov
 
rbx
,
QWORD
 
PTR
 [
√w_vÆ1
] ;

186 
lock
 
cmpxchg16b
 [
addr
] ;

187 
£tz
 
øx
 ;

189 
	}
}

190 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ


	)

	@/usr/include/atomic_ops/sysdeps/sunc/sparc.h

23 
	~"../Æl_©omic_lﬂd_°‹e.h
"

26 
	~"../‹dîed_ex˚±_wr.h
"

29 
	~"../ã°_™d_£t_t_is_ch¨.h
"

31 
AO_TS_VAL_t


32 
AO_ã°_™d_£t_fuŒ
(vﬁ©ûê
AO_TS_t
 *
addr
);

34 
	#AO_HAVE_ã°_™d_£t_fuŒ


	)

	@/usr/include/atomic_ops/sysdeps/sunc/x86.h

21 
	~"../Æl_Æig√d_©omic_lﬂd_°‹e.h
"

23 
	~"../ã°_™d_£t_t_is_ch¨.h
"

25 #i‡!
deföed
(
AO_USE_PENTIUM4_INSTRS
Ë&& !deföed(
__i386
)

27 
	#AO_USE_PENTIUM4_INSTRS


	)

30 #i‡
deföed
(
AO_USE_PENTIUM4_INSTRS
)

31 
AO_INLINE
 

32 
	$AO_n›_fuŒ
()

34 
__asm__
 
	`__vﬁ©ûe__
 ("mfence" : : : "memory");

35 
	}
}

36 
	#AO_HAVE_n›_fuŒ


	)

48 #i‚de‡
AO_PREFER_GENERALIZED


49 
AO_INLINE
 
AO_t


50 
	$AO_„tch_™d_add_fuŒ
 (vﬁ©ûê
AO_t
 *
p
, AO_à
ö¸
)

52 
AO_t
 
ªsu…
;

54 
__asm__
 
	`__vﬁ©ûe__
 ("lock; xadd %0, %1"

55 : "Ù" (
ªsu…
), "+m" (*
p
)

56 : "0" (
ö¸
)

58  
ªsu…
;

59 
	}
}

60 
	#AO_HAVE_„tch_™d_add_fuŒ


	)

63 
AO_INLINE
 

64 
	$AO_ch¨_„tch_™d_add_fuŒ
 (vﬁ©ûê*
p
, 
ö¸
)

66 
ªsu…
;

68 
__asm__
 
	`__vﬁ©ûe__
 ("lock; xaddb %0, %1"

69 : "=q" (
ªsu…
), "+m" (*
p
)

70 : "0" (
ö¸
)

72  
ªsu…
;

73 
	}
}

74 
	#AO_HAVE_ch¨_„tch_™d_add_fuŒ


	)

76 
AO_INLINE
 

77 
	$AO_sh‹t_„tch_™d_add_fuŒ
 (vﬁ©ûê*
p
, 
ö¸
)

79 
ªsu…
;

81 
__asm__
 
	`__vﬁ©ûe__
 ("lock; xaddw %0, %1"

82 : "Ù" (
ªsu…
), "+m" (*
p
)

83 : "0" (
ö¸
)

85  
ªsu…
;

86 
	}
}

87 
	#AO_HAVE_sh‹t_„tch_™d_add_fuŒ


	)

89 #i‚de‡
AO_PREFER_GENERALIZED


91 
AO_INLINE
 

92 
	$AO_™d_fuŒ
 (vﬁ©ûê
AO_t
 *
p
, AO_à
vÆue
)

94 
__asm__
 
	`__vﬁ©ûe__
 ("lock;ánd %1, %0"

95 : "+m" (*
p
)

96 : "r" (
vÆue
)

98 
	}
}

99 
	#AO_HAVE_™d_fuŒ


	)

101 
AO_INLINE
 

102 
	$AO_‹_fuŒ
 (vﬁ©ûê
AO_t
 *
p
, AO_à
vÆue
)

104 
__asm__
 
	`__vﬁ©ûe__
 ("lock; or %1, %0"

105 : "+m" (*
p
)

106 : "r" (
vÆue
)

108 
	}
}

109 
	#AO_HAVE_‹_fuŒ


	)

111 
AO_INLINE
 

112 
	$AO_x‹_fuŒ
 (vﬁ©ûê
AO_t
 *
p
, AO_à
vÆue
)

114 
__asm__
 
	`__vﬁ©ûe__
 ("lock; xor %1, %0"

115 : "+m" (*
p
)

116 : "r" (
vÆue
)

118 
	}
}

119 
	#AO_HAVE_x‹_fuŒ


	)

122 
AO_INLINE
 
AO_TS_VAL_t


123 
	$AO_ã°_™d_£t_fuŒ
 (vﬁ©ûê
AO_TS_t
 *
addr
)

125 
AO_TS_t
 
ﬁdvÆ
;

127 
__asm__
 
	`__vﬁ©ûe__
 ("xchg %b0, %1"

128 : "=q" (
ﬁdvÆ
), "+m" (*
addr
)

131  (
AO_TS_VAL_t
)
ﬁdvÆ
;

132 
	}
}

133 
	#AO_HAVE_ã°_™d_£t_fuŒ


	)

135 #i‚de‡
AO_GENERALIZE_ASM_BOOL_CAS


137 
AO_INLINE
 

138 
	$AO_com∑ª_™d_sw≠_fuŒ
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd
, AO_à
√w_vÆ
)

140 
ªsu…
;

141 
__asm__
 
	`__vﬁ©ûe__
 ("lock; cmpxchg %2, %0; setz %1"

142 : "+m" (*
addr
), "˜" (
ªsu…
)

143 : "r" (
√w_vÆ
), "a" (
ﬁd
)

145  (Ë
ªsu…
;

146 
	}
}

147 
	#AO_HAVE_com∑ª_™d_sw≠_fuŒ


	)

150 
AO_INLINE
 
AO_t


151 
	$AO_„tch_com∑ª_™d_sw≠_fuŒ
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd_vÆ
,

152 
AO_t
 
√w_vÆ
)

154 
AO_t
 
„tched_vÆ
;

155 
__asm__
 
	`__vﬁ©ûe__
 ("lock; cmpxchg %2, %0"

156 : "+m" (*
addr
), "˜" (
„tched_vÆ
)

157 : "r" (
√w_vÆ
), "a" (
ﬁd_vÆ
)

159  
„tched_vÆ
;

160 
	}
}

161 
	#AO_HAVE_„tch_com∑ª_™d_sw≠_fuŒ


	)

163 #i‡
deföed
(
__i386
)

165 #i‚de‡
AO_NO_CMPXCHG8B


166 
	~"../°™d¨d_ao_doubÀ_t.h
"

170 
	#AO_ACCESS_doubÀ_CHECK_ALIGNED


	)

171 
	~"../lﬂd°‹e/doubÀ_©omic_lﬂd_°‹e.h
"

175 
AO_INLINE
 

176 
	$AO_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ
(vﬁ©ûê
AO_doubÀ_t
 *
addr
,

177 
AO_t
 
ﬁd_vÆ1
, AO_à
ﬁd_vÆ2
,

178 
AO_t
 
√w_vÆ1
, AO_à
√w_vÆ2
)

180 
ªsu…
;

182 
__asm__
 
	`__vﬁ©ûe__
 ("lock; cmpxchg8b %0; setz %1"

183 : "+m" (*
addr
), "˜" (
ªsu…
)

184 : "d" (
ﬁd_vÆ2
), "a" (
ﬁd_vÆ1
),

185 "c" (
√w_vÆ2
), "b" (
√w_vÆ1
)

187  (Ë
ªsu…
;

188 
	}
}

189 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ


	)

192 
	#AO_T_IS_INT


	)

196 
AO_INLINE
 

197 
	$AO_öt_„tch_™d_add_fuŒ
 (vﬁ©ûê*
p
, 
ö¸
)

199 
ªsu…
;

201 
__asm__
 
	`__vﬁ©ûe__
 ("lock; xaddl %0, %1"

202 : "Ù" (
ªsu…
), "+m" (*
p
)

203 : "0" (
ö¸
)

205  
ªsu…
;

206 
	}
}

207 
	#AO_HAVE_öt_„tch_™d_add_fuŒ


	)

209 #ifde‡
AO_CMPXCHG16B_AVAILABLE


210 
	~"../°™d¨d_ao_doubÀ_t.h
"

214 
AO_INLINE
 

215 
	$AO_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ
 (vﬁ©ûê
AO_doubÀ_t
 *
addr
,

216 
AO_t
 
ﬁd_vÆ1
, AO_à
ﬁd_vÆ2
,

217 
AO_t
 
√w_vÆ1
, AO_à
√w_vÆ2
)

219 
ªsu…
;

220 
__asm__
 
	`__vﬁ©ûe__
 ("lock; cmpxchg16b %0; setz %1"

221 : "+m" (*
addr
), "˜" (
ªsu…
)

222 : "d" (
ﬁd_vÆ2
), "a" (
ﬁd_vÆ1
),

223 "c" (
√w_vÆ2
), "b" (
√w_vÆ1
)

225  (Ë
ªsu…
;

226 
	}
}

227 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ


	)

238 
	~"../‹dîed_ex˚±_wr.h
"

	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	~<„©uªs.h
>

31 
	#MB_LEN_MAX
 16

	)

36 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

41 #i‚de‡
_LIMITS_H


42 
	#_LIMITS_H
 1

	)

44 
	~<bôs/w‹dsize.h
>

53 
	#CHAR_BIT
 8

	)

56 
	#SCHAR_MIN
 (-128)

	)

57 
	#SCHAR_MAX
 127

	)

60 
	#UCHAR_MAX
 255

	)

63 #ifde‡
__CHAR_UNSIGNED__


64 
	#CHAR_MIN
 0

	)

65 
	#CHAR_MAX
 
UCHAR_MAX


	)

67 
	#CHAR_MIN
 
SCHAR_MIN


	)

68 
	#CHAR_MAX
 
SCHAR_MAX


	)

72 
	#SHRT_MIN
 (-32768)

	)

73 
	#SHRT_MAX
 32767

	)

76 
	#USHRT_MAX
 65535

	)

79 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

80 
	#INT_MAX
 2147483647

	)

83 
	#UINT_MAX
 4294967295U

	)

86 #i‡
__WORDSIZE
 == 64

87 
	#LONG_MAX
 9223372036854775807L

	)

89 
	#LONG_MAX
 2147483647L

	)

91 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

94 #i‡
__WORDSIZE
 == 64

95 
	#ULONG_MAX
 18446744073709551615UL

	)

97 
	#ULONG_MAX
 4294967295UL

	)

100 #ifde‡
__USE_ISOC99


103 
	#LLONG_MAX
 9223372036854775807LL

	)

104 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

107 
	#ULLONG_MAX
 18446744073709551615ULL

	)

121 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


123 #ö˛ude_√xà<
limôs
.
h
>

129 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


130 #i‚de‡
LLONG_MIN


131 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

133 #i‚de‡
LLONG_MAX


134 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

136 #i‚de‡
ULLONG_MAX


137 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

141 #ifdef 
__USE_POSIX


143 
	~<bôs/posix1_lim.h
>

146 #ifdef 
__USE_POSIX2


147 
	~<bôs/posix2_lim.h
>

150 #ifdef 
__USE_XOPEN


151 
	~<bôs/x›í_lim.h
>

	@/usr/include/memory.h

22 #i‚def 
_MEMORY_H


23 
	#_MEMORY_H
 1

	)

25 
	~<„©uªs.h
>

28 #i‚def 
_STRING_H


29 
	~<°rög.h
>

	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<ídün.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

34 
	mPTHREAD_CREATE_JOINABLE
,

35 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

36 
	mPTHREAD_CREATE_DETACHED


37 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

44 
	mPTHREAD_MUTEX_TIMED_NP
,

45 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

46 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

47 
	mPTHREAD_MUTEX_ADAPTIVE_NP


48 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


50 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

51 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

52 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

53 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


55 #ifde‡
__USE_GNU


57 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


62 #ifde‡
__USE_XOPEN2K


66 
	mPTHREAD_MUTEX_STALLED
,

67 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_ROBUST
,

69 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


74 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


78 
	mPTHREAD_PRIO_NONE
,

79 
	mPTHREAD_PRIO_INHERIT
,

80 
	mPTHREAD_PRIO_PROTECT


86 #i‡
__PTHREAD_MUTEX_HAVE_ELISION
 == 1

87 
	#__PTHREAD_SPINS
 0, 0

	)

88 #ñi‡
__PTHREAD_MUTEX_HAVE_ELISION
 == 2

89 
	#__PTHREAD_SPINS
 { 0, 0 }

	)

91 
	#__PTHREAD_SPINS
 0

	)

94 #ifde‡
__PTHREAD_MUTEX_HAVE_PREV


95 
	#PTHREAD_MUTEX_INITIALIZER
 \

96 { { 0, 0, 0, 0, 0, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

97 #ifde‡
__USE_GNU


98 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

99 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

100 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

101 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

102 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

103 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

104 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

105 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

109 
	#PTHREAD_MUTEX_INITIALIZER
 \

110 { { 0, 0, 0, 0, 0, { 
__PTHREAD_SPINS
 } } }

	)

111 #ifde‡
__USE_GNU


112 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

113 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

114 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

115 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

116 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

117 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

124 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


127 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

128 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

129 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

130 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


136 #i‚de‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


137 #i‡
__WORDSIZE
 == 64

138 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

143 
	#PTHREAD_RWLOCK_INITIALIZER
 \

144 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

145 #ifde‡
__USE_GNU


146 #ifde‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


147 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

149 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

151 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


152 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

153 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

154 0, 0, 0, 0 } }

	)

156 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

157 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

158 0 } }

	)

168 
	mPTHREAD_INHERIT_SCHED
,

169 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

170 
	mPTHREAD_EXPLICIT_SCHED


171 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

178 
	mPTHREAD_SCOPE_SYSTEM
,

179 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

180 
	mPTHREAD_SCOPE_PROCESS


181 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

188 
	mPTHREAD_PROCESS_PRIVATE
,

189 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

190 
	mPTHREAD_PROCESS_SHARED


191 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

197 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

201 
	s_±hªad_˛ónup_buf„r


203 (*
	m__routöe
) (*);

204 *
	m__¨g
;

205 
	m__ˇn˚…y≥
;

206 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

212 
	mPTHREAD_CANCEL_ENABLE
,

213 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

214 
	mPTHREAD_CANCEL_DISABLE


215 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

219 
	mPTHREAD_CANCEL_DEFERRED
,

220 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

221 
	mPTHREAD_CANCEL_ASYNCHRONOUS


222 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

224 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

228 
	#PTHREAD_ONCE_INIT
 0

	)

231 #ifde‡
__USE_XOPEN2K


235 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

239 
__BEGIN_DECLS


244 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

245 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

246 *(*
__°¨t_routöe
) (*),

247 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
__n⁄nuŒ
 ((1, 3));

253 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

261 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

263 #ifde‡
__USE_GNU


266 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

274 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

275 c⁄° 
time•ec
 *
__ab°ime
);

282 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

286 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

289 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

290 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

298 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

301 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

302 
__THROW
 
	`__n⁄nuŒ
 ((1));

305 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

306 *
__dëach°©e
)

307 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

310 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

311 
__dëach°©e
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1));

316 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

317 
size_t
 *
__gu¨dsize
)

318 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

321 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

322 
size_t
 
__gu¨dsize
)

323 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

328 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

333 c⁄° 
sched_∑øm
 *
__ª°ri˘


334 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

337 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


338 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

339 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

342 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

343 
__THROW
 
	`__n⁄nuŒ
 ((1));

346 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


347 
__©å
, *
__ª°ri˘
 
__öhîô
)

348 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

351 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

352 
__öhîô
)

353 
__THROW
 
	`__n⁄nuŒ
 ((1));

357 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

358 *
__ª°ri˘
 
__sc›e
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

362 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

363 
__THROW
 
	`__n⁄nuŒ
 ((1));

366 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


367 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

374 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

375 *
__°ackaddr
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

379 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


380 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

381 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

387 
size_t
 
__°acksize
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1));

390 #ifde‡
__USE_XOPEN2K


392 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

393 **
__ª°ri˘
 
__°ackaddr
,

394 
size_t
 *
__ª°ri˘
 
__°acksize
)

395 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

400 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

401 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

404 #ifde‡
__USE_GNU


407 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

408 
size_t
 
__˝u£tsize
,

409 c⁄° 
˝u_£t_t
 *
__˝u£t
)

410 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

414 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

415 
size_t
 
__˝u£tsize
,

416 
˝u_£t_t
 *
__˝u£t
)

417 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

420 
	$±hªad_gë©å_deÁu…_≈
 (
±hªad_©å_t
 *
__©å
)

421 
__THROW
 
	`__n⁄nuŒ
 ((1));

425 
	$±hªad_£èâr_deÁu…_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
)

426 
__THROW
 
	`__n⁄nuŒ
 ((1));

431 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

441 c⁄° 
sched_∑øm
 *
__∑øm
)

442 
__THROW
 
	`__n⁄nuŒ
 ((3));

445 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

446 *
__ª°ri˘
 
__pﬁicy
,

447 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

448 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

451 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

452 
__THROW
;

455 #ifde‡
__USE_GNU


457 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

458 
size_t
 
__buÊí
)

459 
__THROW
 
	`__n⁄nuŒ
 ((2));

462 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

463 
__THROW
 
	`__n⁄nuŒ
 ((2));

467 #ifde‡
__USE_UNIX98


469 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

472 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

475 #ifde‡
__USE_GNU


480 
	$±hªad_yõld
 (Ë
__THROW
;

485 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

486 c⁄° 
˝u_£t_t
 *
__˝u£t
)

487 
__THROW
 
	`__n⁄nuŒ
 ((3));

490 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

491 
˝u_£t_t
 *
__˝u£t
)

492 
__THROW
 
	`__n⁄nuŒ
 ((3));

505 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

506 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

517 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

521 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

524 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

529 
	`±hªad_ã°ˇn˚l
 ();

538 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

539 
__mask_was_ßved
;

540 } 
__ˇn˚l_jmp_buf
[1];

541 *
__∑d
[4];

542 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

545 #i‚de‡
__˛ónup_f˘_©åibuã


546 
	#__˛ónup_f˘_©åibuã


	)

551 
	s__±hªad_˛ónup_‰ame


553 (*
__ˇn˚l_routöe
) (*);

554 *
__ˇn˚l_¨g
;

555 
__do_ô
;

556 
__ˇn˚l_ty≥
;

559 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


560 #ifde‡
__˝lu•lus


562 ˛as†
	c__±hªad_˛ónup_˛ass


564 (*
__ˇn˚l_routöe
) (*);

565 *
__ˇn˚l_¨g
;

566 
__do_ô
;

567 
__ˇn˚l_ty≥
;

569 
public
:

570 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

571 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

572 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

573 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

574 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

575 &
__ˇn˚l_ty≥
); 
	}
}

576 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

586 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

588 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

592 
	#±hªad_˛ónup_p›
(
execuã
) \

593 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

594 } 0)

	)

596 #ifde‡
__USE_GNU


600 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

602 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

603 
__˛‰ame
.
	`__de„r
 ()

	)

608 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

609 
__˛‰ame
.
	`__ª°‹e
 (); \

610 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

611 } 0)

	)

618 
__exã∫_ölöe
 

619 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

621 i‡(
__‰ame
->
__do_ô
)

622 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

623 
	}
}

632 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

634 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

635 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

636 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

637 .
__do_ô
 = 1 };

	)

641 
	#±hªad_˛ónup_p›
(
execuã
) \

642 
__˛‰ame
.
__do_ô
 = (
execuã
); \

643 } 0)

	)

645 #ifde‡
__USE_GNU


649 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

651 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

652 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

653 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

654 .
__do_ô
 = 1 }; \

655 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

656 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

661 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

662 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

663 
__˛‰ame
.
__do_ô
 = (
execuã
); \

664 } 0)

	)

675 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

677 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

678 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

679 *
__ˇn˚l_¨g
 = (
¨g
); \

680 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

681 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

682 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

684 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

685 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

689 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

690 dÿ{

	)

691 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

692 
__˛ónup_f˘_©åibuã
;

696 
	#±hªad_˛ónup_p›
(
execuã
) \

699 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

700 i‡(
execuã
) \

701 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

702 } 0)

	)

703 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

704 
__˛ónup_f˘_©åibuã
;

706 #ifde‡
__USE_GNU


710 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

712 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

713 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

714 *
__ˇn˚l_¨g
 = (
¨g
); \

715 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

716 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

717 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

719 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

720 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

724 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

725 dÿ{

	)

726 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

727 
__˛ónup_f˘_©åibuã
;

732 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

735 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

736 i‡(
execuã
) \

737 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

738 
	}
} 0)

	)

739 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

740 
__˛ónup_f˘_©åibuã
;

744 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

745 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

746 #i‚de‡
SHARED


747 
	`__©åibuã__
 ((
__wók__
))

753 
__jmp_buf_èg
;

754 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

760 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

761 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

762 
__THROW
 
	`__n⁄nuŒ
 ((1));

765 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

766 
__THROW
 
	`__n⁄nuŒ
 ((1));

769 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

770 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

773 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

774 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

776 #ifde‡
__USE_XOPEN2K


778 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

779 c⁄° 
time•ec
 *
__ª°ri˘


780 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

784 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

785 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

789 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

790 
__ª°ri˘
 
__muãx
,

791 *
__ª°ri˘
 
__¥io˚ûög
)

792 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

796 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

797 
__¥io˚ûög
,

798 *
__ª°ri˘
 
__ﬁd_˚ûög
)

799 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

802 #ifde‡
__USE_XOPEN2K8


804 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

805 
__THROW
 
	`__n⁄nuŒ
 ((1));

806 #ifde‡
__USE_GNU


807 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

808 
__THROW
 
	`__n⁄nuŒ
 ((1));

817 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1));

821 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

822 
__THROW
 
	`__n⁄nuŒ
 ((1));

825 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

826 
__ª°ri˘
 
__©å
,

827 *
__ª°ri˘
 
__psh¨ed
)

828 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

831 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

832 
__psh¨ed
)

833 
__THROW
 
	`__n⁄nuŒ
 ((1));

835 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


837 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


838 
__©å
, *
__ª°ri˘
 
__köd
)

839 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

844 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

845 
__THROW
 
	`__n⁄nuŒ
 ((1));

849 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

850 
__ª°ri˘
 
__©å
,

851 *
__ª°ri˘
 
__¥Ÿocﬁ
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__¥Ÿocﬁ
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

861 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

862 
__ª°ri˘
 
__©å
,

863 *
__ª°ri˘
 
__¥io˚ûög
)

864 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

867 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

868 
__¥io˚ûög
)

869 
__THROW
 
	`__n⁄nuŒ
 ((1));

871 #ifde‡
__USE_XOPEN2K


873 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

874 *
__robu°√ss
)

875 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

876 #ifde‡
__USE_GNU


877 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

878 *
__robu°√ss
)

879 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

883 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

884 
__robu°√ss
)

885 
__THROW
 
	`__n⁄nuŒ
 ((1));

886 #ifde‡
__USE_GNU


887 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

888 
__robu°√ss
)

889 
__THROW
 
	`__n⁄nuŒ
 ((1));

894 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


899 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

900 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


901 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

904 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

905 
__THROW
 
	`__n⁄nuŒ
 ((1));

908 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

909 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

912 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

913 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

915 #ifde‡
__USE_XOPEN2K


917 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

918 c⁄° 
time•ec
 *
__ª°ri˘


919 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

923 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

924 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

927 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

928 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

930 #ifde‡
__USE_XOPEN2K


932 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

933 c⁄° 
time•ec
 *
__ª°ri˘


934 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

938 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

939 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

945 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

946 
__THROW
 
	`__n⁄nuŒ
 ((1));

949 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

950 
__THROW
 
	`__n⁄nuŒ
 ((1));

953 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

954 
__ª°ri˘
 
__©å
,

955 *
__ª°ri˘
 
__psh¨ed
)

956 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

959 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

960 
__psh¨ed
)

961 
__THROW
 
	`__n⁄nuŒ
 ((1));

964 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

965 
__ª°ri˘
 
__©å
,

966 *
__ª°ri˘
 
__¥ef
)

967 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

970 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

971 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

979 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

980 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

981 
__THROW
 
	`__n⁄nuŒ
 ((1));

984 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

985 
__THROW
 
	`__n⁄nuŒ
 ((1));

988 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

989 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

992 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

993 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1000 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1001 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

1002 
	`__n⁄nuŒ
 ((1, 2));

1011 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1012 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1013 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1014 
	`__n⁄nuŒ
 ((1, 2, 3));

1019 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1020 
__THROW
 
	`__n⁄nuŒ
 ((1));

1023 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1024 
__THROW
 
	`__n⁄nuŒ
 ((1));

1027 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1028 
__ª°ri˘
 
__©å
,

1029 *
__ª°ri˘
 
__psh¨ed
)

1030 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1033 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1034 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 #ifde‡
__USE_XOPEN2K


1038 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1039 
__ª°ri˘
 
__©å
,

1040 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1041 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1044 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1045 
__˛ockid_t
 
__˛ock_id
)

1046 
__THROW
 
	`__n⁄nuŒ
 ((1));

1050 #ifde‡
__USE_XOPEN2K


1055 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1056 
__THROW
 
	`__n⁄nuŒ
 ((1));

1059 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1060 
__THROW
 
	`__n⁄nuŒ
 ((1));

1063 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1064 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1068 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1071 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1072 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1079 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1080 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1081 
__©å
, 
__cou¡
)

1082 
__THROW
 
	`__n⁄nuŒ
 ((1));

1085 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1086 
__THROW
 
	`__n⁄nuŒ
 ((1));

1089 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1090 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1094 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1095 
__THROW
 
	`__n⁄nuŒ
 ((1));

1098 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1099 
__THROW
 
	`__n⁄nuŒ
 ((1));

1102 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1103 
__ª°ri˘
 
__©å
,

1104 *
__ª°ri˘
 
__psh¨ed
)

1105 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1108 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1109 
__psh¨ed
)

1110 
__THROW
 
	`__n⁄nuŒ
 ((1));

1122 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1123 (*
__de°r_fun˘i⁄
) (*))

1124 
__THROW
 
	`__n⁄nuŒ
 ((1));

1127 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1130 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1133 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1134 c⁄° *
__poöãr
Ë
__THROW
 ;

1137 #ifde‡
__USE_XOPEN2K


1139 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1140 
__˛ockid_t
 *
__˛ock_id
)

1141 
__THROW
 
	`__n⁄nuŒ
 ((2));

1156 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1157 (*
__∑ª¡
) (),

1158 (*
__chûd
Ë()Ë
__THROW
;

1161 #ifde‡
__USE_EXTERN_INLINES


1163 
__exã∫_ölöe
 

1164 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1166  
__thªad1
 =
__thªad2
;

1167 
	}
}

1170 
	g__END_DECLS


	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

30 
	#__√ed_time_t


	)

31 
	#__√ed_time•ec


	)

32 
	~<time.h
>

34 #i‚de‡
__pid_t_deföed


35 
__pid_t
 
	tpid_t
;

36 
	#__pid_t_deföed


	)

41 
	~<bôs/sched.h
>

43 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

46 
__BEGIN_DECLS


49 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

50 
__THROW
;

53 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

56 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

57 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

60 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

63 
	$sched_yõld
 (Ë
__THROW
;

66 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

69 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

72 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

75 #ifde‡
__USE_GNU


77 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

78 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

79 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

80 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

81 
˝u£ç
)

	)

82 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

83 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

86 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

87 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

88 
˝u£ç
)

	)

89 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

90 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

93 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

94 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

97 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

98 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

99 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

101 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

103 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

105 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

107 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

110 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

111 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

112 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

116 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

117 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

120 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

121 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

124 
__END_DECLS


	@/usr/include/setjmp.h

22 #i‚def 
_SETJMP_H


23 
	#_SETJMP_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/sig£t.h
>

34 
	s__jmp_buf_èg


40 
__jmp_buf
 
	m__jmpbuf
;

41 
	m__mask_was_ßved
;

42 
__sig£t_t
 
	m__ßved_mask
;

46 
__BEGIN_NAMESPACE_STD


48 
__jmp_buf_èg
 
	tjmp_buf
[1];

52 
	$£tjmp
 (
jmp_buf
 
__ív
Ë
__THROWNL
;

54 
__END_NAMESPACE_STD


59 
	$__sig£tjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__ßvemask
Ë
__THROWNL
;

63 
	$_£tjmp
 (
__jmp_buf_èg
 
__ív
[1]Ë
__THROWNL
;

67 
	#£tjmp
(
ív
Ë
	`_£tjmp
 (ív)

	)

70 
__BEGIN_NAMESPACE_STD


74 
	$l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

75 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

77 
__END_NAMESPACE_STD


79 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


83 
	$_l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

84 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

88 #ifdef 
__USE_POSIX


92 
__jmp_buf_èg
 
	tsigjmp_buf
[1];

96 
	#sig£tjmp
(
ív
, 
ßvemask
Ë
	`__sig£tjmp
 (ív, savemask)

	)

102 
	$sigl⁄gjmp
 (
sigjmp_buf
 
__ív
, 
__vÆ
)

103 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

108 #i‡
__USE_FORTIFY_LEVEL
 > 0

109 
	~<bôs/£tjmp2.h
>

112 
__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


24 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


25 
	#_SIGNAL_H


	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	~<bôs/sig£t.h
>

36 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


37 #i‚de‡
__sig_©omic_t_deföed


38 
	#__sig_©omic_t_deföed


	)

39 
__BEGIN_NAMESPACE_STD


40 
__sig_©omic_t
 
	tsig_©omic_t
;

41 
	g__END_NAMESPACE_STD


43 #unde‡
__√ed_sig_©omic_t


46 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

47 #i‚de‡
__sig£t_t_deföed


48 
	#__sig£t_t_deföed


	)

49 
__sig£t_t
 
	tsig£t_t
;

51 #unde‡
__√ed_sig£t_t


54 #ifde‡
_SIGNAL_H


56 
	~<bôs/ty≥s.h
>

57 
	~<bôs/signum.h
>

59 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


60 #i‚de‡
__pid_t_deföed


61 
__pid_t
 
	tpid_t
;

62 
	#__pid_t_deföed


	)

64 #ifde‡
__USE_XOPEN


66 #i‚de‡
__uid_t_deföed


67 
__uid_t
 
	tuid_t
;

68 
	#__uid_t_deföed


	)

72 #ifde‡
__USE_POSIX199309


74 
	#__√ed_time•ec


	)

75 
	~<time.h
>

78 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


80 
	~<bôs/sigöfo.h
>

85 (*
	t__sigh™dÀr_t
) ();

90 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

91 
__THROW
;

92 #ifde‡
__USE_GNU


93 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

94 
__THROW
;

100 
__BEGIN_NAMESPACE_STD


101 #ifde‡
__USE_BSD


102 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

103 
__THROW
;

106 #ifde‡
__REDIRECT_NTH


107 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

108 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

109 
__sysv_sig«l
);

111 
	#sig«l
 
__sysv_sig«l


	)

114 
__END_NAMESPACE_STD


116 #ifde‡
__USE_XOPEN


119 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

120 
__THROW
;

126 #ifde‡
__USE_POSIX


127 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

130 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


134 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

137 
__BEGIN_NAMESPACE_STD


139 
	$øi£
 (
__sig
Ë
__THROW
;

140 
__END_NAMESPACE_STD


142 #ifde‡
__USE_SVID


144 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

145 
__THROW
;

146 
	$gsig«l
 (
__sig
Ë
__THROW
;

149 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


151 
	`psig«l
 (
__sig
, c⁄° *
__s
);

154 #ifde‡
__USE_XOPEN2K


156 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

167 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

169 #ifde‡
__USE_XOPEN


170 #ifde‡
__GNUC__


171 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

174 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

179 #ifde‡
__USE_BSD


186 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

189 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

192 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

195 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 #ifde‡
__USE_MISC


200 
	#NSIG
 
_NSIG


	)

203 #ifde‡
__USE_GNU


204 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

208 #ifde‡
__USE_BSD


209 
__sigh™dÀr_t
 
	tsig_t
;

212 #ifde‡
__USE_POSIX


215 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

218 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

221 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

224 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

227 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

228 
__THROW
 
	`__n⁄nuŒ
 ((1));

230 #ifde‡
__USE_GNU


232 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

235 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

236 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

239 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

240 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

245 
	~<bôs/siga˘i⁄.h
>

248 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

249 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

256 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

259 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

260 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

263 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

270 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

271 
	`__n⁄nuŒ
 ((1, 2));

273 #ifde‡
__USE_POSIX199309


278 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

279 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

286 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

287 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

288 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

289 
	`__n⁄nuŒ
 ((1));

293 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

294 
__THROW
;

299 #ifde‡
__USE_BSD


303 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

304 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

307 
	ssigvec


309 
__sigh™dÀr_t
 
sv_h™dÀr
;

310 
sv_mask
;

312 
sv_Êags
;

313 
	#sv_⁄°ack
 
sv_Êags


	)

317 
	#SV_ONSTACK
 (1 << 0)

	)

318 
	#SV_INTERRUPT
 (1 << 1)

	)

319 
	#SV_RESETHAND
 (1 << 2)

	)

327 
	$sigvec
 (
__sig
, c⁄° 
sigvec
 *
__vec
,

328 
sigvec
 *
__ovec
Ë
__THROW
;

332 
	~<bôs/sigc⁄ãxt.h
>

335 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

340 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


341 
	#__√ed_size_t


	)

342 
	~<°ddef.h
>

347 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

349 
	~<bôs/sig°ack.h
>

350 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


352 
	~<sys/uc⁄ãxt.h
>

358 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

359 
__THROW
 
__©åibuã_dïªˇãd__
;

363 
	$sigÆt°ack
 (c⁄° 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

364 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

368 #ifde‡
__USE_XOPEN_EXTENDED


372 
	$sighﬁd
 (
__sig
Ë
__THROW
;

375 
	$sigªl£
 (
__sig
Ë
__THROW
;

378 
	$sigign‹e
 (
__sig
Ë
__THROW
;

381 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

384 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


387 
	~<bôs/±hªadty≥s.h
>

388 
	~<bôs/sigthªad.h
>

395 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

397 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

401 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 
	#SIZE_MAX
 (4294967295U)

	)

267 #i‚de‡
WCHAR_MIN


269 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

270 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

274 
	#WINT_MIN
 (0u)

	)

275 
	#WINT_MAX
 (4294967295u)

	)

278 
	#INT8_C
(
c
Ë
	)
c

279 
	#INT16_C
(
c
Ë
	)
c

280 
	#INT32_C
(
c
Ë
	)
c

281 #i‡
__WORDSIZE
 == 64

282 
	#INT64_C
(
c
Ë¯## 
L


	)

284 
	#INT64_C
(
c
Ë¯## 
LL


	)

288 
	#UINT8_C
(
c
Ë
	)
c

289 
	#UINT16_C
(
c
Ë
	)
c

290 
	#UINT32_C
(
c
Ë¯## 
U


	)

291 #i‡
__WORDSIZE
 == 64

292 
	#UINT64_C
(
c
Ë¯## 
UL


	)

294 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

298 #i‡
__WORDSIZE
 == 64

299 
	#INTMAX_C
(
c
Ë¯## 
L


	)

300 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

302 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

303 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_BSD


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

868 
deföed
 
__USE_MISC
)

873 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

879 
	`p˛o£
 (
FILE
 *
__°ªam
);

883 #ifdef 
__USE_POSIX


885 *
	$˘îmid
 (*
__s
Ë
__THROW
;

889 #ifde‡
__USE_XOPEN


891 *
	`cu£rid
 (*
__s
);

895 #ifdef 
__USE_GNU


896 
ob°ack
;

899 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

900 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

901 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

902 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

903 c⁄° *
__ª°ri˘
 
__f‹m©
,

904 
_G_va_li°
 
__¨gs
)

905 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

909 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


913 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

917 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

920 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

923 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


927 
	#__√ed_gë›t


	)

928 
	~<gë›t.h
>

933 #ifde‡
__USE_EXTERN_INLINES


934 
	~<bôs/°dio.h
>

936 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


937 
	~<bôs/°dio2.h
>

939 #ifde‡
__LDBL_COMPAT


940 
	~<bôs/°dio-ldbl.h
>

943 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_BSD


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_BSD


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_BSD


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	`©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
) (const *, const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

759 #ifde‡
__USE_EXTERN_INLINES


760 
	~<bôs/°dlib-b£¨ch.h
>

765 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

766 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

767 #ifde‡
__USE_GNU


768 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

769 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

770 
	`__n⁄nuŒ
 ((1, 4));

775 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

777 
__END_NAMESPACE_STD


779 #ifde‡
__USE_ISOC99


780 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

781 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

785 
__BEGIN_NAMESPACE_STD


789 
div_t
 
	$div
 (
__numî
, 
__díom
)

790 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

791 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

792 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

793 
__END_NAMESPACE_STD


795 #ifde‡
__USE_ISOC99


796 
__BEGIN_NAMESPACE_C99


797 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

798 
__díom
)

799 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

800 
__END_NAMESPACE_C99


804 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

805 || 
deföed
 
__USE_SVID


812 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

813 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

818 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

819 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

824 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

825 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

828 #ifde‡
__USE_MISC


830 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

831 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

832 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

833 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

834 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

835 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

836 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

837 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

842 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

843 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

844 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

846 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

847 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

853 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

854 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

855 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

856 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

860 
__BEGIN_NAMESPACE_STD


863 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

866 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

867 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

870 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

874 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

875 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

877 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

878 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

879 
__THROW
;

880 
__END_NAMESPACE_STD


883 #ifde‡
__USE_SVID


888 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

892 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


899 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

900 *c⁄° *
__ª°ri˘
 
__tokís
,

901 **
__ª°ri˘
 
__vÆuï
)

902 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

906 #ifde‡
__USE_XOPEN


908 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

914 #ifde‡
__USE_XOPEN2KXSI


916 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

919 #ifde‡
__USE_XOPEN


924 
	$gø¡±
 (
__fd
Ë
__THROW
;

928 
	$u∆ock±
 (
__fd
Ë
__THROW
;

933 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

936 #ifde‡
__USE_GNU


940 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

941 
__THROW
 
	`__n⁄nuŒ
 ((2));

944 
	`gë±
 ();

947 #ifde‡
__USE_BSD


951 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

952 
__THROW
 
	`__n⁄nuŒ
 ((1));

955 
	~<bôs/°dlib-Êﬂt.h
>

958 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


959 
	~<bôs/°dlib.h
>

961 #ifde‡
__LDBL_COMPAT


962 
	~<bôs/°dlib-ldbl.h
>

966 #unde‡
__√ed_mÆloc_™d_ˇŒoc


968 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

39 #i‡
deföed
 
__˝lu•lus
 && (__˝lu•lu†>199711L || 
__GNUC_PREREQ
 (4, 4))

40 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

44 
__BEGIN_NAMESPACE_STD


46 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

47 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

50 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

51 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

52 
__END_NAMESPACE_STD


57 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


58 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

59 
__c
, 
size_t
 
__n
)

60 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

64 
__BEGIN_NAMESPACE_STD


66 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

69 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

70 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

73 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


76 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

77 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

79 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #ifde‡
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


85  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


91  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

94 
	}
}

96 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

99 
__END_NAMESPACE_STD


101 #ifde‡
__USE_GNU


104 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


105 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

106 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

107 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

108 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

110 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

111 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

115 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


116 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

117 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

118 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

119 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

121 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

122 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

127 
__BEGIN_NAMESPACE_STD


129 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

132 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

133 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

137 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

138 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

141 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

144 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

151 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

154 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

155 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

156 
__THROW
 
	`__n⁄nuŒ
 ((2));

157 
__END_NAMESPACE_STD


159 #ifde‡
__USE_XOPEN2K8


163 
	~<xloˇÀ.h
>

166 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

169 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

170 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

173 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

174 || 
deföed
 
__USE_XOPEN2K8


176 *
	$°rdup
 (c⁄° *
__s
)

177 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_XOPEN2K8


184 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

185 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

188 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


190 
	#°rdu∑
(
s
) \

191 (
__exãnsi⁄__
 \

193 c⁄° *
__ﬁd
 = (
s
); \

194 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

195 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

196 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

197 
	}
}))

	)

200 
	#°∫du∑
(
s
, 
n
) \

201 (
__exãnsi⁄__
 \

203 c⁄° *
__ﬁd
 = (
s
); \

204 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

205 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

206 
__√w
[
__Àn
] = '\0'; \

207 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

208 }))

	)

211 
	g__BEGIN_NAMESPACE_STD


213 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


216 *
°rchr
 (*
__s
, 
__c
)

217 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

218 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

219 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

221 #ifde‡
__OPTIMIZE__


222 
__exã∫_Æways_ölöe
 *

223 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


225  
__buûtö_°rchr
 (
__s
, 
__c
);

228 
__exã∫_Æways_ölöe
 const *

229 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


231  
__buûtö_°rchr
 (
__s
, 
__c
);

236 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

237 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

240 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


243 *
	`°ºchr
 (*
__s
, 
__c
)

244 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

245 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

246 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

248 #ifde‡
__OPTIMIZE__


249 
__exã∫_Æways_ölöe
 *

250 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


252  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

255 
__exã∫_Æways_ölöe
 const *

256 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


258  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

261 
	}
}

263 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

264 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

266 
__END_NAMESPACE_STD


268 #ifde‡
__USE_GNU


271 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


272 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

273 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

274 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

275 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

278 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

282 
__BEGIN_NAMESPACE_STD


285 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

286 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

289 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

290 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


295 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

296 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

297 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

298 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

300 #ifde‡
__OPTIMIZE__


301 
__exã∫_Æways_ölöe
 *

302 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


304  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

307 
__exã∫_Æways_ölöe
 const *

308 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


310  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

313 
	}
}

315 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

316 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


322 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

323 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

324 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 const *

335 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 c⁄° *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

370 c⁄° *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (c⁄° *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 const *

482 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (c⁄° *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 const *

510 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (c⁄° *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

530 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

534 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

535 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

538 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

539 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

542 #ifdef 
__USE_GNU


545 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

546 
__loˇÀ_t
 
__loc
)

547 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

549 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

550 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

554 #ifdef 
__USE_BSD


557 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

558 c⁄° *
__ª°ri˘
 
__dñim
)

559 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

562 #ifdef 
__USE_XOPEN2K8


564 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

567 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

568 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

574 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

575 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

578 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

582 #ifdef 
__USE_GNU


584 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

585 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

588 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 #i‚de‡
ba£«me


598 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


599 "C++" *
	$ba£«me
 (*
__fûíame
)

600 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

601 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

604 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

610 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

611 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

612 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


632 
	~<bôs/°rög.h
>

635 
	~<bôs/°rög2.h
>

638 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


640 
	~<bôs/°rög3.h
>

644 
__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_SVID


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

71 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

75 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

79 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

83 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

86 #ifde‡
__USE_XOPEN2K8


87 
	#_XOPEN_VERSION
 700

	)

88 #ñi‡
deföed
 
__USE_XOPEN2K


89 
	#_XOPEN_VERSION
 600

	)

90 #ñi‡
deföed
 
__USE_UNIX98


91 
	#_XOPEN_VERSION
 500

	)

93 
	#_XOPEN_VERSION
 4

	)

97 
	#_XOPEN_XCU_VERSION
 4

	)

100 
	#_XOPEN_XPG2
 1

	)

101 
	#_XOPEN_XPG3
 1

	)

102 
	#_XOPEN_XPG4
 1

	)

105 
	#_XOPEN_UNIX
 1

	)

108 
	#_XOPEN_CRYPT
 1

	)

112 
	#_XOPEN_ENH_I18N
 1

	)

115 
	#_XOPEN_LEGACY
 1

	)

202 
	~<bôs/posix_›t.h
>

205 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


206 
	~<bôs/ívú⁄míts.h
>

210 
	#STDIN_FILENO
 0

	)

211 
	#STDOUT_FILENO
 1

	)

212 
	#STDERR_FILENO
 2

	)

217 
	~<bôs/ty≥s.h
>

219 #i‚def 
__ssize_t_deföed


220 
__ssize_t
 
	tssize_t
;

221 
	#__ssize_t_deföed


	)

224 
	#__√ed_size_t


	)

225 
	#__√ed_NULL


	)

226 
	~<°ddef.h
>

228 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


231 #i‚de‡
__gid_t_deföed


232 
__gid_t
 
	tgid_t
;

233 
	#__gid_t_deföed


	)

236 #i‚de‡
__uid_t_deföed


237 
__uid_t
 
	tuid_t
;

238 
	#__uid_t_deföed


	)

241 #i‚de‡
__off_t_deföed


242 #i‚de‡
__USE_FILE_OFFSET64


243 
__off_t
 
	toff_t
;

245 
__off64_t
 
	toff_t
;

247 
	#__off_t_deföed


	)

249 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


250 
__off64_t
 
	toff64_t
;

251 
	#__off64_t_deföed


	)

254 #i‚de‡
__u£c⁄ds_t_deföed


255 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

256 
	#__u£c⁄ds_t_deföed


	)

259 #i‚de‡
__pid_t_deföed


260 
__pid_t
 
	tpid_t
;

261 
	#__pid_t_deföed


	)

265 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


266 #i‚de‡
__öçå_t_deföed


267 
__öçå_t
 
	töçå_t
;

268 
	#__öçå_t_deföed


	)

272 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


273 #i‚de‡
__sockÀn_t_deföed


274 
__sockÀn_t
 
	tsockÀn_t
;

275 
	#__sockÀn_t_deföed


	)

281 
	#R_OK
 4

	)

282 
	#W_OK
 2

	)

283 
	#X_OK
 1

	)

284 
	#F_OK
 0

	)

287 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_GNU


292 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

300 #ifde‡
__USE_ATFILE


304 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

310 #i‚def 
_STDIO_H


311 
	#SEEK_SET
 0

	)

312 
	#SEEK_CUR
 1

	)

313 
	#SEEK_END
 2

	)

314 #ifde‡
__USE_GNU


315 
	#SEEK_DATA
 3

	)

316 
	#SEEK_HOLE
 4

	)

320 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


322 
	#L_SET
 
SEEK_SET


	)

323 
	#L_INCR
 
SEEK_CUR


	)

324 
	#L_XTND
 
SEEK_END


	)

333 #i‚de‡
__USE_FILE_OFFSET64


334 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

336 #ifde‡
__REDIRECT_NTH


337 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

338 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

339 
l£ek64
);

341 
	#l£ek
 
l£ek64


	)

344 #ifde‡
__USE_LARGEFILE64


345 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

346 
__THROW
;

353 
	`˛o£
 (
__fd
);

360 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

366 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

368 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


369 #i‚de‡
__USE_FILE_OFFSET64


376 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

377 
__off_t
 
__off£t
Ë
__wur
;

384 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

385 
__off_t
 
__off£t
Ë
__wur
;

387 #ifde‡
__REDIRECT


388 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

389 
__off64_t
 
__off£t
),

390 
¥ód64
Ë
__wur
;

391 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

392 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

393 
pwrôe64
Ë
__wur
;

395 
	#¥ód
 
¥ód64


	)

396 
	#pwrôe
 
pwrôe64


	)

400 #ifde‡
__USE_LARGEFILE64


404 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

405 
__off64_t
 
__off£t
Ë
__wur
;

408 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

409 
__off64_t
 
__off£t
Ë
__wur
;

417 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

419 #ifde‡
__USE_GNU


422 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

432 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

444 
	`¶ìp
 (
__£c⁄ds
);

446 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

447 || 
deföed
 
__USE_BSD


452 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

453 
__THROW
;

460 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

469 
	`∑u£
 ();

473 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

474 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

476 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


478 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

483 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

484 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

488 #ifde‡
__USE_ATFILE


491 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

492 
__gid_t
 
__group
, 
__Êag
)

493 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

497 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

499 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


501 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

511 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

513 #ifdef 
__USE_GNU


517 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

520 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

521 || 
deföed
 
__USE_BSD


525 *
	$gëwd
 (*
__buf
)

526 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

531 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

534 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

536 #ifde‡
__USE_GNU


539 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

543 **
__ívú⁄
;

544 #ifde‡
__USE_GNU


545 **
ívú⁄
;

551 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

552 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

554 #ifde‡
__USE_XOPEN2K8


557 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

558 
__THROW
 
	`__n⁄nuŒ
 ((2));

563 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

564 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

568 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

569 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

573 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

578 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

585 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 #ifde‡
__USE_GNU


590 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

591 *c⁄° 
__ívp
[])

592 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

596 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


598 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

603 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

609 
	~<bôs/c⁄‚ame.h
>

612 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

613 
__THROW
 
	`__n⁄nuŒ
 ((1));

616 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

619 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

621 #ifdef 
__USE_POSIX2


623 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

628 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

631 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

637 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

638 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


639 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

646 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

648 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


660 
	$£çgΩ
 (Ë
__THROW
;

667 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

669 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


671 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

675 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

678 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

681 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

689 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

691 #ifdef 
__USE_GNU


693 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

700 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

702 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


705 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

708 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


710 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

717 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

719 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


722 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

725 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


727 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

730 #ifde‡
__USE_GNU


733 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

734 
__THROW
;

738 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

739 
__THROW
;

743 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

744 
__THROW
 
__wur
;

748 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

749 
__THROW
 
__wur
;

756 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

758 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

759 || 
deföed
 
__USE_BSD


764 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

770 *
	$ây«me
 (
__fd
Ë
__THROW
;

774 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

775 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

779 
	$ißây
 (
__fd
Ë
__THROW
;

781 #i‡
deföed
 
__USE_BSD
 \

782 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

785 
	$ây¶Ÿ
 (Ë
__THROW
;

790 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

793 #ifde‡
__USE_ATFILE


796 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

797 c⁄° *
__to
, 
__Êags
)

798 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

801 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


803 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

804 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

809 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

810 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

811 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

814 #ifde‡
__USE_ATFILE


816 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

817 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

820 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

821 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

822 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

826 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

828 #ifde‡
__USE_ATFILE


830 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

831 
__THROW
 
	`__n⁄nuŒ
 ((2));

835 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

839 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

842 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

849 *
	`gëlogö
 ();

850 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


857 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

860 #ifdef 
__USE_BSD


862 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

866 #ifdef 
__USE_POSIX2


870 
	#__√ed_gë›t


	)

871 
	~<gë›t.h
>

875 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


879 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

883 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

886 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

887 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

897 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

898 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

899 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

900 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

906 
	$vh™gup
 (Ë
__THROW
;

909 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

917 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

918 
size_t
 
__off£t
, 
__sˇÀ
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1));

925 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

929 *
	$gëu£rshñl
 (Ë
__THROW
;

930 
	$ídu£rshñl
 (Ë
__THROW
;

931 
	$£tu£rshñl
 (Ë
__THROW
;

937 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

941 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

944 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

948 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

956 
	`fsync
 (
__fd
);

959 #ifde‡
__USE_GNU


962 
	$syncfs
 (
__fd
Ë
__THROW
;

966 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


969 
	`gëho°id
 ();

972 
	$sync
 (Ë
__THROW
;

975 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


978 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

983 
	$gëdèbÀsize
 (Ë
__THROW
;

989 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


992 #i‚de‡
__USE_FILE_OFFSET64


993 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

994 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

996 #ifde‡
__REDIRECT_NTH


997 
	`__REDIRECT_NTH
 (
åunˇã
,

998 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

999 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1001 
	#åunˇã
 
åunˇã64


	)

1004 #ifde‡
__USE_LARGEFILE64


1005 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1006 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1011 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_POSIX199309
 \

1012 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1015 #i‚de‡
__USE_FILE_OFFSET64


1016 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1018 #ifde‡
__REDIRECT_NTH


1019 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1020 
·runˇã64
Ë
__wur
;

1022 
	#·runˇã
 
·runˇã64


	)

1025 #ifde‡
__USE_LARGEFILE64


1026 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1032 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1033 || 
deföed
 
__USE_MISC


1037 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1043 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1047 #ifde‡
__USE_MISC


1058 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1063 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1075 
	#F_ULOCK
 0

	)

1076 
	#F_LOCK
 1

	)

1077 
	#F_TLOCK
 2

	)

1078 
	#F_TEST
 3

	)

1080 #i‚de‡
__USE_FILE_OFFSET64


1081 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1083 #ifde‡
__REDIRECT


1084 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1085 
lockf64
Ë
__wur
;

1087 
	#lockf
 
lockf64


	)

1090 #ifde‡
__USE_LARGEFILE64


1091 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1096 #ifde‡
__USE_GNU


1101 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1102 (
__exãnsi⁄__
 \

1103 ({ 
__ªsu…
; \

1104 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1105 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1106 
__ªsu…
; 
	}
}))

	)

1109 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1112 
fd©async
 (
__fûdes
);

1118 #ifdef 
__USE_XOPEN


1120 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1121 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1125 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1126 
__THROW
 
	`__n⁄nuŒ
 ((1));

1133 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1134 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1140 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1142 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1147 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1148 
	~<bôs/uni°d.h
>

1151 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/atomic_ops/ao_version.h

23 #i‚de‡
AO_ATOMIC_OPS_H


24 #îr‹ 
This
 
fûe
 
should
 
nŸ
 
be
 
ö˛uded
 
dúe˘ly
.

35 
	#AO_VERSION_MAJOR
 7

	)

36 
	#AO_VERSION_MINOR
 4

	)

37 
	#AO_VERSION_MICRO
 0

	)

	@/usr/include/atomic_ops/sysdeps/ao_t_is_int.h

26 #i‡
deföed
(
AO_HAVE_lﬂd
Ë&& !deföed(
AO_HAVE_öt_lﬂd
)

27 
	#AO_öt_lﬂd
(
addr
) \

28 ()
	`AO_lﬂd
((c⁄° vﬁ©ûê
AO_t
 *)(
addr
))

	)

29 
	#AO_HAVE_öt_lﬂd


	)

32 #i‡
deföed
(
AO_HAVE_°‹e
Ë&& !deföed(
AO_HAVE_öt_°‹e
)

33 
	#AO_öt_°‹e
(
addr
, 
vÆ
) \

34 
	`AO_°‹e
((vﬁ©ûê
AO_t
 *)(
addr
), (AO_t)(
vÆ
))

	)

35 
	#AO_HAVE_öt_°‹e


	)

38 #i‡
deföed
(
AO_HAVE_„tch_™d_add
) \

39 && !
	$deföed
(
AO_HAVE_öt_„tch_™d_add
)

40 
	#AO_öt_„tch_™d_add
(
addr
, 
ö¸
) \

41 ()
	`AO_„tch_™d_add
((vﬁ©ûê
AO_t
 *)(
addr
), \

42 (
AO_t
)(
ö¸
))

	)

43 
	#AO_HAVE_öt_„tch_™d_add


	)

46 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add1
) \

47 && !
	$deföed
(
AO_HAVE_öt_„tch_™d_add1
)

48 
	#AO_öt_„tch_™d_add1
(
addr
) \

49 ()
	`AO_„tch_™d_add1
((vﬁ©ûê
AO_t
 *)(
addr
))

	)

50 
	#AO_HAVE_öt_„tch_™d_add1


	)

53 #i‡
	`deföed
(
AO_HAVE_„tch_™d_sub1
) \

54 && !
	$deföed
(
AO_HAVE_öt_„tch_™d_sub1
)

55 
	#AO_öt_„tch_™d_sub1
(
addr
) \

56 ()
	`AO_„tch_™d_sub1
((vﬁ©ûê
AO_t
 *)(
addr
))

	)

57 
	#AO_HAVE_öt_„tch_™d_sub1


	)

60 #i‡
	`deföed
(
AO_HAVE_™d
Ë&& !deföed(
AO_HAVE_öt_™d
)

61 
	#AO_öt_™d
(
addr
, 
vÆ
) \

62 
	`AO_™d
((vﬁ©ûê
AO_t
 *)(
addr
), (AO_t)(
vÆ
))

	)

63 
	#AO_HAVE_öt_™d


	)

66 #i‡
	`deföed
(
AO_HAVE_‹
Ë&& !deföed(
AO_HAVE_öt_‹
)

67 
	#AO_öt_‹
(
addr
, 
vÆ
) \

68 
	`AO_‹
((vﬁ©ûê
AO_t
 *)(
addr
), (AO_t)(
vÆ
))

	)

69 
	#AO_HAVE_öt_‹


	)

72 #i‡
	`deföed
(
AO_HAVE_x‹
Ë&& !deföed(
AO_HAVE_öt_x‹
)

73 
	#AO_öt_x‹
(
addr
, 
vÆ
) \

74 
	`AO_x‹
((vﬁ©ûê
AO_t
 *)(
addr
), (AO_t)(
vÆ
))

	)

75 
	#AO_HAVE_öt_x‹


	)

78 #i‡
	`deföed
(
AO_HAVE_„tch_com∑ª_™d_sw≠
) \

79 && !
	$deföed
(
AO_HAVE_öt_„tch_com∑ª_™d_sw≠
)

80 
	#AO_öt_„tch_com∑ª_™d_sw≠
(
addr
, 
ﬁd
, 
√w_vÆ
) \

81 ()
	`AO_„tch_com∑ª_™d_sw≠
((vﬁ©ûê
AO_t
 *)(
addr
), \

82 (
AO_t
)(
ﬁd
), (AO_t)(
√w_vÆ
))

	)

83 
	#AO_HAVE_öt_„tch_com∑ª_™d_sw≠


	)

86 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠
) \

87 && !
	$deföed
(
AO_HAVE_öt_com∑ª_™d_sw≠
)

88 
	#AO_öt_com∑ª_™d_sw≠
(
addr
, 
ﬁd
, 
√w_vÆ
) \

89 
	`AO_com∑ª_™d_sw≠
((vﬁ©ûê
AO_t
 *)(
addr
), \

90 (
AO_t
)(
ﬁd
), (AO_t)(
√w_vÆ
))

	)

91 
	#AO_HAVE_öt_com∑ª_™d_sw≠


	)

118 #i‡
	`deföed
(
AO_HAVE_lﬂd_fuŒ
Ë&& !deföed(
AO_HAVE_öt_lﬂd_fuŒ
)

119 
	#AO_öt_lﬂd_fuŒ
(
addr
) \

120 ()
	`AO_lﬂd_fuŒ
((c⁄° vﬁ©ûê
AO_t
 *)(
addr
))

	)

121 
	#AO_HAVE_öt_lﬂd_fuŒ


	)

124 #i‡
	`deföed
(
AO_HAVE_°‹e_fuŒ
Ë&& !deföed(
AO_HAVE_öt_°‹e_fuŒ
)

125 
	#AO_öt_°‹e_fuŒ
(
addr
, 
vÆ
) \

126 
	`AO_°‹e_fuŒ
((vﬁ©ûê
AO_t
 *)(
addr
), (AO_t)(
vÆ
))

	)

127 
	#AO_HAVE_öt_°‹e_fuŒ


	)

130 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_fuŒ
) \

131 && !
	$deföed
(
AO_HAVE_öt_„tch_™d_add_fuŒ
)

132 
	#AO_öt_„tch_™d_add_fuŒ
(
addr
, 
ö¸
) \

133 ()
	`AO_„tch_™d_add_fuŒ
((vﬁ©ûê
AO_t
 *)(
addr
), \

134 (
AO_t
)(
ö¸
))

	)

135 
	#AO_HAVE_öt_„tch_™d_add_fuŒ


	)

138 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add1_fuŒ
) \

139 && !
	$deföed
(
AO_HAVE_öt_„tch_™d_add1_fuŒ
)

140 
	#AO_öt_„tch_™d_add1_fuŒ
(
addr
) \

141 ()
	`AO_„tch_™d_add1_fuŒ
((vﬁ©ûê
AO_t
 *)(
addr
))

	)

142 
	#AO_HAVE_öt_„tch_™d_add1_fuŒ


	)

145 #i‡
	`deföed
(
AO_HAVE_„tch_™d_sub1_fuŒ
) \

146 && !
	$deföed
(
AO_HAVE_öt_„tch_™d_sub1_fuŒ
)

147 
	#AO_öt_„tch_™d_sub1_fuŒ
(
addr
) \

148 ()
	`AO_„tch_™d_sub1_fuŒ
((vﬁ©ûê
AO_t
 *)(
addr
))

	)

149 
	#AO_HAVE_öt_„tch_™d_sub1_fuŒ


	)

152 #i‡
	`deföed
(
AO_HAVE_™d_fuŒ
Ë&& !deföed(
AO_HAVE_öt_™d_fuŒ
)

153 
	#AO_öt_™d_fuŒ
(
addr
, 
vÆ
) \

154 
	`AO_™d_fuŒ
((vﬁ©ûê
AO_t
 *)(
addr
), (AO_t)(
vÆ
))

	)

155 
	#AO_HAVE_öt_™d_fuŒ


	)

158 #i‡
	`deföed
(
AO_HAVE_‹_fuŒ
Ë&& !deföed(
AO_HAVE_öt_‹_fuŒ
)

159 
	#AO_öt_‹_fuŒ
(
addr
, 
vÆ
) \

160 
	`AO_‹_fuŒ
((vﬁ©ûê
AO_t
 *)(
addr
), (AO_t)(
vÆ
))

	)

161 
	#AO_HAVE_öt_‹_fuŒ


	)

164 #i‡
	`deföed
(
AO_HAVE_x‹_fuŒ
Ë&& !deföed(
AO_HAVE_öt_x‹_fuŒ
)

165 
	#AO_öt_x‹_fuŒ
(
addr
, 
vÆ
) \

166 
	`AO_x‹_fuŒ
((vﬁ©ûê
AO_t
 *)(
addr
), (AO_t)(
vÆ
))

	)

167 
	#AO_HAVE_öt_x‹_fuŒ


	)

170 #i‡
	`deföed
(
AO_HAVE_„tch_com∑ª_™d_sw≠_fuŒ
) \

171 && !
	$deföed
(
AO_HAVE_öt_„tch_com∑ª_™d_sw≠_fuŒ
)

172 
	#AO_öt_„tch_com∑ª_™d_sw≠_fuŒ
(
addr
, 
ﬁd
, 
√w_vÆ
) \

173 ()
	`AO_„tch_com∑ª_™d_sw≠_fuŒ
((vﬁ©ûê
AO_t
 *)(
addr
), \

174 (
AO_t
)(
ﬁd
), (AO_t)(
√w_vÆ
))

	)

175 
	#AO_HAVE_öt_„tch_com∑ª_™d_sw≠_fuŒ


	)

178 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_fuŒ
) \

179 && !
	$deföed
(
AO_HAVE_öt_com∑ª_™d_sw≠_fuŒ
)

180 
	#AO_öt_com∑ª_™d_sw≠_fuŒ
(
addr
, 
ﬁd
, 
√w_vÆ
) \

181 
	`AO_com∑ª_™d_sw≠_fuŒ
((vﬁ©ûê
AO_t
 *)(
addr
), \

182 (
AO_t
)(
ﬁd
), (AO_t)(
√w_vÆ
))

	)

183 
	#AO_HAVE_öt_com∑ª_™d_sw≠_fuŒ


	)

210 #i‡
	`deföed
(
AO_HAVE_lﬂd_acquúe
Ë&& !deföed(
AO_HAVE_öt_lﬂd_acquúe
)

211 
	#AO_öt_lﬂd_acquúe
(
addr
) \

212 ()
	`AO_lﬂd_acquúe
((c⁄° vﬁ©ûê
AO_t
 *)(
addr
))

	)

213 
	#AO_HAVE_öt_lﬂd_acquúe


	)

216 #i‡
	`deföed
(
AO_HAVE_°‹e_acquúe
Ë&& !deföed(
AO_HAVE_öt_°‹e_acquúe
)

217 
	#AO_öt_°‹e_acquúe
(
addr
, 
vÆ
) \

218 
	`AO_°‹e_acquúe
((vﬁ©ûê
AO_t
 *)(
addr
), (AO_t)(
vÆ
))

	)

219 
	#AO_HAVE_öt_°‹e_acquúe


	)

222 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_acquúe
) \

223 && !
	$deföed
(
AO_HAVE_öt_„tch_™d_add_acquúe
)

224 
	#AO_öt_„tch_™d_add_acquúe
(
addr
, 
ö¸
) \

225 ()
	`AO_„tch_™d_add_acquúe
((vﬁ©ûê
AO_t
 *)(
addr
), \

226 (
AO_t
)(
ö¸
))

	)

227 
	#AO_HAVE_öt_„tch_™d_add_acquúe


	)

230 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add1_acquúe
) \

231 && !
	$deföed
(
AO_HAVE_öt_„tch_™d_add1_acquúe
)

232 
	#AO_öt_„tch_™d_add1_acquúe
(
addr
) \

233 ()
	`AO_„tch_™d_add1_acquúe
((vﬁ©ûê
AO_t
 *)(
addr
))

	)

234 
	#AO_HAVE_öt_„tch_™d_add1_acquúe


	)

237 #i‡
	`deföed
(
AO_HAVE_„tch_™d_sub1_acquúe
) \

238 && !
	$deföed
(
AO_HAVE_öt_„tch_™d_sub1_acquúe
)

239 
	#AO_öt_„tch_™d_sub1_acquúe
(
addr
) \

240 ()
	`AO_„tch_™d_sub1_acquúe
((vﬁ©ûê
AO_t
 *)(
addr
))

	)

241 
	#AO_HAVE_öt_„tch_™d_sub1_acquúe


	)

244 #i‡
	`deföed
(
AO_HAVE_™d_acquúe
Ë&& !deföed(
AO_HAVE_öt_™d_acquúe
)

245 
	#AO_öt_™d_acquúe
(
addr
, 
vÆ
) \

246 
	`AO_™d_acquúe
((vﬁ©ûê
AO_t
 *)(
addr
), (AO_t)(
vÆ
))

	)

247 
	#AO_HAVE_öt_™d_acquúe


	)

250 #i‡
	`deföed
(
AO_HAVE_‹_acquúe
Ë&& !deföed(
AO_HAVE_öt_‹_acquúe
)

251 
	#AO_öt_‹_acquúe
(
addr
, 
vÆ
) \

252 
	`AO_‹_acquúe
((vﬁ©ûê
AO_t
 *)(
addr
), (AO_t)(
vÆ
))

	)

253 
	#AO_HAVE_öt_‹_acquúe


	)

256 #i‡
	`deföed
(
AO_HAVE_x‹_acquúe
Ë&& !deföed(
AO_HAVE_öt_x‹_acquúe
)

257 
	#AO_öt_x‹_acquúe
(
addr
, 
vÆ
) \

258 
	`AO_x‹_acquúe
((vﬁ©ûê
AO_t
 *)(
addr
), (AO_t)(
vÆ
))

	)

259 
	#AO_HAVE_öt_x‹_acquúe


	)

262 #i‡
	`deföed
(
AO_HAVE_„tch_com∑ª_™d_sw≠_acquúe
) \

263 && !
	$deföed
(
AO_HAVE_öt_„tch_com∑ª_™d_sw≠_acquúe
)

264 
	#AO_öt_„tch_com∑ª_™d_sw≠_acquúe
(
addr
, 
ﬁd
, 
√w_vÆ
) \

265 ()
	`AO_„tch_com∑ª_™d_sw≠_acquúe
((vﬁ©ûê
AO_t
 *)(
addr
), \

266 (
AO_t
)(
ﬁd
), (AO_t)(
√w_vÆ
))

	)

267 
	#AO_HAVE_öt_„tch_com∑ª_™d_sw≠_acquúe


	)

270 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_acquúe
) \

271 && !
	$deföed
(
AO_HAVE_öt_com∑ª_™d_sw≠_acquúe
)

272 
	#AO_öt_com∑ª_™d_sw≠_acquúe
(
addr
, 
ﬁd
, 
√w_vÆ
) \

273 
	`AO_com∑ª_™d_sw≠_acquúe
((vﬁ©ûê
AO_t
 *)(
addr
), \

274 (
AO_t
)(
ﬁd
), (AO_t)(
√w_vÆ
))

	)

275 
	#AO_HAVE_öt_com∑ª_™d_sw≠_acquúe


	)

302 #i‡
	`deföed
(
AO_HAVE_lﬂd_ªÀa£
Ë&& !deföed(
AO_HAVE_öt_lﬂd_ªÀa£
)

303 
	#AO_öt_lﬂd_ªÀa£
(
addr
) \

304 ()
	`AO_lﬂd_ªÀa£
((c⁄° vﬁ©ûê
AO_t
 *)(
addr
))

	)

305 
	#AO_HAVE_öt_lﬂd_ªÀa£


	)

308 #i‡
	`deföed
(
AO_HAVE_°‹e_ªÀa£
Ë&& !deföed(
AO_HAVE_öt_°‹e_ªÀa£
)

309 
	#AO_öt_°‹e_ªÀa£
(
addr
, 
vÆ
) \

310 
	`AO_°‹e_ªÀa£
((vﬁ©ûê
AO_t
 *)(
addr
), (AO_t)(
vÆ
))

	)

311 
	#AO_HAVE_öt_°‹e_ªÀa£


	)

314 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_ªÀa£
) \

315 && !
	$deföed
(
AO_HAVE_öt_„tch_™d_add_ªÀa£
)

316 
	#AO_öt_„tch_™d_add_ªÀa£
(
addr
, 
ö¸
) \

317 ()
	`AO_„tch_™d_add_ªÀa£
((vﬁ©ûê
AO_t
 *)(
addr
), \

318 (
AO_t
)(
ö¸
))

	)

319 
	#AO_HAVE_öt_„tch_™d_add_ªÀa£


	)

322 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add1_ªÀa£
) \

323 && !
	$deföed
(
AO_HAVE_öt_„tch_™d_add1_ªÀa£
)

324 
	#AO_öt_„tch_™d_add1_ªÀa£
(
addr
) \

325 ()
	`AO_„tch_™d_add1_ªÀa£
((vﬁ©ûê
AO_t
 *)(
addr
))

	)

326 
	#AO_HAVE_öt_„tch_™d_add1_ªÀa£


	)

329 #i‡
	`deföed
(
AO_HAVE_„tch_™d_sub1_ªÀa£
) \

330 && !
	$deföed
(
AO_HAVE_öt_„tch_™d_sub1_ªÀa£
)

331 
	#AO_öt_„tch_™d_sub1_ªÀa£
(
addr
) \

332 ()
	`AO_„tch_™d_sub1_ªÀa£
((vﬁ©ûê
AO_t
 *)(
addr
))

	)

333 
	#AO_HAVE_öt_„tch_™d_sub1_ªÀa£


	)

336 #i‡
	`deföed
(
AO_HAVE_™d_ªÀa£
Ë&& !deföed(
AO_HAVE_öt_™d_ªÀa£
)

337 
	#AO_öt_™d_ªÀa£
(
addr
, 
vÆ
) \

338 
	`AO_™d_ªÀa£
((vﬁ©ûê
AO_t
 *)(
addr
), (AO_t)(
vÆ
))

	)

339 
	#AO_HAVE_öt_™d_ªÀa£


	)

342 #i‡
	`deföed
(
AO_HAVE_‹_ªÀa£
Ë&& !deföed(
AO_HAVE_öt_‹_ªÀa£
)

343 
	#AO_öt_‹_ªÀa£
(
addr
, 
vÆ
) \

344 
	`AO_‹_ªÀa£
((vﬁ©ûê
AO_t
 *)(
addr
), (AO_t)(
vÆ
))

	)

345 
	#AO_HAVE_öt_‹_ªÀa£


	)

348 #i‡
	`deföed
(
AO_HAVE_x‹_ªÀa£
Ë&& !deföed(
AO_HAVE_öt_x‹_ªÀa£
)

349 
	#AO_öt_x‹_ªÀa£
(
addr
, 
vÆ
) \

350 
	`AO_x‹_ªÀa£
((vﬁ©ûê
AO_t
 *)(
addr
), (AO_t)(
vÆ
))

	)

351 
	#AO_HAVE_öt_x‹_ªÀa£


	)

354 #i‡
	`deföed
(
AO_HAVE_„tch_com∑ª_™d_sw≠_ªÀa£
) \

355 && !
	$deföed
(
AO_HAVE_öt_„tch_com∑ª_™d_sw≠_ªÀa£
)

356 
	#AO_öt_„tch_com∑ª_™d_sw≠_ªÀa£
(
addr
, 
ﬁd
, 
√w_vÆ
) \

357 ()
	`AO_„tch_com∑ª_™d_sw≠_ªÀa£
((vﬁ©ûê
AO_t
 *)(
addr
), \

358 (
AO_t
)(
ﬁd
), (AO_t)(
√w_vÆ
))

	)

359 
	#AO_HAVE_öt_„tch_com∑ª_™d_sw≠_ªÀa£


	)

362 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_ªÀa£
) \

363 && !
	$deföed
(
AO_HAVE_öt_com∑ª_™d_sw≠_ªÀa£
)

364 
	#AO_öt_com∑ª_™d_sw≠_ªÀa£
(
addr
, 
ﬁd
, 
√w_vÆ
) \

365 
	`AO_com∑ª_™d_sw≠_ªÀa£
((vﬁ©ûê
AO_t
 *)(
addr
), \

366 (
AO_t
)(
ﬁd
), (AO_t)(
√w_vÆ
))

	)

367 
	#AO_HAVE_öt_com∑ª_™d_sw≠_ªÀa£


	)

394 #i‡
	`deföed
(
AO_HAVE_lﬂd_wrôe
Ë&& !deföed(
AO_HAVE_öt_lﬂd_wrôe
)

395 
	#AO_öt_lﬂd_wrôe
(
addr
) \

396 ()
	`AO_lﬂd_wrôe
((c⁄° vﬁ©ûê
AO_t
 *)(
addr
))

	)

397 
	#AO_HAVE_öt_lﬂd_wrôe


	)

400 #i‡
	`deföed
(
AO_HAVE_°‹e_wrôe
Ë&& !deföed(
AO_HAVE_öt_°‹e_wrôe
)

401 
	#AO_öt_°‹e_wrôe
(
addr
, 
vÆ
) \

402 
	`AO_°‹e_wrôe
((vﬁ©ûê
AO_t
 *)(
addr
), (AO_t)(
vÆ
))

	)

403 
	#AO_HAVE_öt_°‹e_wrôe


	)

406 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_wrôe
) \

407 && !
	$deföed
(
AO_HAVE_öt_„tch_™d_add_wrôe
)

408 
	#AO_öt_„tch_™d_add_wrôe
(
addr
, 
ö¸
) \

409 ()
	`AO_„tch_™d_add_wrôe
((vﬁ©ûê
AO_t
 *)(
addr
), \

410 (
AO_t
)(
ö¸
))

	)

411 
	#AO_HAVE_öt_„tch_™d_add_wrôe


	)

414 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add1_wrôe
) \

415 && !
	$deföed
(
AO_HAVE_öt_„tch_™d_add1_wrôe
)

416 
	#AO_öt_„tch_™d_add1_wrôe
(
addr
) \

417 ()
	`AO_„tch_™d_add1_wrôe
((vﬁ©ûê
AO_t
 *)(
addr
))

	)

418 
	#AO_HAVE_öt_„tch_™d_add1_wrôe


	)

421 #i‡
	`deföed
(
AO_HAVE_„tch_™d_sub1_wrôe
) \

422 && !
	$deföed
(
AO_HAVE_öt_„tch_™d_sub1_wrôe
)

423 
	#AO_öt_„tch_™d_sub1_wrôe
(
addr
) \

424 ()
	`AO_„tch_™d_sub1_wrôe
((vﬁ©ûê
AO_t
 *)(
addr
))

	)

425 
	#AO_HAVE_öt_„tch_™d_sub1_wrôe


	)

428 #i‡
	`deföed
(
AO_HAVE_™d_wrôe
Ë&& !deföed(
AO_HAVE_öt_™d_wrôe
)

429 
	#AO_öt_™d_wrôe
(
addr
, 
vÆ
) \

430 
	`AO_™d_wrôe
((vﬁ©ûê
AO_t
 *)(
addr
), (AO_t)(
vÆ
))

	)

431 
	#AO_HAVE_öt_™d_wrôe


	)

434 #i‡
	`deföed
(
AO_HAVE_‹_wrôe
Ë&& !deföed(
AO_HAVE_öt_‹_wrôe
)

435 
	#AO_öt_‹_wrôe
(
addr
, 
vÆ
) \

436 
	`AO_‹_wrôe
((vﬁ©ûê
AO_t
 *)(
addr
), (AO_t)(
vÆ
))

	)

437 
	#AO_HAVE_öt_‹_wrôe


	)

440 #i‡
	`deföed
(
AO_HAVE_x‹_wrôe
Ë&& !deföed(
AO_HAVE_öt_x‹_wrôe
)

441 
	#AO_öt_x‹_wrôe
(
addr
, 
vÆ
) \

442 
	`AO_x‹_wrôe
((vﬁ©ûê
AO_t
 *)(
addr
), (AO_t)(
vÆ
))

	)

443 
	#AO_HAVE_öt_x‹_wrôe


	)

446 #i‡
	`deföed
(
AO_HAVE_„tch_com∑ª_™d_sw≠_wrôe
) \

447 && !
	$deföed
(
AO_HAVE_öt_„tch_com∑ª_™d_sw≠_wrôe
)

448 
	#AO_öt_„tch_com∑ª_™d_sw≠_wrôe
(
addr
, 
ﬁd
, 
√w_vÆ
) \

449 ()
	`AO_„tch_com∑ª_™d_sw≠_wrôe
((vﬁ©ûê
AO_t
 *)(
addr
), \

450 (
AO_t
)(
ﬁd
), (AO_t)(
√w_vÆ
))

	)

451 
	#AO_HAVE_öt_„tch_com∑ª_™d_sw≠_wrôe


	)

454 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_wrôe
) \

455 && !
	$deföed
(
AO_HAVE_öt_com∑ª_™d_sw≠_wrôe
)

456 
	#AO_öt_com∑ª_™d_sw≠_wrôe
(
addr
, 
ﬁd
, 
√w_vÆ
) \

457 
	`AO_com∑ª_™d_sw≠_wrôe
((vﬁ©ûê
AO_t
 *)(
addr
), \

458 (
AO_t
)(
ﬁd
), (AO_t)(
√w_vÆ
))

	)

459 
	#AO_HAVE_öt_com∑ª_™d_sw≠_wrôe


	)

486 #i‡
	`deföed
(
AO_HAVE_lﬂd_ªad
Ë&& !deföed(
AO_HAVE_öt_lﬂd_ªad
)

487 
	#AO_öt_lﬂd_ªad
(
addr
) \

488 ()
	`AO_lﬂd_ªad
((c⁄° vﬁ©ûê
AO_t
 *)(
addr
))

	)

489 
	#AO_HAVE_öt_lﬂd_ªad


	)

492 #i‡
	`deföed
(
AO_HAVE_°‹e_ªad
Ë&& !deföed(
AO_HAVE_öt_°‹e_ªad
)

493 
	#AO_öt_°‹e_ªad
(
addr
, 
vÆ
) \

494 
	`AO_°‹e_ªad
((vﬁ©ûê
AO_t
 *)(
addr
), (AO_t)(
vÆ
))

	)

495 
	#AO_HAVE_öt_°‹e_ªad


	)

498 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_ªad
) \

499 && !
	$deföed
(
AO_HAVE_öt_„tch_™d_add_ªad
)

500 
	#AO_öt_„tch_™d_add_ªad
(
addr
, 
ö¸
) \

501 ()
	`AO_„tch_™d_add_ªad
((vﬁ©ûê
AO_t
 *)(
addr
), \

502 (
AO_t
)(
ö¸
))

	)

503 
	#AO_HAVE_öt_„tch_™d_add_ªad


	)

506 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add1_ªad
) \

507 && !
	$deföed
(
AO_HAVE_öt_„tch_™d_add1_ªad
)

508 
	#AO_öt_„tch_™d_add1_ªad
(
addr
) \

509 ()
	`AO_„tch_™d_add1_ªad
((vﬁ©ûê
AO_t
 *)(
addr
))

	)

510 
	#AO_HAVE_öt_„tch_™d_add1_ªad


	)

513 #i‡
	`deföed
(
AO_HAVE_„tch_™d_sub1_ªad
) \

514 && !
	$deföed
(
AO_HAVE_öt_„tch_™d_sub1_ªad
)

515 
	#AO_öt_„tch_™d_sub1_ªad
(
addr
) \

516 ()
	`AO_„tch_™d_sub1_ªad
((vﬁ©ûê
AO_t
 *)(
addr
))

	)

517 
	#AO_HAVE_öt_„tch_™d_sub1_ªad


	)

520 #i‡
	`deföed
(
AO_HAVE_™d_ªad
Ë&& !deföed(
AO_HAVE_öt_™d_ªad
)

521 
	#AO_öt_™d_ªad
(
addr
, 
vÆ
) \

522 
	`AO_™d_ªad
((vﬁ©ûê
AO_t
 *)(
addr
), (AO_t)(
vÆ
))

	)

523 
	#AO_HAVE_öt_™d_ªad


	)

526 #i‡
	`deföed
(
AO_HAVE_‹_ªad
Ë&& !deföed(
AO_HAVE_öt_‹_ªad
)

527 
	#AO_öt_‹_ªad
(
addr
, 
vÆ
) \

528 
	`AO_‹_ªad
((vﬁ©ûê
AO_t
 *)(
addr
), (AO_t)(
vÆ
))

	)

529 
	#AO_HAVE_öt_‹_ªad


	)

532 #i‡
	`deföed
(
AO_HAVE_x‹_ªad
Ë&& !deföed(
AO_HAVE_öt_x‹_ªad
)

533 
	#AO_öt_x‹_ªad
(
addr
, 
vÆ
) \

534 
	`AO_x‹_ªad
((vﬁ©ûê
AO_t
 *)(
addr
), (AO_t)(
vÆ
))

	)

535 
	#AO_HAVE_öt_x‹_ªad


	)

538 #i‡
	`deföed
(
AO_HAVE_„tch_com∑ª_™d_sw≠_ªad
) \

539 && !
	$deföed
(
AO_HAVE_öt_„tch_com∑ª_™d_sw≠_ªad
)

540 
	#AO_öt_„tch_com∑ª_™d_sw≠_ªad
(
addr
, 
ﬁd
, 
√w_vÆ
) \

541 ()
	`AO_„tch_com∑ª_™d_sw≠_ªad
((vﬁ©ûê
AO_t
 *)(
addr
), \

542 (
AO_t
)(
ﬁd
), (AO_t)(
√w_vÆ
))

	)

543 
	#AO_HAVE_öt_„tch_com∑ª_™d_sw≠_ªad


	)

546 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_ªad
) \

547 && !
	$deföed
(
AO_HAVE_öt_com∑ª_™d_sw≠_ªad
)

548 
	#AO_öt_com∑ª_™d_sw≠_ªad
(
addr
, 
ﬁd
, 
√w_vÆ
) \

549 
	`AO_com∑ª_™d_sw≠_ªad
((vﬁ©ûê
AO_t
 *)(
addr
), \

550 (
AO_t
)(
ﬁd
), (AO_t)(
√w_vÆ
))

	)

551 
	#AO_HAVE_öt_com∑ª_™d_sw≠_ªad


	)

	@/usr/include/atomic_ops/sysdeps/armcc/arm_v6.h

23 
	~"../ã°_™d_£t_t_is_ao_t.h
"

25 #i‡
__TARGET_ARCH_ARM
 < 6

26 
D⁄t
 
u£
 
wôh
 
ARM
 
ö°ru˘i⁄
 
£ts
 
lowî
 
th™
 
	gv6


29 
	#AO_ACCESS_CHECK_ALIGNED


	)

30 
	#AO_ACCESS_sh‹t_CHECK_ALIGNED


	)

31 
	#AO_ACCESS_öt_CHECK_ALIGNED


	)

32 
	~"../Æl_©omic_⁄ly_lﬂd.h
"

34 
	~"../°™d¨d_ao_doubÀ_t.h
"

48 
AO_INLINE
 

49 
	$AO_n›_fuŒ
()

51 #i‚de‡
AO_UNIPROCESSOR


52 
de°
=0;

55 
__asm
 {

56 
m¸
 
p15
,0,
de°
,
c7
,
c10
,5

59 
	`AO_compûî_b¨rõr
();

61 
	}
}

62 
	#AO_HAVE_n›_fuŒ


	)

73 
AO_INLINE
 
	$AO_°‹e
(vﬁ©ûê
AO_t
 *
addr
, AO_à
vÆue
)

75 
tmp
;

77 
ªåy
:

78 
__asm
 {

79 
ldªx
 
tmp
, [
addr
]

80 
°ªx
 
tmp
, 
vÆue
, [
addr
]

81 
ãq
 
tmp
, #0

82 
b√
 
ªåy


84 
	}
}

85 
	#AO_HAVE_°‹e


	)

98 #i‚de‡
AO_PREFER_GENERALIZED


99 
AO_INLINE
 
AO_TS_VAL_t


100 
	$AO_ã°_™d_£t
(vﬁ©ûê
AO_TS_t
 *
addr
) {

102 
AO_TS_VAL_t
 
ﬁdvÆ
;

103 
tmp
;

104 
⁄e
 = 1;

105 
ªåy
:

106 
__asm
 {

107 
ldªx
 
ﬁdvÆ
, [
addr
]

108 
°ªx
 
tmp
, 
⁄e
, [
addr
]

109 
ãq
 
tmp
, #0

110 
b√
 
ªåy


113  
ﬁdvÆ
;

114 
	}
}

115 
	#AO_HAVE_ã°_™d_£t


	)

117 
AO_INLINE
 
AO_t


118 
	$AO_„tch_™d_add
(vﬁ©ûê
AO_t
 *
p
, AO_à
ö¸
)

120 
tmp
,
tmp2
;

121 
AO_t
 
ªsu…
;

123 
ªåy
:

124 
__asm
 {

125 
ldªx
 
ªsu…
, [
p
]

126 
add
 
tmp
, 
ö¸
, 
ªsu…


127 
°ªx
 
tmp2
, 
tmp
, [
p
]

128 
ãq
 
tmp2
, #0

129 
b√
 
ªåy


132  
ªsu…
;

133 
	}
}

134 
	#AO_HAVE_„tch_™d_add


	)

136 
AO_INLINE
 
AO_t


137 
	$AO_„tch_™d_add1
(vﬁ©ûê
AO_t
 *
p
)

139 
tmp
,
tmp2
;

140 
AO_t
 
ªsu…
;

142 
ªåy
:

143 
__asm
 {

144 
ldªx
 
ªsu…
, [
p
]

145 
add
 
tmp
, 
ªsu…
, #1

146 
°ªx
 
tmp2
, 
tmp
, [
p
]

147 
ãq
 
tmp2
, #0

148 
b√
 
ªåy


151  
ªsu…
;

152 
	}
}

153 
	#AO_HAVE_„tch_™d_add1


	)

155 
AO_INLINE
 
AO_t


156 
	$AO_„tch_™d_sub1
(vﬁ©ûê
AO_t
 *
p
)

158 
tmp
,
tmp2
;

159 
AO_t
 
ªsu…
;

161 
ªåy
:

162 
__asm
 {

163 
ldªx
 
ªsu…
, [
p
]

164 
sub
 
tmp
, 
ªsu…
, #1

165 
°ªx
 
tmp2
, 
tmp
, [
p
]

166 
ãq
 
tmp2
, #0

167 
b√
 
ªåy


170  
ªsu…
;

171 
	}
}

172 
	#AO_HAVE_„tch_™d_sub1


	)

175 #i‚de‡
AO_GENERALIZE_ASM_BOOL_CAS


177 
AO_INLINE
 

178 
	$AO_com∑ª_™d_sw≠
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd_vÆ
, AO_à
√w_vÆ
)

180 
AO_t
 
ªsu…
, 
tmp
;

182 
ªåy
:

183 
__asm__
 {

184 
mov
 
ªsu…
, #2

185 
ldªx
 
tmp
, [
addr
]

186 
ãq
 
tmp
, 
ﬁd_vÆ


187 #ifde‡
__thumb__


188 
ô
 
eq


190 
°ªxeq
 
ªsu…
, 
√w_vÆ
, [
addr
]

191 
ãq
 
ªsu…
, #1

192 
beq
 
ªåy


194  !(
ªsu…
&2);

195 
	}
}

196 
	#AO_HAVE_com∑ª_™d_sw≠


	)

199 
AO_INLINE
 
AO_t


200 
	$AO_„tch_com∑ª_™d_sw≠
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd_vÆ
, AO_à
√w_vÆ
)

202 
AO_t
 
„tched_vÆ
, 
tmp
;

204 
ªåy
:

205 
__asm__
 {

206 
mov
 
tmp
, #2

207 
ldªx
 
„tched_vÆ
, [
addr
]

208 
ãq
 
„tched_vÆ
, 
ﬁd_vÆ


209 #ifde‡
__thumb__


210 
ô
 
eq


212 
°ªxeq
 
tmp
, 
√w_vÆ
, [
addr
]

213 
ãq
 
tmp
, #1

214 
beq
 
ªåy


216  
„tched_vÆ
;

217 
	}
}

218 
	#AO_HAVE_„tch_com∑ª_™d_sw≠


	)

223 
__asm
 
ölöe
 
doubÀ_±r_°‹age
 
	$AO_lﬂd_ex
(c⁄° vﬁ©ûê
AO_doubÀ_t
 *
addr
) {

224 
LDREXD
 
r0
,
r1
,[r0]

225 
	}
}

227 
__asm
 
ölöe
 
	$AO_°‹e_ex
(
AO_t
 
vÆ1
, AO_à
vÆ2
, vﬁ©ûê
AO_doubÀ_t
 *
addr
) {

228 
STREXD
 
r3
,
r0
,
r1
,[
r2
]

229 
MOV
 
r0
,
r3


230 
	}
}

232 
AO_INLINE
 
AO_doubÀ_t


233 
	$AO_doubÀ_lﬂd
(c⁄° vﬁ©ûê
AO_doubÀ_t
 *
addr
)

235 
AO_doubÀ_t
 
ªsu…
;

237 
ªsu…
.
AO_whﬁe
 = 
	`AO_lﬂd_ex
(
addr
);

238  
ªsu…
;

239 
	}
}

240 
	#AO_HAVE_doubÀ_lﬂd


	)

242 
AO_INLINE
 

243 
	$AO_com∑ª_doubÀ_™d_sw≠_doubÀ
(vﬁ©ûê
AO_doubÀ_t
 *
addr
,

244 
AO_t
 
ﬁd_vÆ1
, AO_à
ﬁd_vÆ2
,

245 
AO_t
 
√w_vÆ1
, AO_à
√w_vÆ2
)

247 
doubÀ_±r_°‹age
 
ﬁd_vÆ
 =

248 ((
doubÀ_±r_°‹age
)
ﬁd_vÆ2
 << 32Ë| 
ﬁd_vÆ1
;

249 
doubÀ_±r_°‹age
 
tmp
;

250 
ªsu…
;

253 
tmp
 = 
	`AO_lﬂd_ex
(
addr
);

254 if(
tmp
 !
ﬁd_vÆ
)  0;

255 
ªsu…
 = 
	`AO_°‹e_ex
(
√w_vÆ1
, 
√w_vÆ2
, 
addr
);

256 if(!
ªsu…
)  1;

258 
	}
}

259 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ


	)

263 
	#AO_T_IS_INT


	)

	@/usr/include/atomic_ops/sysdeps/gcc/aarch64.h

18 
	~"../ã°_™d_£t_t_is_ao_t.h
"

20 
	~"../°™d¨d_ao_doubÀ_t.h
"

22 #i‚de‡
AO_UNIPROCESSOR


23 
AO_INLINE
 

24 
	$AO_n›_wrôe
()

26 
__asm__
 
	`__vﬁ©ûe__
("dmb st" : : : "memory");

27 
	}
}

28 
	#AO_HAVE_n›_wrôe


	)

32 #i‡
__GNUC__
 == 4

34 
AO_INLINE
 
AO_doubÀ_t


35 
	$AO_doubÀ_lﬂd
(c⁄° vﬁ©ûê
AO_doubÀ_t
 *
addr
)

37 
AO_doubÀ_t
 
ªsu…
;

38 
°©us
;

43 
__asm__
 
	`__vﬁ©ûe__
("//AO_double_load\n"

46 : "=&r" (
ªsu…
.
AO_vÆ1
), "=&r" (ªsu….
AO_vÆ2
), "=&r" (
°©us
)

47 : "Q" (*
addr
));

48 } 
	`AO_EXPECT_FALSE
(
°©us
));

49  
ªsu…
;

50 
	}
}

51 
	#AO_HAVE_doubÀ_lﬂd


	)

53 
AO_INLINE
 
AO_doubÀ_t


54 
	$AO_doubÀ_lﬂd_acquúe
(c⁄° vﬁ©ûê
AO_doubÀ_t
 *
addr
)

56 
AO_doubÀ_t
 
ªsu…
;

57 
°©us
;

60 
__asm__
 
	`__vﬁ©ûe__
("//AO_double_load_acquire\n"

63 : "=&r" (
ªsu…
.
AO_vÆ1
), "=&r" (ªsu….
AO_vÆ2
), "=&r" (
°©us
)

64 : "Q" (*
addr
));

65 } 
	`AO_EXPECT_FALSE
(
°©us
));

66  
ªsu…
;

67 
	}
}

68 
	#AO_HAVE_doubÀ_lﬂd_acquúe


	)

70 
AO_INLINE
 

71 
	$AO_doubÀ_°‹e
(vﬁ©ûê
AO_doubÀ_t
 *
addr
, AO_doubÀ_à
vÆue
)

73 
AO_doubÀ_t
 
ﬁd_vÆ
;

74 
°©us
;

77 
__asm__
 
	`__vﬁ©ûe__
("//AO_double_store\n"

80 : "=&r" (
ﬁd_vÆ
.
AO_vÆ1
), "=&r" (ﬁd_vÆ.
AO_vÆ2
), "=&r" (
°©us
),

81 "=Q" (*
addr
)

82 : "r" (
vÆue
.
AO_vÆ1
), "r" (vÆue.
AO_vÆ2
));

85 } 
	`AO_EXPECT_FALSE
(
°©us
));

86 
	}
}

87 
	#AO_HAVE_doubÀ_°‹e


	)

89 
AO_INLINE
 

90 
	$AO_doubÀ_°‹e_ªÀa£
(vﬁ©ûê
AO_doubÀ_t
 *
addr
, AO_doubÀ_à
vÆue
)

92 
AO_doubÀ_t
 
ﬁd_vÆ
;

93 
°©us
;

96 
__asm__
 
	`__vﬁ©ûe__
("//AO_double_store_release\n"

99 : "=&r" (
ﬁd_vÆ
.
AO_vÆ1
), "=&r" (ﬁd_vÆ.
AO_vÆ2
), "=&r" (
°©us
),

100 "=Q" (*
addr
)

101 : "r" (
vÆue
.
AO_vÆ1
), "r" (vÆue.
AO_vÆ2
));

102 } 
	`AO_EXPECT_FALSE
(
°©us
));

103 
	}
}

104 
	#AO_HAVE_doubÀ_°‹e_ªÀa£


	)

106 
AO_INLINE
 

107 
	$AO_doubÀ_com∑ª_™d_sw≠
(vﬁ©ûê
AO_doubÀ_t
 *
addr
,

108 
AO_doubÀ_t
 
ﬁd_vÆ
, AO_doubÀ_à
√w_vÆ
)

110 
AO_doubÀ_t
 
tmp
;

111 
ªsu…
 = 1;

114 
__asm__
 
	`__vﬁ©ûe__
("//AO_double_compare_and_swap\n"

116 : "=&r" (
tmp
.
AO_vÆ1
), "=&r" (tmp.
AO_vÆ2
)

117 : "Q" (*
addr
));

118 i‡(
tmp
.
AO_vÆ1
 !
ﬁd_vÆ
.AO_vÆ1 ||Åmp.
AO_vÆ2
 != old_val.AO_val2)

120 
__asm__
 
	`__vﬁ©ûe__
(

122 : "=&r" (
ªsu…
), "=Q" (*
addr
)

123 : "r" (
√w_vÆ
.
AO_vÆ1
), "r" (√w_vÆ.
AO_vÆ2
));

124 } 
	`AO_EXPECT_FALSE
(
ªsu…
));

125  !
ªsu…
;

126 
	}
}

127 
	#AO_HAVE_doubÀ_com∑ª_™d_sw≠


	)

129 
AO_INLINE
 

130 
	$AO_doubÀ_com∑ª_™d_sw≠_acquúe
(vﬁ©ûê
AO_doubÀ_t
 *
addr
,

131 
AO_doubÀ_t
 
ﬁd_vÆ
, AO_doubÀ_à
√w_vÆ
)

133 
AO_doubÀ_t
 
tmp
;

134 
ªsu…
 = 1;

137 
__asm__
 
	`__vﬁ©ûe__
("//AO_double_compare_and_swap_acquire\n"

139 : "=&r" (
tmp
.
AO_vÆ1
), "=&r" (tmp.
AO_vÆ2
)

140 : "Q" (*
addr
));

141 i‡(
tmp
.
AO_vÆ1
 !
ﬁd_vÆ
.AO_vÆ1 ||Åmp.
AO_vÆ2
 != old_val.AO_val2)

143 
__asm__
 
	`__vﬁ©ûe__
(

145 : "=&r" (
ªsu…
), "=Q" (*
addr
)

146 : "r" (
√w_vÆ
.
AO_vÆ1
), "r" (√w_vÆ.
AO_vÆ2
));

147 } 
	`AO_EXPECT_FALSE
(
ªsu…
));

148  !
ªsu…
;

149 
	}
}

150 
	#AO_HAVE_doubÀ_com∑ª_™d_sw≠_acquúe


	)

152 
AO_INLINE
 

153 
	$AO_doubÀ_com∑ª_™d_sw≠_ªÀa£
(vﬁ©ûê
AO_doubÀ_t
 *
addr
,

154 
AO_doubÀ_t
 
ﬁd_vÆ
, AO_doubÀ_à
√w_vÆ
)

156 
AO_doubÀ_t
 
tmp
;

157 
ªsu…
 = 1;

160 
__asm__
 
	`__vﬁ©ûe__
("//AO_double_compare_and_swap_release\n"

162 : "=&r" (
tmp
.
AO_vÆ1
), "=&r" (tmp.
AO_vÆ2
)

163 : "Q" (*
addr
));

164 i‡(
tmp
.
AO_vÆ1
 !
ﬁd_vÆ
.AO_vÆ1 ||Åmp.
AO_vÆ2
 != old_val.AO_val2)

166 
__asm__
 
	`__vﬁ©ûe__
(

168 : "=&r" (
ªsu…
), "=Q" (*
addr
)

169 : "r" (
√w_vÆ
.
AO_vÆ1
), "r" (√w_vÆ.
AO_vÆ2
));

170 } 
	`AO_EXPECT_FALSE
(
ªsu…
));

171  !
ªsu…
;

172 
	}
}

173 
	#AO_HAVE_doubÀ_com∑ª_™d_sw≠_ªÀa£


	)

175 
AO_INLINE
 

176 
	$AO_doubÀ_com∑ª_™d_sw≠_fuŒ
(vﬁ©ûê
AO_doubÀ_t
 *
addr
,

177 
AO_doubÀ_t
 
ﬁd_vÆ
, AO_doubÀ_à
√w_vÆ
)

179 
AO_doubÀ_t
 
tmp
;

180 
ªsu…
 = 1;

183 
__asm__
 
	`__vﬁ©ûe__
("//AO_double_compare_and_swap_full\n"

185 : "=&r" (
tmp
.
AO_vÆ1
), "=&r" (tmp.
AO_vÆ2
)

186 : "Q" (*
addr
));

187 i‡(
tmp
.
AO_vÆ1
 !
ﬁd_vÆ
.AO_vÆ1 ||Åmp.
AO_vÆ2
 != old_val.AO_val2)

189 
__asm__
 
	`__vﬁ©ûe__
(

191 : "=&r" (
ªsu…
), "=Q" (*
addr
)

192 : "r" (
√w_vÆ
.
AO_vÆ1
), "r" (√w_vÆ.
AO_vÆ2
));

193 } 
	`AO_EXPECT_FALSE
(
ªsu…
));

194  !
ªsu…
;

195 
	}
}

196 
	#AO_HAVE_doubÀ_com∑ª_™d_sw≠_fuŒ


	)

199 
	~"gíîic.h
"

	@/usr/include/atomic_ops/sysdeps/gcc/avr32.h

25 
	~"../Æl_©omic_lﬂd_°‹e.h
"

27 
	~"../‹dîed.h
"

29 
	~"../ã°_™d_£t_t_is_ao_t.h
"

31 #i‚de‡
AO_PREFER_GENERALIZED


32 
AO_INLINE
 
AO_TS_VAL_t


33 
	$AO_ã°_™d_£t_fuŒ
(vﬁ©ûê
AO_TS_t
 *
addr
)

35 
ªt
;

37 
__asm__
 
	`__vﬁ©ûe__
(

39 : [
ﬁdvÆ
] "=&r"(
ªt
)

40 : [
mem
] "r"(
addr
), [
√wvÆ
] "r"(1)

43  (
AO_TS_VAL_t
)
ªt
;

44 
	}
}

45 
	#AO_HAVE_ã°_™d_£t_fuŒ


	)

48 
AO_INLINE
 

49 
	$AO_com∑ª_™d_sw≠_fuŒ
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd
, AO_à
√w_vÆ
)

51 
ªt
;

53 
__asm__
 
	`__vﬁ©ûe__
(

61 : [
ªs
] "=&r"(
ªt
), [
mem
] "=m"(*
addr
)

62 : "m"(*
addr
), [
√wvÆ
] "r"(
√w_vÆ
), [
ﬁdvÆ
] "r"(
ﬁd
)

65  ()
ªt
;

66 
	}
}

67 
	#AO_HAVE_com∑ª_™d_sw≠_fuŒ


	)

71 
	#AO_T_IS_INT


	)

	@/usr/include/atomic_ops/sysdeps/gcc/hexagon.h

12 
	~"../Æl_Æig√d_©omic_lﬂd_°‹e.h
"

14 
	~"../ã°_™d_£t_t_is_ao_t.h
"

20 
AO_INLINE
 

21 
	$AO_n›_fuŒ
()

23 
__asm__
 
	`__vﬁ©ûe__
("syncht" : : : "memory");

24 
	}
}

25 
	#AO_HAVE_n›_fuŒ


	)

30 #i‚de‡
AO_PREFER_GENERALIZED


31 
AO_INLINE
 
AO_t


32 
	$AO_„tch_™d_add
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ö¸
)

34 
AO_t
 
ﬁdvÆ
;

35 
AO_t
 
√wvÆ
;

36 
__asm__
 
	`__vﬁ©ûe__
(

42 : "=&r"(
ﬁdvÆ
), "=&r"(
√wvÆ
), "+m"(*
addr
)

43 : "r"(
addr
), "r"(
ö¸
)

45  
ﬁdvÆ
;

46 
	}
}

47 
	#AO_HAVE_„tch_™d_add


	)

49 
AO_INLINE
 
AO_TS_VAL_t


50 
	$AO_ã°_™d_£t
(vﬁ©ûê
AO_TS_t
 *
addr
)

52 
ﬁdvÆ
;

53 
locked_vÆue
 = 1;

55 
__asm__
 
	`__vﬁ©ûe__
(

65 : "=&r"(
ﬁdvÆ
), "+m"(*
addr
)

66 : "r"(
addr
), "r"(
locked_vÆue
)

68  (
AO_TS_VAL_t
)
ﬁdvÆ
;

69 
	}
}

70 
	#AO_HAVE_ã°_™d_£t


	)

73 #i‚de‡
AO_GENERALIZE_ASM_BOOL_CAS


74 
AO_INLINE
 

75 
	$AO_com∑ª_™d_sw≠
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd
, AO_à
√w_vÆ
)

77 
AO_t
 
__ﬁdvÆ
;

78 
ªsu…
 = 0;

79 
__asm__
 
	`__vﬁ©ûe__
(

90 : "=&r" (
__ﬁdvÆ
), "+r" (
ªsu…
), "+m"(*
addr
)

91 : "r" (
addr
), "r" (
ﬁd
), "r" (
√w_vÆ
)

94  
ªsu…
;

95 
	}
}

96 
	#AO_HAVE_com∑ª_™d_sw≠


	)

99 
AO_INLINE
 
AO_t


100 
	$AO_„tch_com∑ª_™d_sw≠
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd_vÆ
, AO_à
√w_vÆ
)

102 
AO_t
 
__ﬁdvÆ
;

104 
__asm__
 
	`__vﬁ©ûe__
(

114 : "=&r" (
__ﬁdvÆ
), "+m"(*
addr
)

115 : "r" (
addr
), "r" (
ﬁd_vÆ
), "r" (
√w_vÆ
)

118  
__ﬁdvÆ
;

119 
	}
}

120 
	#AO_HAVE_„tch_com∑ª_™d_sw≠


	)

122 
	#AO_T_IS_INT


	)

	@/usr/include/atomic_ops/sysdeps/gcc/ia64.h

23 
	~"../Æl_©omic_lﬂd_°‹e.h
"

25 
	~"../Æl_acquúe_ªÀa£_vﬁ©ûe.h
"

27 
	~"../ã°_™d_£t_t_is_ch¨.h
"

29 #ifde‡
_ILP32


34 
	#AO_LEN
 "4"

	)

45 
	#AO_IN_ADDR
 "1"(
addr
)

	)

46 
	#AO_OUT_ADDR
 , "Ù"(
addr
)

	)

47 
	#AO_SWIZZLE
 "addp4 %1=0,%1;;\n"

	)

48 
	#AO_MASK
(
±r
Ë
__asm__
 
	`__vﬁ©ûe__
("zxt4 %1=%1": "Ù"’åË: "0"’å))

	)

50 
	#AO_LEN
 "8"

	)

51 
	#AO_IN_ADDR
 "r"(
addr
)

	)

52 
	#AO_OUT_ADDR


	)

53 
	#AO_SWIZZLE


	)

54 
	#AO_MASK
(
±r
Ë

	)

57 
AO_INLINE
 

58 
	$AO_n›_fuŒ
()

60 
__asm__
 
	`__vﬁ©ûe__
("mf" : : : "memory");

61 
	}
}

62 
	#AO_HAVE_n›_fuŒ


	)

64 #i‚de‡
AO_PREFER_GENERALIZED


65 
AO_INLINE
 
AO_t


66 
	$AO_„tch_™d_add1_acquúe
 (vﬁ©ûê
AO_t
 *
addr
)

68 
AO_t
 
ªsu…
;

70 
__asm__
 
	`__vﬁ©ûe__
 (
AO_SWIZZLE


71 "„tchadd" 
AO_LEN
 ".acq %0=[%1],1":

72 "Ù" (
ªsu…
Ë
AO_OUT_ADDR
: 
AO_IN_ADDR
 :"memory");

73  
ªsu…
;

74 
	}
}

75 
	#AO_HAVE_„tch_™d_add1_acquúe


	)

77 
AO_INLINE
 
AO_t


78 
	$AO_„tch_™d_add1_ªÀa£
 (vﬁ©ûê
AO_t
 *
addr
)

80 
AO_t
 
ªsu…
;

82 
__asm__
 
	`__vﬁ©ûe__
 (
AO_SWIZZLE


83 "„tchadd" 
AO_LEN
 ".rel %0=[%1],1":

84 "Ù" (
ªsu…
Ë
AO_OUT_ADDR
: 
AO_IN_ADDR
 :"memory");

85  
ªsu…
;

86 
	}
}

87 
	#AO_HAVE_„tch_™d_add1_ªÀa£


	)

89 
AO_INLINE
 
AO_t


90 
	$AO_„tch_™d_sub1_acquúe
 (vﬁ©ûê
AO_t
 *
addr
)

92 
AO_t
 
ªsu…
;

94 
__asm__
 
	`__vﬁ©ûe__
 (
AO_SWIZZLE


95 "„tchadd" 
AO_LEN
 ".acq %0=[%1],-1":

96 "Ù" (
ªsu…
Ë
AO_OUT_ADDR
: 
AO_IN_ADDR
 :"memory");

97  
ªsu…
;

98 
	}
}

99 
	#AO_HAVE_„tch_™d_sub1_acquúe


	)

101 
AO_INLINE
 
AO_t


102 
	$AO_„tch_™d_sub1_ªÀa£
 (vﬁ©ûê
AO_t
 *
addr
)

104 
AO_t
 
ªsu…
;

106 
__asm__
 
	`__vﬁ©ûe__
 (
AO_SWIZZLE


107 "„tchadd" 
AO_LEN
 ".rel %0=[%1],-1":

108 "Ù" (
ªsu…
Ë
AO_OUT_ADDR
: 
AO_IN_ADDR
 :"memory");

109  
ªsu…
;

110 
	}
}

111 
	#AO_HAVE_„tch_™d_sub1_ªÀa£


	)

114 
AO_INLINE
 
AO_t


115 
	$AO_„tch_com∑ª_™d_sw≠_acquúe
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd
, AO_à
√w_vÆ
)

117 
AO_t
 
„tched_vÆ
;

118 
	`AO_MASK
(
ﬁd
);

119 
__asm__
 
	`__vﬁ©ûe__
(
AO_SWIZZLE


120 "movár.ccv=%[ﬁd] ;; cmpxchg" 
AO_LEN


122 : "Ù"(
„tched_vÆ
Ë
AO_OUT_ADDR


123 : 
AO_IN_ADDR
, [
√w_vÆ
]"r"“ew_vÆ), [
ﬁd
]"r"(old)

125  
„tched_vÆ
;

126 
	}
}

127 
	#AO_HAVE_„tch_com∑ª_™d_sw≠_acquúe


	)

129 
AO_INLINE
 
AO_t


130 
	$AO_„tch_com∑ª_™d_sw≠_ªÀa£
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd
, AO_à
√w_vÆ
)

132 
AO_t
 
„tched_vÆ
;

133 
	`AO_MASK
(
ﬁd
);

134 
__asm__
 
	`__vﬁ©ûe__
(
AO_SWIZZLE


135 "movár.ccv=%[ﬁd] ;; cmpxchg" 
AO_LEN


137 : "Ù"(
„tched_vÆ
Ë
AO_OUT_ADDR


138 : 
AO_IN_ADDR
, [
√w_vÆ
]"r"“ew_vÆ), [
ﬁd
]"r"(old)

140  
„tched_vÆ
;

141 
	}
}

142 
	#AO_HAVE_„tch_com∑ª_™d_sw≠_ªÀa£


	)

144 
AO_INLINE
 

145 
	$AO_ch¨_„tch_com∑ª_™d_sw≠_acquúe
(vﬁ©ûê*
addr
,

146 
ﬁd
, 
√w_vÆ
)

148 
„tched_vÆ
;

149 
__asm__
 
	`__vﬁ©ûe__
(
AO_SWIZZLE


151 : "Ù"(
„tched_vÆ
Ë
AO_OUT_ADDR


152 : 
AO_IN_ADDR
, [
√w_vÆ
]"r"“ew_vÆ), [
ﬁd
]"r"((
AO_t
)old)

154  
„tched_vÆ
;

155 
	}
}

156 
	#AO_HAVE_ch¨_„tch_com∑ª_™d_sw≠_acquúe


	)

158 
AO_INLINE
 

159 
	$AO_ch¨_„tch_com∑ª_™d_sw≠_ªÀa£
(vﬁ©ûê*
addr
,

160 
ﬁd
, 
√w_vÆ
)

162 
„tched_vÆ
;

163 
__asm__
 
	`__vﬁ©ûe__
(
AO_SWIZZLE


165 : "Ù"(
„tched_vÆ
Ë
AO_OUT_ADDR


166 : 
AO_IN_ADDR
, [
√w_vÆ
]"r"“ew_vÆ), [
ﬁd
]"r"((
AO_t
)old)

168  
„tched_vÆ
;

169 
	}
}

170 
	#AO_HAVE_ch¨_„tch_com∑ª_™d_sw≠_ªÀa£


	)

172 
AO_INLINE
 

173 
	$AO_sh‹t_„tch_com∑ª_™d_sw≠_acquúe
(vﬁ©ûê*
addr
,

174 
ﬁd
, 
√w_vÆ
)

176 
„tched_vÆ
;

177 
__asm__
 
	`__vﬁ©ûe__
(
AO_SWIZZLE


179 : "Ù"(
„tched_vÆ
Ë
AO_OUT_ADDR


180 : 
AO_IN_ADDR
, [
√w_vÆ
]"r"“ew_vÆ), [
ﬁd
]"r"((
AO_t
)old)

182  
„tched_vÆ
;

183 
	}
}

184 
	#AO_HAVE_sh‹t_„tch_com∑ª_™d_sw≠_acquúe


	)

186 
AO_INLINE
 

187 
	$AO_sh‹t_„tch_com∑ª_™d_sw≠_ªÀa£
(vﬁ©ûê*
addr
,

188 
ﬁd
, 
√w_vÆ
)

190 
„tched_vÆ
;

191 
__asm__
 
	`__vﬁ©ûe__
(
AO_SWIZZLE


193 : "Ù"(
„tched_vÆ
Ë
AO_OUT_ADDR


194 : 
AO_IN_ADDR
, [
√w_vÆ
]"r"“ew_vÆ), [
ﬁd
]"r"((
AO_t
)old)

196  
„tched_vÆ
;

197 
	}
}

198 
	#AO_HAVE_sh‹t_„tch_com∑ª_™d_sw≠_ªÀa£


	)

200 #ifde‡
_ILP32


202 
	#AO_T_IS_INT


	)

207 #i‚de‡
AO_PREFER_GENERALIZED


208 
AO_INLINE
 

209 
	$AO_öt_„tch_™d_add1_acquúe
(vﬁ©ûê*
addr
)

211 
ªsu…
;

212 
__asm__
 
	`__vﬁ©ûe__
("fetchadd4.acq %0=[%1],1"

213 : "Ù" (
ªsu…
Ë: 
AO_IN_ADDR


215  
ªsu…
;

216 
	}
}

217 
	#AO_HAVE_öt_„tch_™d_add1_acquúe


	)

219 
AO_INLINE
 

220 
	$AO_öt_„tch_™d_add1_ªÀa£
(vﬁ©ûê*
addr
)

222 
ªsu…
;

223 
__asm__
 
	`__vﬁ©ûe__
("fetchadd4.rel %0=[%1],1"

224 : "Ù" (
ªsu…
Ë: 
AO_IN_ADDR


226  
ªsu…
;

227 
	}
}

228 
	#AO_HAVE_öt_„tch_™d_add1_ªÀa£


	)

230 
AO_INLINE
 

231 
	$AO_öt_„tch_™d_sub1_acquúe
(vﬁ©ûê*
addr
)

233 
ªsu…
;

234 
__asm__
 
	`__vﬁ©ûe__
("fetchadd4.acq %0=[%1],-1"

235 : "Ù" (
ªsu…
Ë: 
AO_IN_ADDR


237  
ªsu…
;

238 
	}
}

239 
	#AO_HAVE_öt_„tch_™d_sub1_acquúe


	)

241 
AO_INLINE
 

242 
	$AO_öt_„tch_™d_sub1_ªÀa£
(vﬁ©ûê*
addr
)

244 
ªsu…
;

245 
__asm__
 
	`__vﬁ©ûe__
("fetchadd4.rel %0=[%1],-1"

246 : "Ù" (
ªsu…
Ë: 
AO_IN_ADDR


248  
ªsu…
;

249 
	}
}

250 
	#AO_HAVE_öt_„tch_™d_sub1_ªÀa£


	)

253 
AO_INLINE
 

254 
	$AO_öt_„tch_com∑ª_™d_sw≠_acquúe
(vﬁ©ûê*
addr
,

255 
ﬁd
, 
√w_vÆ
)

257 
„tched_vÆ
;

258 
__asm__
 
	`__vﬁ©ûe__
("movár.ccv=%3 ;; cmpxchg4.acq %0=[%1],%2,ar.ccv"

259 : "Ù"(
„tched_vÆ
)

260 : 
AO_IN_ADDR
, "r"(
√w_vÆ
), "r"((
AO_t
)
ﬁd
)

262  
„tched_vÆ
;

263 
	}
}

264 
	#AO_HAVE_öt_„tch_com∑ª_™d_sw≠_acquúe


	)

266 
AO_INLINE
 

267 
	$AO_öt_„tch_com∑ª_™d_sw≠_ªÀa£
(vﬁ©ûê*
addr
,

268 
ﬁd
, 
√w_vÆ
)

270 
„tched_vÆ
;

271 
__asm__
 
	`__vﬁ©ûe__
("movár.ccv=%3 ;; cmpxchg4.rel %0=[%1],%2,ar.ccv"

272 : "Ù"(
„tched_vÆ
)

273 : 
AO_IN_ADDR
, "r"(
√w_vÆ
), "r"((
AO_t
)
ﬁd
)

275  
„tched_vÆ
;

276 
	}
}

277 
	#AO_HAVE_öt_„tch_com∑ª_™d_sw≠_ªÀa£


	)

	@/usr/include/atomic_ops/sysdeps/gcc/powerpc.h

30 
	~"../Æl_Æig√d_©omic_lﬂd_°‹e.h
"

32 
	#AO_lﬂd
(
addr
Ë
	`AO_lﬂd_acquúe
◊ddr)

	)

34 
	~"../ã°_™d_£t_t_is_ao_t.h
"

38 
AO_INLINE
 

39 
	$AO_n›_fuŒ
()

41 
__asm__
 
	`__vﬁ©ûe__
("sync" : : : "memory");

42 
	}
}

43 
	#AO_HAVE_n›_fuŒ


	)

46 
AO_INLINE
 

47 
	$AO_lwsync
()

49 #ifde‡
__NO_LWSYNC__


50 
__asm__
 
	`__vﬁ©ûe__
("sync" : : : "memory");

52 
__asm__
 
	`__vﬁ©ûe__
("lwsync" : : : "memory");

54 
	}
}

56 
	#AO_n›_wrôe
(Ë
	`AO_lwsync
()

	)

57 
	#AO_HAVE_n›_wrôe


	)

59 
	#AO_n›_ªad
(Ë
	`AO_lwsync
()

	)

60 
	#AO_HAVE_n›_ªad


	)

69 
AO_INLINE
 
AO_t


70 
	$AO_lﬂd_acquúe
(c⁄° vﬁ©ûê
AO_t
 *
addr
)

72 
AO_t
 
ªsu…
;

73 #i‡
	`deföed
(
__powîpc64__
Ë|| deföed(
__µc64__
Ë|| deföed(
__64BIT__
)

74 
__asm__
 
	`__vﬁ©ûe__
 (

79 : "Ù" (
ªsu…
)

80 : "m"(*
addr
) : "memory", "cr0");

85 
__asm__
 
	`__vﬁ©ûe__
 (

90 : "Ù" (
ªsu…
)

91 : "m"(*
addr
) : "memory", "cc");

93  
ªsu…
;

94 
	}
}

95 
	#AO_HAVE_lﬂd_acquúe


	)

99 
AO_INLINE
 

100 
	$AO_°‹e_ªÀa£
(vﬁ©ûê
AO_t
 *
addr
, AO_à
vÆue
)

102 
	`AO_lwsync
();

103 *
addr
 = 
vÆue
;

104 
	}
}

105 
	#AO_HAVE_°‹e_ªÀa£


	)

107 #i‚de‡
AO_PREFER_GENERALIZED


111 
AO_INLINE
 
AO_TS_VAL_t


112 
	$AO_ã°_™d_£t
(vﬁ©ûê
AO_TS_t
 *
addr
) {

113 #i‡
	`deföed
(
__powîpc64__
Ë|| deföed(
__µc64__
Ë|| deföed(
__64BIT__
)

115 
ﬁdvÆ
;

116 
ãmp
 = 1;

118 
__asm__
 
	`__vﬁ©ûe__
(

125 : "=&r"(
ﬁdvÆ
)

126 : "r"(
addr
), "r"(
ãmp
)

129 
ﬁdvÆ
;

130 
ãmp
 = 1;

132 
__asm__
 
	`__vﬁ©ûe__
(

139 : "=&r"(
ﬁdvÆ
)

140 : "r"(
addr
), "r"(
ãmp
)

143  (
AO_TS_VAL_t
)
ﬁdvÆ
;

144 
	}
}

145 
	#AO_HAVE_ã°_™d_£t


	)

147 
AO_INLINE
 
AO_TS_VAL_t


148 
	$AO_ã°_™d_£t_acquúe
(vﬁ©ûê
AO_TS_t
 *
addr
) {

149 
AO_TS_VAL_t
 
ªsu…
 = 
	`AO_ã°_™d_£t
(
addr
);

150 
	`AO_lwsync
();

151  
ªsu…
;

152 
	}
}

153 
	#AO_HAVE_ã°_™d_£t_acquúe


	)

155 
AO_INLINE
 
AO_TS_VAL_t


156 
	$AO_ã°_™d_£t_ªÀa£
(vﬁ©ûê
AO_TS_t
 *
addr
) {

157 
	`AO_lwsync
();

158  
	`AO_ã°_™d_£t
(
addr
);

159 
	}
}

160 
	#AO_HAVE_ã°_™d_£t_ªÀa£


	)

162 
AO_INLINE
 
AO_TS_VAL_t


163 
	$AO_ã°_™d_£t_fuŒ
(vﬁ©ûê
AO_TS_t
 *
addr
) {

164 
AO_TS_VAL_t
 
ªsu…
;

165 
	`AO_lwsync
();

166 
ªsu…
 = 
	`AO_ã°_™d_£t
(
addr
);

167 
	`AO_lwsync
();

168  
ªsu…
;

169 
	}
}

170 
	#AO_HAVE_ã°_™d_£t_fuŒ


	)

173 #i‚de‡
AO_GENERALIZE_ASM_BOOL_CAS


175 
AO_INLINE
 

176 
	$AO_com∑ª_™d_sw≠
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd
, AO_à
√w_vÆ
)

178 
AO_t
 
ﬁdvÆ
;

179 
ªsu…
 = 0;

180 #i‡
	`deföed
(
__powîpc64__
Ë|| deföed(
__µc64__
Ë|| deföed(
__64BIT__
)

181 
__asm__
 
	`__vﬁ©ûe__
(

189 : "=&r"(
ﬁdvÆ
), "=&r"(
ªsu…
)

190 : "r"(
addr
), "r"(
√w_vÆ
), "r"(
ﬁd
), "1"(
ªsu…
)

193 
__asm__
 
	`__vﬁ©ûe__
(

201 : "=&r"(
ﬁdvÆ
), "=&r"(
ªsu…
)

202 : "r"(
addr
), "r"(
√w_vÆ
), "r"(
ﬁd
), "1"(
ªsu…
)

205  
ªsu…
;

206 
	}
}

207 
	#AO_HAVE_com∑ª_™d_sw≠


	)

209 
AO_INLINE
 

210 
	$AO_com∑ª_™d_sw≠_acquúe
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd
, AO_à
√w_vÆ
)

212 
ªsu…
 = 
	`AO_com∑ª_™d_sw≠
(
addr
, 
ﬁd
, 
√w_vÆ
);

213 
	`AO_lwsync
();

214  
ªsu…
;

215 
	}
}

216 
	#AO_HAVE_com∑ª_™d_sw≠_acquúe


	)

218 
AO_INLINE
 

219 
	$AO_com∑ª_™d_sw≠_ªÀa£
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd
, AO_à
√w_vÆ
)

221 
	`AO_lwsync
();

222  
	`AO_com∑ª_™d_sw≠
(
addr
, 
ﬁd
, 
√w_vÆ
);

223 
	}
}

224 
	#AO_HAVE_com∑ª_™d_sw≠_ªÀa£


	)

226 
AO_INLINE
 

227 
	$AO_com∑ª_™d_sw≠_fuŒ
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd
, AO_à
√w_vÆ
)

229 
ªsu…
;

230 
	`AO_lwsync
();

231 
ªsu…
 = 
	`AO_com∑ª_™d_sw≠
(
addr
, 
ﬁd
, 
√w_vÆ
);

232 
	`AO_lwsync
();

233  
ªsu…
;

234 
	}
}

235 
	#AO_HAVE_com∑ª_™d_sw≠_fuŒ


	)

239 
AO_INLINE
 
AO_t


240 
	$AO_„tch_com∑ª_™d_sw≠
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd_vÆ
, AO_à
√w_vÆ
)

242 
AO_t
 
„tched_vÆ
;

243 #i‡
	`deföed
(
__powîpc64__
Ë|| deföed(
__µc64__
Ë|| deföed(
__64BIT__
)

244 
__asm__
 
	`__vﬁ©ûe__
(

251 : "=&r"(
„tched_vÆ
)

252 : "r"(
addr
), "r"(
√w_vÆ
), "r"(
ﬁd_vÆ
)

255 
__asm__
 
	`__vﬁ©ûe__
(

262 : "=&r"(
„tched_vÆ
)

263 : "r"(
addr
), "r"(
√w_vÆ
), "r"(
ﬁd_vÆ
)

266  
„tched_vÆ
;

267 
	}
}

268 
	#AO_HAVE_„tch_com∑ª_™d_sw≠


	)

270 
AO_INLINE
 
AO_t


271 
	$AO_„tch_com∑ª_™d_sw≠_acquúe
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd_vÆ
,

272 
AO_t
 
√w_vÆ
)

274 
AO_t
 
ªsu…
 = 
	`AO_„tch_com∑ª_™d_sw≠
(
addr
, 
ﬁd_vÆ
, 
√w_vÆ
);

275 
	`AO_lwsync
();

276  
ªsu…
;

277 
	}
}

278 
	#AO_HAVE_„tch_com∑ª_™d_sw≠_acquúe


	)

280 
AO_INLINE
 
AO_t


281 
	$AO_„tch_com∑ª_™d_sw≠_ªÀa£
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd_vÆ
,

282 
AO_t
 
√w_vÆ
)

284 
	`AO_lwsync
();

285  
	`AO_„tch_com∑ª_™d_sw≠
(
addr
, 
ﬁd_vÆ
, 
√w_vÆ
);

286 
	}
}

287 
	#AO_HAVE_„tch_com∑ª_™d_sw≠_ªÀa£


	)

289 
AO_INLINE
 
AO_t


290 
	$AO_„tch_com∑ª_™d_sw≠_fuŒ
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd_vÆ
,

291 
AO_t
 
√w_vÆ
)

293 
AO_t
 
ªsu…
;

294 
	`AO_lwsync
();

295 
ªsu…
 = 
	`AO_„tch_com∑ª_™d_sw≠
(
addr
, 
ﬁd_vÆ
, 
√w_vÆ
);

296 
	`AO_lwsync
();

297  
ªsu…
;

298 
	}
}

299 
	#AO_HAVE_„tch_com∑ª_™d_sw≠_fuŒ


	)

301 #i‚de‡
AO_PREFER_GENERALIZED


302 
AO_INLINE
 
AO_t


303 
	$AO_„tch_™d_add
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ö¸
) {

304 
AO_t
 
ﬁdvÆ
;

305 
AO_t
 
√wvÆ
;

306 #i‡
	`deföed
(
__powîpc64__
Ë|| deföed(
__µc64__
Ë|| deföed(
__64BIT__
)

307 
__asm__
 
	`__vﬁ©ûe__
(

312 : "=&r"(
ﬁdvÆ
), "=&r"(
√wvÆ
)

313 : "r"(
addr
), "r"(
ö¸
)

316 
__asm__
 
	`__vﬁ©ûe__
(

321 : "=&r"(
ﬁdvÆ
), "=&r"(
√wvÆ
)

322 : "r"(
addr
), "r"(
ö¸
)

325  
ﬁdvÆ
;

326 
	}
}

327 
	#AO_HAVE_„tch_™d_add


	)

329 
AO_INLINE
 
AO_t


330 
	$AO_„tch_™d_add_acquúe
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ö¸
) {

331 
AO_t
 
ªsu…
 = 
	`AO_„tch_™d_add
(
addr
, 
ö¸
);

332 
	`AO_lwsync
();

333  
ªsu…
;

334 
	}
}

335 
	#AO_HAVE_„tch_™d_add_acquúe


	)

337 
AO_INLINE
 
AO_t


338 
	$AO_„tch_™d_add_ªÀa£
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ö¸
) {

339 
	`AO_lwsync
();

340  
	`AO_„tch_™d_add
(
addr
, 
ö¸
);

341 
	}
}

342 
	#AO_HAVE_„tch_™d_add_ªÀa£


	)

344 
AO_INLINE
 
AO_t


345 
	$AO_„tch_™d_add_fuŒ
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ö¸
) {

346 
AO_t
 
ªsu…
;

347 
	`AO_lwsync
();

348 
ªsu…
 = 
	`AO_„tch_™d_add
(
addr
, 
ö¸
);

349 
	`AO_lwsync
();

350  
ªsu…
;

351 
	}
}

352 
	#AO_HAVE_„tch_™d_add_fuŒ


	)

355 #i‡
deföed
(
__powîpc64__
Ë|| deföed(
__µc64__
Ë|| deföed(
__64BIT__
)

358 
	#AO_T_IS_INT


	)

	@/usr/include/atomic_ops/sysdeps/gcc/sparc.h

21 
	~"../Æl_©omic_lﬂd_°‹e.h
"

24 
	~"../‹dîed_ex˚±_wr.h
"

27 
	~"../ã°_™d_£t_t_is_ch¨.h
"

29 
AO_INLINE
 
AO_TS_VAL_t


30 
	$AO_ã°_™d_£t_fuŒ
(vﬁ©ûê
AO_TS_t
 *
addr
) {

31 
AO_TS_VAL_t
 
ﬁdvÆ
;

33 
__asm__
 
	`__vﬁ©ûe__
("ldstub %1,%0"

34 : "Ù"(
ﬁdvÆ
), "=m"(*
addr
)

35 : "m"(*
addr
) : "memory");

36  
ﬁdvÆ
;

37 
	}
}

38 
	#AO_HAVE_ã°_™d_£t_fuŒ


	)

40 #i‚de‡
AO_NO_SPARC_V9


42 
AO_INLINE
 

43 
	$AO_com∑ª_™d_sw≠_fuŒ
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd
, AO_à
√w_vÆ
) {

44 
ªt
;

45 
__asm__
 
	`__vﬁ©ûe__
 ("membar #StoreLoad | #LoadLoad\n\t"

46 #i‡
	`deföed
(
__¨ch64__
)

57 : "Ù" (
ªt
), "+r" (
√w_vÆ
)

58 : "r" (
addr
), "0" (
ﬁd
)

60  ()
ªt
;

61 
	}
}

62 
	#AO_HAVE_com∑ª_™d_sw≠_fuŒ


	)

	@/usr/include/atomic_ops/sysdeps/gcc/x86.h

24 
	~"../Æl_Æig√d_©omic_lﬂd_°‹e.h
"

26 
	~"../ã°_™d_£t_t_is_ch¨.h
"

28 #i‡
deföed
(
__SSE2__
Ë&& !deföed(
AO_USE_PENTIUM4_INSTRS
)

30 
	#AO_USE_PENTIUM4_INSTRS


	)

33 #i‡
deföed
(
AO_USE_PENTIUM4_INSTRS
)

34 
AO_INLINE
 

35 
	$AO_n›_fuŒ
()

37 
__asm__
 
	`__vﬁ©ûe__
("mfence" : : : "memory");

38 
	}
}

39 
	#AO_HAVE_n›_fuŒ


	)

51 #i‚de‡
AO_PREFER_GENERALIZED


52 
AO_INLINE
 
AO_t


53 
	$AO_„tch_™d_add_fuŒ
 (vﬁ©ûê
AO_t
 *
p
, AO_à
ö¸
)

55 
AO_t
 
ªsu…
;

57 
__asm__
 
	`__vﬁ©ûe__
 ("lock; xadd %0, %1" :

58 "Ù" (
ªsu…
), "=m" (*
p
Ë: "0" (
ö¸
), "m" (*p)

60  
ªsu…
;

61 
	}
}

62 
	#AO_HAVE_„tch_™d_add_fuŒ


	)

65 
AO_INLINE
 

66 
	$AO_ch¨_„tch_™d_add_fuŒ
 (vﬁ©ûê*
p
, 
ö¸
)

68 
ªsu…
;

70 
__asm__
 
	`__vﬁ©ûe__
 ("lock; xaddb %0, %1" :

71 "=q" (
ªsu…
), "=m" (*
p
Ë: "0" (
ö¸
), "m" (*p)

73  
ªsu…
;

74 
	}
}

75 
	#AO_HAVE_ch¨_„tch_™d_add_fuŒ


	)

77 
AO_INLINE
 

78 
	$AO_sh‹t_„tch_™d_add_fuŒ
 (vﬁ©ûê*
p
, 
ö¸
)

80 
ªsu…
;

82 
__asm__
 
	`__vﬁ©ûe__
 ("lock; xaddw %0, %1" :

83 "Ù" (
ªsu…
), "=m" (*
p
Ë: "0" (
ö¸
), "m" (*p)

85  
ªsu…
;

86 
	}
}

87 
	#AO_HAVE_sh‹t_„tch_™d_add_fuŒ


	)

89 #i‚de‡
AO_PREFER_GENERALIZED


91 
AO_INLINE
 

92 
	$AO_™d_fuŒ
 (vﬁ©ûê
AO_t
 *
p
, AO_à
vÆue
)

94 
__asm__
 
	`__vﬁ©ûe__
 ("lock;ánd %1, %0" :

95 "=m" (*
p
Ë: "r" (
vÆue
), "m" (*p)

97 
	}
}

98 
	#AO_HAVE_™d_fuŒ


	)

100 
AO_INLINE
 

101 
	$AO_‹_fuŒ
 (vﬁ©ûê
AO_t
 *
p
, AO_à
vÆue
)

103 
__asm__
 
	`__vﬁ©ûe__
 ("lock; or %1, %0" :

104 "=m" (*
p
Ë: "r" (
vÆue
), "m" (*p)

106 
	}
}

107 
	#AO_HAVE_‹_fuŒ


	)

109 
AO_INLINE
 

110 
	$AO_x‹_fuŒ
 (vﬁ©ûê
AO_t
 *
p
, AO_à
vÆue
)

112 
__asm__
 
	`__vﬁ©ûe__
 ("lock; xor %1, %0" :

113 "=m" (*
p
Ë: "r" (
vÆue
), "m" (*p)

115 
	}
}

116 
	#AO_HAVE_x‹_fuŒ


	)

123 
AO_INLINE
 
AO_TS_VAL_t


124 
	$AO_ã°_™d_£t_fuŒ
(vﬁ©ûê
AO_TS_t
 *
addr
)

126 
ﬁdvÆ
;

128 
__asm__
 
	`__vﬁ©ûe__
 ("xchgb %0, %1"

129 : "=q" (
ﬁdvÆ
), "=m" (*
addr
)

130 : "0" (()0xff), "m" (*
addr
)

132  (
AO_TS_VAL_t
)
ﬁdvÆ
;

133 
	}
}

134 
	#AO_HAVE_ã°_™d_£t_fuŒ


	)

136 #i‚de‡
AO_GENERALIZE_ASM_BOOL_CAS


138 
AO_INLINE
 

139 
	$AO_com∑ª_™d_sw≠_fuŒ
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd
, AO_à
√w_vÆ
)

141 #ifde‡
AO_USE_SYNC_CAS_BUILTIN


142  ()
	`__sync_boﬁ_com∑ª_™d_sw≠
(
addr
, 
ﬁd
, 
√w_vÆ


148 
ªsu…
;

149 
__asm__
 
	`__vﬁ©ûe__
 ("lock; cmpxchg %3, %0; setz %1"

150 : "=m" (*
addr
), "˜" (
ªsu…
)

151 : "m" (*
addr
), "r" (
√w_vÆ
), "a" (
ﬁd
)

153  ()
ªsu…
;

155 
	}
}

156 
	#AO_HAVE_com∑ª_™d_sw≠_fuŒ


	)

159 
AO_INLINE
 
AO_t


160 
	$AO_„tch_com∑ª_™d_sw≠_fuŒ
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd_vÆ
,

161 
AO_t
 
√w_vÆ
)

163 #ifde‡
AO_USE_SYNC_CAS_BUILTIN


164  
	`__sync_vÆ_com∑ª_™d_sw≠
(
addr
, 
ﬁd_vÆ
, 
√w_vÆ


167 
AO_t
 
„tched_vÆ
;

168 
__asm__
 
	`__vﬁ©ûe__
 ("lock; cmpxchg %3, %4"

169 : "˜" (
„tched_vÆ
), "=m" (*
addr
)

170 : "a" (
ﬁd_vÆ
), "r" (
√w_vÆ
), "m" (*
addr
)

172  
„tched_vÆ
;

174 
	}
}

175 
	#AO_HAVE_„tch_com∑ª_™d_sw≠_fuŒ


	)

177 #i‡!
deföed
(
__x86_64__
Ë&& !deföed(
AO_USE_SYNC_CAS_BUILTIN
)

178 
	~"../°™d¨d_ao_doubÀ_t.h
"

183 
	#AO_ACCESS_doubÀ_CHECK_ALIGNED


	)

184 
	~"../lﬂd°‹e/doubÀ_©omic_lﬂd_°‹e.h
"

188 
AO_INLINE
 

189 
	$AO_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ
(vﬁ©ûê
AO_doubÀ_t
 *
addr
,

190 
AO_t
 
ﬁd_vÆ1
, AO_à
ﬁd_vÆ2
,

191 
AO_t
 
√w_vÆ1
, AO_à
√w_vÆ2
)

193 
ªsu…
;

194 #ifde‡
__PIC__


195 
AO_t
 
ßved_ebx
;

205 #ifde‡
__OPTIMIZE__


206 
__asm__
 
	`__vﬁ©ûe__
("mov %%ebx, %2\n\t"

212 : "=m" (*
addr
), "˜" (
ªsu…
), "=m" (
ßved_ebx
)

213 : "m" (*
addr
), "d" (
ﬁd_vÆ2
), "a" (
ﬁd_vÆ1
),

214 "c" (
√w_vÆ2
), "m" (
√w_vÆ1
)

220 
AO_t
 
ßved_edi
;

221 
__asm__
 
	`__vﬁ©ûe__
("mov %%edi, %3\n\t"

229 : "=m" (*
addr
), "˜" (
ªsu…
),

230 "=m" (
ßved_ebx
), "=m" (
ßved_edi
)

231 : "m" (*
addr
), "d" (
ﬁd_vÆ2
), "a" (
ﬁd_vÆ1
),

232 "c" (
√w_vÆ2
), "m" (
√w_vÆ1
) : "memory");

238 
__asm__
 
	`__vﬁ©ûe__
 ("lock; cmpxchg8b %0; setz %1"

239 : "=m" (*
addr
), "˜" (
ªsu…
)

240 : "m" (*
addr
), "d" (
ﬁd_vÆ2
), "a" (
ﬁd_vÆ1
),

241 "c" (
√w_vÆ2
), "b" (
√w_vÆ1
)

244  (Ë
ªsu…
;

245 
	}
}

246 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ


	)

248 
	#AO_T_IS_INT


	)

250 #ñi‡
deföed
(
__ILP32__
Ë|| !deföed(
__x86_64__
)

251 
	~"../°™d¨d_ao_doubÀ_t.h
"

255 
	#AO_ACCESS_doubÀ_CHECK_ALIGNED


	)

256 
	~"../lﬂd°‹e/doubÀ_©omic_lﬂd_°‹e.h
"

261 
AO_INLINE
 

262 
	$AO_doubÀ_com∑ª_™d_sw≠_fuŒ
(vﬁ©ûê
AO_doubÀ_t
 *
addr
,

263 
AO_doubÀ_t
 
ﬁd_vÆ
, AO_doubÀ_à
√w_vÆ
)

266  
	`__sync_boﬁ_com∑ª_™d_sw≠
(&
addr
->
AO_whﬁe
,

267 
ﬁd_vÆ
.
AO_whﬁe
, 
√w_vÆ
.AO_whole

269 
	}
}

270 
	#AO_HAVE_doubÀ_com∑ª_™d_sw≠_fuŒ


	)

272 
	#AO_T_IS_INT


	)

276 
AO_INLINE
 

277 
	$AO_öt_„tch_™d_add_fuŒ
 (vﬁ©ûê*
p
, 
ö¸
)

279 
ªsu…
;

281 
__asm__
 
	`__vﬁ©ûe__
 ("lock; xaddl %0, %1"

282 : "Ù" (
ªsu…
), "=m" (*
p
)

283 : "0" (
ö¸
), "m" (*
p
)

285  
ªsu…
;

286 
	}
}

287 
	#AO_HAVE_öt_„tch_™d_add_fuŒ


	)

303 #ifde‡
AO_CMPXCHG16B_AVAILABLE


304 
	~"../°™d¨d_ao_doubÀ_t.h
"

314 
AO_INLINE
 

315 
	$AO_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ
(vﬁ©ûê
AO_doubÀ_t
 *
addr
,

316 
AO_t
 
ﬁd_vÆ1
, AO_à
ﬁd_vÆ2
,

317 
AO_t
 
√w_vÆ1
, AO_à
√w_vÆ2
)

319 
ªsu…
;

320 
__asm__
 
	`__vﬁ©ûe__
("lock; cmpxchg16b %0; setz %1"

321 : "=m"(*
addr
), "˜"(
ªsu…
)

322 : "m"(*
addr
), "d" (
ﬁd_vÆ2
), "a" (
ﬁd_vÆ1
),

323 "c" (
√w_vÆ2
), "b" (
√w_vÆ1
)

325  (Ë
ªsu…
;

326 
	}
}

327 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ


	)

329 #ñi‡
deföed
(
AO_WEAK_DOUBLE_CAS_EMULATION
)

330 
	~"../°™d¨d_ao_doubÀ_t.h
"

336 
AO_com∑ª_doubÀ_™d_sw≠_doubÀ_emuœti⁄
(

337 vﬁ©ûê
AO_doubÀ_t
 *
addr
,

338 
AO_t
 
ﬁd_vÆ1
, AO_à
ﬁd_vÆ2
,

339 
AO_t
 
√w_vÆ1
, AO_à
√w_vÆ2
);

341 
AO_INLINE
 

342 
	$AO_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ
(vﬁ©ûê
AO_doubÀ_t
 *
addr
,

343 
AO_t
 
ﬁd_vÆ1
, AO_à
ﬁd_vÆ2
,

344 
AO_t
 
√w_vÆ1
, AO_à
√w_vÆ2
)

346  
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_emuœti⁄
(
addr
,

347 
ﬁd_vÆ1
, 
ﬁd_vÆ2
, 
√w_vÆ1
, 
√w_vÆ2
);

348 
	}
}

349 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ


	)

360 
	~"../‹dîed_ex˚±_wr.h
"

	@/usr/include/atomic_ops/sysdeps/ibmc/powerpc.h

17 
	~"../Æl_Æig√d_©omic_lﬂd_°‹e.h
"

19 
AO_sync
();

20 #¥agm®
mc_func
 
AO_sync
 { "7c0004ac" }

22 #ifde‡
__NO_LWSYNC__


23 
	#AO_lwsync
 
AO_sync


	)

25 
AO_lwsync
();

26 #¥agm®
mc_func
 
AO_lwsync
 { "7c2004ac" }

29 
	#AO_n›_wrôe
(Ë
	`AO_lwsync
()

	)

30 
	#AO_HAVE_n›_wrôe


	)

32 
	#AO_n›_ªad
(Ë
	`AO_lwsync
()

	)

33 
	#AO_HAVE_n›_ªad


	)

37 
AO_INLINE
 
AO_t


38 
	$AO_lﬂd_acquúe
(c⁄° vﬁ©ûê
AO_t
 *
addr
)

40 
AO_t
 
ªsu…
 = *
addr
;

41 
	`AO_lwsync
();

42  
ªsu…
;

43 
	}
}

44 
	#AO_HAVE_lﬂd_acquúe


	)

46 
AO_INLINE
 

47 
	$AO_°‹e_ªÀa£
(vﬁ©ûê
AO_t
 *
addr
, AO_à
vÆue
)

49 
	`AO_lwsync
();

50 *
addr
 = 
vÆue
;

51 
	}
}

52 
	#AO_HAVE_°‹e_ªÀa£


	)

54 #i‚de‡
AO_PREFER_GENERALIZED


64 
AO_INLINE
 
AO_TS_VAL_t


65 
	$AO_ã°_™d_£t_acquúe
(vﬁ©ûê
AO_TS_t
 *
addr
) {

66 
AO_TS_VAL_t
 
ªsu…
 = 
	`AO_ã°_™d_£t
(
addr
);

67 
	`AO_lwsync
();

68  
ªsu…
;

69 
	}
}

70 
	#AO_HAVE_ã°_™d_£t_acquúe


	)

72 
AO_INLINE
 
AO_TS_VAL_t


73 
	$AO_ã°_™d_£t_ªÀa£
(vﬁ©ûê
AO_TS_t
 *
addr
) {

74 
	`AO_lwsync
();

75  
	`AO_ã°_™d_£t
(
addr
);

76 
	}
}

77 
	#AO_HAVE_ã°_™d_£t_ªÀa£


	)

79 
AO_INLINE
 
AO_TS_VAL_t


80 
	$AO_ã°_™d_£t_fuŒ
(vﬁ©ûê
AO_TS_t
 *
addr
) {

81 
AO_TS_VAL_t
 
ªsu…
;

82 
	`AO_lwsync
();

83 
ªsu…
 = 
	`AO_ã°_™d_£t
(
addr
);

84 
	`AO_lwsync
();

85  
ªsu…
;

86 
	}
}

87 
	#AO_HAVE_ã°_™d_£t_fuŒ


	)

97 
AO_INLINE
 
AO_t


98 
	$AO_„tch_com∑ª_™d_sw≠_acquúe
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd_vÆ
,

99 
AO_t
 
√w_vÆ
)

101 
AO_t
 
ªsu…
 = 
	`AO_„tch_com∑ª_™d_sw≠
(
addr
, 
ﬁd_vÆ
, 
√w_vÆ
);

102 
	`AO_lwsync
();

103  
ªsu…
;

104 
	}
}

105 
	#AO_HAVE_„tch_com∑ª_™d_sw≠_acquúe


	)

107 
AO_INLINE
 
AO_t


108 
	$AO_„tch_com∑ª_™d_sw≠_ªÀa£
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd_vÆ
,

109 
AO_t
 
√w_vÆ
)

111 
	`AO_lwsync
();

112  
	`AO_„tch_com∑ª_™d_sw≠
(
addr
, 
ﬁd_vÆ
, 
√w_vÆ
);

113 
	}
}

114 
	#AO_HAVE_„tch_com∑ª_™d_sw≠_ªÀa£


	)

116 
AO_INLINE
 
AO_t


117 
	$AO_„tch_com∑ª_™d_sw≠_fuŒ
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd_vÆ
,

118 
AO_t
 
√w_vÆ
)

120 
AO_t
 
ªsu…
;

121 
	`AO_lwsync
();

122 
ªsu…
 = 
	`AO_„tch_com∑ª_™d_sw≠
(
addr
, 
ﬁd_vÆ
, 
√w_vÆ
);

123 
	`AO_lwsync
();

124  
ªsu…
;

125 
	}
}

126 
	#AO_HAVE_„tch_com∑ª_™d_sw≠_fuŒ


	)

	@/usr/include/atomic_ops/sysdeps/icc/ia64.h

29 
	~"../Æl_©omic_lﬂd_°‹e.h
"

31 
	~"../ã°_™d_£t_t_is_ch¨.h
"

33 
	~<ü64öåö.h
>

39 
	#AO_INTEL_PTR_t
 *

	)

41 
AO_INLINE
 
AO_t


42 
	$AO_lﬂd_acquúe
(c⁄° vﬁ©ûê
AO_t
 *
p
)

44  (
AO_t
)(
	`__ld8_acq
((
AO_INTEL_PTR_t
)
p
));

45 
	}
}

46 
	#AO_HAVE_lﬂd_acquúe


	)

48 
AO_INLINE
 

49 
	$AO_°‹e_ªÀa£
(vﬁ©ûê
AO_t
 *
p
, AO_à
vÆ
)

51 
	`__°8_ªl
((
AO_INTEL_PTR_t
)
p
, (
__öt64
)
vÆ
);

52 
	}
}

53 
	#AO_HAVE_°‹e_ªÀa£


	)

55 
AO_INLINE
 

56 
	$AO_ch¨_lﬂd_acquúe
(c⁄° vﬁ©ûê*
p
)

59  (
	`__ld1_acq
((
AO_INTEL_PTR_t
)
p
));

60 
	}
}

61 
	#AO_HAVE_ch¨_lﬂd_acquúe


	)

63 
AO_INLINE
 

64 
	$AO_ch¨_°‹e_ªÀa£
(vﬁ©ûê*
p
, 
vÆ
)

66 
	`__°1_ªl
((
AO_INTEL_PTR_t
)
p
, 
vÆ
);

67 
	}
}

68 
	#AO_HAVE_ch¨_°‹e_ªÀa£


	)

70 
AO_INLINE
 

71 
	$AO_sh‹t_lﬂd_acquúe
(c⁄° vﬁ©ûê*
p
)

74  (
	`__ld2_acq
((
AO_INTEL_PTR_t
)
p
));

75 
	}
}

76 
	#AO_HAVE_sh‹t_lﬂd_acquúe


	)

78 
AO_INLINE
 

79 
	$AO_sh‹t_°‹e_ªÀa£
(vﬁ©ûê*
p
, 
vÆ
)

81 
	`__°2_ªl
((
AO_INTEL_PTR_t
)
p
, 
vÆ
);

82 
	}
}

83 
	#AO_HAVE_sh‹t_°‹e_ªÀa£


	)

85 
AO_INLINE
 

86 
	$AO_öt_lﬂd_acquúe
(c⁄° vﬁ©ûê*
p
)

89  (
	`__ld4_acq
((
AO_INTEL_PTR_t
)
p
));

90 
	}
}

91 
	#AO_HAVE_öt_lﬂd_acquúe


	)

93 
AO_INLINE
 

94 
	$AO_öt_°‹e_ªÀa£
(vﬁ©ûê*
p
, 
vÆ
)

96 
	`__°4_ªl
((
AO_INTEL_PTR_t
)
p
, 
vÆ
);

97 
	}
}

98 
	#AO_HAVE_öt_°‹e_ªÀa£


	)

100 
AO_INLINE
 

101 
	$AO_n›_fuŒ
()

103 
	`__mf
();

104 
	}
}

105 
	#AO_HAVE_n›_fuŒ


	)

107 #i‚de‡
AO_PREFER_GENERALIZED


108 
AO_INLINE
 
AO_t


109 
	$AO_„tch_™d_add1_acquúe
(vﬁ©ûê
AO_t
 *
p
)

111  
	`__„tchadd8_acq
((
__öt64
 *)
p
, 1);

112 
	}
}

113 
	#AO_HAVE_„tch_™d_add1_acquúe


	)

115 
AO_INLINE
 
AO_t


116 
	$AO_„tch_™d_add1_ªÀa£
(vﬁ©ûê
AO_t
 *
p
)

118  
	`__„tchadd8_ªl
((
__öt64
 *)
p
, 1);

119 
	}
}

120 
	#AO_HAVE_„tch_™d_add1_ªÀa£


	)

122 
AO_INLINE
 
AO_t


123 
	$AO_„tch_™d_sub1_acquúe
(vﬁ©ûê
AO_t
 *
p
)

125  
	`__„tchadd8_acq
((
__öt64
 *)
p
, -1);

126 
	}
}

127 
	#AO_HAVE_„tch_™d_sub1_acquúe


	)

129 
AO_INLINE
 
AO_t


130 
	$AO_„tch_™d_sub1_ªÀa£
(vﬁ©ûê
AO_t
 *
p
)

132  
	`__„tchadd8_ªl
((
__öt64
 *)
p
, -1);

133 
	}
}

134 
	#AO_HAVE_„tch_™d_sub1_ªÀa£


	)

137 
AO_INLINE
 
AO_t


138 
	$AO_„tch_com∑ª_™d_sw≠_acquúe
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd_vÆ
,

139 
AO_t
 
√w_vÆ
)

141  
	`_I¡îlockedCom∑ªExch™ge64_acq
(
addr
, 
√w_vÆ
, 
ﬁd_vÆ
);

142 
	}
}

143 
	#AO_HAVE_„tch_com∑ª_™d_sw≠_acquúe


	)

145 
AO_INLINE
 
AO_t


146 
	$AO_„tch_com∑ª_™d_sw≠_ªÀa£
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd_vÆ
,

147 
AO_t
 
√w_vÆ
)

149  
	`_I¡îlockedCom∑ªExch™ge64_ªl
(
addr
, 
√w_vÆ
, 
ﬁd_vÆ
);

150 
	}
}

151 
	#AO_HAVE_„tch_com∑ª_™d_sw≠_ªÀa£


	)

153 
AO_INLINE
 

154 
	$AO_ch¨_„tch_com∑ª_™d_sw≠_acquúe
(vﬁ©ûê*
addr
,

155 
ﬁd_vÆ
,

156 
√w_vÆ
)

158  
	`_I¡îlockedCom∑ªExch™ge8_acq
(
addr
, 
√w_vÆ
, 
ﬁd_vÆ
);

159 
	}
}

160 
	#AO_HAVE_ch¨_„tch_com∑ª_™d_sw≠_acquúe


	)

162 
AO_INLINE
 

163 
	$AO_ch¨_„tch_com∑ª_™d_sw≠_ªÀa£
(vﬁ©ûê*
addr
,

164 
ﬁd_vÆ
,

165 
√w_vÆ
)

167  
	`_I¡îlockedCom∑ªExch™ge8_ªl
(
addr
, 
√w_vÆ
, 
ﬁd_vÆ
);

168 
	}
}

169 
	#AO_HAVE_ch¨_„tch_com∑ª_™d_sw≠_ªÀa£


	)

171 
AO_INLINE
 

172 
	$AO_sh‹t_„tch_com∑ª_™d_sw≠_acquúe
(vﬁ©ûê*
addr
,

173 
ﬁd_vÆ
,

174 
√w_vÆ
)

176  
	`_I¡îlockedCom∑ªExch™ge16_acq
(
addr
, 
√w_vÆ
, 
ﬁd_vÆ
);

177 
	}
}

178 
	#AO_HAVE_sh‹t_„tch_com∑ª_™d_sw≠_acquúe


	)

180 
AO_INLINE
 

181 
	$AO_sh‹t_„tch_com∑ª_™d_sw≠_ªÀa£
(vﬁ©ûê*
addr
,

182 
ﬁd_vÆ
,

183 
√w_vÆ
)

185  
	`_I¡îlockedCom∑ªExch™ge16_ªl
(
addr
, 
√w_vÆ
, 
ﬁd_vÆ
);

186 
	}
}

187 
	#AO_HAVE_sh‹t_„tch_com∑ª_™d_sw≠_ªÀa£


	)

189 
AO_INLINE
 

190 
	$AO_öt_„tch_com∑ª_™d_sw≠_acquúe
(vﬁ©ûê*
addr
,

191 
ﬁd_vÆ
,

192 
√w_vÆ
)

194  
	`_I¡îlockedCom∑ªExch™ge_acq
(
addr
, 
√w_vÆ
, 
ﬁd_vÆ
);

195 
	}
}

196 
	#AO_HAVE_öt_„tch_com∑ª_™d_sw≠_acquúe


	)

198 
AO_INLINE
 

199 
	$AO_öt_„tch_com∑ª_™d_sw≠_ªÀa£
(vﬁ©ûê*
addr
,

200 
ﬁd_vÆ
,

201 
√w_vÆ
)

203  
	`_I¡îlockedCom∑ªExch™ge_ªl
(
addr
, 
√w_vÆ
, 
ﬁd_vÆ
);

204 
	}
}

205 
	#AO_HAVE_öt_„tch_com∑ª_™d_sw≠_ªÀa£


	)

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_BSD


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_BSD
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

101 #unde‡
__USE_ISOC11


102 #unde‡
__USE_ISOC99


103 #unde‡
__USE_ISOC95


104 #unde‡
__USE_ISOCXX11


105 #unde‡
__USE_POSIX


106 #unde‡
__USE_POSIX2


107 #unde‡
__USE_POSIX199309


108 #unde‡
__USE_POSIX199506


109 #unde‡
__USE_XOPEN


110 #unde‡
__USE_XOPEN_EXTENDED


111 #unde‡
__USE_UNIX98


112 #unde‡
__USE_XOPEN2K


113 #unde‡
__USE_XOPEN2KXSI


114 #unde‡
__USE_XOPEN2K8


115 #unde‡
__USE_XOPEN2K8XSI


116 #unde‡
__USE_LARGEFILE


117 #unde‡
__USE_LARGEFILE64


118 #unde‡
__USE_FILE_OFFSET64


119 #unde‡
__USE_BSD


120 #unde‡
__USE_SVID


121 #unde‡
__USE_MISC


122 #unde‡
__USE_ATFILE


123 #unde‡
__USE_GNU


124 #unde‡
__USE_REENTRANT


125 #unde‡
__USE_FORTIFY_LEVEL


126 #unde‡
__KERNEL_STRICT_NAMES


130 #i‚de‡
_LOOSE_KERNEL_NAMES


131 
	#__KERNEL_STRICT_NAMES


	)

141 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


142 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

143 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

145 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

150 #ifde‡
_GNU_SOURCE


151 #unde‡
_ISOC95_SOURCE


152 
	#_ISOC95_SOURCE
 1

	)

153 #unde‡
_ISOC99_SOURCE


154 
	#_ISOC99_SOURCE
 1

	)

155 #unde‡
_ISOC11_SOURCE


156 
	#_ISOC11_SOURCE
 1

	)

157 #unde‡
_POSIX_SOURCE


158 
	#_POSIX_SOURCE
 1

	)

159 #unde‡
_POSIX_C_SOURCE


160 
	#_POSIX_C_SOURCE
 200809L

	)

161 #unde‡
_XOPEN_SOURCE


162 
	#_XOPEN_SOURCE
 700

	)

163 #unde‡
_XOPEN_SOURCE_EXTENDED


164 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

165 #unde‡
_LARGEFILE64_SOURCE


166 
	#_LARGEFILE64_SOURCE
 1

	)

167 #unde‡
_DEFAULT_SOURCE


168 
	#_DEFAULT_SOURCE
 1

	)

169 #unde‡
_BSD_SOURCE


170 
	#_BSD_SOURCE
 1

	)

171 #unde‡
_SVID_SOURCE


172 
	#_SVID_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

180 || (!
deföed
 
	g__STRICT_ANSI__
 \

181 && !
deföed
 
	g_ISOC99_SOURCE
 \

182 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

183 && !
deföed
 
	g_XOPEN_SOURCE
 \

184 && !
deföed
 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
))

185 #unde‡
_DEFAULT_SOURCE


186 
	#_DEFAULT_SOURCE
 1

	)

187 #unde‡
_BSD_SOURCE


188 
	#_BSD_SOURCE
 1

	)

189 #unde‡
_SVID_SOURCE


190 
	#_SVID_SOURCE
 1

	)

194 #i‡(
deföed
 
_ISOC11_SOURCE
 \

195 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

196 
	#__USE_ISOC11
 1

	)

200 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

201 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

202 
	#__USE_ISOC99
 1

	)

206 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

207 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

208 
	#__USE_ISOC95
 1

	)

215 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

216 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

217 
	#__USE_ISOCXX11
 1

	)

223 #ifde‡
_DEFAULT_SOURCE


224 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


225 
	#__USE_POSIX_IMPLICITLY
 1

	)

227 #unde‡
_POSIX_SOURCE


228 
	#_POSIX_SOURCE
 1

	)

229 #unde‡
_POSIX_C_SOURCE


230 
	#_POSIX_C_SOURCE
 200809L

	)

232 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

233 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

234 
	#_POSIX_SOURCE
 1

	)

235 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

236 
	#_POSIX_C_SOURCE
 2

	)

237 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

238 
	#_POSIX_C_SOURCE
 199506L

	)

239 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

240 
	#_POSIX_C_SOURCE
 200112L

	)

242 
	#_POSIX_C_SOURCE
 200809L

	)

244 
	#__USE_POSIX_IMPLICITLY
 1

	)

247 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


248 
	#__USE_POSIX
 1

	)

251 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


252 
	#__USE_POSIX2
 1

	)

255 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

256 
	#__USE_POSIX199309
 1

	)

259 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

260 
	#__USE_POSIX199506
 1

	)

263 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

264 
	#__USE_XOPEN2K
 1

	)

265 #unde‡
__USE_ISOC95


266 
	#__USE_ISOC95
 1

	)

267 #unde‡
__USE_ISOC99


268 
	#__USE_ISOC99
 1

	)

271 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

272 
	#__USE_XOPEN2K8
 1

	)

273 #unde‡
_ATFILE_SOURCE


274 
	#_ATFILE_SOURCE
 1

	)

277 #ifdef 
_XOPEN_SOURCE


278 
	#__USE_XOPEN
 1

	)

279 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

280 
	#__USE_XOPEN_EXTENDED
 1

	)

281 
	#__USE_UNIX98
 1

	)

282 #unde‡
_LARGEFILE_SOURCE


283 
	#_LARGEFILE_SOURCE
 1

	)

284 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

285 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

286 
	#__USE_XOPEN2K8
 1

	)

287 
	#__USE_XOPEN2K8XSI
 1

	)

289 
	#__USE_XOPEN2K
 1

	)

290 
	#__USE_XOPEN2KXSI
 1

	)

291 #unde‡
__USE_ISOC95


292 
	#__USE_ISOC95
 1

	)

293 #unde‡
__USE_ISOC99


294 
	#__USE_ISOC99
 1

	)

297 #ifde‡
_XOPEN_SOURCE_EXTENDED


298 
	#__USE_XOPEN_EXTENDED
 1

	)

303 #ifde‡
_LARGEFILE_SOURCE


304 
	#__USE_LARGEFILE
 1

	)

307 #ifde‡
_LARGEFILE64_SOURCE


308 
	#__USE_LARGEFILE64
 1

	)

311 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

312 
	#__USE_FILE_OFFSET64
 1

	)

315 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


316 
	#__USE_MISC
 1

	)

319 #ifdef 
_BSD_SOURCE


320 
	#__USE_BSD
 1

	)

323 #ifdef 
_SVID_SOURCE


324 
	#__USE_SVID
 1

	)

327 #ifdef 
_ATFILE_SOURCE


328 
	#__USE_ATFILE
 1

	)

331 #ifdef 
_GNU_SOURCE


332 
	#__USE_GNU
 1

	)

335 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


336 
	#__USE_REENTRANT
 1

	)

339 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

340 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

341 #i‡
_FORTIFY_SOURCE
 > 1

342 
	#__USE_FORTIFY_LEVEL
 2

	)

344 
	#__USE_FORTIFY_LEVEL
 1

	)

347 
	#__USE_FORTIFY_LEVEL
 0

	)

352 
	~<°dc-¥edef.h
>

360 #unde‡
__GNU_LIBRARY__


361 
	#__GNU_LIBRARY__
 6

	)

365 
	#__GLIBC__
 2

	)

366 
	#__GLIBC_MINOR__
 19

	)

368 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

369 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

372 #i‚de‡
__ASSEMBLER__


373 #i‚de‡
_SYS_CDEFS_H


374 
	~<sys/cdefs.h
>

379 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


380 
	#__USE_LARGEFILE
 1

	)

381 
	#__USE_LARGEFILE64
 1

	)

387 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

388 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

389 && 
deföed
 
	g__exã∫_ölöe


390 
	#__USE_EXTERN_INLINES
 1

	)

398 
	~<gnu/°ubs.h
>

	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


148 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

149 
	~<bôs/°dio-lock.h
>

154 
	t_IO_lock_t
;

160 
	s_IO_m¨kî
 {

161 
_IO_m¨kî
 *
	m_√xt
;

162 
_IO_FILE
 *
	m_sbuf
;

166 
	m_pos
;

168 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

169 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

170 
	mpublic
:

171 
°ªamm¨kî
(
°ªambuf
 *
sb
);

172 ~
°ªamm¨kî
();

173 
ßvög
(Ë{  
	m_•os
 == -2; }

174 
dñè
(
°ªamm¨kî
&);

175 
dñè
();

180 
	e__codecvt_ªsu…


182 
	m__codecvt_ok
,

183 
	m__codecvt_∑πül
,

184 
	m__codecvt_îr‹
,

185 
	m__codecvt_noc⁄v


188 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


191 
	s_IO_codecvt


193 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

194 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

195 
	m__mb°©e_t
 *,

196 c⁄° 
	mwch¨_t
 *,

197 c⁄° 
	mwch¨_t
 *,

198 c⁄° 
	mwch¨_t
 **, *,

200 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

201 
	m__mb°©e_t
 *, *,

203 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

204 
	m__mb°©e_t
 *,

206 c⁄° **, 
	mwch¨_t
 *,

207 
	mwch¨_t
 *, wchar_t **);

208 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

209 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

210 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

211 c⁄° *, c⁄° *, 
	m_IO_size_t
);

212 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

214 
_IO_ic⁄v_t
 
	m__cd_ö
;

215 
_IO_ic⁄v_t
 
	m__cd_out
;

219 
	s_IO_wide_d©a


221 
wch¨_t
 *
	m_IO_ªad_±r
;

222 
wch¨_t
 *
	m_IO_ªad_íd
;

223 
wch¨_t
 *
	m_IO_ªad_ba£
;

224 
wch¨_t
 *
	m_IO_wrôe_ba£
;

225 
wch¨_t
 *
	m_IO_wrôe_±r
;

226 
wch¨_t
 *
	m_IO_wrôe_íd
;

227 
wch¨_t
 *
	m_IO_buf_ba£
;

228 
wch¨_t
 *
	m_IO_buf_íd
;

230 
wch¨_t
 *
	m_IO_ßve_ba£
;

231 
wch¨_t
 *
	m_IO_backup_ba£
;

233 
wch¨_t
 *
	m_IO_ßve_íd
;

235 
__mb°©e_t
 
	m_IO_°©e
;

236 
__mb°©e_t
 
	m_IO_œ°_°©e
;

237 
_IO_codecvt
 
	m_codecvt
;

239 
wch¨_t
 
	m_sh‹tbuf
[1];

241 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

245 
	s_IO_FILE
 {

246 
	m_Êags
;

247 
	#_IO_fûe_Êags
 
_Êags


	)

251 * 
	m_IO_ªad_±r
;

252 * 
	m_IO_ªad_íd
;

253 * 
	m_IO_ªad_ba£
;

254 * 
	m_IO_wrôe_ba£
;

255 * 
	m_IO_wrôe_±r
;

256 * 
	m_IO_wrôe_íd
;

257 * 
	m_IO_buf_ba£
;

258 * 
	m_IO_buf_íd
;

260 *
	m_IO_ßve_ba£
;

261 *
	m_IO_backup_ba£
;

262 *
	m_IO_ßve_íd
;

264 
_IO_m¨kî
 *
	m_m¨kîs
;

266 
_IO_FILE
 *
	m_chaö
;

268 
	m_fûío
;

270 
	m_blksize
;

272 
	m_Êags2
;

274 
_IO_off_t
 
	m_ﬁd_off£t
;

276 
	#__HAVE_COLUMN


	)

278 
	m_cur_cﬁumn
;

279 sig√d 
	m_vèbÀ_off£t
;

280 
	m_sh‹tbuf
[1];

284 
_IO_lock_t
 *
	m_lock
;

285 #ifde‡
_IO_USE_OLD_IO_FILE


288 
	s_IO_FILE_com∂ëe


290 
_IO_FILE
 
	m_fûe
;

292 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

293 
_IO_off64_t
 
	m_off£t
;

294 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


296 
_IO_codecvt
 *
	m_codecvt
;

297 
_IO_wide_d©a
 *
	m_wide_d©a
;

298 
_IO_FILE
 *
	m_‰ìªs_li°
;

299 *
	m_‰ìªs_buf
;

300 
size_t
 
	m_‰ìªs_size
;

302 *
	m__∑d1
;

303 *
	m__∑d2
;

304 *
	m__∑d3
;

305 *
	m__∑d4
;

306 
size_t
 
	m__∑d5
;

308 
	m_mode
;

310 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

314 #i‚de‡
__˝lu•lus


315 
_IO_FILE
 
	t_IO_FILE
;

318 
	g_IO_FILE_∂us
;

320 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

321 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

322 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

323 #i‚de‡
_LIBC


324 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

325 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

326 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

328 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

329 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

330 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

338 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

346 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

347 
	tsize_t
 
	t__n
);

355 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

358 
	t__io_˛o£_‚
 (*
	t__cookõ
);

361 #ifde‡
_GNU_SOURCE


363 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

364 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

365 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

366 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

371 
__io_ªad_‚
 *
	mªad
;

372 
__io_wrôe_‚
 *
	mwrôe
;

373 
__io_£ek_‚
 *
	m£ek
;

374 
__io_˛o£_‚
 *
	m˛o£
;

375 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

376 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

378 
	g_IO_cookõ_fûe
;

381 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

382 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

386 #ifde‡
__˝lu•lus


390 
__undîÊow
 (
_IO_FILE
 *);

391 
__uÊow
 (
_IO_FILE
 *);

392 
__ovîÊow
 (
_IO_FILE
 *, );

393 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


394 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

395 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

396 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

399 #i‡ 
__GNUC__
 >= 3

400 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

402 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

405 
	#_IO_gëc_u∆ocked
(
_Â
) \

406 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

407 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

408 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

409 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

410 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

411 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

412 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

413 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

414 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

415 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

417 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


418 
	#_IO_gëwc_u∆ocked
(
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

422 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

423 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

424 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

425 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

426 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

427 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

428 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

431 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

432 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

434 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

435 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

436 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

437 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

439 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

442 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

443 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

445 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

446 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

447 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

449 #ifde‡
_IO_MTSAFE_IO


450 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

451 
	#_IO_Êockfûe
(
_Â
) \

452 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

453 
	#_IO_fu∆ockfûe
(
_Â
) \

454 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

456 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

457 
	#_IO_Êockfûe
(
_Â
Ë

	)

458 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

459 
	#_IO_·rylockfûe
(
_Â
Ë

	)

460 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

461 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

464 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

465 
_IO_va_li°
, *
__ª°ri˘
);

466 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

467 
_IO_va_li°
);

468 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

469 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

471 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

472 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

474 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

476 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


477 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

478 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

479 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

480 #i‡
__GNUC__
 >= 2

483 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


484 
	~<shlib-com∑t.h
>

485 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

486 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

487 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

488 c⁄° 
_IO_°dö_u£d
;

489 
wók_exã∫
 (
_IO_°dö_u£d
);

492 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


493 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

497 
	#_IO_fwide
(
__Â
, 
__mode
) \

498 ({ 
__ªsu…
 = (
__mode
); \

499 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

501 i‡((
__Â
)->
_mode
 == 0) \

503 (
__Â
)->
_mode
 = -1; \

504 
__ªsu…
 = (
__Â
)->
_mode
; \

506 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

507 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

509 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

510 
__ªsu…
; })

	)

513 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

514 
_IO_va_li°
, *
__ª°ri˘
);

515 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

516 
_IO_va_li°
);

517 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

518 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

521 #ifde‡
__LDBL_COMPAT


522 
	~<bôs/libio-ldbl.h
>

525 #ifde‡
__˝lu•lus


	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

54 
	#__STDC_ISO_10646__
 201103L

	)

57 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
) (*, const *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
) (const *, const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 c⁄° *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

150 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

151 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
;

155 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

158 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

159 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

160 
__THROW
;

163 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

164 
__THROW
 
__©åibuã_puª__
;

166 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

167 
__THROW
 
__©åibuã_puª__
;

168 
__END_NAMESPACE_STD


170 #ifde‡
__USE_XOPEN2K8


172 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

175 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

176 
size_t
 
__n
Ë
__THROW
;

180 
	~<xloˇÀ.h
>

182 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

183 
__loˇÀ_t
 
__loc
Ë
__THROW
;

185 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


192 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

196 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

197 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

198 
__END_NAMESPACE_STD


200 #ifde‡
__USE_XOPEN2K8


206 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

207 
__loˇÀ_t
 
__loc
Ë
__THROW
;

212 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

213 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

216 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

219 
__BEGIN_NAMESPACE_STD


221 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


222 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

223 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
__©åibuã_puª__
;

231 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


232 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

233 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
__©åibuã_puª__
;

240 
__END_NAMESPACE_STD


242 #ifde‡
__USE_GNU


245 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

246 
__THROW
 
__©åibuã_puª__
;

249 
__BEGIN_NAMESPACE_STD


252 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

253 
__THROW
 
__©åibuã_puª__
;

256 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

257 
__THROW
 
__©åibuã_puª__
;

259 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


260 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

262 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

263 c⁄° 
wch¨_t
 *
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

266 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

267 
__THROW
 
__©åibuã_puª__
;

270 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


271 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

273 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

274 c⁄° 
wch¨_t
 *
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

277 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

278 
__THROW
 
__©åibuã_puª__
;

282 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

283 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

284 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

287 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

288 
__END_NAMESPACE_STD


290 #ifde‡
__USE_XOPEN


292 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


293 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

295 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

296 c⁄° 
wch¨_t
 *
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

299 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

300 
__THROW
 
__©åibuã_puª__
;

304 #ifde‡
__USE_XOPEN2K8


306 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

307 
__THROW
 
__©åibuã_puª__
;

311 
__BEGIN_NAMESPACE_STD


313 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


314 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

316 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

317 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

320 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

321 
__THROW
 
__©åibuã_puª__
;

325 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

326 
__THROW
 
__©åibuã_puª__
;

329 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

330 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

334 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

335 
__THROW
;

338 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifde‡
__USE_GNU


344 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

345 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

346 
__THROW
;

350 
__BEGIN_NAMESPACE_STD


353 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

357 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

361 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

365 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

366 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

367 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

370 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

371 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

377 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

378 
__END_NAMESPACE_STD


380 #ifde‡
__USE_EXTERN_INLINES


386 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

387 
__exã∫_ölöe
 
wöt_t


388 
	`__NTH
 (
	$btowc
 (
__c
))

389 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

390 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

392 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

393 
__exã∫_ölöe
 

394 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

395 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

396 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

398 
__exã∫_ölöe
 
size_t


399 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

400 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

401 {  (
__ps
 !
NULL


402 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

405 
__BEGIN_NAMESPACE_STD


408 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

409 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

410 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

415 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

416 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
__END_NAMESPACE_STD


420 #ifdef 
__USE_XOPEN2K8


423 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

424 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

425 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

429 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

430 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

431 
size_t
 
__nwc
, size_à
__Àn
,

432 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

437 #ifde‡
__USE_XOPEN


439 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

443 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

447 
__BEGIN_NAMESPACE_STD


450 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

451 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

452 
__END_NAMESPACE_STD


454 #ifde‡
__USE_ISOC99


455 
__BEGIN_NAMESPACE_C99


457 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

460 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

461 
__END_NAMESPACE_C99


465 
__BEGIN_NAMESPACE_STD


468 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

469 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

473 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

474 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

475 
__THROW
;

476 
__END_NAMESPACE_STD


478 #ifde‡
__USE_ISOC99


479 
__BEGIN_NAMESPACE_C99


482 
__exãnsi⁄__


483 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

484 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

485 
__THROW
;

489 
__exãnsi⁄__


490 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

491 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

492 
__ba£
Ë
__THROW
;

493 
__END_NAMESPACE_C99


496 #ifde‡
__USE_GNU


499 
__exãnsi⁄__


500 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

501 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

502 
__THROW
;

506 
__exãnsi⁄__


507 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

508 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

509 
__ba£
Ë
__THROW
;

512 #ifde‡
__USE_GNU


526 
	~<xloˇÀ.h
>

530 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

531 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

532 
__loˇÀ_t
 
__loc
Ë
__THROW
;

534 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

535 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

536 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

538 
__exãnsi⁄__


539 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

540 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

541 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

543 
__exãnsi⁄__


544 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

545 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

546 
__ba£
, 
__loˇÀ_t
 
__loc
)

547 
__THROW
;

549 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

550 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
;

553 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

554 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

555 
__THROW
;

557 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

558 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

559 
__loˇÀ_t
 
__loc
Ë
__THROW
;

563 #ifde‡
__USE_XOPEN2K8


566 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

567 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

571 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

572 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

573 
__THROW
;

580 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

583 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


584 
__BEGIN_NAMESPACE_STD


587 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

594 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

595 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

605 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

606 
__THROW
 ;

612 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

613 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

614 
__gnuc_va_li°
 
__¨g
)

620 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

621 
__gnuc_va_li°
 
__¨g
)

625 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

626 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

627 
__gnuc_va_li°
 
__¨g
)

628 
__THROW
 ;

635 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

636 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

646 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

647 
__THROW
 ;

649 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

650 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

651 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

652 #ifde‡
__REDIRECT


656 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

657 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_fwsˇnf
)

660 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_wsˇnf
)

663 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

664 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

665 ...), 
__isoc99_swsˇnf
)

668 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

669 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

670 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

671 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

673 
__THROW
;

674 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

675 
	#wsˇnf
 
__isoc99_wsˇnf


	)

676 
	#swsˇnf
 
__isoc99_swsˇnf


	)

680 
__END_NAMESPACE_STD


683 #ifde‡
__USE_ISOC99


684 
__BEGIN_NAMESPACE_C99


689 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

690 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

691 
__gnuc_va_li°
 
__¨g
)

697 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

698 
__gnuc_va_li°
 
__¨g
)

701 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

702 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

703 
__gnuc_va_li°
 
__¨g
)

704 
__THROW
 ;

706 #i‡!
deföed
 
__USE_GNU
 \

707 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

708 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

709 #ifde‡
__REDIRECT


710 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

711 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

714 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

717 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

718 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

719 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

722 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

723 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
);

727 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

728 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

730 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

731 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

732 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

736 
__END_NAMESPACE_C99


740 
__BEGIN_NAMESPACE_STD


745 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

746 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

752 
wöt_t
 
	`gëwch¨
 ();

759 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

760 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

766 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

774 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

775 
__FILE
 *
__ª°ri˘
 
__°ªam
);

781 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

782 
__FILE
 *
__ª°ri˘
 
__°ªam
);

789 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

790 
__END_NAMESPACE_STD


793 #ifde‡
__USE_GNU


801 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

802 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

810 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

818 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

827 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

828 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

837 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

838 
__FILE
 *
__ª°ri˘
 
__°ªam
);

846 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

847 
__FILE
 *
__ª°ri˘
 
__°ªam
);

851 
__BEGIN_NAMESPACE_C99


855 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

856 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

857 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

858 
__END_NAMESPACE_C99


860 #ifde‡
__USE_GNU


861 
	~<xloˇÀ.h
>

865 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

866 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

867 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

868 
__loˇÀ_t
 
__loc
Ë
__THROW
;

877 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


878 
	#__√ed_iswxxx


	)

879 
	~<w˘y≥.h
>

883 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


884 
	~<bôs/wch¨2.h
>

887 #ifde‡
__LDBL_COMPAT


888 
	~<bôs/wch¨-ldbl.h
>

891 
__END_DECLS


899 #unde‡
__√ed_mb°©e_t


900 #unde‡
__√ed_wöt_t


	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@
1
.
1
/usr/include
195
6699
atomic_ops/aligned_atomic_load_store.h
atomic_ops/all_acquire_release_volatile.h
atomic_ops/ao_t_is_int.h
atomic_ops/atomic_ops.h
atomic_ops/generalize-small.h
atomic_ops/generalize.h
atomic_ops/ia64.h
atomic_ops/ordered_except_wr.h
atomic_ops/powerpc.h
atomic_ops/read_ordered.h
atomic_ops/sparc.h
atomic_ops/standard_ao_double_t.h
atomic_ops/test_and_set_t_is_ao_t.h
atomic_ops/test_and_set_t_is_char.h
atomic_ops/x86.h
atomic_ops/x86_64.h
hashtables/lockbased-ht/hashtable-lock.c
hashtables/lockbased-ht/hashtable-lock.h
hashtables/lockbased-ht/test.c
hashtables/lockfree-ht/hashtable.c
hashtables/lockfree-ht/hashtable.h
hashtables/lockfree-ht/intset.c
hashtables/lockfree-ht/intset.h
hashtables/lockfree-ht/test.c
include/estm.h
include/icc.h
include/lockfree.h
include/lpdwstm.h
include/sequential.h
include/tinystm.h
include/tl2-mbench.h
include/tm.h
linkedlists/lazy-list/coupling.c
linkedlists/lazy-list/coupling.h
linkedlists/lazy-list/intset.c
linkedlists/lazy-list/intset.h
linkedlists/lazy-list/lazy.c
linkedlists/lazy-list/lazy.h
linkedlists/lazy-list/linkedlist-lock.c
linkedlists/lazy-list/linkedlist-lock.h
linkedlists/lazy-list/test.c
linkedlists/lock-coupling-list/coupling.c
linkedlists/lock-coupling-list/coupling.h
linkedlists/lock-coupling-list/intset.c
linkedlists/lock-coupling-list/intset.h
linkedlists/lock-coupling-list/lazy.c
linkedlists/lock-coupling-list/lazy.h
linkedlists/lock-coupling-list/linkedlist-lock.c
linkedlists/lock-coupling-list/linkedlist-lock.h
linkedlists/lock-coupling-list/test.c
linkedlists/lockfree-list/harris.c
linkedlists/lockfree-list/harris.h
linkedlists/lockfree-list/intset.c
linkedlists/lockfree-list/intset.h
linkedlists/lockfree-list/linkedlist.c
linkedlists/lockfree-list/linkedlist.h
linkedlists/lockfree-list/test.c
linkedlists/selfish/fomitchev.c
linkedlists/selfish/fomitchev.h
linkedlists/selfish/intset.h
linkedlists/selfish/mixin.c
linkedlists/selfish/selfish.c
linkedlists/selfish/selfish.h
linkedlists/selfish/test.c
linkedlists/versioned/intset.h
linkedlists/versioned/mixin.c
linkedlists/versioned/test.c
linkedlists/versioned/versioned-linkedlist.c
linkedlists/versioned/versioned-linkedlist.h
rtm-charlie/hash_hle/hashtable.cpp
rtm-charlie/hash_hle/hashtable.h
rtm-charlie/hash_hle/main.cpp
rtm-charlie/hash_rtm/hashtable.cpp
rtm-charlie/hash_rtm/hashtable.h
rtm-charlie/hash_rtm/main.cpp
rtm-charlie/list_hle/listNode.cpp
rtm-charlie/list_hle/listNode.h
rtm-charlie/list_hle/list_cgl.cpp
rtm-charlie/list_hle/test_list.cpp
rtm-charlie/list_rtm/listNode.cpp
rtm-charlie/list_rtm/listNode.h
rtm-charlie/list_rtm/list_cgl.cpp
rtm-charlie/list_rtm/test_list.cpp
utils/estm-0.2.4.3/bench/lf-deque/herlihy.c
utils/estm-0.2.4.3/bench/lf-deque/herlihy.h
utils/estm-0.2.4.3/bench/lf-deque/intset.c
utils/estm-0.2.4.3/bench/lf-deque/intset.h
utils/estm-0.2.4.3/bench/lf-deque/lf-ll.c
utils/estm-0.2.4.3/bench/lf-deque/linkedlist.c
utils/estm-0.2.4.3/bench/lf-deque/linkedlist.h
utils/estm-0.2.4.3/bench/lf-hashtable/lf-ht.c
utils/estm-0.2.4.3/bench/lf-linkedlist/harris.c
utils/estm-0.2.4.3/bench/lf-linkedlist/harris.h
utils/estm-0.2.4.3/bench/lf-linkedlist/intset.c
utils/estm-0.2.4.3/bench/lf-linkedlist/intset.h
utils/estm-0.2.4.3/bench/lf-linkedlist/lf-ll.c
utils/estm-0.2.4.3/bench/lf-linkedlist/linkedlist.c
utils/estm-0.2.4.3/bench/lf-linkedlist/linkedlist.h
utils/estm-0.2.4.3/bench/lf-linkedlist/recursive.c
utils/estm-0.2.4.3/bench/lf-linkedlist/recursive.h
utils/estm-0.2.4.3/bench/lf-rbtree/intset.c
utils/estm-0.2.4.3/bench/lf-rbtree/rbtree.c
utils/estm-0.2.4.3/bench/lf-rbtree/rbtree.h
utils/estm-0.2.4.3/bench/lf-rbtree/types.h
utils/estm-0.2.4.3/bench/lf-skiplist/intset.c
utils/estm-0.2.4.3/bench/lf-skiplist/lf-sl.c
utils/estm-0.2.4.3/bench/lf-skiplist/lf-sl.h
utils/estm-0.2.4.3/include/mod_local.h
utils/estm-0.2.4.3/include/mod_mem.h
utils/estm-0.2.4.3/include/mod_print.h
utils/estm-0.2.4.3/include/mod_stats.h
utils/estm-0.2.4.3/include/stm.h
utils/estm-0.2.4.3/include/wrappers.h
utils/estm-0.2.4.3/src/atomic.h
utils/estm-0.2.4.3/src/gc.c
utils/estm-0.2.4.3/src/gc.h
utils/estm-0.2.4.3/src/mod_local.c
utils/estm-0.2.4.3/src/mod_mem.c
utils/estm-0.2.4.3/src/mod_print.c
utils/estm-0.2.4.3/src/mod_stats.c
utils/estm-0.2.4.3/src/stm.c
utils/estm-0.2.4.3/src/wrappers.c
utils/estm-0.3.0/include/mod_local.h
utils/estm-0.3.0/include/mod_mem.h
utils/estm-0.3.0/include/mod_print.h
utils/estm-0.3.0/include/mod_stats.h
utils/estm-0.3.0/include/stm.h
utils/estm-0.3.0/include/wrappers.h
utils/estm-0.3.0/src/atomic.h
utils/estm-0.3.0/src/gc.c
utils/estm-0.3.0/src/gc.h
utils/estm-0.3.0/src/mod_local.c
utils/estm-0.3.0/src/mod_mem.c
utils/estm-0.3.0/src/mod_print.c
utils/estm-0.3.0/src/mod_stats.c
utils/estm-0.3.0/src/stm.c
utils/estm-0.3.0/src/wrappers.c
utils/versioned-lock/versioned-lock.c
utils/versioned-lock/versioned-lock.h
/usr/include/assert.h
/usr/include/atomic_ops.h
/usr/include/atomic_ops/sysdeps/emul_cas.h
/usr/include/atomic_ops/sysdeps/gcc/alpha.h
/usr/include/atomic_ops/sysdeps/gcc/arm.h
/usr/include/atomic_ops/sysdeps/gcc/cris.h
/usr/include/atomic_ops/sysdeps/gcc/hppa.h
/usr/include/atomic_ops/sysdeps/gcc/m68k.h
/usr/include/atomic_ops/sysdeps/gcc/mips.h
/usr/include/atomic_ops/sysdeps/gcc/s390.h
/usr/include/atomic_ops/sysdeps/gcc/sh.h
/usr/include/atomic_ops/sysdeps/generic_pthread.h
/usr/include/atomic_ops/sysdeps/hpc/hppa.h
/usr/include/atomic_ops/sysdeps/hpc/ia64.h
/usr/include/atomic_ops/sysdeps/msftc/arm.h
/usr/include/atomic_ops/sysdeps/msftc/x86.h
/usr/include/atomic_ops/sysdeps/msftc/x86_64.h
/usr/include/atomic_ops/sysdeps/sunc/sparc.h
/usr/include/atomic_ops/sysdeps/sunc/x86.h
/usr/include/getopt.h
/usr/include/inttypes.h
/usr/include/limits.h
/usr/include/memory.h
/usr/include/pthread.h
/usr/include/sched.h
/usr/include/setjmp.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/atomic_ops/ao_version.h
/usr/include/atomic_ops/sysdeps/ao_t_is_int.h
/usr/include/atomic_ops/sysdeps/armcc/arm_v6.h
/usr/include/atomic_ops/sysdeps/gcc/aarch64.h
/usr/include/atomic_ops/sysdeps/gcc/avr32.h
/usr/include/atomic_ops/sysdeps/gcc/hexagon.h
/usr/include/atomic_ops/sysdeps/gcc/ia64.h
/usr/include/atomic_ops/sysdeps/gcc/powerpc.h
/usr/include/atomic_ops/sysdeps/gcc/sparc.h
/usr/include/atomic_ops/sysdeps/gcc/x86.h
/usr/include/atomic_ops/sysdeps/ibmc/powerpc.h
/usr/include/atomic_ops/sysdeps/icc/ia64.h
/usr/include/ctype.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/libio.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/stdc-predef.h
/usr/include/gconv.h
/usr/include/wchar.h
/usr/include/wctype.h
